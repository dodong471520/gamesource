I:\work\source\预言OL\yl code\code\Server\GameServer\share\protocol.h 31 KB H 文件 2010/1/13 10:06:20 2018/10/23 19:32:12 2018/10/23 19:32:12 1
62 		MAPGROUP_UPDATE_TEAM_LEADER = MAPGROUP_BASE + 32,           // 更改队长 [哈达 ?7/7/2008]
63 		MAPGROUP_FORBID_IPROLE		= MAPGROUP_BASE + 33,			// 所有区封IP上的用户 [Chancy 2008-9-12 16:43]
64 		MAPGROUP_FORBID_SEND_MACID_TIMEOUT /*= MAPGROUP_BASE + 34*/,			// 跨区封发机超 [Chancy 2008-9-30 0:20]
65 		MAPGROUP_SET_PLAYER_EXP		= MAPGROUP_BASE + 35,		//设置玩家打完怪翻几倍经验奖励
66 		MAPGROUP_QUERY_USER			= MAPGROUP_BASE + 36,			// 远程查询玩家是否在线,或其他

I:\work\source\预言OL\[src.cool]预言OL\yuyancode\code\Server\GameServer\share\protocol.h 31 KB H 文件 2010/1/13 10:06:20 2018/10/23 19:32:55 2018/10/23 19:32:55 1
62 		MAPGROUP_UPDATE_TEAM_LEADER = MAPGROUP_BASE + 32,           // 更改队长 [哈达 ?7/7/2008]
63 		MAPGROUP_FORBID_IPROLE		= MAPGROUP_BASE + 33,			// 所有区封IP上的用户 [Chancy 2008-9-12 16:43]
64 		MAPGROUP_FORBID_SEND_MACID_TIMEOUT /*= MAPGROUP_BASE + 34*/,			// 跨区封发机超 [Chancy 2008-9-30 0:20]
65 		MAPGROUP_SET_PLAYER_EXP		= MAPGROUP_BASE + 35,		//设置玩家打完怪翻几倍经验奖励
66 		MAPGROUP_QUERY_USER			= MAPGROUP_BASE + 36,			// 远程查询玩家是否在线,或其他

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Tools\bdr\data\DbSvr_output\DBSvrProtocolImport.h 263 KB H 文件 2015/3/15 13:47:24 2018/10/23 20:09:21 2018/10/23 20:09:21 10
599   int unpack(ORM::COrmSerializer *pOrmSerializer);
601 };
602 // 玩家跨区竞技
603 struct TStrikePartData
604 {
631   int unpack(ORM::COrmSerializer *pOrmSerializer);
633 };
634 // 玩家跨区副本结构
635 struct TKqEctypePartContext
636 {
650   int unpack(ORM::COrmSerializer *pOrmSerializer);
652 };
653 // 玩家跨区副本位置信息
654 struct TKqEctypePartLocInfo
655 {
684   int unpack(ORM::COrmSerializer *pOrmSerializer);
686 };
687 // 跨区副本助手部件
688 struct TEctypeAssistPartData
689 {
688 struct TEctypeAssistPartData
689 {
690 	TKqEctypePartContext stEctypeInfo;   //玩家跨区副本结构
691 	TKqEctypePartLocInfo stLocInfo;   //玩家跨区副本位置信息
692 	TKqDummyDBInfo stDummyInfo;   //玩家挑战系统个人数据
693   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
1131 	TCalnSkillPartData stCalnSkillPartData;   //氏族技能
1132 	TCountryPartData stCountryPartData;   //国家部件
1133 	TEctypeAssistPartData stEctypeAssistData;   //跨区副本
1134 	TStrikePartData stStrikeData;   //跨区竞技
1135 	TMiscPartData stMiscData;   //杂项部件
1136 	TZenSkillPartData stZenSkillData;   //创招部件
2174 	BYTE bReceiveCastleEvent;   //接收标志
2175 	BYTE bLastMapIsOnSteed;   //前面切地图时战骑状态
2176 	int nNo1NewPowerValue;   //排行榜第1名战力值（仅对跨区作用）
2177 	int nLastChangeMapID;   //上张地图mapID
2178 	DWORD dwBRCampFightPDBID;   //铁骑营挑战玩家PDBID
2573 	DWORD dwFlag;   //国家基础数据标识 EMCountryBaseDBFlag
2574 	char szLocalName[DB_COUNTRY_NAME_MAXSIZE];   //本区国家短名称
2575 	char szWorldName[DB_COUNTRY_NAME_MAXSIZE];   //跨区国家名称
2576 	char szDBWorldName[DB_COUNTRY_NAME_MAXSIZE];   //游戏世界区名
2577   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Tools\bdr\data\Communicate_output\commprotocol.h 70 KB H 文件 2015/3/15 13:47:23 2018/10/23 20:09:21 2018/10/23 20:09:21 5
836   int unpack(ORM::COrmSerializer *pOrmSerializer);
838 };
839 // 跨区现场
840 struct TEctypePartContextData
841 {
874   int unpack(ORM::COrmSerializer *pOrmSerializer);
876 };
877 // 跨区副本现场（私有）
878 struct TEctypeAssistPartPrivateContext
879 {
878 struct TEctypeAssistPartPrivateContext
879 {
880 	BYTE nState;   //跨区副本状态
881 	TEctypePartContextData stEctypePartData;   //跨区现场
882 	TEctypeDummyDBInfo stEctypeDummyDBInfo;   //玩家挑战系统个人数据
883   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
1236 	TMiscPartPrivateContext stMiscPart;   //人物公用混合部件
1237 	TCardCollectPartPrivateContext stCardCollectPart;   //卡片收集部件
1238 	TEctypeAssistPartPrivateContext stEctypeAssistPart;   //跨区副本部件
1239 	TPKModePartPrivateContext stPKModePart;   //PK模式部件
1240 	TTitlePartPrivateContext stTitlePart;   //称号部件

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\TeachService\ResAdjustService.h 6 KB H 文件 2014/2/25 0:24:35 2018/10/23 20:09:14 2018/10/23 20:09:14 1
133 	virtual void onMessage(ulong nEndpointId, ulong nActionId, SGameMsgHead* pHead, void* pData, size_t nLen);
135 	/**
136 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
137 	@param actionId  : 消息码
138 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\SocialServer\RPCMessageHandler.h 3 KB H 文件 2014/2/25 0:24:03 2018/10/23 20:09:11 2018/10/23 20:09:11 1
56 	virtual void onServerInfoUpdated(CSID ServerID, SERVER_STATE nState, ServerData* pInfo){}
57 	/**
58 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
59 	@param actionId  : 消息码
60 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\SocialServer\GlobalSocialServer.h 17 KB H 文件 2014/2/25 0:23:56 2018/10/23 20:09:11 2018/10/23 20:09:11 5
144 	bool						mCheckHeartBeat;			/// 是否检测心跳
146 	IManagerConnector *			m_ManagerConnector;			/// 服务器管理连接器
148 	IBridgeConnector *			m_BridgeConnector;			/// 跨区桥服务器连接器
150 	IMatchService *				m_MatchService;				/// 跨服组队撮合系统服务
151 	IAuctionService*			mAuctionService;			//  竞拍服务
197 	/// 关闭管理连接器
198 	void ReleaseManagerConnector(void);
200 	/// 启动跨区桥服务器连接器
201 	void CreateBridgeConnector(void);
201 	void CreateBridgeConnector(void);
202 	/// 关闭跨区桥服务器连接器
203 	void ReleaseBridgeConnector(void);
205 	/// 启动语音服务器连接器
251 	*/
252 	virtual void HandleManagerMessage(ulong actionId, SManagerMsgHead* head, LPSTR data, size_t len);
254 	////////// IBridgeEventHandler 处理处理跨区桥服务器执行事件 //////////////////
255 	/** 
256 	@param   wEventID ：事件ID
463 		return m_ManagerConnector;
464 	}
466 	// 获得跨区桥服务器连接器
467 	virtual Bridge::IBridgeConnector* GetBridgeConnector(void)
468 	{

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\MiscService\BattleRideCampService.h 11 KB H 文件 2014/2/25 0:23:20 2018/10/23 20:09:05 2018/10/23 20:09:05 1
134 	void					DateCome(int nTriggerID);
136 	/**
137 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
138 	@param actionId  : 消息码
139 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\MatchService\WarService.h 17 KB H 文件 2014/2/25 0:23:14 2018/10/23 20:09:05 2018/10/23 20:09:05 6
5 ** 日  期:	2011-03-19
6 ** 版  本:	1.0
7 ** 描  述:	跨区战场系统
8 ** 应  用:  	
9 	
214 // 跨服国战数据列表，以ID 为关键字
215 typedef map<DWORD,SCheckCountryWorldWarDataInfo> TMAP_CheckCountryWarDataInfoList;
218 // 跨区战场系统
219 class CWarService: public IWarService,public TimerHandler
220 {
250 	//////////////////////////////////////////////////////////////////////////
252 	/**
253 	@name   : 创建跨区战场系统
254 	*/
255 	bool Create();
255 	bool Create();
257 	/**
258 	@name   : 关闭跨区战场系统
259 	*/
260 	virtual void Release();
326 	// 服务器战场撮合信息子消息
327 	void OnMessage(ulong endpointId, ulong actionId, SGameMsgHead* head, void* data, size_t len);
329 	//  处理跨区桥服务器发过来的消息
330 	void HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
332 	virtual bool IsCountryWarFight(UserInfo* dwMyInfo,UserInfo* dwTrageInfo);
392 	// 检查国家在跨服国战中的参战类型
393 	DWORD CheckCountryWorldWarType(DWORD dwWorldID,DWORD dwCountryID,SCountryWorldWarInfo &node);
394 	// 跨区国战召集
395 	void OnBridgeMsgRequestWarCall(unsigned long actionId,LPSTR data, size_t len);
397 	// 加入服务器开战场信息

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\MatchService\StrikeService.h 7 KB H 文件 2014/2/25 0:23:12 2018/10/23 20:09:05 2018/10/23 20:09:05 5
5 ** 日  期:	2010-10-29
6 ** 版  本:	1.0
7 ** 描  述:	跨区竞技系统
8 ** 应  用:  	
9 	
96 // 竞技场信息列表,以场景服ID+竞技场ID为关键字
97 typedef map<LONGLONG,SStrikeNode> TMAP_StrikeNodeList;
99 // 跨区竞技系统
100 class CStrikeService: public IStrikeService,public TimerHandler
101 {
122 	//////////////////////////////////////////////////////////////////////////
124 	/**
125 	@name   : 创建跨区竞技系统
126 	*/
127 	bool Create();
127 	bool Create();
129 	/**
130 	@name   : 关闭跨区竞技系统
131 	*/
132 	virtual void Release();
186 	// 服务器竞技撮合信息子消息
187 	void OnMessage(ulong endpointId, ulong actionId, SGameMsgHead* head, void* data, size_t len);
189 	//  处理跨区桥服务器发过来的消息
190 	void HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
192 	//////////////////////////////////////////////////////////////////////////

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\MatchService\StrikeMatch.h 8 KB H 文件 2014/2/25 0:23:11 2018/10/23 20:09:04 2018/10/23 20:09:04 1
184 	// 服务器竞技撮合信息子消息
185 	void OnMessage(ulong endpointId, ulong actionId, SGameMsgHead* head, void* data, size_t len);
187 	//  处理跨区桥服务器发过来的消息
188 	void HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
191 	//////////////////////////////////////////////////////////////////////////

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\MatchService\MatchService.h 30 KB H 文件 2014/2/25 0:23:05 2018/10/23 20:09:04 2018/10/23 20:09:04 17
271 	virtual void onServerInfoUpdated(CSID ServerID, SERVER_STATE nState, ServerData* pInfo);
273 	//////////////////IBridgeMessageHandler////////////////////////////////////////////////////////
275 	/** 处理跨区桥服务器发过来的消息
276 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
277 	@param actionId  : 消息码
278 	@param bridgeHead  : 桥消息头
496 	*/
497 	virtual bool IsBudoOpen();
499 	/** 取得跨区副本接口
500 	*/
501 	virtual IEctypeAssist* GetEctypeAssist();
504 	*/
505 	virtual IStrikeMatch* GetStrikeMatch();
507 	/** 取得跨区竞技系统接口
508 	*/
509 	virtual IStrikeService* GetStrikeService();
508 	*/
509 	virtual IStrikeService* GetStrikeService();
511 	/** 取得跨区战场系统接口
512 	*/
513 	virtual IWarService* GetWarService();
590 	// 接收一个非副本队伍
591 	void AcceptNormalTeam(SGlobalEctypeTeam &team);
593 	// 发跨区撮合信息消息 dwServerID:服务器ID ,跨区信息专用
594 	bool SendDataBridgeToServer(DWORD dwServerID,WORD wKeyAction,DWORD dwMsgCode,DWORD dwUserData1=0,DWORD dwUserData2=0,DWORD dwUserData3=0,const char * pData=0,DWORD dwLen=0);
595 	// 发本区撮合信息消息 dwServerID:服务器ID 为0时广播给所有所有场景服
599 	// 智能选择发送数据目标服务器 nDestEndPoint 目标端点码(支持 MSG_ENDPOINT_ZONE,MSG_ENDPOINT_SOCIAL,MSG_ENDPOINT_CLIENT), dwActorID: 要发送的角色ID,DWORD dwFromWorldID 角色来自游戏世界ID
600 	bool SendAutoBridgeData(BYTE nDestEndPoint,DWORD dwFromWorldID,DWORD dwActorID,WORD wKeyAction,DWORD dwMsgCode,DWORD dwUserData1=0,DWORD dwUserData2=0,DWORD dwUserData3=0,const char * pData=0,DWORD dwLen=0);
602 	// 取得跨区副本
603 	CEctypeAssist& GetEctypeAssistInstance();
604 	// 取得跨服竞技撮合系统
604 	// 取得跨服竞技撮合系统
605 	CStrikeMatch& GetStrikeMatchInstance();
606 	// 取得跨区竞技系统
607 	CStrikeService& GetStrikeServiceInstance();
607 	CStrikeService& GetStrikeServiceInstance();
608 	// 取得跨区战争系统
609 	CWarService& GetWarServiceInstance();
610 	// 取得挑战系统
708 	// 职业位标识得分点分配百分比例
709 	double GetMatchVocationScoreRate(BYTE nVocationFlag);
711 	// 请求跨区查看玩家装备
712 	bool RequestLookWorldEquip(DWORD dwActorID,DWORD dwWorldID,DWORD dwFromServerID,const char * pData,DWORD dwLen);
714 	// 检查等待信息数据是否可加入新节点
742 	// 跨服 服务器撮合信息子消息
743 	void OnBridgeMsgMatchSubMsg(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
744 	// 跨服 跨区中转消息
745 	void OnBridgeMsgMatchBridgeData(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
746 	
746 	
747 	//////////////////////////////////////////////////////////////////////////
748 	// 跨区用户上线
749 	void OnMsgWorldOnlineUserAdd(DWORD dwActorID,DWORD dwWorldID,DWORD dwUserData);
749 	void OnMsgWorldOnlineUserAdd(DWORD dwActorID,DWORD dwWorldID,DWORD dwUserData);
750 	// 跨区用户下线
751 	void OnMsgWorldOnlineUserRemove(DWORD dwActorID,DWORD dwWorldID,DWORD dwUserData);
753 	// 改变房主索引
793 	// 挑战假人系统配置信息
794 	SDummyConfigSchemeInfo m_DummyConfigSchemeInfo;
796 	// 跨区副本保姆
797 	CEctypeAssist m_EctypeAssist;
798 	// 跨服竞技撮合系统
798 	// 跨服竞技撮合系统
799 	CStrikeMatch m_StrikeMatch;
800 	// 跨区竞技系统
801 	CStrikeService m_StrikeService;
801 	CStrikeService m_StrikeService;
802 	// 跨区战场系统
803 	CWarService m_WarService;
804 	// 挑战系统

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\MatchService\EctypeAssist.h 4 KB H 文件 2014/2/25 0:23:01 2018/10/23 20:09:03 2018/10/23 20:09:03 9
5 ** 日  期:	2010/07/14
6 ** 版  本:	1.0
7 ** 描  述:	跨区副本助手
8 ** 应  用:  	
9 ********************************************************************/
16 #include "DMatchModule.h"
17 #include "ExternalFacade.h"
19 // 跨区副本脚本配置文件
20 #define KQECTYPE_FILENAME		"Scp\\KqEctype.csv"
21 #define KQECTYPE_FILENAME_PUBIC	"Scp\\KqEctype_Publicworld.csv"
20 #define KQECTYPE_FILENAME		"Scp\\KqEctype.csv"
21 #define KQECTYPE_FILENAME_PUBIC	"Scp\\KqEctype_Publicworld.csv"
23 // 跨区副本保姆
24 class CEctypeAssist	: public IEctypeAssist, public ISchemeUpdateSink
25 {
32 	
33 	/**
34 	@name   : 创建跨区副本保姆
35 	*/
36 	virtual bool Create();
36 	virtual bool Create();
38 	/**
39 	@name   : 关闭跨区副本保姆
40 	*/
41 	virtual void Close();
51 	virtual ECreateKqeRet AcceptEctypeTeam(SGlobalEctypeTeam* pEctypeTeam);
52 	
53 	/** 取得跨区副本信息
54 	*/
55 	const SKqEctypeScheme* GetKqEctypeScheme(WORD wTypeID);
54 	*/
55 	const SKqEctypeScheme* GetKqEctypeScheme(WORD wTypeID);
57 	/** 取得跨区副本配置信息
58 	*/
59 	const SKqEctypeConfig* GetKqEctypeConfig();
80 	*/
81 	virtual void OnMessage(ulong endpointId, ulong actionId, SGameMsgHead* head, void* data, size_t len);
83 	/** 解析跨区桥服务器来的消息，子消息码为ENUM_MSG_MATCH_GLOBALECTYPE
84 	*/
85 	virtual void HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
91 	bool LoadScheme();
92 	
93 	/** 加载跨区副本配置脚本
94 	*/
95 	bool LoadKqEctypeScheme(ICSVReader * pCSVReader);

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\MatchService\DummyService.h 9 KB H 文件 2014/2/25 0:22:58 2018/10/23 20:09:03 2018/10/23 20:09:03 3
117 	//////////////////////////////////////////////////////////////////////////
118 	/**
119 	@name   : 创建跨区竞技系统
120 	*/
121 	bool Create();
121 	bool Create();
123 	/**
124 	@name   : 关闭跨区竞技系统
125 	*/
126 	virtual void Release();
149 	// 服务器竞技撮合信息子消息
150 	void OnMessage(ulong endpointId, ulong actionId, SGameMsgHead* head, void* data, size_t len);
152 	//  处理跨区桥服务器发过来的消息
153 	void HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
155 	//////////////////////////////////////////////////////////////////////////

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\MatchService\BudoService.h 13 KB H 文件 2014/2/25 0:22:55 2018/10/23 20:09:03 2018/10/23 20:09:03 3
57 	//////////////////////////////////////////////////////////////////////////
58 	/**
59 	@name   : 创建跨区竞技系统
60 	*/
61 	bool Create();
61 	bool Create();
63 	/**
64 	@name   : 关闭跨区竞技系统
65 	*/
66 	virtual void Release();
215 	// 服务器竞技撮合信息子消息
216 	void OnMessage(ulong endpointId, ulong actionId, SGameMsgHead* head, void* data, size_t len);
218 	//  处理跨区桥服务器发过来的消息
219 	void HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
221 	//////////////////////////////////////////////////////////////////////////

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\LuaService\LuaAPI.h 42 KB H 文件 2014/2/25 0:22:40 2018/10/23 20:09:00 2018/10/23 20:09:00 2
698 void CleanHorseSNSMessage( unsigned long dwActorDBID );
700 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
701 /**************************************  跨区相关 ***********************************************************/
702 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
704 /** 是否是公共区
824 */
825 DWORD GetPersonOrderValue(int nOrderKey, int order);
828 /**  跨区世界聊天频道开关
829 @param   bState ： 开关 true 为开 false 为关闭
830 @return  

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\KinService\KinService.h 16 KB H 文件 2014/2/25 0:22:20 2018/10/23 20:08:58 2018/10/23 20:08:58 1
180 	//@ return : buffer 
181 	virtual void OnBridgeEventExecute(WORD wEventID, LPSTR pszContext, size_t nLen);
183 	/// purpose: 处理其他服务器通过跨区桥服务器转发的消息
184 	//@ param: actionId 消息码
185 	//@ param: bridgeHead 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\KinService\ComKinService.h 4 KB H 文件 2014/2/25 0:22:10 2018/10/23 20:08:57 2018/10/23 20:08:57 1
57 	virtual void onServerInfoUpdated(CSID ServerID, SERVER_STATE nState, ServerData* pInfo);
58 	
59 	/// purpose: 处理其他服务器通过跨区桥服务器转发的消息
60 	//@ param: actionId 消息码
61 	//@ param: bridgeHead 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\Include\ISchemeCenter.h 21 KB H 文件 2014/2/25 0:22:07 2018/10/23 20:08:57 2018/10/23 20:08:57 1
330 	bool			bForbidTank;							// 禁止其载具进入
331 	bool			bForbidBWM;								// 禁止双人坐骑进入
332 	bool			bForbidStarTrek;						// 不允许跨区传送
333 	int				nFlag;									// 标志位
334 	int				nPKMode;								// 自动切换PK模式

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\Include\IMatchService.h 31 KB H 文件 2014/2/25 0:22:03 2018/10/23 20:08:56 2018/10/23 20:08:56 6
207 	*/
208 	virtual bool IsBudoOpen() = NULL;
210 	/** 取得跨区副本接口
211 	*/
212 	virtual IEctypeAssist* GetEctypeAssist() = NULL;
215 	*/
216 	virtual IStrikeMatch* GetStrikeMatch() = NULL;
218 	/** 取得跨区竞技系统接口
219 	*/
220 	virtual IStrikeService* GetStrikeService() = NULL;
219 	*/
220 	virtual IStrikeService* GetStrikeService() = NULL;
222 	/** 取得跨区战场系统接口
223 	*/
224 	virtual IWarService* GetWarService() = NULL;
392 };
394 //////////////////////////////////////////////////////////////////////////
395 // 跨区副本
396 struct IEctypeAssist
397 {
400 	*/
401 	virtual ECreateKqeRet AcceptEctypeTeam(SGlobalEctypeTeam* pEctypeTeam) = NULL;
403 	/** 取得跨区副本信息
404 	*/
405 	virtual const SKqEctypeScheme* GetKqEctypeScheme(WORD wTypeID) = NULL;
404 	*/
405 	virtual const SKqEctypeScheme* GetKqEctypeScheme(WORD wTypeID) = NULL;
407 	/** 取得跨区副本配置信息
408 	*/
409 	virtual const SKqEctypeConfig* GetKqEctypeConfig() = NULL;

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\Include\IGlobalSocialServer.h 9 KB H 文件 2014/2/25 0:22:01 2018/10/23 20:08:56 2018/10/23 20:08:56 1
231 	// 取得领地服务
232 	virtual ICastleService * GetCastleService(void) = 0;
234 	// 获得跨区桥服务器连接器
235 	virtual Bridge::IBridgeConnector* GetBridgeConnector(void) = NULL;
237 	// 取得跨服组队撮合系统服务

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\FriendService\FriendService.h 5 KB H 文件 2014/2/25 0:21:54 2018/10/23 20:08:55 2018/10/23 20:08:55 1
83 	virtual void OnExecute(WORD wEventID, BYTE bSrcType, DWORD dwSrcID, LPCSTR pszContext, int nLen);
87 	//  IBridgeMessageHandler
88 	/// purpose: 处理其他服务器通过跨区桥服务器转发的消息
89 	//@ param: actionId 消息码
90 	//@ param: bridgeHead 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\FriendService\ComFriendService.h 3 KB H 文件 2014/2/25 0:21:50 2018/10/23 20:08:54 2018/10/23 20:08:54 1
69 	bool SendToPublicServer(DWORD dwMyWorldID,void* pData, int nLen);
72 	//  IBridgeMessageHandler
73 	/// purpose: 处理其他服务器通过跨区桥服务器转发的消息
74 	//@ param: actionId 消息码
75 	//@ param: bridgeHead 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\CountryService\CountryService.h 35 KB H 文件 2014/2/25 0:21:26 2018/10/23 20:08:52 2018/10/23 20:08:52 4
226 	*/
227 	virtual bool		OnVote(WORD wEventID, BYTE bSrcType, DWORD dwSrcID, LPCSTR pszContext, int nLen);
229 	////////////// IBridgeEventHandler 处理处理跨区桥服务器执行事件 ////////////////////////////////////////////////////////////
231 	/** 处理处理跨区桥服务器执行事件
232 	@param   wEventID ：事件ID
233 	@param   pszContext : 上下文
237 	virtual void		OnBridgeEventExecute(WORD wEventID, LPSTR pszContext, size_t nLen);
239 	//////////////////IBridgeMessageHandler////////////////////////////////////////////////////////
241 	/** 处理跨区桥服务器发过来的消息
242 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
243 	@param actionId  : 消息码
244 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\ClanService\ComClanService.h 4 KB H 文件 2014/2/25 0:21:12 2018/10/23 20:08:52 2018/10/23 20:08:52 1
57 	virtual void onServerInfoUpdated(CSID ServerID, SERVER_STATE nState, ServerData* pInfo);
58 	
59 	/// purpose: 处理其他服务器通过跨区桥服务器转发的消息
60 	//@ param: actionId 消息码
61 	//@ param: bridgeHead 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\ChatService\ChatService.h 11 KB H 文件 2014/2/25 0:20:57 2018/10/23 20:08:50 2018/10/23 20:08:50 3
138 	bool StartServerLoadData(void);
140 	//////////////////IBridgeMessageHandler////////////////////////////////////////////////////////
142 	/** 处理跨区桥服务器发过来的消息
143 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
144 	@param actionId  : 消息码
145 	@param bridgeHead  : 桥消息头
182 	//处理举报消息
183 	void handleReportMessage(DWORD dwClientID, const SMsgReportToGMInfo& repInfo);
185 	// 跨区聊天
186 	void KuaquBroadcastChatMessage(UserInfoEx* info, ulong senderRank, ulong channel, const char* text, int orderSet=-1);
188 	

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\ZoneServerLogic\ZoneServiceProvider.h 23 KB H 文件 2014/2/25 0:20:22 2018/10/23 20:07:19 2018/10/23 20:07:19 5
568 	*/
569 	virtual DBREQ_RESULT_READ_GAMEAREAINFO * GetGameAreaInfo(void);
571 	/** 获得跨区桥服务器连接器
572 	@param   
573 	@param   
589 	*/
590 	virtual int							GetCurAreaLoadMapMode(void);
592 	/** 取得跨区服务器
593 	@param   
594 	@param   
706 	*/
707 	bool								RequestManagerStart(DWORD dwStartFlag = 0);
711 	/** 关闭跨区桥服务器连接器
712 	@param   
713 	@param   
735 	*/
736 	virtual void						OnTimer( unsigned long dwTimerID );
739 	////////// IBridgeEventHandler 处理处理跨区桥服务器执行事件 //////////////////
740 	/** 
741 	@param   wEventID ：事件ID
1084 	// 服务器管理连接器
1085 	IManagerConnector *					m_ManagerConnector;
1087 	// 跨区桥服务器连接器
1088 	IBridgeConnector *					m_BridgeConnector;
1090 	// 脚本数据

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\ZoneServerLogic\RPCMessageHandler.h 3 KB H 文件 2014/2/25 0:19:42 2018/10/23 20:07:15 2018/10/23 20:07:15 1
52 	}
54 	/**
55 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
56 	@param actionId  : 消息码
57 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\ZoneServer\ZoneServiceProvider.h 23 KB H 文件 2014/2/25 0:12:52 2018/10/23 20:07:11 2018/10/23 20:07:11 6
547 	*/
548 	virtual DBREQ_RESULT_READ_GAMEAREAINFO * GetGameAreaInfo(void);
550 	/** 获得跨区桥服务器连接器
551 	@param   
552 	@param   
568 	*/
569 	virtual int							GetCurAreaLoadMapMode(void);
571 	/** 取得跨区服务器
572 	@param   
573 	@param   
705 	*/
706 	bool								RequestManagerStart(DWORD dwStartFlag = 0);
708 	/** 启动跨区桥服务器连接器
709 	@param   
710 	@param   
712 	*/
713 	void								CreateBridgeConnector(void);
715 	/** 关闭跨区桥服务器连接器
716 	@param   
717 	@param   
751 	*/
752 	virtual void						HandleManagerMessage(ulong actionId, SManagerMsgHead* head, LPSTR data, size_t len);
754 	////////// IBridgeEventHandler 处理处理跨区桥服务器执行事件 //////////////////
755 	/** 
756 	@param   wEventID ：事件ID
1107 	// 服务器管理连接器
1108 	IManagerConnector *					m_ManagerConnector;
1110 	// 跨区桥服务器连接器
1111 	IBridgeConnector *					m_BridgeConnector;
1113 	// 脚本数据

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\ZoneServer\RPCMessageHandler.h 3 KB H 文件 2014/2/25 0:12:15 2018/10/23 20:07:04 2018/10/23 20:07:04 1
52 	}
54 	/**
55 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
56 	@param actionId  : 消息码
57 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\StarTrekServer\StdAfx.h 4 KB H 文件 2014/2/25 0:11:09 2018/10/23 20:06:53 2018/10/23 20:06:53 1
95 #endif
97 #define IS_HAVEFLAG(valuec, flagc)	(((valuec & flagc) == flagc) ? true : false)
99 /// 打开此宏，可调试跨区失败的问题
100 #define OPEN_DEBUG_STARTREK

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\StarTrekServer\StarTrekServer.h 5 KB H 文件 2014/2/25 0:11:08 2018/10/23 20:06:53 2018/10/23 20:06:53 7
33 	*/
34 	virtual void			Release(void);
36 	/** 预判断能否跨区	
37 	@param	 nInGameWorldID		: 迁入世界ID
38 	@param   dwInZoneID			：迁入场景ID
40 	@param   nStarTrekType		：传送类型
41 	@param   dwStarTrekFlag		：传送标志
42 	@param   bAsyncCheck		: 是否需要跨区判断
43 	@param   pszCanInLuaFunction: 迁入场景服能否接收的Lua函数
43 	@param   pszCanInLuaFunction: 迁入场景服能否接收的Lua函数
44 	@param   pszCheckResultLua	: 跨区判断的结果Lua函数
45 	@param   跨区判断:
46 	　　　　 1: 若在当前进程都失败，则直接返回
47 			 2: 最终结果在pszCheckResultLua返回, 参数输入只需填函数名, 参数依次为:
54 	virtual int				CanStarTrek(DWORD PDBID, int nInGameWorldID, DWORD dwInZoneID, POINT ptInLoc, int nStarTrekType, DWORD dwStarTrekFlag, 
55 										bool bAsyncCheck = false, LPCSTR pszCanInLuaFunction = NULL, LPCSTR pszCheckResultLua = NULL);
57 	/** 跨区
58 	@param	 nInGameWorldID			: 迁入世界ID
59 	@param   dwInZoneID				：迁入场景ID
74 									 LPCSTR pszCanInLuaFunction = NULL, 
75 									 LPCSTR pszDoneInLuaFunction = NULL);
77 	/** 释放跨区对像
78 	@param   nSTDir : tStarTrek_MsgDir_In, tStarTrek_MsgDir_Out
79 	@param   
98 	//////////////// IBridgeMessageHandler /////////////////////////////
99 	/**
100 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
101 	@param actionId  : 消息码
102 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\StarTrekServer\OutDirHandler.h 7 KB H 文件 2014/2/25 0:11:06 2018/10/23 20:06:52 2018/10/23 20:06:52 11
34 	///////////////////////// COutDirHandler //////////////////////
35 	/**
36 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
37 	@param actionId  : 消息码
38 	@param bridgeHead  : 桥消息头
42 	*/
43 	void		HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
45 	/** 预判断能否跨区	
46 	@param	 nInGameWorldID		: 迁入世界ID
47 	@param   dwInZoneID			：迁入场景ID
49 	@param   nStarTrekType		：传送类型
50 	@param   dwStarTrekFlag		：传送标志
51 	@param   bAsyncCheck		: 是否需要跨区判断
52 	@param   pszCanInLuaFunction: 迁入场景服能否接收的Lua函数
52 	@param   pszCanInLuaFunction: 迁入场景服能否接收的Lua函数
53 	@param   pszCheckResultLua	: 跨区判断的结果Lua函数
54 	@param   跨区判断:
55 	　　　　 1: 若在当前进程都失败，则直接返回
56 			 2: 最终结果在pszCheckResultLua返回, 参数输入只需填函数名, 参数依次为:
63 	int			CanStarTrek(DWORD PDBID, int nInGameWorldID, DWORD dwInZoneID, POINT ptInLoc, int nStarTrekType, DWORD dwStarTrekFlag, 
64 							bool bAsyncCheck = false, LPCSTR pszCanInLuaFunction = NULL, LPCSTR pszCheckResultLua = NULL);
66 	/** 跨区
67 	@param	 nInGameWorldID			: 迁入世界ID
68 	@param   dwInZoneID				：迁入场景ID
155 	DWORD		GetBridgeServerIDByZoneID(int nGameWorldID, DWORD dwZoneID);
157 private:
158 	/** 判断能否跨区	
159 	@param	 nInGameWorldID		: 迁入世界ID
160 	@param	 dwInBridgeServerID	: 迁入服务器ID
163 	@param   nStarTrekType		：传送类型
164 	@param   dwStarTrekFlag		：传送标志
165 	@param   bAsyncCheck		: 是否需要跨区判断
166 	@param   pszCanInLuaFunction: 迁入场景服能否接收的Lua函数
166 	@param   pszCanInLuaFunction: 迁入场景服能否接收的Lua函数
167 	@param   pszCheckResultLua	: 跨区判断的结果Lua函数
168 	@return  返回:参见tStarTrek_Result_　....
169 	*/
170 	int			__CanStarTrek(DWORD PDBID, int nInGameWorldID, DWORD dwInBridgeServerID, DWORD dwInZoneID, POINT ptInLoc, int nStarTrekType, 
171 							  DWORD dwStarTrekFlag, bool bAsyncCheck, LPCSTR pszCanInLuaFunction, LPCSTR pszCheckResultLua, STID stid);
173 	/** 本游戏世界判断是否能跨区
174 	@param   nInGameWorldID	　  : 迁入世界ID
175 	@param	 dwInBridgeServerID	: 迁入服务器ID
196 	// 生成STID的时间参数
197 	int					m_nMakeSTIDTimeidt;
199 	// 需要跨区的对像
200 	TMAP_NEEDOUTOBJECT	m_mapNeedOutObject;	
201 };

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\StarTrekServer\InDirHandler.h 4 KB H 文件 2014/2/25 0:11:05 2018/10/23 20:06:52 2018/10/23 20:06:52 1
39 public:
40 	/**
41 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
42 	@param actionId  : 消息码
43 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\ShareServer\ZoneSvrSource.h 6 KB H 文件 2014/2/25 0:10:31 2018/10/23 20:06:43 2018/10/23 20:06:43 1
90 	virtual void			OnExecute(WORD wEventID, BYTE bSrcType, DWORD dwSrcID, LPCSTR pszContext, int nLen);
91 	
92 	////////// IBridgeEventHandler 处理处理跨区桥服务器执行事件 /////////////////////////////////////////////////////////
93 	/** 
94 	@param   wEventID ：事件ID

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\ServerModule\PetPart.h 14 KB H 文件 2014/2/25 0:10:18 2018/10/23 20:06:39 2018/10/23 20:06:39 2
257 	*/
258 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
260 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
261 	@param   
262 	@param   
271 	*/
272 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen) { nLen = 0; return false; }
274 	/** 跨区切换地图时，将部件数据现场导入
275 	@param   
276 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\RelationServer\VerifyPart.h 14 KB H 文件 2014/2/25 0:09:45 2018/10/23 20:06:31 2018/10/23 20:06:31 2
136 	*/
137 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);	
139 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
140 	@param   
141 	@param   
150 	*/
151 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
153 	/** 跨区切换地图时，将部件数据现场导入
154 	@param   
155 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\RelationServer\TitlePart.h 14 KB H 文件 2014/2/25 0:09:45 2018/10/23 20:06:31 2018/10/23 20:06:31 2
144 	*/
145 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);	
147 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
148 	@param   
149 	@param   
158 	*/
159 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
161 	/** 跨区切换地图时，将部件数据现场导入
162 	@param   
163 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\NerveServer\ZenSkillPart.h 20 KB H 文件 2014/2/25 0:09:17 2018/10/23 20:06:27 2018/10/23 20:06:27 2
169 	*/
170 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
172 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
173 	@param   
174 	@param   
183 	*/
184 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
186 	/** 跨区切换地图时，将部件数据现场导入
187 	@param   
188 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\NerveServer\NervePart.h 18 KB H 文件 2014/2/25 0:09:15 2018/10/23 20:06:26 2018/10/23 20:06:26 2
172 	*/
173 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
175 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
176 	@param   
177 	@param   
186 	*/
187 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
189 	/** 跨区切换地图时，将部件数据现场导入
190 	@param   
191 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\WarServer.h 9 KB H 文件 2014/2/25 0:09:08 2018/10/23 20:06:25 2018/10/23 20:06:25 4
5 ** 日  期:	2011-03-15
6 ** 版  本:	1.0
7 ** 描  述:	跨区战争系统
8 ** 应  用:  管理场景服中的所有战场
10 **************************** 修改记录 ******************************
51 	// 释放
52 	virtual void Release(void);
54 	/** 处理跨区桥服务器发过来的消息
55 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
56 	@param actionId  : 消息码
57 	@param bridgeHead  : 桥消息头
181 	*/
182 	virtual const SCountryBorderWarZoneInfo * GetBorderWarZoneInfoByRoomID(DWORD dwRoomID);
185 	/**  请求更新跨区共享国家信息
186 	@return  
187 	*/

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\StrikeVote.h 4 KB H 文件 2014/2/25 0:09:03 2018/10/23 20:06:24 2018/10/23 20:06:24 1
5 ** 日  期:	2011-2-11
6 ** 版  本:	1.0
7 ** 描  述:	跨区竞技系统
8 ** 应  用:  管理场景服中的所有竞技场
10 **************************** 修改记录 ******************************

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\StrikeServer.h 5 KB H 文件 2014/2/25 0:09:02 2018/10/23 20:06:24 2018/10/23 20:06:24 3
5 ** 日  期:	2010-10-27
6 ** 版  本:	1.0
7 ** 描  述:	跨区竞技系统
8 ** 应  用:  管理场景服中的所有竞技场
10 **************************** 修改记录 ******************************
58 	// 释放
59 	virtual void Release(void);
61 	/** 处理跨区桥服务器发过来的消息
62 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
63 	@param actionId  : 消息码
64 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\StrikeMatch.h 3 KB H 文件 2014/2/25 0:09:02 2018/10/23 20:06:24 2018/10/23 20:06:24 2
43 	// 释放
44 	virtual void Release(void);
46 	/** 处理跨区桥服务器发过来的消息
47 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
48 	@param actionId  : 消息码
49 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\StrikeDropPrize.h 12 KB H 文件 2014/2/25 0:09:01 2018/10/23 20:06:24 2018/10/23 20:06:24 1
5 ** 日  期:	2011-3-12
6 ** 版  本:	1.0
7 ** 描  述:	跨区竞技系统
8 ** 应  用:  管理场景服中的所有竞技场
10 **************************** 修改记录 ******************************

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\PersonStrikePart.h 21 KB H 文件 2014/2/25 0:08:56 2018/10/23 20:06:23 2018/10/23 20:06:23 2
176 	*/
177 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);	
179 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
180 	@param   
181 	@param   
190 	*/
191 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
193 	/** 跨区切换地图时，将部件数据现场导入
194 	@param   
195 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\MatchServer.h 34 KB H 文件 2014/2/25 0:08:51 2018/10/23 20:06:23 2018/10/23 20:06:23 20
134 	virtual bool			OnSchemeUpdate(TiXmlDocument * pTiXmlDocument, const char* szFileName);
136 	//////////////////IBridgeMessageHandler////////////////////////////////////////////////////////
138 	/** 处理跨区桥服务器发过来的消息
139 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
140 	@param actionId  : 消息码
141 	@param bridgeHead  : 桥消息头
410 	*/
411 	virtual bool IsBudoOpen();
413 	/** 创建跨区副本部件
414 	*/
415 	virtual IEctypeAssistPart* CreateEctypeAssistPart();
417 	// 竞技部件
418 	virtual IPersonStrikePart* CreatePersonStrikePart();
420 	/** 取得跨区副本助手
421 	*/
422 	virtual IEctypeAssist* GetEctypeAssist();
425 	*/
426 	virtual IStrikeMatch* GetStrikeMatch();
428 	/** 取得跨区竞技系统接口
429 	*/
430 	virtual IStrikeServer* GetStrikeServer();
433 	*/
434 	virtual IStrikeManager* GetStrikeManager();
436 	/** 取得跨区战争系统接口
437 	*/
438 	virtual IWarServer* GetWarServer();
504 	*/
505 	virtual bool IsMatchTypeOpen(DWORD dwTypeID);
507 	/** 请求跨区查看玩家装备
508 	@param  const char * pData	: 请求消息数据
509 	@param  DWORD dwLen			: 请求消息数据长度
529 	*/
530 	virtual IWarRes* GetWarResByUID(LONGLONG uid);
532 	/** 取得跨区世界文明等级
533 	@param  DWORD dwWorldID		: 游戏世界ID
533 	@param  DWORD dwWorldID		: 游戏世界ID
534 	@return  DWORD 跨区世界文明等级
535 	*/
536 	virtual DWORD GetWorldCivilGrade(DWORD dwWorldID);
535 	*/
536 	virtual DWORD GetWorldCivilGrade(DWORD dwWorldID);
538 	/** 取得跨区世界文明点数
539 	@param  DWORD dwWorldID		: 游戏世界ID
539 	@param  DWORD dwWorldID		: 游戏世界ID
540 	@return  DWORD 跨区世界文明点数
541 	*/
542 	virtual DWORD GetWorldCivilDot(DWORD dwWorldID);
611 	// 获取跨服国战平衡BUFF配置信息
612 	const SCountryWarBalanceConfig & GetCountryWarBalanceConfig(DWORD dwIndex);
614 	// 取得跨区副本助手
615 	CEctypeAssist& GetEctypeAssistInstance();
616 	// 取得跨服竞技撮合系统
616 	// 取得跨服竞技撮合系统
617 	CStrikeMatch& GetStrikeMatchInstance();
618 	// 取得跨区竞技系统
619 	CStrikeServer& GetStrikeServerInstance();
620 	// 取得竞技场管理器
620 	// 取得竞技场管理器
621 	CStrikeManager& GetStrikeManagerInstance();
622 	// 取得跨区战争系统
623 	CWarServer& GetWarServerInstance();
624 	// 取得战场管理器
692 	void OnEventSystemZoneBalanceSet(DWORD dwZoneID, DWORD dwMapID, bool bOpen);
694 	//////////////////////////////////////////////////////////////////////////
695 	// 发跨区撮合信息消息 dwServerID:服务器ID ,跨区信息专用
696 	bool SendDataBridgeToServer(DWORD dwServerID,WORD wKeyAction,DWORD dwMsgCode,DWORD dwUserData1=0,DWORD dwUserData2=0,DWORD dwUserData3=0,const char * pData=0,DWORD dwLen=0);
697 	// 发本区撮合信息消息给社会服
732 	// 撮合结果处理
733 	void OnMatchResult(DWORD dwActorID,DWORD dwResultFlag,DWORD dwUserData);
735 	// 请求跨区查看玩家装备
736 	void OnMsgRequestLookWorldEquip(DWORD dwActorID,DWORD dwWorldID,DWORD dwFromServerID,const char * pData,DWORD dwLen);
738 	// 请求队员全部副本状态数据
849 	// 挑战假人系统配置信息
850 	SDummyConfigSchemeInfo m_DummyConfigSchemeInfo;
852 	// 跨区副本助手
853 	CEctypeAssist m_EctypeAssist;
854 	// 公共区遣返模块
856 	// 跨服竞技撮合系统模块
857 	CStrikeMatch m_StrikeMatch;
858 	// 跨区竞技系统模块
859 	CStrikeServer m_StrikeServer;
860 	// 竞技场管理器
860 	// 竞技场管理器
861 	CStrikeManager m_StrikeManager;
863 	// 跨区战争系统模块
864 	CWarServer m_WarServer;
865 	// 战场管理器

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\KqEctype.h 3 KB H 文件 2014/2/25 0:08:49 2018/10/23 20:06:23 2018/10/23 20:06:23 1
5 ** 日  期:	2010-7-19
6 ** 版  本:	1.0
7 ** 描  述:	跨区副本对象
8 ** 应  用:  	
9 ********************************************************************/

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\ExternalFacade.h 23 KB H 文件 2014/2/25 0:08:49 2018/10/23 20:06:23 2018/10/23 20:06:23 1
404 	*/
405 	virtual ICenterServerConnector *	GetCenterConnector(void);
408 	//  获取跨区桥接器
409 	IBridgeConnector * GetBridgeConnector(void);
411 	/** 

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\EctypeAssistPart.h 8 KB H 文件 2014/2/25 0:08:47 2018/10/23 20:06:22 2018/10/23 20:06:22 6
5 ** 日  期:	2010-7-15
6 ** 版  本:	1.0
7 ** 描  述:	跨区副本部件
8 ** 应  用:  	
9 ********************************************************************/
109 	virtual bool ImportRenewContext(LPSTR pszContext, int nLen);
110 	
111 	/// purpose: 是否正在进行跨区副本
112 	virtual bool IsEctypeing();
112 	virtual bool IsEctypeing();
114 	/// purpose: 取得跨区现场
115 	virtual const SKqEctypePartContext* GetEctypeContext();
115 	virtual const SKqEctypePartContext* GetEctypeContext();
117 	/// purpose: 设置跨区现场
118 	virtual void SetEctypeContext(SKqEctypePartContext* pContext);
120 	/// purpose: 取得位置信息
232 	// 所属人物
233 	IPerson* m_pMaster;
235 	// 跨区现场现场
236 	SKqEctypePartContext m_Context;
238 	// 位置信息
244 	// 遣返信息
245 	SWatcherContext m_WatcherContext;
247 	// 跨区副本状态
248 	BYTE m_nState;
250 	// 验证副本时间

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\EctypeAssist.h 10 KB H 文件 2014/2/25 0:08:47 2018/10/23 20:06:22 2018/10/23 20:06:22 10
5 ** 日  期:	2010-7-15
6 ** 版  本:	1.0
7 ** 描  述:	跨区副本助手
8 ** 应  用:  	
9 ********************************************************************/
16 #include "KqEctype.h"
18 struct IPerson;
20 // 跨区副本脚本配置文件
21 #define KQECTYPE_FILENAME		"Scp\\KqEctype.csv"
22 #define KQECTYPE_FILENAME_PUBIC	"Scp\\KqEctype_Publicworld.csv"
41 	// 关闭
42 	void Close(void);
44 	/** 取得跨区副本信息
45 	*/
46 	const SKqEctypeScheme* GetKqEctypeScheme(WORD wTypeID);
45 	*/
46 	const SKqEctypeScheme* GetKqEctypeScheme(WORD wTypeID);
48 	/** 取得跨区副本配置信息
49 	*/
50 	const SKqEctypeConfig* GetKqEctypeConfig();
130 	*/
131 	void SendToNormalPersonZone(SKqEctypeMember& member, DWORD dwMsgID, void* pMsg, size_t nLen);
133 	/** 处理跨区桥服务器发过来的消息
134 	*/
135 	void HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
175 	// 加载脚本
176 	bool LoadScheme();
178 	/// purpose:  加载跨区副本配置脚本
179 	bool LoadKqEctypeScheme(ICSVReader * pCSVReader);
181 private:
187 	*/
188 	DWORD FindBestServer(const SKqEctypeScheme* pScheme, int& nReason);
190 	/** 创建一个跨区副本序号
191 	*/
192 	DWORD CreateSerialID();
227 	*/
228 	void OnClientQuitEctype(IPerson* pPerson, SMsgMatchDataSubMsg* pSubMsg, LPSTR pszMsg, size_t nLen);
230 	/** 创建一个跨区副本
231 	*/
232 	void OnTransmitCreateEctype(DWORD dwServerID, SMsgMatchDataSubMsg* pSubMsg, LPSTR pszMsg, size_t nLen);
297 	bool CanGoEctype(IPerson* pPerson);
300 private:
301 	// 副本列表，以跨区副本序号为键值 map<副本序号, 跨区副本指针>
302 	map<DWORD, CKqEctype*> m_KqEctypeList;
304 	// 以玩家为索引的副本列表 map<玩家ID, 副本序号>

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\DummyServer.h 4 KB H 文件 2014/2/25 0:08:46 2018/10/23 20:06:22 2018/10/23 20:06:22 2
40 	// 释放
41 	virtual void Release(void);
43 	/** 处理跨区桥服务器发过来的消息
44 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
45 	@param actionId  : 消息码
46 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\CGameMatchAPI.h 50 KB H 文件 2014/2/25 0:08:40 2018/10/23 20:06:22 2018/10/23 20:06:22 17
65 	*/
66 	virtual const char * GetWarConfigName(DWORD dwConfigNameType);
68 	/**  取得跨区战争系统
69 	@param   
69 	@param   
70 	@return  取得跨区战争系统
71 	*/
72 	virtual IWarServer * GetWarServer();
71 	*/
72 	virtual IWarServer * GetWarServer();
75 	//========================================================跨区副本API==================================================
76 	/** 取得某个玩家的副本ID
77 	@return 副本序号
78 	*/
79 	virtual DWORD GetKqEctypeID(DWORD dwPDBID);
81 	/** 取得跨区副本现场
82 	@param dwSerialID 副本序号
83 	*/
83 	*/
84 	virtual const SKqEctypeContext* GetKqeContext(DWORD dwSerialID);
86 	/** 取得跨区副本成员个数
87 	@param dwSerialID 副本序号
88 	*/
88 	*/
89 	virtual int GetKqeMemberCount(DWORD dwSerialID);
91 	/** 取得跨区副本成员信息
92 	@param dwSerialID 副本序号
93 	*/
93 	*/
94 	virtual const SKqEctypeMember* GetKqeMemberInfo(DWORD dwSerialID, int nIndex);
96 	/** 取得跨区副本成员信息
97 	@param dwSerialID 副本序号
98 	*/
98 	*/
99 	virtual const SKqEctypeMember* GetKqeMemberInfoByPDBID(DWORD dwSerialID, DWORD dwPDBID);
101 	/** 跨区副本结束
102 	@param dwSerialID 副本序号
103 	*/
103 	*/
104 	virtual void KqEctypeEnd(DWORD dwSerialID);
106 	/** 跨区副本结束
107 	@param nActor		玩家序列号
108 	@param wEctypeType	副本类型
109 	*/
110 	virtual int CanKqEctype(int nActor, WORD wEctypeType);
112 	/** 取得玩家跨区部件身上的副本序号
113 	@param nActor		玩家序列号
114 	@param wEctypeType	需要匹配的副本类型，为0的时候不匹配
115 	*/
116 	virtual DWORD GetKqEctypeIDByActor(int nActor, WORD wEctypeType=0);
118 	/** 进入跨区副本
119 	@param nActor		玩家序列号
120 	@param wEctypeType	副本序号
121 	*/
122 	virtual void EnterKqEctype(int nActor);
124 	/** 离开跨区副本
125 	@param nActor		玩家序列号
126 	@param wEctypeType	副本序号
132 	*/
133 	virtual void KqeSetCurZoneID(DWORD dwSerialID, DWORD dwZoneID);
135 	/** 创建跨区副本 开始
136 	@param dwEctypeType	 副本类型
137 	@param nDifficulty	 副本难度
140 	*/ 
141 	virtual void NewKqeBegin(WORD dwEctypeType, BYTE nDifficulty, BYTE nCaptainIndex, int  nTeamID);
143 	/** 创建跨区副本 添加成员
144 	@param dwPDBID	 副本类型
145 	@param dwWorldID 副本难度
148 	*/ 
149 	virtual void NewKqeAddMember(DWORD dwPDBID, DWORD dwWorldID, int  nLevel, string szName, bool bOnlyTransport=false);
151 	/** 创建跨区副本 完成
152 	*/ 
153 	virtual int NewKqeEnd();
152 	*/ 
153 	virtual int NewKqeEnd();
155 	/** 到社会服创建跨区副本 完成
156 	*/ 
157 	virtual int SocialNewKqeEnd();
254 	*/
255 	virtual bool WarChangeActorTank(DWORD dwActorID, DWORD dwTankID);
257 	///////////// 跨区战场API /////////////////////////////////////////////////////////////
259 	/** 用现场创建跨服国战
260 	@param  DWORD dwWarTypeID		: 战场场类型 EMWarItemType

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\BudoServer.h 10 KB H 文件 2014/2/25 0:08:38 2018/10/23 20:06:21 2018/10/23 20:06:21 2
206 	virtual bool		OnVote(WORD wEventID, BYTE bSrcType, DWORD dwSrcID, LPCSTR pszContext, int nLen);
208 public:
209 	/** 处理跨区桥服务器发过来的消息
210 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
211 	@param actionId  : 消息码
212 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MarryServer\TeachStudPart.h 9 KB H 文件 2014/2/25 0:08:29 2018/10/23 20:06:20 2018/10/23 20:06:20 2
164 	*/
165 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
167 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
168 	@param   
169 	@param   
178 	*/
179 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
181 	/** 跨区切换地图时，将部件数据现场导入
182 	@param   
183 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MarryServer\StockPart.h 8 KB H 文件 2014/2/25 0:08:27 2018/10/23 20:06:20 2018/10/23 20:06:20 2
163 	*/
164 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
166 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
167 	@param   
168 	@param   
177 	*/
178 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
180 	/** 跨区切换地图时，将部件数据现场导入
181 	@param   
182 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MarryServer\SecurityPart.h 12 KB H 文件 2014/2/25 0:08:25 2018/10/23 20:06:19 2018/10/23 20:06:19 2
187 	*/
188 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
190 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
191 	@param   
192 	@param   
201 	*/
202 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
204 	/** 跨区切换地图时，将部件数据现场导入
205 	@param   
206 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MarryServer\RoleVendedPart.h 10 KB H 文件 2014/2/25 0:08:23 2018/10/23 20:06:19 2018/10/23 20:06:19 2
163 	*/
164 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
166 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
167 	@param   
168 	@param   
177 	*/
178 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
180 	/** 跨区切换地图时，将部件数据现场导入
181 	@param   
182 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MarryServer\ResAdjustPart.h 8 KB H 文件 2014/2/25 0:08:21 2018/10/23 20:06:18 2018/10/23 20:06:18 3
164 	*/
165 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
167 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
168 	@param   
169 	@param   
178 	*/
179 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
181 	/** 跨区切换地图时，将部件数据现场导入
182 	@param   
183 	@param   
245 	virtual void OnExecute(WORD wEventID, BYTE bSrcType, DWORD dwSrcID, LPCSTR pszContext, int nLen);
247 private:
248 	/** 设置跨区用值
249 	@param   
250 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MarryServer\MiscPart.h 13 KB H 文件 2014/2/25 0:08:17 2018/10/23 20:06:18 2018/10/23 20:06:18 2
172 	*/
173 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
175 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
176 	@param   
177 	@param   
186 	*/
187 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
189 	/** 跨区切换地图时，将部件数据现场导入
190 	@param   
191 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MarryServer\MarryPart.h 15 KB H 文件 2014/2/25 0:08:15 2018/10/23 20:06:17 2018/10/23 20:06:17 2
212 	*/
213 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
215 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
216 	@param   
217 	@param   
226 	*/
227 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
229 	/** 跨区切换地图时，将部件数据现场导入
230 	@param   
231 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MarryServer\InvitePart.h 13 KB H 文件 2014/2/25 0:08:13 2018/10/23 20:06:17 2018/10/23 20:06:17 2
164 	*/
165 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
167 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
168 	@param   
169 	@param   
178 	*/
179 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
181 	/** 跨区切换地图时，将部件数据现场导入
182 	@param   
183 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MarryServer\CreditPart.h 9 KB H 文件 2014/2/25 0:08:06 2018/10/23 20:06:15 2018/10/23 20:06:15 2
164 	*/
165 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
167 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
168 	@param   
169 	@param   
178 	*/
179 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
181 	/** 跨区切换地图时，将部件数据现场导入
182 	@param   
183 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MarryServer\CardCollectPart.h 10 KB H 文件 2014/2/25 0:08:03 2018/10/23 20:06:15 2018/10/23 20:06:15 2
173 	*/
174 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
176 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
177 	@param   
178 	@param   
187 	*/
188 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
190 	/** 跨区切换地图时，将部件数据现场导入
191 	@param   
192 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\LuaServer\LuaServer.h 4 KB H 文件 2014/2/25 0:09:21 2018/10/23 20:06:05 2018/10/23 20:06:05 1
54 	virtual void			OutputStatInfo(void);
56 	/**
57 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
58 	@param actionId  : 消息码
59 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\LuaServer\ITrigger.h 5 KB H 文件 2014/2/25 0:09:19 2018/10/23 20:06:05 2018/10/23 20:06:05 1
59 	ETriggerType_KillAllMonster,						// 杀所有怪触发器:KillAllMonsterTrigger
60 	ETriggerType_ActorStrike,							// 完成一局竞技触发器:ActorStrikeTrigger
61 	ETriggerType_CountryWarTask,						// 跨区国战-笑傲江湖任务:ETriggerType_CountryWarTask
62 	ETriggerType_ActorExpChange,						// 角色经验变更触发器:CActorExpChangeTrigger
63 	ETriggerType_CivilChange,							// 世界文明等级变化时触发器

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\LuaServer\GameMatchAPI.h 50 KB H 文件 2014/2/25 0:09:18 2018/10/23 20:06:04 2018/10/23 20:06:04 17
78 */
79 MATCH_API const char * GetWarConfigName(DWORD dwConfigNameType);
81 /**  取得跨区战争系统
82 @param   
82 @param   
83 @return  取得跨区战争系统
84 */
85 MATCH_API IWarServer * GetWarServer();
84 */
85 MATCH_API IWarServer * GetWarServer();
88 //========================================================跨区副本API==================================================
89 /** 取得某个玩家的副本ID
90 @return 副本序号
91 */
92 MATCH_API DWORD GetKqEctypeID(DWORD dwPDBID);
94 /** 取得跨区副本现场
95 @param dwSerialID 副本序号
96 */
96 */
97 MATCH_API const SKqEctypeContext* GetKqeContext(DWORD dwSerialID);
99 /** 取得跨区副本成员个数
100 @param dwSerialID 副本序号
101 */
101 */
102 MATCH_API int GetKqeMemberCount(DWORD dwSerialID);
104 /** 取得跨区副本成员信息
105 @param dwSerialID 副本序号
106 */
106 */
107 MATCH_API const SKqEctypeMember* GetKqeMemberInfo(DWORD dwSerialID, int nIndex);
109 /** 取得跨区副本成员信息
110 @param dwSerialID 副本序号
111 */
111 */
112 MATCH_API const SKqEctypeMember* GetKqeMemberInfoByPDBID(DWORD dwSerialID, DWORD dwPDBID);
114 /** 跨区副本结束
115 @param dwSerialID 副本序号
116 */
116 */
117 MATCH_API void KqEctypeEnd(DWORD dwSerialID);
119 /** 跨区副本结束
120 @param nActor		玩家序列号
121 @param wEctypeType	副本类型
122 */
123 MATCH_API int CanKqEctype(int nActor, WORD wEctypeType);
125 /** 取得玩家跨区部件身上的副本序号
126 @param nActor		玩家序列号
127 @param wEctypeType	需要匹配的副本类型，为0的时候不匹配
128 */
129 MATCH_API DWORD GetKqEctypeIDByActor(int nActor, WORD wEctypeType=0);
131 /** 进入跨区副本
132 @param nActor		玩家序列号
133 @param wEctypeType	副本序号
134 */
135 MATCH_API void EnterKqEctype(int nActor);
137 /** 离开跨区副本
138 @param nActor		玩家序列号
139 @param wEctypeType	副本序号
145 */
146 MATCH_API void KqeSetCurZoneID(DWORD dwSerialID, DWORD dwZoneID);
148 /** 创建跨区副本 开始
149 @param dwEctypeType	 副本类型
150 @param nDifficulty	 副本难度
153 */ 
154 MATCH_API void NewKqeBegin(WORD dwEctypeType, BYTE nDifficulty, BYTE nCaptainIndex, int  nTeamID);
156 /** 创建跨区副本 添加成员
157 @param dwPDBID	 副本类型
158 @param dwWorldID 副本难度
161 */ 
162 MATCH_API void NewKqeAddMember(DWORD dwPDBID, DWORD dwWorldID, int  nLevel, string szName, bool bOnlyTransport=false);
164 /** 创建跨区副本 完成
165 */ 
166 MATCH_API int NewKqeEnd();
165 */ 
166 MATCH_API int NewKqeEnd();
168 /** 到社会服创建跨区副本 完成
169 */ 
170 MATCH_API int SocialNewKqeEnd();
267 */
268 MATCH_API bool WarChangeActorTank(DWORD dwActorID, DWORD dwTankID);
270 ///////////// 跨区战场API /////////////////////////////////////////////////////////////
272 /** 用现场创建跨服国战
273 @param  DWORD dwWarTypeID		: 战场场类型 EMWarItemType

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\LuaServer\GameEngineAPI.h 82 KB H 文件 2014/2/25 0:09:14 2018/10/23 20:06:04 2018/10/23 20:06:04 1
565 int CreateDotaTrigger(const char* szEnterMapFunc, const char* szExitMapFunc, const char* szMonsterDieFunc, const char* mzPersonDieFunc, const char* m_szPersonReliveFunc, const char* szMapList);
568 /**
569 @name            : 创建人物完成跨区笑傲江湖任务
570 @brief           : 
571 @param szCallFunc: 回调函数名

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\Include\IZoneServiceProvider.h 18 KB H 文件 2014/2/25 0:08:52 2018/10/23 20:05:20 2018/10/23 20:05:20 1
759 	*/
760 	virtual Bridge::IBridgeConnector*	GetBridgeConnector(void) = NULL;
762 	/** 取得跨区服务器
763 	@param   
764 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\Include\IZoneManager.h 28 KB H 文件 2014/2/25 0:08:51 2018/10/23 20:05:20 2018/10/23 20:05:20 4
209 	@param   PDBID    ：需要进入的PDBID
210 	@param   uid      ：需要进入的uid，如果为跨进程传送，则为INVALID_UID
211 	@param   nType    ：1＝上线进入；2＝同进程切换进入；3＝跨进程切换进入；4＝跨区切换进入
212 	@param   pszReason：不能进入的原因
213 	@return  
218 	@param   PDBID    ：已进入的PDBID
219 	@param   uid      ：已进入的uid
220 	@param   nType    ：1＝上线进入；2＝同进程切换进入；3＝跨进程切换进入；4＝跨区切换进入
221 	@return  
222 	*/
226 	@param   PDBID    ：需要退出的PDBID
227 	@param   uid      ：需要进入的uid，如果为跨进程传送，则为INVALID_UID
228 	@param   nType    ：1＝下线退出；2＝同进程切换退出；3＝跨进程切换退出；4＝跨区切换退出
229 	@param   pszReason：不能进入的原因
230 	@param   
236 	@param   PDBID    ：已退出的PDBID
237 	@param   uid      ：已退出的uid  
238 	@param   nType    ：1＝下线退出；2＝同进程切换退出；3＝跨进程切换退出；4＝跨区切换退出
239 	@return  
240 	*/

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\Include\IStarTrekServer.h 5 KB H 文件 2014/2/25 0:08:48 2018/10/23 20:05:20 2018/10/23 20:05:20 9
5 ** 日  期:	2010/6/29 16:42
6 ** 版  本:	1.0
7 ** 描  述:	跨区迁移服务
8 ** 应  用:  	
9 	
17 #include "DStarTrekDef.h"
18 /*! \addtogroup IStarTrekServer
19 *  跨区迁移服务
20 *  @{
21 */
22 struct INeedInObject
23 {
24 	/** 取得跨区传送的现场
25 	@param   
26 	@param   
56 	*/
57 	virtual void			Release(void) = NULL;
59 	/** 预判断能否跨区	
60 	@param	 nInGameWorldID		: 迁入世界ID
61 	@param   dwInZoneID			：迁入场景ID
63 	@param   nStarTrekType		：传送类型
64 	@param   dwStarTrekFlag		：传送标志
65 	@param   bAsyncCheck		: 是否需要跨区判断
66 	@param   pszCanInLuaFunction: 迁入场景服能否接收的Lua函数
66 	@param   pszCanInLuaFunction: 迁入场景服能否接收的Lua函数
67 	@param   pszCheckResultLua	: 跨区判断的结果Lua函数
68 	@param   跨区判断:
69 	　　　　 1: 若在当前进程都失败，则直接返回
70 			 2: 最终结果在pszCheckResultLua返回, 参数输入只需填函数名, 参数依次为:
77 	virtual int				CanStarTrek(DWORD PDBID, int nInGameWorldID, DWORD dwInZoneID, POINT ptInLoc, int nStarTrekType, DWORD dwStarTrekFlag, 
78 										bool bAsyncCheck = false, LPCSTR pszCanInLuaFunction = NULL, LPCSTR pszCheckResultLua = NULL) = NULL;
80 	/** 跨区
81 	@param	 nInGameWorldID			: 迁入世界ID
82 	@param   dwInZoneID				：迁入场景ID
97 									 LPCSTR pszCanInLuaFunction = NULL, 
98 									 LPCSTR pszDoneInLuaFunction = NULL) = NULL;
99 	/** 释放跨区对像
100 	@param   nSTDir : tStarTrek_MsgDir_In, tStarTrek_MsgDir_Out
101 	@param   nReleaseTreakReason : tReleaseTreak_Reason_SwitchState

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\Include\ISchemeCenter.h 63 KB H 文件 2014/2/25 0:08:45 2018/10/23 20:05:20 2018/10/23 20:05:20 1
356 	bool			bForbidTank;							// 禁止其载具进入
357 	bool			bForbidBWM;								// 禁止双人坐骑进入
358 	bool			bForbidStarTrek;						// 不允许跨区传送
359 	int				nFlag;									// 标志位(EMatron_ForbidFollow...)
360 	int				nPkMode;								// PK模式(EPKMode_Name_Safe)

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\Include\IMatchServer.h 101 KB H 文件 2014/2/25 0:08:41 2018/10/23 20:05:19 2018/10/23 20:05:19 16
283 	*/
284 	virtual bool IsBudoOpen() = NULL;
286 	/** 创建跨区副本部件
287 	*/
288 	virtual IEctypeAssistPart* CreateEctypeAssistPart() = NULL;
289 	// 竞技部件
290 	virtual IPersonStrikePart* CreatePersonStrikePart() = NULL;
292 	/** 取得跨区副本接口
293 	*/
294 	virtual IEctypeAssist* GetEctypeAssist() = NULL;
297 	*/
298 	virtual IStrikeMatch* GetStrikeMatch() = NULL;
300 	/** 取得跨区竞技系统接口
301 	*/
302 	virtual IStrikeServer* GetStrikeServer() = NULL;
305 	*/
306 	virtual IStrikeManager* GetStrikeManager() = NULL;
308 	/** 取得跨区战争系统接口
309 	*/
310 	virtual IWarServer* GetWarServer() = NULL;
351 	virtual bool IsMatchTypeOpen(DWORD dwTypeID) = NULL;
353 // tolua_end
355 	/** 请求跨区查看玩家装备
356 	@param  const char * pData	: 请求消息数据
357 	@param  DWORD dwLen			: 请求消息数据长度
379 	*/
380 	virtual IWarRes* GetWarResByUID(LONGLONG uid) = NULL;
382 	/** 取得跨区世界文明等级
383 	@param  DWORD dwWorldID		: 游戏世界ID
383 	@param  DWORD dwWorldID		: 游戏世界ID
384 	@return  DWORD 跨区世界文明等级
385 	*/
386 	virtual DWORD GetWorldCivilGrade(DWORD dwWorldID) = NULL;
385 	*/
386 	virtual DWORD GetWorldCivilGrade(DWORD dwWorldID) = NULL;
388 	/** 取得跨区世界文明点数
389 	@param  DWORD dwWorldID		: 游戏世界ID
389 	@param  DWORD dwWorldID		: 游戏世界ID
390 	@return  DWORD 跨区世界文明点数
391 	*/
392 	virtual DWORD GetWorldCivilDot(DWORD dwWorldID) = NULL;
2136 //////////////////////////////////////////////////////////////////////////
2138 // tolua_end
2140 // 跨区副本部件
2141 struct IEctypeAssistPart : public IEntityPart
2142 {
2141 struct IEctypeAssistPart : public IEntityPart
2142 {
2143 	/** 是否正在进行跨区副本
2144 	*/
2145 	virtual bool IsEctypeing() = NULL;
2144 	*/
2145 	virtual bool IsEctypeing() = NULL;
2147 	/** 取得跨区现场
2148 	*/
2149 	virtual const SKqEctypePartContext* GetEctypeContext() = NULL;
2232 	virtual void SetDummyDBDailyTimes(int nValue) = NULL;
2233 };
2235 // 跨区副本对象
2236 struct IKqEctype
2237 {
2255 	virtual const SKqEctypeMember* GetMemberInfoByPDBID(DWORD dwPDBID) = NULL;
2256 };
2258 // 跨区副本助手
2259 struct IEctypeAssist
2260 {
2259 struct IEctypeAssist
2260 {
2261 	/** 取得跨区副本信息
2262 	*/
2263 	virtual const SKqEctypeScheme* GetKqEctypeScheme(WORD wTypeID) = NULL;
2299 	*/
2300 	virtual ECreateKqeRet AcceptEctypeTeam(SGlobalEctypeTeam* pEctypeTeam) = NULL;
2302 	/** 取得跨区副本配置信息
2303 	*/
2304 	virtual const SKqEctypeConfig* GetKqEctypeConfig() = NULL;

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\Include\IGameMatchAPI.h 49 KB H 文件 2014/2/25 0:08:39 2018/10/23 20:05:18 2018/10/23 20:05:18 17
69 */
70 virtual const char * GetWarConfigName(DWORD dwConfigNameType)=0;
72 /**  取得跨区战争系统
73 @param   
73 @param   
74 @return  取得跨区战争系统
75 */
76 virtual IWarServer * GetWarServer()=0;
75 */
76 virtual IWarServer * GetWarServer()=0;
79 //========================================================跨区副本API==================================================
80 /** 取得某个玩家的副本ID
81 @return 副本序号
82 */
83 virtual DWORD GetKqEctypeID(DWORD dwPDBID)=0;
85 /** 取得跨区副本现场
86 @param dwSerialID 副本序号
87 */
87 */
88 virtual const SKqEctypeContext* GetKqeContext(DWORD dwSerialID)=0;
90 /** 取得跨区副本成员个数
91 @param dwSerialID 副本序号
92 */
92 */
93 virtual int GetKqeMemberCount(DWORD dwSerialID)=0;
95 /** 取得跨区副本成员信息
96 @param dwSerialID 副本序号
97 */
97 */
98 virtual const SKqEctypeMember* GetKqeMemberInfo(DWORD dwSerialID, int nIndex)=0;
100 /** 取得跨区副本成员信息
101 @param dwSerialID 副本序号
102 */
102 */
103 virtual const SKqEctypeMember* GetKqeMemberInfoByPDBID(DWORD dwSerialID, DWORD dwPDBID)=0;
105 /** 跨区副本结束
106 @param dwSerialID 副本序号
107 */
107 */
108 virtual void KqEctypeEnd(DWORD dwSerialID)=0;
110 /** 跨区副本结束
111 @param nActor		玩家序列号
112 @param wEctypeType	副本类型
113 */
114 virtual int CanKqEctype(int nActor, WORD wEctypeType)=0;
116 /** 取得玩家跨区部件身上的副本序号
117 @param nActor		玩家序列号
118 @param wEctypeType	需要匹配的副本类型，为0的时候不匹配
119 */
120 virtual DWORD GetKqEctypeIDByActor(int nActor, WORD wEctypeType=0)=0;
122 /** 进入跨区副本
123 @param nActor		玩家序列号
124 @param wEctypeType	副本序号
125 */
126 virtual void EnterKqEctype(int nActor)=0;
128 /** 离开跨区副本
129 @param nActor		玩家序列号
130 @param wEctypeType	副本序号
136 */
137 virtual void KqeSetCurZoneID(DWORD dwSerialID, DWORD dwZoneID)=0;
139 /** 创建跨区副本 开始
140 @param dwEctypeType	 副本类型
141 @param nDifficulty	 副本难度
144 */ 
145 virtual void NewKqeBegin(WORD dwEctypeType, BYTE nDifficulty, BYTE nCaptainIndex, int  nTeamID)=0;
147 /** 创建跨区副本 添加成员
148 @param dwPDBID	 副本类型
149 @param dwWorldID 副本难度
152 */ 
153 virtual void NewKqeAddMember(DWORD dwPDBID, DWORD dwWorldID, int  nLevel, string szName, bool bOnlyTransport=false)=0;
155 /** 创建跨区副本 完成
156 */ 
157 virtual int NewKqeEnd()=0;
156 */ 
157 virtual int NewKqeEnd()=0;
159 /** 到社会服创建跨区副本 完成
160 */ 
161 virtual int SocialNewKqeEnd()=0;
258 */
259 virtual bool WarChangeActorTank(DWORD dwActorID, DWORD dwTankID)=0;
261 ///////////// 跨区战场API /////////////////////////////////////////////////////////////
263 /** 用现场创建跨服国战
264 @param  DWORD dwWarTypeID		: 战场场类型 EMWarItemType

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\Include\IEntityServer.h 92 KB H 文件 2014/2/25 0:08:38 2018/10/23 20:05:18 2018/10/23 20:05:18 5
685 	*/	
686 	virtual	void				SyncHPForTeam(int nCurHP = -1, bool bAllMember = false, bool bBoradcast = true)	= NULL;
688 	/** 跨区切换地图时，将临时小型数据导出带过去, 如果没有数据，将nLen设为0或返回false
689 	@param   
690 	@param   
692 	*/
693 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen) = NULL;
695 	/** 跨区切换地图时，将临时小型数据导入
696 	@param   
697 	@param   
1505 	*/
1506 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen) = NULL;
1508 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
1509 	@param   
1510 	@param   
1519 	*/
1520 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen) { nLen = 0; return false; }
1522 	/** 跨区切换地图时，将部件数据现场导入
1523 	@param   
1524 	@param   
3102 	*/
3103 	virtual IEntity *			BuildEntityMap(DWORD dwZoneID, DWORD dwEntityClass, LPCSTR pszContext, int nLen) = NULL;
3105 	/** 通过跨区数据构造实体(只限人物)
3106 	@param   
3107 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\Include\IEnterManager.h 4 KB H 文件 2014/2/25 0:08:37 2018/10/23 20:05:18 2018/10/23 20:05:18 3
21 	TERMINAL_DBRET_SETUSERLOCK,			// 设置锁返回
22 	
23 	TERMINAL_TREK_SAVETODB,				// 存入数据库(跨区切换)
24 	TERMINAL_DBRET_SETPUBLICUSERLOCK,	// 设置公共区帐号锁
26 	TERMINAL_SHOOT_SAVETODBANDLOGOUT,	// 存入数据库(跨进程切换)下线，这种情况是在收到应答导出数据出错调用
26 	TERMINAL_SHOOT_SAVETODBANDLOGOUT,	// 存入数据库(跨进程切换)下线，这种情况是在收到应答导出数据出错调用
27 	TERMINAL_SHOOT_REMOTE_ANSWER,		// (跨进程切换), 收到远程服务器回答.  消息现场为SMsgShootAnswer_ZZ
29 	TERMINAL_TREK_SAVETODBANDLOGOUT,	// 存入数据库(跨区切换)下线，这种情况是在收到应答导出数据出错调用
30 };
32 /*! \addtogroup IEnterManager
76 	*/
77 	virtual void			EntityChangePlace(IEntity * pMaster, DWORD dwNewZoneID, POINT ptTile, int nTransportType, bool bCoercive, int nCallupType, LPCSTR lpStrFunc=NULL) = NULL;
79 	/** 获取跨区切换的现场
80 	@param   
81 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\EntityServer\PersonPropBank.h 19 KB H 文件 2014/2/25 0:07:38 2018/10/23 20:04:45 2018/10/23 20:04:45 2
319 	*/
320 	IGameZone *				GetGameZone(void);
322 	/** 跨区切换地图时，将临时小型数据导出带过去, 如果没有数据，将nLen设为0或返回false
323 	@param   
324 	@param   
326 	*/
327 	bool					ExportTrekContext(LPSTR pszContext, int &nLen);
329 	/** 跨区切换地图时，将临时小型数据导入
330 	@param   
331 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\EntityServer\PersonMountingPart.h 6 KB H 文件 2014/2/25 0:07:34 2018/10/23 20:04:43 2018/10/23 20:04:43 2
111 	virtual bool				ExportRenewContext(LPSTR pszContext, int &nLen);
113 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
115 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
116 	@param   
117 	@param   
126 	*/
127 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
129 	/** 跨区切换地图时，将部件数据现场导入
130 	@param   
131 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\EntityServer\PersonBattleRidePart.h 27 KB H 文件 2014/2/25 0:07:31 2018/10/23 20:04:41 2018/10/23 20:04:41 2
488 	*/
489 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
491 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
492 	@param   
493 	@param   
502 	*/
503 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
505 	/** 跨区切换地图时，将部件数据现场导入
506 	@param   
507 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\EntityServer\Person.h 22 KB H 文件 2014/2/25 0:07:29 2018/10/23 20:04:40 2018/10/23 20:04:40 2
552 	*/	
553 	virtual	void				SyncHPForTeam(int nCurHP = -1, bool bAllMember = false, bool bBoradcast = true);
555 	/** 跨区切换地图时，将临时小型数据导出带过去, 如果没有数据，将nLen设为0或返回false
556 	@param   
557 	@param   
559 	*/
560 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
562 	/** 跨区切换地图时，将临时小型数据导入
563 	@param   
564 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\EntityServer\EntityServer.h 9 KB H 文件 2014/2/25 0:07:07 2018/10/23 20:04:32 2018/10/23 20:04:32 1
81 	*/
82 	virtual IEntity *			BuildEntityMap(DWORD dwZoneID, DWORD dwEntityClass, LPCSTR pszContext, int nLen);
84 	/** 通过跨区数据构造实体(只限人物)
85 	@param   
86 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\EnterManager\TerminalTunnel.h 6 KB H 文件 2014/2/25 0:06:45 2018/10/23 20:04:23 2018/10/23 20:04:23 2
291 	// 重建角色态
292 	CConnectStateRebuild		m_ConnectStateRebuild;
294 	// 跨区切换态
295 	CConnectStateTrek			m_ConnectStateTrek;
295 	CConnectStateTrek			m_ConnectStateTrek;
297 	// 跨区登陆态
298 	CConnectStateLoginForTrek	m_ConnectStateLoginForTrek;
300 	//  数据保存状态

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\EnterManager\SaveActorToVan.h 3 KB H 文件 2014/2/25 0:06:42 2018/10/23 20:04:22 2018/10/23 20:04:22 1
64 	*/
65 	int				ExportRenewContext(IPerson * pPerson, DWORD dwNewZoneID, POINT ptTile, LPSTR pszInBuffer, int nInLen);
67 	/** 获取跨区切换的现场
68 	@param   
69 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\EnterManager\EnterManager.h 5 KB H 文件 2014/2/25 0:06:36 2018/10/23 20:04:21 2018/10/23 20:04:21 1
67 	*/
68 	virtual void			EntityChangePlace(IEntity * pMaster, DWORD dwNewZoneID, POINT ptTile, int nTransportType, bool bCoercive, int nCallupType, LPCSTR lpStrFunc = NULL);
70 	/** 获取跨区切换的现场
71 	@param   
72 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\EnterManager\DBRetSinkSetSolidLockForTrek.h 2 KB H 文件 2014/2/25 0:06:35 2018/10/23 20:04:20 2018/10/23 20:04:20 1
5 ** 日  期:	2010/7/13 10:06
6 ** 版  本:	1.0
7 ** 描  述:	跨区加永久锁
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\EnterManager\DBRetSinkSelectActorForTrek.h 2 KB H 文件 2014/2/25 0:06:34 2018/10/23 20:04:20 2018/10/23 20:04:20 1
5 ** 日  期:	2010/8/2 16:48
6 ** 版  本:	1.0
7 ** 描  述:	DBREQ_RESULT_SELECTACTOR 给跨区用的
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\EnterManager\ConnectStateTrek.h 2 KB H 文件 2014/2/25 0:06:33 2018/10/23 20:04:20 2018/10/23 20:04:20 1
5 ** 日  期:	2010/7/2 18:11
6 ** 版  本:	1.0
7 ** 描  述:	跨区切换态
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\EnterManager\ConnectStateLoginForTrek.h 2 KB H 文件 2014/2/25 0:06:31 2018/10/23 20:04:19 2018/10/23 20:04:19 1
5 ** 日  期:	2010/7/11 19:10
6 ** 版  本:	1.0
7 ** 描  述:	跨区登陆态
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Common\dbsvr_pol\DBSvrProtocolImport.h 263 KB H 文件 2015/3/15 13:47:24 2018/10/23 20:03:46 2018/10/23 20:03:46 10
599   int unpack(ORM::COrmSerializer *pOrmSerializer);
601 };
602 // 玩家跨区竞技
603 struct TStrikePartData
604 {
631   int unpack(ORM::COrmSerializer *pOrmSerializer);
633 };
634 // 玩家跨区副本结构
635 struct TKqEctypePartContext
636 {
650   int unpack(ORM::COrmSerializer *pOrmSerializer);
652 };
653 // 玩家跨区副本位置信息
654 struct TKqEctypePartLocInfo
655 {
684   int unpack(ORM::COrmSerializer *pOrmSerializer);
686 };
687 // 跨区副本助手部件
688 struct TEctypeAssistPartData
689 {
688 struct TEctypeAssistPartData
689 {
690 	TKqEctypePartContext stEctypeInfo;   //玩家跨区副本结构
691 	TKqEctypePartLocInfo stLocInfo;   //玩家跨区副本位置信息
692 	TKqDummyDBInfo stDummyInfo;   //玩家挑战系统个人数据
693   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
1131 	TCalnSkillPartData stCalnSkillPartData;   //氏族技能
1132 	TCountryPartData stCountryPartData;   //国家部件
1133 	TEctypeAssistPartData stEctypeAssistData;   //跨区副本
1134 	TStrikePartData stStrikeData;   //跨区竞技
1135 	TMiscPartData stMiscData;   //杂项部件
1136 	TZenSkillPartData stZenSkillData;   //创招部件
2174 	BYTE bReceiveCastleEvent;   //接收标志
2175 	BYTE bLastMapIsOnSteed;   //前面切地图时战骑状态
2176 	int nNo1NewPowerValue;   //排行榜第1名战力值（仅对跨区作用）
2177 	int nLastChangeMapID;   //上张地图mapID
2178 	DWORD dwBRCampFightPDBID;   //铁骑营挑战玩家PDBID
2573 	DWORD dwFlag;   //国家基础数据标识 EMCountryBaseDBFlag
2574 	char szLocalName[DB_COUNTRY_NAME_MAXSIZE];   //本区国家短名称
2575 	char szWorldName[DB_COUNTRY_NAME_MAXSIZE];   //跨区国家名称
2576 	char szDBWorldName[DB_COUNTRY_NAME_MAXSIZE];   //游戏世界区名
2577   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Common\BridgeConnector\IBridgeConnector.h 15 KB H 文件 2014/2/25 0:03:32 2018/10/23 20:03:46 2018/10/23 20:03:46 21
5 ** 日  期:      2010-6-24
6 ** 版  本:      1.0
7 ** 描  述:      跨区桥服务器连接器
8 ** 应  用:      
10 **************************** 修改记录 ******************************
38 {
40 	/**
41 	@name : 处理跨区桥服务器发过来的消息
42 	@brief:
43 	*/
45 	{
46 		/**
47 		@name         : 处理其他服务器通过跨区桥服务器转发的消息
48 		@param actionId  : 消息码
49 		@param bridgeHead  : 桥消息头
54 		virtual void HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len) = 0;
55 	};
57 	/// 处理处理跨区桥服务器执行事件
58 	struct IBridgeEventHandler
59 	{
66 		virtual void OnBridgeEventExecute(WORD wEventID, LPSTR pszContext, size_t nLen) = 0;
67 	};
69 	/// 场景服 跨区桥服务器连接器扩展部件接口
70 	struct IBridgePart
71 	{
124 		virtual DWORD GetServerCounts(void) = 0;
125 	};
127 	/// 跨区桥服务器连接器扩展部件接口
128 	struct IBridgeZonePart : public IBridgePart
129 	{
179 		// 取国家名称
180 		virtual const char * GetName(void) = 0;
181 		// 取跨区国家名称
182 		virtual const char * GetWorldCountryName(void) = 0;
183 		// 取数据库游戏世界名称
184 		virtual const char * GetDBWorldName(void) = 0;
185 	};
187 	/// 跨区桥服务器连接器扩展部件接口
188 	struct IBridgeSocialPart : public IBridgePart
189 	{
196 	//////////////////////////////////////////////////////////////////////////
198 	/**
199 	@name : 跨区桥服务器连接器
200 	@brief: 该模块负责维护和跨区桥服务器之间的连接,并转发各种命令
201 	*/
202 	struct IBridgeConnector
204 		virtual bool Create(DWORD dwGameWorldID,WORD wServerType,WORD wSubID,const char * szServerName,const char * szWorldName) = 0;
206 		/**
207 		@name         : 连接跨区桥服务器
208 		@brief        : 启动服务器时连接跨区桥服务器,以后如果连接断开,该模块内部会定时重试
209 		@param szCSIP : 跨区桥服务器IP 
210 		@param nCSPort: 跨区桥服务器端口
211 		@return       : 如果没有网络错误,则返回成功
212 		*/
213 		virtual bool Connect(const char * szCSIP,WORD nCSPort) = 0;
215 		/**
216 		@name                 : 向跨区桥服务器注册本地服务器信息
217 		@brief                : 如果本地服务器信息更改了,也调用这个接口进行Update 
218 		@param szName         : 服务器名称,必须小于32
223 		virtual bool RegisterServer(DWORD dwGameWorldID,WORD wServerType,WORD wSubID) = 0;
225 		/**
226 		@name         : 取得本地服务器在跨区桥服务器上的ID
227 		@brief        :
228 		*/
239 		virtual bool  IsConnected() = 0;
241 		/**
242 		@name                : 直接发送数据给跨区桥服务器
243 		@brief               : 
244 		@param pData         : 要发送的数据
289 		// 广播数据给指定列表游戏服务器 pServerArray:服务器ID列表,wServerNum:列表个数
290 		virtual void BroadcastDataToServer(DWORD * pServerArray,WORD wServerNum,const char * pData,DWORD dwLen) = 0;
292 		// 发服务器扩展信息消息 dwServerID:服务器ID 为0时广播给所有桥服务器连接器,跨区桥服务器连接器同步服务器扩展信息专用
293 		virtual bool SendExtDataToServer(DWORD dwServerID,DWORD dwMsgCode,DWORD dwUserData1=0,DWORD dwUserData2=0,DWORD dwUserData3=0,const char * pData=0,DWORD dwLen=0) = 0;
295 		////// 常用服务器列表相关接口 ////////////////////////////////////////////////////////////////////
402 	};
404 	/**
405 	@name            : 创建一个跨区桥服务器连接对象
406 	@brief           :
407 	@param pTimerAxis: 时间轴接口,主要用来定时重试
406 	@brief           :
407 	@param pTimerAxis: 时间轴接口,主要用来定时重试
408 	@return          : 返回跨区桥服务器连接对象指针
409 	*/
410 	// IBridgeConnector * CreateBridgeConnector(rkt::TimerAxis * pTimerAxis);
413 }; // namespace
415 //////////////////////////////////////////////////////////////////////////
417 // 取得跨区桥服务器连接器接口
418 BRIDGE_API Bridge::IBridgeConnector* GetGlobalBridgeConnector();
420 /// 静态库版本

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\PassportConnector\PassportCommonPart.h 2 KB H 文件 2014/2/25 0:02:34 2018/10/23 20:03:40 2018/10/23 20:03:40 2
5 ** 日  期:	2010-6-28
6 ** 版  本:	1.0
7 ** 描  述:	通用 跨区桥连接器扩展信息类
8 ** 应  用:  	
10 **************************** 修改记录 ******************************
22 using namespace rkt;
25 /**
26 @name : 社会服 跨区桥连接器扩展信息类
27 @brief:
28 */

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\LoginServer\LoginServerImp.h 20 KB H 文件 2014/2/25 0:01:39 2018/10/23 20:03:37 2018/10/23 20:03:37 7
154 	/// 关闭管理连接器
155 	void ReleaseManagerConnector(void);
157 	/// 启动跨区桥服务器连接器
158 	void CreateBridgeConnector(void);
158 	void CreateBridgeConnector(void);
159 	/// 关闭跨区桥服务器连接器
160 	void ReleaseBridgeConnector(void);
162 	/// 启动通行证服务器连接器
293 	void	OnSetGameWorldID(void);
295 	/**
296 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
297 	@param actionId  : 消息码
298 	@param bridgeHead  : 桥消息头
312 	*/
313 	virtual void HandlePassportMessage(unsigned long actionId,SMsgPassportHead &passportHead,SGameMsgHead* head, LPSTR data, size_t len);
315 	/** 取跨区登陆临时数据
316 	@param   
317 	@param   
344 	*/
345 	char VerifyCodeRandToLow( char szCode);
349 	/** 删除跨区登陆临时数据
350 	@param   
351 	@param   
644 	CLIENT_LIST                   m_ClientList;   
646 	IManagerConnector *			m_ManagerConnector;			// 服务器管理连接器
647 	IBridgeConnector *			m_BridgeConnector;			/// 跨区桥服务器连接器
648 	IPassportConnector *		m_PassportConnector;		/// 通行证服务器连接器
650 	producer_consumer_queue<std::string>  m_CommandQueue;
661 	//end add
663 	typedef map<DWORD, SAreaSwitchInfo> TMAP_ASINFO;
664 	TMAP_ASINFO					m_mapASInfo;			// 跨区请求的数据
665 	
666 	CServerCapabilityClient		m_CapabilityTestClient;	// 性能测试

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\LoginServer\LoginServerDef.h 1 KB H 文件 2014/2/25 0:01:35 2018/10/23 20:03:37 2018/10/23 20:03:37 1
15 #pragma once
17 #pragma pack(1)
18 // 跨区数据
19 struct SAreaSwitchInfo 
20 {

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\LoginServer\ClientState_Login.h 7 KB H 文件 2014/2/25 0:01:22 2018/10/23 20:03:36 2018/10/23 20:03:36 1
104 	// 处理用户登陆
105 	void HandleUserLogin(ibuffer & buffer);
107 	// 处理用户跨区登陆请求
108 	void HandleUserSwitchAreaLogin(ibuffer & buffer);
110 	// 处理数据库请求返回

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\LoginServer\ClientState_AreaSwitch.h 4 KB H 文件 2014/2/25 0:01:19 2018/10/23 20:03:36 2018/10/23 20:03:36 6
67 	// 默认构造被禁止
68 	ClientState_AreaSwitch(){}
70 	// 处理用户跨区登陆请求(在通行证库中查询)
71 	void HandleUserSwitchAreaQueryUserInfo(DWORD dwUserID, DWORD dwPDBID);
71 	void HandleUserSwitchAreaQueryUserInfo(DWORD dwUserID, DWORD dwPDBID);
73 	// 处理用户跨区登陆请求 数据库返回
74 	void HandleDBResult_SwitchAreaQueryUserInfo(DBREQ_RESULT_QUERYUSERLOGIN * result,DWORD dwResultLen);
74 	void HandleDBResult_SwitchAreaQueryUserInfo(DBREQ_RESULT_QUERYUSERLOGIN * result,DWORD dwResultLen);
77 	// 处理用户跨区选角色请求
78 	void HandleUserSwitchAreaQueryActorInfo(DWORD dwPDBID);
78 	void HandleUserSwitchAreaQueryActorInfo(DWORD dwPDBID);
80 	// 处理用户跨区选角色请求 数据库返回
81 	void HandleDBResult_SwitchAreaQueryActorInfo(DBREQ_RESULT_QUERYACTORLOGIN * result,DWORD dwResultLen);
81 	void HandleDBResult_SwitchAreaQueryActorInfo(DBREQ_RESULT_QUERYACTORLOGIN * result,DWORD dwResultLen);
84 	// 处理用户跨区登陆请求(在区库中查询)
85 	void HandleUserSwitchAreaQueryUserAreaInfo(LPCSTR pData, int nLen);
85 	void HandleUserSwitchAreaQueryUserAreaInfo(LPCSTR pData, int nLen);
87 	// 处理用户跨区登陆请求 数据库返回
88 	void HandleDBResult_SwitchAreaQueryUserAreaInfo(DBREQ_RESULT_QUERYUSERLOGINAREA * result,DWORD dwResultLen);
91 protected:

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\LoginServer2\LoginServerImp.h 20 KB H 文件 2014/2/25 0:02:16 2018/10/23 20:03:39 2018/10/23 20:03:39 7
154 	/// 关闭管理连接器
155 	void ReleaseManagerConnector(void);
157 	/// 启动跨区桥服务器连接器
158 	void CreateBridgeConnector(void);
158 	void CreateBridgeConnector(void);
159 	/// 关闭跨区桥服务器连接器
160 	void ReleaseBridgeConnector(void);
162 	/// 启动通行证服务器连接器
293 	void	OnSetGameWorldID(void);
295 	/**
296 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
297 	@param actionId  : 消息码
298 	@param bridgeHead  : 桥消息头
312 	*/
313 	virtual void HandlePassportMessage(unsigned long actionId,SMsgPassportHead &passportHead,SGameMsgHead* head, LPSTR data, size_t len);
315 	/** 取跨区登陆临时数据
316 	@param   
317 	@param   
344 	*/
345 	char VerifyCodeRandToLow( char szCode);
349 	/** 删除跨区登陆临时数据
350 	@param   
351 	@param   
644 	CLIENT_LIST                   m_ClientList;   
646 	IManagerConnector *			m_ManagerConnector;			// 服务器管理连接器
647 	IBridgeConnector *			m_BridgeConnector;			/// 跨区桥服务器连接器
648 	IPassportConnector *		m_PassportConnector;		/// 通行证服务器连接器
650 	producer_consumer_queue<std::string>  m_CommandQueue;
661 	//end add
663 	typedef map<DWORD, SAreaSwitchInfo> TMAP_ASINFO;
664 	TMAP_ASINFO					m_mapASInfo;			// 跨区请求的数据
665 	
666 	CServerCapabilityClient		m_CapabilityTestClient;	// 性能测试

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\LoginServer2\LoginServerDef.h 1 KB H 文件 2014/2/25 0:02:14 2018/10/23 20:03:39 2018/10/23 20:03:39 1
15 #pragma once
17 #pragma pack(1)
18 // 跨区数据
19 struct SAreaSwitchInfo 
20 {

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\LoginServer2\ClientState_Login.h 7 KB H 文件 2014/2/25 0:02:02 2018/10/23 20:03:38 2018/10/23 20:03:38 1
109 	// 处理用户登陆
110 	void HandleUserLogin(ibuffer & buffer);
112 	// 处理用户跨区登陆请求
113 	void HandleUserSwitchAreaLogin(ibuffer & buffer);
115 	// 处理数据库请求返回

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\LoginServer2\ClientState_AreaSwitch.h 4 KB H 文件 2014/2/25 0:01:59 2018/10/23 20:03:38 2018/10/23 20:03:38 6
67 	// 默认构造被禁止
68 	ClientState_AreaSwitch(){}
70 	// 处理用户跨区登陆请求(在通行证库中查询)
71 	void HandleUserSwitchAreaQueryUserInfo(DWORD dwUserID, DWORD dwPDBID);
71 	void HandleUserSwitchAreaQueryUserInfo(DWORD dwUserID, DWORD dwPDBID);
73 	// 处理用户跨区登陆请求 数据库返回
74 	void HandleDBResult_SwitchAreaQueryUserInfo(DBREQ_RESULT_QUERYUSERLOGIN * result,DWORD dwResultLen);
74 	void HandleDBResult_SwitchAreaQueryUserInfo(DBREQ_RESULT_QUERYUSERLOGIN * result,DWORD dwResultLen);
77 	// 处理用户跨区选角色请求
78 	void HandleUserSwitchAreaQueryActorInfo(DWORD dwPDBID);
78 	void HandleUserSwitchAreaQueryActorInfo(DWORD dwPDBID);
80 	// 处理用户跨区选角色请求 数据库返回
81 	void HandleDBResult_SwitchAreaQueryActorInfo(DBREQ_RESULT_QUERYACTORLOGIN * result,DWORD dwResultLen);
81 	void HandleDBResult_SwitchAreaQueryActorInfo(DBREQ_RESULT_QUERYACTORLOGIN * result,DWORD dwResultLen);
84 	// 处理用户跨区登陆请求(在区库中查询)
85 	void HandleUserSwitchAreaQueryUserAreaInfo(LPCSTR pData, int nLen);
85 	void HandleUserSwitchAreaQueryUserAreaInfo(LPCSTR pData, int nLen);
87 	// 处理用户跨区登陆请求 数据库返回
88 	void HandleDBResult_SwitchAreaQueryUserAreaInfo(DBREQ_RESULT_QUERYUSERLOGINAREA * result,DWORD dwResultLen);
91 protected:

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\Include\IVoiceConnector.h 12 KB H 文件 2014/2/25 0:01:14 2018/10/23 20:03:36 2018/10/23 20:03:36 1
66 		virtual void OnVoiceEventExecute(WORD wEventID, LPSTR pszContext, size_t nLen) = 0;
67 	};
69 	/// 场景服 跨区语音服务器连接器扩展部件接口
70 	struct IVoicePart
71 	{

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\Include\IPassportConnector.h 11 KB H 文件 2014/2/25 0:01:13 2018/10/23 20:03:36 2018/10/23 20:03:36 1
66 		virtual void OnPassportEventExecute(WORD wEventID, LPSTR pszContext, size_t nLen) = 0;
67 	};
69 	/// 场景服 跨区通行证服务器连接器扩展部件接口
70 	struct IPassportPart
71 	{

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\Include\ILoginClient.h 11 KB H 文件 2014/2/25 0:01:12 2018/10/23 20:03:36 2018/10/23 20:03:36 1
66 	BYTE	 nGestureFlags;						 // 手势密码标识 0--未启用提醒 1--启用 2--未启用不提醒
67 	DWORD    dwGameWorldID;						 // 游戏世界ID
68 	LONGLONG stid;								 // 跨区时的STID
69 	DBREQ_RESULT_CHECKUSERLOCK::ACTOR_INFO		actorInfo;
70 	char	 szGesture[DBDEF_MAX_GESTURE_BUFF_LEN];

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\Include\IGlobalBridgeServer.h 2 KB H 文件 2014/2/25 0:01:11 2018/10/23 20:03:36 2018/10/23 20:03:36 2
5 ** 日  期:	2010-6-24
6 ** 版  本:	1.0
7 ** 描  述:	跨区桥服务器全局接口
8 ** 应  用:  	
9 	
23 #define __I_GlobalBridgeServer_H__
25 class ServerUser;
28 /// 跨区桥服务器全局对象
29 struct IGlobalBridgeServer
30 {

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\Include\IBridgeConnector.h 15 KB H 文件 2014/2/25 0:01:09 2018/10/23 20:03:36 2018/10/23 20:03:36 21
5 ** 日  期:      2010-6-24
6 ** 版  本:      1.0
7 ** 描  述:      跨区桥服务器连接器
8 ** 应  用:      
10 **************************** 修改记录 ******************************
38 {
40 	/**
41 	@name : 处理跨区桥服务器发过来的消息
42 	@brief:
43 	*/
45 	{
46 		/**
47 		@name         : 处理其他服务器通过跨区桥服务器转发的消息
48 		@param actionId  : 消息码
49 		@param bridgeHead  : 桥消息头
54 		virtual void HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len) = 0;
55 	};
57 	/// 处理处理跨区桥服务器执行事件
58 	struct IBridgeEventHandler
59 	{
66 		virtual void OnBridgeEventExecute(WORD wEventID, LPSTR pszContext, size_t nLen) = 0;
67 	};
69 	/// 场景服 跨区桥服务器连接器扩展部件接口
70 	struct IBridgePart
71 	{
124 		virtual DWORD GetServerCounts(void) = 0;
125 	};
127 	/// 跨区桥服务器连接器扩展部件接口
128 	struct IBridgeZonePart : public IBridgePart
129 	{
179 		// 取国家名称
180 		virtual const char * GetName(void) = 0;
181 		// 取跨区国家名称
182 		virtual const char * GetWorldCountryName(void) = 0;
183 		// 取数据库游戏世界名称
184 		virtual const char * GetDBWorldName(void) = 0;
185 	};
187 	/// 跨区桥服务器连接器扩展部件接口
188 	struct IBridgeSocialPart : public IBridgePart
189 	{
196 	//////////////////////////////////////////////////////////////////////////
198 	/**
199 	@name : 跨区桥服务器连接器
200 	@brief: 该模块负责维护和跨区桥服务器之间的连接,并转发各种命令
201 	*/
202 	struct IBridgeConnector
204 		virtual bool Create(DWORD dwGameWorldID,WORD wServerType,WORD wSubID,const char * szServerName,const char * szWorldName) = 0;
206 		/**
207 		@name         : 连接跨区桥服务器
208 		@brief        : 启动服务器时连接跨区桥服务器,以后如果连接断开,该模块内部会定时重试
209 		@param szCSIP : 跨区桥服务器IP 
210 		@param nCSPort: 跨区桥服务器端口
211 		@return       : 如果没有网络错误,则返回成功
212 		*/
213 		virtual bool Connect(const char * szCSIP,WORD nCSPort) = 0;
215 		/**
216 		@name                 : 向跨区桥服务器注册本地服务器信息
217 		@brief                : 如果本地服务器信息更改了,也调用这个接口进行Update 
218 		@param szName         : 服务器名称,必须小于32
223 		virtual bool RegisterServer(DWORD dwGameWorldID,WORD wServerType,WORD wSubID) = 0;
225 		/**
226 		@name         : 取得本地服务器在跨区桥服务器上的ID
227 		@brief        :
228 		*/
239 		virtual bool  IsConnected() = 0;
241 		/**
242 		@name                : 直接发送数据给跨区桥服务器
243 		@brief               : 
244 		@param pData         : 要发送的数据
289 		// 广播数据给指定列表游戏服务器 pServerArray:服务器ID列表,wServerNum:列表个数
290 		virtual void BroadcastDataToServer(DWORD * pServerArray,WORD wServerNum,const char * pData,DWORD dwLen) = 0;
292 		// 发服务器扩展信息消息 dwServerID:服务器ID 为0时广播给所有桥服务器连接器,跨区桥服务器连接器同步服务器扩展信息专用
293 		virtual bool SendExtDataToServer(DWORD dwServerID,DWORD dwMsgCode,DWORD dwUserData1=0,DWORD dwUserData2=0,DWORD dwUserData3=0,const char * pData=0,DWORD dwLen=0) = 0;
295 		////// 常用服务器列表相关接口 ////////////////////////////////////////////////////////////////////
402 	};
404 	/**
405 	@name            : 创建一个跨区桥服务器连接对象
406 	@brief           :
407 	@param pTimerAxis: 时间轴接口,主要用来定时重试
406 	@brief           :
407 	@param pTimerAxis: 时间轴接口,主要用来定时重试
408 	@return          : 返回跨区桥服务器连接对象指针
409 	*/
410 	// IBridgeConnector * CreateBridgeConnector(rkt::TimerAxis * pTimerAxis);
413 }; // namespace
415 //////////////////////////////////////////////////////////////////////////
417 // 取得跨区桥服务器连接器接口
418 BRIDGE_API Bridge::IBridgeConnector* GetGlobalBridgeConnector();
420 /// 静态库版本

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\Include\BridgeFun.h 3 KB H 文件 2014/2/25 0:01:09 2018/10/23 20:03:36 2018/10/23 20:03:36 1
5 ** 日  期:	2010-6-25
6 ** 版  本:	1.0
7 ** 描  述:	跨区桥服务器共用函数
8 ** 应  用:  	
10 **************************** 修改记录 ******************************

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\BridgeServer\ServerUser.h 4 KB H 文件 2014/2/25 0:00:12 2018/10/23 20:03:24 2018/10/23 20:03:24 2
5 ** 日  期:	2010-6-24
6 ** 版  本:	1.0
7 ** 描  述:	跨区桥服务器用户
8 ** 应  用:  	
10 **************************** 修改记录 ******************************
26 /////////////////////////////////////////////////////////////////////////////////////////////////////////////
27 /**
28 @name : 跨区桥服务器用户
29 @brief: 
30 */

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\BridgeServer\ServerList.h 2 KB H 文件 2014/2/25 0:00:12 2018/10/23 20:03:24 2018/10/23 20:03:24 2
5 ** 日  期:	2010-6-24
6 ** 版  本:	1.0
7 ** 描  述:	跨区桥服务器用户列表
8 ** 应  用:  	
10 **************************** 修改记录 ******************************
23 using namespace std;
27 /**
28 @name : 跨区桥服务器用户列表
29 @brief:
30 */

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\BridgeServer\GlobalBridgeServer.h 8 KB H 文件 2014/2/25 0:00:10 2018/10/23 20:03:24 2018/10/23 20:03:24 1
5 ** 日  期:	2010-6-24
6 ** 版  本:	1.0
7 ** 描  述:	跨区桥服务器
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\BridgeServer\BridgeServerDlg.h 4 KB H 文件 2014/2/25 0:00:09 2018/10/23 20:03:24 2018/10/23 20:03:24 3
5 ** 日  期:	2010-6-24
6 ** 版  本:	1.0
7 ** 描  述:	跨区桥服务器主程序界面
8 ** 应  用:  	
9 	
37 };
40 #define WM_MY_TRAY_NOTIFICATION			WM_USER+0				//任务栏图标message 
41 #define SERVICE_TRAYICON_TIP		"跨区桥服务器"			//任务栏图标Tip
43 // CBridgeServerDlg 对话框
44 class CBridgeServerDlg : public CResizingDialog
102 	CButton m_StartBt;				// 启动服务
103 	CButton m_StopBt;				// 停止服务
105 	GlobalBridgeServer m_BridgeServer;	//跨区桥服务器服务
106 	TraceListener*			mTrace;
108 	BOOL m_bStart;				//服务已启动

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\BridgeServer\BridgeServer.h 2 KB H 文件 2014/2/25 0:00:07 2018/10/23 20:03:24 2018/10/23 20:03:24 1
5 ** 日  期:	2010-6-24
6 ** 版  本:	1.0
7 ** 描  述:	跨区桥服务器主程序
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\BridgeConnector\BridgeZonePart.h 4 KB H 文件 2014/2/25 0:00:05 2018/10/23 20:03:23 2018/10/23 20:03:23 2
5 ** 日  期:	2010-6-28
6 ** 版  本:	1.0
7 ** 描  述:	场景服 跨区桥连接器扩展信息类
8 ** 应  用:  	
10 **************************** 修改记录 ******************************
30 //////////////////////////////////////////////////////////////////////////
32 /**
33 @name : 场景服 跨区桥连接器扩展信息类
34 @brief:
35 */

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\BridgeConnector\BridgeSocialPart.h 5 KB H 文件 2014/2/25 0:00:04 2018/10/23 20:03:23 2018/10/23 20:03:23 3
5 ** 日  期:	2010-6-28
6 ** 版  本:	1.0
7 ** 描  述:	社会服 跨区桥连接器扩展信息类
8 ** 应  用:  	
10 **************************** 修改记录 ******************************
22 using namespace rkt;
25 /**
26 @name : 社会服 跨区桥连接器扩展信息类
27 @brief:
28 */
76 		// 取国家名称
77 		virtual const char * GetName(void)			{ return m_Property.szName;			}
78 		// 取跨区国家名称
79 		virtual const char * GetWorldCountryName(void)	{ return m_Property.szWorldName;	}
80 		// 取跨所属数据库游戏世界名称

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\BridgeConnector\BridgeConnector.h 12 KB H 文件 2014/2/25 0:00:02 2018/10/23 20:03:23 2018/10/23 20:03:23 5
5 ** 日  期:	2009/8/25
6 ** 版  本:	1.0
7 ** 描  述:	跨区桥服务器连接器
8 ** 应  用:  	
10 **************************** 修改记录 ******************************
68 	BridgeConnector(TimerAxis * pTimerAxis);
70 	virtual ~BridgeConnector();
73 	///////////////////////// IBridgeMessageHandler 处理跨区桥服务器发过来的消息 /////////////////////////
74 	virtual void HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
76 	//////////////////////////////////////////////////////////////////////////
107 	virtual DWORD GetPublicWorldID();
109 	virtual void  Release();
110 	// 发给跨区桥服务器数据
111 	virtual void  SendData(const char * pData,DWORD dwLen);
113 	std::string ToString();
151 	// 广播数据给指定列表游戏服务器 pServerArray:服务器ID列表,wServerNum:列表个数
152 	virtual void BroadcastDataToServer(DWORD * pServerArray,WORD wServerNum,const char * pData,DWORD dwLen);
154 	// 发服务器扩展信息消息 dwServerID:服务器ID 为0时广播给所有桥服务器连接器,跨区桥服务器连接器同步服务器扩展信息专用
155 	virtual bool SendExtDataToServer(DWORD dwServerID,DWORD dwMsgCode,DWORD dwUserData1=0,DWORD dwUserData2=0,DWORD dwUserData3=0,const char * pData=0,DWORD dwLen=0);
157 	// 通过指定服务器发中转消息数据给目标游戏服务器 dwServerID:服务器ID 为0时广播给所有服务器,DWORD dwTransitServerID 中转到服务器ID
275 	// 清除所有服务器信息列表
276 	void ClearAllList(void);
278 	///////////////////////// 处理跨区桥服务器发过来的消息 /////////////////////////
279 	// 回应握手消息
280 	void OnMsgHandshakeResponse(unsigned long actionId,SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\BridgeConnector\BridgCommonPart.h 3 KB H 文件 2014/2/25 0:00:01 2018/10/23 20:03:23 2018/10/23 20:03:23 2
5 ** 日  期:	2010-6-28
6 ** 版  本:	1.0
7 ** 描  述:	通用 跨区桥连接器扩展信息类
8 ** 应  用:  	
10 **************************** 修改记录 ******************************
22 using namespace rkt;
25 /**
26 @name : 社会服 跨区桥连接器扩展信息类
27 @brief:
28 */

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\MatchClient\WarClient.h 3 KB H 文件 2014/2/25 8:34:48 2018/10/23 19:52:18 2018/10/23 19:52:18 1
5 ** 日  期:	2011-03-19
6 ** 版  本:	1.0
7 ** 描  述:	跨区战场客户端系统
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\MatchClient\War.h 4 KB H 文件 2014/2/25 8:34:48 2018/10/23 19:52:18 2018/10/23 19:52:18 1
5 ** 日  期:	2011-03-19
6 ** 版  本:	1.0
7 ** 描  述:	跨区战场客户端系统基类
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\MatchClient\StrikeClient.h 9 KB H 文件 2014/2/25 8:34:47 2018/10/23 19:52:18 2018/10/23 19:52:18 1
5 ** 日  期:	2010-10-29
6 ** 版  本:	1.0
7 ** 描  述:	跨区竞技客户端系统
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\MatchClient\MatchClient.h 24 KB H 文件 2014/2/25 8:34:44 2018/10/23 19:52:18 2018/10/23 19:52:18 10
311 	*/
312 	virtual int GetStrikeSkillAngryValue(DWORD dwSkillID, DWORD dwIndex);
314 	/** 创建跨区助手部件
315 	*/
316 	virtual IEctypeAssistPart* CreateEctypeAssistPart();
323 	*/
324 	virtual IStrikeMatch* GetStrikeMatch();
326 	/** 取得跨区竞技系统接口
327 	*/
328 	virtual IStrikeClient* GetStrikeClient();
327 	*/
328 	virtual IStrikeClient* GetStrikeClient();
330 	/** 取得跨区战场客户端系统接口定义
331 	*/
332 	virtual IWarClient* GetWarClient();
331 	*/
332 	virtual IWarClient* GetWarClient();
334 	/** 取得跨区战场客户端系统接口定义
335 	*/
336 	virtual IDummyClient* GetDummyClient();
545 	//  副本难度标识定义
546 	LPCSTR GetMatchFuBenDifficultyName(DWORD dwFlag);
548 	// 取得跨区副本助手
549 	CEctypeAssist& GetCEctypeAssistInstance();
550 	// 取得跨服竞技撮合系统接口
550 	// 取得跨服竞技撮合系统接口
551 	CStrikeMatch& GetStrikeMatchInstance();
552 	// 取得跨区竞技系统接口
553 	CStrikeClient& GetStrikeClientInstance();
553 	CStrikeClient& GetStrikeClientInstance();
554 	// 取得跨区战场客户端系统接口定义
555 	CWarClient& GetWarClientInstance();
556 	// 取得挑战假人系统客户端系统接口定义
635 	// 正在撮合队伍成员信息
636 	SMatchTeamMemberInfo m_TeamMemberList[TEAM_MEMBER_MAXCOUNT+1];
638 	// 跨区副本助手
639 	CEctypeAssist m_EctypeAssist;
640 	// 服竞技撮合系统客户端
640 	// 服竞技撮合系统客户端
641 	CStrikeMatch m_StrikeMatch;
642 	// 跨区竞技客户端系统
643 	CStrikeClient m_StrikeClient;
643 	CStrikeClient m_StrikeClient;
644 	// 跨区战场客户端系统
645 	CWarClient m_WarClient;
646 	// 挑战假人系统客户端系统

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\MatchClient\EctypeAssistPart.h 3 KB H 文件 2014/2/25 8:34:42 2018/10/23 19:52:17 2018/10/23 19:52:17 2
5 ** 日  期:	2010-7-15
6 ** 版  本:	1.0
7 ** 描  述:	跨区副本助手部件
8 ** 应  用:  	
9 ********************************************************************/
89 	// 副本现场信息
90 	SKqEctypePartContext m_Context;			
92 	// 跨区副本状态
93 	BYTE m_nState;
95 	// 玩家挑战系统个人数据

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\MatchClient\EctypeAssist.h 1 KB H 文件 2014/2/25 8:34:42 2018/10/23 19:52:17 2018/10/23 19:52:17 1
5 ** 日  期:	2010-7-15
6 ** 版  本:	1.0
7 ** 描  述:	跨区副本助手
8 ** 应  用:  	
9 ********************************************************************/

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\MatchClient\CountryWar.h 5 KB H 文件 2014/2/25 8:34:41 2018/10/23 19:52:17 2018/10/23 19:52:17 1
5 ** 日  期:	2011-03-31
6 ** 版  本:	1.0
7 ** 描  述:	跨区国战客户端系统
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\Include\SwitchAreaForm.h 2 KB H 文件 2014/2/25 8:33:45 2018/10/23 19:51:56 2018/10/23 19:51:56 1
5 ** 日  期:	2010-07-02
6 ** 版  本:	1.0
7 ** 描  述:	用于跨区切换过渡界面，（暂时没有启用）
8 ** 应  用:  
9 ******************************************************************/

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\Include\ISchemeCenter.h 39 KB H 文件 2014/2/25 8:33:37 2018/10/23 19:51:53 2018/10/23 19:51:53 1
344 	bool			bForbidTank;							// 禁止其载具进入
345 	bool			bForbidBWM;								// 禁止双人坐骑进入
346 	bool			bForbidStarTrek;						// 不允许跨区传送
347 	int				nFlag;									// 标志位
348 	int				nPKMode;								// 自动切换PK模式

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\Include\IMatchClient.h 41 KB H 文件 2014/2/25 8:33:33 2018/10/23 19:51:51 2018/10/23 19:51:51 7
43 	// 释放对象
44 	virtual void Release(void) = NULL;
46 	/** 创建跨区助手部件
47 	*/
48 	virtual IEctypeAssistPart* CreateEctypeAssistPart() = NULL;
57 	*/
58 	virtual IStrikeMatch* GetStrikeMatch() = NULL;
60 	/** 取得跨区竞技系统接口
61 	*/
62 	virtual IStrikeClient* GetStrikeClient() = NULL;
61 	*/
62 	virtual IStrikeClient* GetStrikeClient() = NULL;
64 	/** 取得跨区战场客户端系统接口定义
65 	*/
66 	virtual IWarClient* GetWarClient() = NULL;
65 	*/
66 	virtual IWarClient* GetWarClient() = NULL;
68 	/** 取得跨区战场客户端系统接口定义
69 	*/
70 	virtual IDummyClient* GetDummyClient() = NULL;
441 	virtual IMatrixClient *GetMatrixClient() = NULL;
442 };
444 // 跨区部件
445 struct IEctypeAssistPart : public IEntityPart
446 {
876 	virtual const SCountryBorderWarBaseInfo* GetWarBaseExtInfo(void) = NULL;
877 };
880 // 跨区战场客户端系统接口定义
881 struct IWarClient
882 {
920 	virtual bool RequestWarResMapPoint() = NULL;
921 };
923 // 跨区战场客户端系统接口定义
924 struct IDummyClient
925 {

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\Include\ICountryClient.h 44 KB H 文件 2014/2/25 8:33:29 2018/10/23 19:51:50 2018/10/23 19:51:50 1
1578 	// 世界文明点数
1579 	virtual DWORD GetCivilDot(void) = 0;
1580 	// 跨区国家名称
1581 	virtual const char * GetWorldCountryName(void)	= 0;
1582 };

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\CountryClient\CountryClient.h 29 KB H 文件 2014/2/25 8:25:18 2018/10/23 19:51:04 2018/10/23 19:51:04 1
97 		// 世界文明点数
98 		virtual DWORD GetCivilDot(void)	{	return m_Property.dwCivilDot;	}
99 		// 取跨区国家名称
100 		virtual const char * GetWorldCountryName(void)	{ return m_Property.szCountryName;	}
101 	};

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\controller\GameForm.h 7 KB H 文件 2014/2/25 8:37:01 2018/10/23 19:50:53 2018/10/23 19:50:53 3
49 	int					m_isHideOtherActor; // 用于记录小退游戏前是否隐藏了其他角色
50 	bool                m_bTryToExit;		// 尝试退出游戏
52 	SMsgLoginServer_AreaSwitchRes m_switchAreaBuf;	// 跨区数据
53 	bool				m_bSwitchArea;				// 是否开始跨区
54 	int					m_nSwitchGatewayNum;		// 切换网关次数
55 	//bool				m_needCheckFps;
185 	bool isWantsSelectNPC(const POINT& pt) const;
186 	virtual void OnExecute(WORD wEventID, BYTE bSrcType, DWORD dwSrcID, LPCSTR pszContext, int nLen);
188 	// 重新连跨区网关
189 	virtual void ConnectNewAreaGateway();
191 	// 重新登陆新区

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\controller\FormManager.h 13 KB H 文件 2014/2/25 8:37:00 2018/10/23 19:50:53 2018/10/23 19:50:53 1
32 	unLockForm, // 帐号被锁
33 	defaltForm,  //默认模态
34 	swtichAreaForm, // 跨区状态
35 	gestureForm,	// 手势密码
36 };

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\commprotocol\commprotocol.h 70 KB H 文件 2014/2/25 11:36:54 2018/10/23 19:49:25 2018/10/23 19:49:25 5
836   int unpack(ORM::COrmSerializer *pOrmSerializer);
838 };
839 // 跨区现场
840 struct TEctypePartContextData
841 {
874   int unpack(ORM::COrmSerializer *pOrmSerializer);
876 };
877 // 跨区副本现场（私有）
878 struct TEctypeAssistPartPrivateContext
879 {
878 struct TEctypeAssistPartPrivateContext
879 {
880 	BYTE nState;   //跨区副本状态
881 	TEctypePartContextData stEctypePartData;   //跨区现场
882 	TEctypeDummyDBInfo stEctypeDummyDBInfo;   //玩家挑战系统个人数据
883   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
1236 	TMiscPartPrivateContext stMiscPart;   //人物公用混合部件
1237 	TCardCollectPartPrivateContext stCardCollectPart;   //卡片收集部件
1238 	TEctypeAssistPartPrivateContext stEctypeAssistPart;   //跨区副本部件
1239 	TPKModePartPrivateContext stPKModePart;   //PK模式部件
1240 	TTitlePartPrivateContext stTitlePart;   //称号部件

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\OssLogDef.h 27 KB H 文件 2014/2/25 11:36:50 2018/10/23 19:49:34 2018/10/23 19:49:34 1
506 	// 竞技场抽奖
507 	OssResAdd_StrikeDropPrize,
509 	// 跨区国战
510 	OssResAdd_CountryWar,	
512 	// 运商完成时统计银票

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\OrderDef.h 20 KB H 文件 2014/2/25 11:36:49 2018/10/23 19:49:33 2018/10/23 19:49:33 35
58 	AchievePoint_Person_key,						//add by lgf 10.08.25 成就点数排行榜
59 	Contribute_Person_key,							// add by Yuxb 月累政绩考量值 [2010-10-08:16:30]
60     KQArena_Level_Person_Key,						// 跨区竞技场等级排行
61 	KQArean_Times_Person_Key,						// 跨区竞技场参与周次数排行
62 	KQArean_Score_Person_Key,						// 跨区竞技场积分排行
63 	KQArean_Kill_Person_Key,						// 跨区竞技场杀人排行
64 	WuXinLianZhu_Link_Person_Key,					// (前几个已被预订，所用20)五子连珠次数排行
64 	WuXinLianZhu_Link_Person_Key,					// (前几个已被预订，所用20)五子连珠次数排行
65 	KQArean_MonthScore_Person_Key,					// 跨区竞技场本月积分排行
66 	KQArean_WeekScore_Person_Key,					// 跨区竞技场本周积分排行
67 	KQArean_StrikeMoney_Person_Key,					// 跨区竞技场徽章排行
68 	Flower_Person_Key,								// 鲜花榜
69 	ContributeWeek_Person_Key,						// 个人政绩周排名
108 	AchievePoint_Person_WS_key,						// add by lgf 10.08.25 成就点数排行榜
109 	Contribute_Person_WS_key,						// add by Yuxb 月累政绩考量值 [2010-10-08:16:30]
110 	KQArena_Level_Person_WS_Key,					// 跨区竞技场等级排行
111 	KQArean_Times_Person_WS_Key,					// 跨区竞技场参与周次数排行	
112 	KQArean_Score_Person_WS_Key,					// 跨区竞技场积分排行
113 	KQArean_Kill_Person_WS_Key,						// 跨区竞技场杀人排行
114 	KQArean_MonthScore_Person_WS_Key=121,			// 跨区竞技场本月积分排行
115 	KQArean_WeekScore_Person_WS_Key,				// 跨区竞技场本周积分排行
116 	KQArean_StrikeMoney_Person_WS_Key,				// 跨区竞技场徽章排行
117 	WingLevel_Person_WS_Key=128,					// 翅膀成长度排行榜
118 	NewPower_Person_WS_Key=142,                     // 新战力值排行
137 	AchievePoint_Person_TS_key,						// add by lgf 10.08.25 成就点数排行榜
138 	Contribute_Person_TS_key,						// add by Yuxb 月累政绩考量值 [2010-10-08:16:30]
139 	KQArena_Level_Person_TS_Key,					// 跨区竞技场等级排行
140 	KQArean_Times_Person_TS_Key,					// 跨区竞技场参与周次数排行
141 	KQArean_Score_Person_TS_Key,					// 跨区竞技场积分排行
142 	KQArean_Kill_Person_TS_Key,						// 跨区竞技场杀人排行
143 	KQArean_MonthScore_Person_TS_Key=221,			// 跨区竞技场本月积分排行
144 	KQArean_WeekScore_Person_TS_Key,				// 跨区竞技场本周积分排行
145 	KQArean_StrikeMoney_Person_TS_Key,				// 跨区竞技场徽章排行
146 	WingLevel_Person_TS_Key=228,					// 翅膀成长度排行榜
147 	NewPower_Person_TS_Key=242,	                    // 新战力值排行
166 	AchievePoint_Person_YM_key,						// add by lgf 10.08.25 成就点数排行榜
167 	Contribute_Person_YM_key,						// add by Yuxb 月累政绩考量值 [2010-10-08:16:30]
168 	KQArena_Level_Person_YM_Key,					// 跨区竞技场等级排行
169 	KQArean_Times_Person_YM_Key,					// 跨区竞技场参与周次数排行
170 	KQArean_Score_Person_YM_Key,					// 跨区竞技场积分排行
171 	KQArean_Kill_Person_YM_Key,						// 跨区竞技场杀人排行
172 	KQArean_MonthScore_Person_YM_Key=321,			// 跨区竞技场本月积分排行
173 	KQArean_WeekScore_Person_YM_Key,				// 跨区竞技场本周积分排行
174 	KQArean_StrikeMoney_Person_YM_Key,				// 跨区竞技场徽章排行
175 	WingLevel_Person_YM_Key=328,					// 翅膀成长度排行榜
176 	NewPower_Person_YM_Key=342,                     // 新战力值排行
195 	AchievePoint_Person_JX_key,						// add by lgf 10.08.25 成就点数排行榜
196 	Contribute_Person_JX_key,						// add by Yuxb 月累政绩考量值 [2010-10-08:16:30]
197 	KQArena_Level_Person_JX_Key,					// 跨区竞技场等级排行
198 	KQArean_Times_Person_JX_Key,					// 跨区竞技场参与周次数排行
199 	KQArean_Score_Person_JX_Key,					// 跨区竞技场积分排行
200 	KQArean_Kill_Person_JX_Key,						// 跨区竞技场杀人排行
201 	KQArean_MonthScore_Person_JX_Key=421,			// 跨区竞技场本月积分排行
202 	KQArean_WeekScore_Person_JX_Key,				// 跨区竞技场本周积分排行
203 	KQArean_StrikeMoney_Person_JX_Key,				// 跨区竞技场徽章排行
204 	WingLevel_Person_JX_Key=428,					// 翅膀成长度排行榜
205 	NewPower_Person_JX_Key=442,                     // 新战力值排行

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\ILoginServerProtocol.h 35 KB H 文件 2014/2/25 11:36:47 2018/10/23 19:49:32 2018/10/23 19:49:32 4
325 			DWORD	 nEnterMapID;			  // 准备进入地图
326 			POINT	 ptEnterTile;			  // 准备进入位置		
328 			LONGLONG stid;					  // 跨区时的STID
329 			int      nPartnerID;			  // 游戏合作商ID，直通 add by lgf 11.04.01
330 			BYTE     nBlackFlags;             // 1--正常，2--异地，3--异地+黑名单
484 		};
486 		/**
487 		@name         : 跨区切换请求
488 		@brief        : 
489 		*/
498 		};
500 		/**
501 		@name         : 响应跨区切换请求
502 		@brief        : 
503 		*/
515 		};
517 		/**
518 		@name         : 跨区登陆
519 		@brief        : 
520 		*/

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\IGameDatabaseDef.h 463 KB H 文件 2014/2/25 11:36:46 2018/10/23 19:49:32 2018/10/23 19:49:32 13
96 2010.07.14: 读取推广人详细信息
97 2010.07.16: 读取推广人分成声望
98 2010.07.31: 增加跨区副本部件数据
99 2010.08.21: 增加游戏世界文明数据
100 2010.09.08: 官职信息增加救人次数
208 #	define	DBDEF_MAX_OFFEXP_LEN			32			// 离线经验数据 2009.07.20  
209 #	define	DBDEF_MAX_COUNTRY_LEN			96			// 国家数据			64 --> 96
210 #	define	DBDEF_MAX_KQE_LEN				64			// 跨区副本部件数据
211 	/***************************  安全服务相关  *********************************/
212 #	define	DBDEF_MAX_SECURITY_PASSWORD_LEN		41		// 最大安全密码长度
1954         BYTE	 byOffExpData[DBDEF_MAX_OFFEXP_LEN];	// 离线经验	2009.7.16
1955 		BYTE	 byCountryData[DBDEF_MAX_COUNTRY_LEN];	// 国家数据	2011.10.31	64 --> 96
1956 		BYTE	 byKqEctypeData[DBDEF_MAX_KQE_LEN];		// 跨区副本数据
1957 		BYTE	 byStrikeData[DBDEF_STRIKE_BUFF_LEN];	// 跨服竞技数据
1959 		BYTE	 nWareLevel;								// 仓库等级
2066 		BYTE	 byCountryData[DBDEF_MAX_COUNTRY_LEN];		// 国家数据	2011.10.31	64 --> 96
2067 		BYTE	 byFormData[DBDEF_MAX_FORMDATA_LEN];		// 外观数据	
2068 		BYTE	 byKqEctypeData[DBDEF_MAX_KQE_LEN];			// 跨区副本数据
2069 		BYTE	 byStrikeData[DBDEF_STRIKE_BUFF_LEN];		// 跨服竞技数据
2071 		BYTE	 nCurLingHun;								// 当前灵魂态（命=0;地=1;天=2）
2518 		DWORD	dwUserID;								/// 帐号ID
2519 		DWORD   dwActorID;								/// 角色ID
2520 		BYTE    byOnOffLine;							/// 上下线标志:0:跨进程切换 1:上线(也包括因跨区切换而上线) 2:下线(也包括因跨区切换而下线)
2521 		BYTE	nCheckExistPDBID;						/// 是否需要检查PDBID是否存在(0:不需要 1:需要)
2523 		DBREQ_PARAM_ACTORFINISH(void)
2546 		DWORD	dwUserID;								/// 帐号ID
2547 		DWORD   dwActorID;								/// 角色ID
2548 		BYTE    OnOffLine;								/// 上下线标志,0:跨进程切换 1:上线(也包括因跨区切换而上线) 2:下线(也包括因跨区切换而下线) 3:因创建人物失败而取消永久锁
2549 		int		nLockFlag;								/// 锁标志
2550 		bool	bOnlySetLock;							/// 仅加锁（为0是采用下面的规则，为1时如果以前没有锁，则只加一把永久锁，如果有锁就直接返回，
7264 		int   nOnlineAvgNum;		//本区一分钟内平均在线人数
7265 		int   nOnlineMinNum;		//本区一分钟内最小在线人数
7266 		int   nOnlineAreaMaxNum;    //跨区一分钟内最高在线人数 
7267 		int   nOnlineAreaAvgNum;    //跨区一分钟内平均在线人数 
7268 		int   nOnlineAreaMinNum;    //跨区一分钟内最小在线人数 
7271 		GAMEDB_PARAM_LOG_ONLINENUM_NEW(void)
7272 		{
10697 		{
10698 			DWORD   dwWorldID;								//游戏世界ID
10699 			DWORD   dwNewWorldID;							//新游戏世界ID（漂移可以跨区移民）
10700 			DWORD   dwUserID;								//账号ID
10701 			DWORD   dwActorID;								//角色ID
10740 		{
10741 			DWORD   dwWorldID;							//游戏世界ID
10742 			DWORD   dwNewWorldID;						//新游戏世界ID（漂移可以跨区移民）
10743 			DWORD   dwUserID;							//账号ID
10744 			DWORD   dwActorID;							//角色ID

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\ICountryDataBaseDef.h 88 KB H 文件 2014/2/25 11:36:45 2018/10/23 19:49:32 2018/10/23 19:49:32 2
147 		DWORD dwFlag;									// 国家基础数据标识 EMCountryBaseDBFlag
148 		char szLocalName[DBDEF_COUNTRY_NAME_MAXSIZE];	// 本区国家短名称
149 		char szWorldName[DBDEF_COUNTRY_NAME_MAXSIZE];	// 跨区国家名称
150 		char szDBWorldName[DBDEF_COUNTRY_NAME_MAXSIZE];	// 游戏世界区名
152 		DB_Table_CountryBase(void)
505 		DWORD dwFlag;									// 国家基础数据标识 EMCountryBaseDBFlag
506 		char szLocalName[DBDEF_COUNTRY_NAME_MAXSIZE];	// 本区国家短名称
507 		char szWorldName[DBDEF_COUNTRY_NAME_MAXSIZE];	// 跨区国家名称
509 		DB_Param_Add_Country(void)
510 		{

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\EctypeAssistDef.h 10 KB H 文件 2014/2/25 11:36:44 2018/10/23 19:49:31 2018/10/23 19:49:31 6
5 ** 日  期:	2010-7-15
6 ** 版  本:	1.0
7 ** 描  述:	跨区副本助手定义文件
8 ** 应  用:  	
9 ********************************************************************/
127 	}
128 };
130 // 跨区副本成员结构
131 struct SKqEctypeContext
132 {
145 	}
146 };
148 // 跨区副本成员结构
149 struct SKqEctypeMember
150 {
164 	}
165 };
167 // 玩家跨区副本结构
168 struct SKqEctypePartContext
169 {
182 	}
183 };
185 // 玩家跨区副本位置信息
186 struct SKqEctypePartLocInfo
187 {
231 //=====================================消息定义==================================
232 // 上层消息码为 MSG_MATCH_KQE
234 // 创建一个跨区副本
235 #define MSG_KQE_CREATEECTYPE		1
236 // 方向：公共区社会服 - > 公共区场景服

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DWarDef.h 36 KB H 文件 2014/2/25 11:36:43 2018/10/23 19:49:31 2018/10/23 19:49:31 1
591 	};
592 };
595 // 跨区国战基本信息扩展数据结构 客户端
596 struct SCountryWarBaseInfo
597 {

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DVoice.h 76 KB H 文件 2014/2/25 11:36:43 2018/10/23 19:49:31 2018/10/23 19:49:31 3
633 };
635 ///// 公用数据结构定义 //////////////////////////////////////////////
637 // 通过跨区语音服务器中转消息必须加入此消息体
638 struct SMsgVoiceHead
639 {
1374 	ENUM_MSG_VOICE_CHATINVITE,						// 私聊邀请
1375 	ENUM_MSG_VOICE_ADDVOICEBLUEDIAMOND,				// 添加蓝钻
1377 	ENUM_MSG_VOICE_BRIDGEDATA,						// 发送消息到其他服务器，可跨区
1378 	ENUM_MSG_VOICE_CHECK,							// 检测消息，用来跨服检测网络连接状态
1379 	ENUM_MSG_VOICE_CHECKBACK,						// 检测消息回复，用来跨服检测网络连接状态
2505 };
2508 //////////////////////////////////////////////////////////////////////////
2509 // 发送消息到其他服务器，可跨区
2510 #define MSG_VOICE_BRIDGEDATA ENUM_MSG_VOICE_BRIDGEDATA
2511 struct SMsgVoiceBridgeData

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DStarTrekMsg.h 3 KB H 文件 2014/2/25 11:36:40 2018/10/23 19:49:30 2018/10/23 19:49:30 1
5 ** 日  期:	2010/6/29 17:24
6 ** 版  本:	1.0
7 ** 描  述:	跨区消息定义头文件
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DStarTrekDef.h 8 KB H 文件 2014/2/25 11:36:40 2018/10/23 19:49:30 2018/10/23 19:49:30 6
5 ** 日  期:	2010/6/29 17:24
6 ** 版  本:	1.0
7 ** 描  述:	跨区数据宏定义头文件
8 ** 应  用:  	
9 	
22 enum
23 {
24 	tStarTrek_Type_GoEctype = 0,			// 跨区下副本
25 	tStarTrek_Type_GoNormal = 0,			// 返回本区
26 };
43 	tStarTrek_Result_Succeed = 1,			// 成功
44 	tStarTrek_Result_ParameterError,		// 参数错误
45 	tStarTrek_Result_NoSupport,				// 不支持跨区
46 	tStarTrek_Result_DisconBridge,			// 与桥服务器断开
47 	tStarTrek_Result_StateError,			// 人物控制状态错误
58 	tStarTrek_Result_InGameWorldUserLock,	// 迁入游戏世界已有角色
59 	tStarTrek_Result_ExecuteSPFail,			// 调用存储过程失败
60 	tStarTrek_Result_CloseStarTreak,		// 关闭了跨区传送
61 	tStarTrek_Result_PersonNoExist,			// 回迁时，角色不存在
62 	tStarTrek_Result_OverMemory,			// 内存已达上限
62 	tStarTrek_Result_OverMemory,			// 内存已达上限
63 	tStarTrek_Result_NoMakeSTID,			// 无法生成STID
64 	tStarTrek_Result_STing,					// 正在跨区状态
65 	tStarTrek_Result_CannotForceExitTank,	// 无法拉下载具
66 	tStarTrek_Result_PublicDBPersonExist,	// 公共区游戏库内存在此角色
101 typedef LONGLONG	STID;
103 ///////////////////////////////////////////////////////////////////
104 // 跨区传送的上下文
105 struct SStarTrekContext
106 {	

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DPassportModule.h 14 KB H 文件 2014/2/25 11:36:38 2018/10/23 19:49:29 2018/10/23 19:49:29 1
73 };
76 ///// 公用数据结构定义 //////////////////////////////////////////////
78 // 通过跨区通行证服务器中转消息必须加入此消息体
79 struct SMsgPassportHead
80 {

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DMatchModule.h 131 KB H 文件 2014/2/25 11:36:38 2018/10/23 19:49:28 2018/10/23 19:49:28 17
2260 	ENUM_MSG_MATCH_INVALID = 0,
2261 	ENUM_MSG_MATCH_DATE_SUBMSG,			// 服务器撮合信息子消息
2262 	ENUM_MSG_MATCH_ECTYPEASSIST,		// 跨区副本保姆子消息
2263 	ENUM_MSG_MATCH_BRIDGE_DATA,			// 跨区中转消息
2264 	ENUM_MSG_MATCH_DATE_CSMSG,			// 服务器竞技撮合信息子消息
2265 	ENUM_MSG_MATCH_DATE_PKMSG,			// 服务器竞技信息子消息
2340 	Match_SubMsg_RequestAcceptMatch,			// 发送确认组队撮合
2341 	Match_SubMsg_RequestTeamInfo,				// 请求撮合队伍信息
2342 	Match_SubMsg_RequestLookWorldEquip,			// 请求跨区查看玩家装备
2343 	Match_SubMsg_LookWorldEquipResult,			// 请求跨区查看玩家装备结果
2344 	Match_SubMsg_RequestStateData,				// 请求初始化状态数据
2345 	Match_SubMsg_RequestTeamFubenInfo,			// 请求队员全部副本状态数据
2350 	Match_SubMsg_InviteJoinMatchTeam,			// 邀请加入撮合队伍
2351 	Match_SubMsg_AcceptInviteJoinMatch,			// 同意被邀请加入撮合队伍
2352 	Match_SubMsg_WorldOnlineUserAdd,			// 跨区用户上线
2353 	Match_SubMsg_WorldOnlineUserRemove,			// 跨区用户下线
2354 	Match_SubMsg_RequestSetMemberMinCount,		// 请求设定最少进入副本人数
2355 	Match_SubMsg_RequestOwnerSetMemberMinCount,	// 同队玩家请求房主设定最少进入副本人数
2511 //};
2513 //////////////////////////////////////////////////////////////////////////
2514 // 跨区副本助手子消息
2515 #define MSG_MATCH_KQE					ENUM_MSG_MATCH_ECTYPEASSIST
2515 #define MSG_MATCH_KQE					ENUM_MSG_MATCH_ECTYPEASSIST
2517 // 跨区副本保姆子消息数据结构
2518 // 与 SMsgMatchDataSubMsg 一样
2518 // 与 SMsgMatchDataSubMsg 一样
2520 // 跨区副本助手子消息代码定义
2521 enum EMMatchMatronSubMsgCode
2522 {
2526 };
2529 //////////////////////////////////////////////////////////////////////////
2530 // 跨区中转消息
2531 #define MSG_MATCH_BRIDGE_DATA					ENUM_MSG_MATCH_BRIDGE_DATA
2531 #define MSG_MATCH_BRIDGE_DATA					ENUM_MSG_MATCH_BRIDGE_DATA
2533 // 跨区中转消息数据结构
2534 struct SMsgMatchBridgeData
2535 {
3152 	Match_WarMsg_RequestSetNotice,		// 国王请求设置公告信息
3153 	Match_WarMsg_SendWorldWarResult,	// 更新国战场战斗结果信息到社会服
3154 	Match_WarMsg_RequestCountryInfo,	// 请求更新跨区共享国家信息
3155 	Match_WarMsg_RequestAddHistory,		// 请求加入国家历史信息
3156 	Match_WarMsg_RequestAddClanGold,	// 请求增加帮会资金
3162 	Match_WarMsg_CountryWarAutoJoin,	// 客户端显示并可直接加入国战
3163 	Match_WarMsg_RequestOutRelive,		// 请求离开复活点
3164 	Match_WarMsg_RequestKqWarCall,		// 国王发起跨区国战召集
3165 	Match_WarMsg_CountryWarResultNotice,// 国战信息结果通知
3166 	Match_WarMsg_SendCountryWarScore,	// 更新国战场积分结果信息到社会服
3205 	Match_WarMsg_Max
3206 };
3209 // Match_WarMsg_UpdateCountryBase,		// 更新跨区国战基本信息
3212 // 更新跨区国战基本信息消息数据结构
3213 struct SMsgWarUpdateBase_SC
3214 {
3351 	}
3352 };
3355 // 跨区国战 国王 发起召集原区国民参与跨区国战
3356 struct SMsgMatchRequestRequestKqWarCall_SS
3357 {

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DMatchEvent.h 13 KB H 文件 2014/2/25 11:36:37 2018/10/23 19:49:28 2018/10/23 19:49:28 5
5 ** 日  期:	2011-03-03
6 ** 版  本:	1.0
7 ** 描  述:	跨区系统模块事件公共定义
8 ** 应  用:  	
9 	
24 // 公共定义
27 /***************************************************************/
28 ////////////////////// 跨区系统事件码  //////////////////////////
29 // 上层的事件码必定是 SOURCE_TYPE_MATCH
30 /***************************************************************/
29 // 上层的事件码必定是 SOURCE_TYPE_MATCH
30 /***************************************************************/
31 // 跨区系统事件码 EVENT_MATCH + 事件码名
34 ///////////////////////////////////////////////////////////////////
35 // 事件码枚举定义: ENUM + 事件码名
36 enum EMEventMatch
37 {
38 	ENUM_EVENT_MATCH_ROOTID = 1,				// 跨区系统根事件码
39 	ENUM_EVENT_MATCH_ADDUSER,					// 跨服玩家上线
40 	ENUM_EVENT_MATCH_REMOVEUSER,				// 跨服玩家下线
65 	ENUM_EVENT_MATCH_PLAYER_EXIT,				// 玩家退出竞技事件 											
66 	ENUM_EVENT_MATCH_STRIKE_RELEASE,			// 竞技场关闭事件										
68 	ENUM_EVENT_MATCH_MAXID,						// 跨区系统最大事件码
69 };
72 /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DManagerModule.h 108 KB H 文件 2014/2/25 11:36:37 2018/10/23 19:49:28 2018/10/23 19:49:28 1
155 	MSG_MG_ENDPOINT_VERIFY,				// 验证码服务器	［简称：Y］
156 	MSG_MG_ENDPOINT_TRACKER,			// Tracker服务器［简称：T］
157 	MSG_MG_ENDPOINT_BRIDGE,				// 跨区桥服务器	［简称：B］
158 	MSG_MG_ENDPOINT_DBHTTP,				// DB应用服务器	［简称：D］
159 	MSG_MG_ENDPOINT_PASSPORT,			// 通行证服务器	［简称：P］	

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DGlobalMisc.h 50 KB H 文件 2014/2/25 11:36:36 2018/10/23 19:49:28 2018/10/23 19:49:28 3
781 	EKickoutClient_Reason_StopZoneSvr,				// 停止场景服
782 	EKickoutClient_Reason_GMKickout,				// GM强制踢人
783 	EKickoutClient_Reason_StarTrekFailed,			// 跨区切换失败
784 	EKickoutClient_Reason_SecretiveError,			// 诡异的错误
785 	EKickoutClient_Reason_KickoutSelf,				// 自己踢掉自己
908 	ECONNECT_STATE_SHOOT,						    // 切换进程状态
909 	ECONNECT_STATE_REBUILD,							// 重建态
910 	ECONNECT_STATE_TREK,							// 跨区切换态
911 	ECONNECT_STATE_TREKLOGIN,						// 跨区登陆态
912 	ECONNECT_STATE_SAVEDATA,						// 保存数据状态	
913 	ECONNECT_STATE_RELEASE,						    // 释放状态, 一个玩家的连接最终会走到这个状态来释放全部资源

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DGlobalMessage.h 80 KB H 文件 2014/2/25 11:36:35 2018/10/23 19:49:27 2018/10/23 19:49:27 4
1968 };
1970 ///////////////////////////////////////////////////////////////////
1971 // 同步跨区副本部件身上的数据到客户端
1972 #define MSG_ACTION_KQE_SYNCH									135
1972 #define MSG_ACTION_KQE_SYNCH									135
1974 // 同步跨区副本部件状态到客户端
1975 #define MSG_ACTION_KQE_STATE									136
1977 /// 上下文：SKqEctypePartContext
1977 /// 上下文：SKqEctypePartContext
1979 //////////////////////////////////////////////////////////////////////////
1980 // 跨区查看玩家装备
1981 #define MSG_ACTION_WORLD_LOOKEQUIP								137
1983 struct SMsgActionWorldLookEquip_SC
2222 };
2224 ///////////////////////////////////////////////////////////////////
2225 // 同步跨区副本部件挑战假人数据到客户端
2226 #define MSG_ACTION_DUMMY_SYNCH									166
2228 // 使用法宝技能

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DGlobalGame.h 23 KB H 文件 2014/2/25 11:36:35 2018/10/23 19:49:27 2018/10/23 19:49:27 3
497 	MSG_ENDPOINT_VERIFY,						// 验证码服务器	［简称：Y］	
498 	MSG_ENDPOINT_TRACKER,						// Tracker服务器［简称：T］	
499 	MSG_ENDPOINT_BRIDGE,						// 跨区桥服务器	［简称：B］	
500 	MSG_ENDPOINT_DBHTTP,						// DB应用服务器	［简称：D］	
501 	MSG_ENDPOINT_PASSPORT,						// 通行证服务器	［简称：P］	
564 	MSG_MODULEID_STATUE,						// 雕塑系统	
565 	MSG_MODULEID_CASTLE,						// 帮会领地战	
566 	MSG_MODULEID_BRIDGE,						// 跨区桥服务器模块
567 	MSG_MODULEID_STARTREK,						// 跨区模块
568 	MSG_MODULEID_MATCH,							// 跨服组队撮合系统模块
569 	MSG_MODULEID_AUCTION,						// 竞拍模块

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DGlobalEvent.h 54 KB H 文件 2014/2/25 11:36:35 2018/10/23 19:49:27 2018/10/23 19:49:27 3
46 	SOURCE_TYPE_TRANSPORT,			// 传送事件
47 	SOURCE_TYPE_CASTLE,				// 领地事件
48 	SOURCE_TYPE_MATCH,				// 跨区事件
49 	SOURCE_TYPE_WING,				// 翅膀事件
50 	SOURCE_TYPE_MAX,
469 {
470 	LONGLONG	uidPerson;			// 哪个人
471 	int			nMode;				// 1:下线 2:跨进程切换 3:跨区切换
472 	int			nWaitTime;			// 还等待多少ms，过了后强制切换
473 	// 如果否决，请将原因填至此变量中，发事件模块好提示玩家
759 	LONGLONG		uidEntity;			// 实体uid
760 };
762 // 人物需要跨区传送
763 #define EVENT_PERSON_STARTREK									63
764 // 场景服（vote/execute）

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DEntityProp.h 45 KB H 文件 2014/2/25 11:36:34 2018/10/23 19:49:27 2018/10/23 19:49:27 2
93 	ENTITYPART_PERSON_SUIT,				// 套装部件
94 	ENTITYPART_PERSON_RESADJUST,		// 资源部件
95 	ENTITYPART_PERSON_ECTYPEASSIST,		// 跨区副本助手
96 	ENTITYPART_PERSON_STRIKE,			// 跨区竞技部件
97 	ENTITYPART_PERSON_ROLEVENDED,		// 角色出售部件
98 	ENTITYPART_PERSON_CARDCOLLECT,		// 卡片收集部件

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DEntityBuild.h 24 KB H 文件 2014/2/25 11:36:33 2018/10/23 19:49:27 2018/10/23 19:49:27 2
330 /// 切换场景国家部件数据最长长度
331 #define TRANSMAP_MAX_CountryData_LEN		96  // 64 ---> 96 2011.11.02
333 /// 切换场景跨区副本数据最长长度
334 #define TRANSMAP_MAX_KQE_LEN				64
336 // 跨服竞技PK数据
425 	BYTE				byOffExpData[TRANSMAP_MAX_OFFEXPDATA_LEN];		// 离线经验数据
426 	BYTE				byCountryData[TRANSMAP_MAX_CountryData_LEN];	// 国战部件数据 
427 	BYTE				byKqEctypeData[TRANSMAP_MAX_KQE_LEN];			// 跨区副本数据
428 	BYTE				byStrikeData[DBDEF_STRIKE_BUFF_LEN];			// 跨服竞技数据
429 	BYTE				byNerveData[TRANSMAP_NERVE_BUFF_LEN];			// 经脉数据

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DCountryModule.h 165 KB H 文件 2014/2/25 11:36:33 2018/10/23 19:49:27 2018/10/23 19:49:27 8
382 	DWORD dwFlag;									// 国家基础数据标识 EMCountryBaseDBFlag
383 	char szLocalName[COUNTRY_NAME_MAXSIZE];			// 本区国家短名称
384 	char szWorldName[COUNTRY_NAME_MAXSIZE];			// 跨区国家名称
385 	char szDBWorldName[COUNTRY_NAME_MAXSIZE];		// 所属数据库游戏世界名称
387 	SCountryBaseInfo(void)
2435 	ENUM_MSG_COUNTRY_WORLDWAR_REQUEST,				// 请求发国战记录信息
2436 	ENUM_MSG_COUNTRY_WORLDCOUNTRY_UPDATE,			// 更新共享国家信息
2437 	ENUM_MSG_COUNTRY_WORLDCOUNTRY_CALL,				// 跨区国战召集
2439 	// 其他
2440 	ENUM_MSG_COUNTRY_SEND_CLIENT_NOTICE,			// 社会服发送给客户端的公告消息
2805 	BYTE nTitleLen;						// 国家公告长度
2806 	BYTE nLocalNameLen;					// 本区国家短名称长度
2807 	BYTE nWorldNameLen;					// 跨区国家名称长度
2808 	BYTE nDBWorldNameLen;				// 所属数据库游戏世界名称长度
2810 	//char szName[COUNTRY_NAME_MAXSIZE];				// 国家名称
2811 	//char szTitle[COUNTRY_LONGSTR_MAXSIZE];			// 国家公告
2812 	//char szLocalName[COUNTRY_NAME_MAXSIZE];			// 本区国家短名称
2813 	//char szWorldName[COUNTRY_NAME_MAXSIZE];			// 跨区国家名称
2814 	//char szDBWorldName[COUNTRY_NAME_MAXSIZE];			// 所属数据库游戏世界名称
2816 	SMsgCountryBaseAnswerBuildServer_OS(void)
2855 	BYTE nTitleLen;						// 国家公告长度
2856 	BYTE nLocalNameLen;					// 本区国家短名称长度
2857 	BYTE nWorldNameLen;					// 跨区国家名称长度
2858 	BYTE nDBWorldNameLen;				// 所属数据库游戏世界名称长度
2860 	//char szName[COUNTRY_NAME_MAXSIZE];						// 国家名称
2861 	//char szTitle[COUNTRY_LONGSTR_MAXSIZE];					// 国家公告
2862 	//char szLocalName[COUNTRY_NAME_MAXSIZE];					// 本区国家短名称
2863 	//char szWorldName[COUNTRY_NAME_MAXSIZE];					// 跨区国家名称
2864 	//char szDBWorldName[COUNTRY_NAME_MAXSIZE];					// 所属数据库游戏世界名称
2866 	SMsgCountryBaseAnswerBuildClient_OC(void)
4368 	}
4369 };
4372 // 跨区国战 召集员消息定义
4373 #define MSG_COUNTRY_WORLDCOUNTRY_CALL					ENUM_MSG_COUNTRY_WORLDCOUNTRY_CALL
4373 #define MSG_COUNTRY_WORLDCOUNTRY_CALL					ENUM_MSG_COUNTRY_WORLDCOUNTRY_CALL
4375 // 跨区国战 召集员结构体
4376 struct SMsgCountryWorldCountryCall_S
4377 {

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DBridgeModule.h 19 KB H 文件 2014/2/25 11:36:31 2018/10/23 19:49:26 2018/10/23 19:49:26 6
5 ** 日  期:	2009/8/20
6 ** 版  本:	1.0
7 ** 描  述:	跨区桥服务器模块定义	
8 ** 应  用:  	
9 	
89 };
92 ///// 公用数据结构定义 //////////////////////////////////////////////
94 // 通过跨区桥服务器中转消息必须加入此消息体
95 struct SMsgBridgeHead
96 {
150 	DWORD dwFlag;						// 国家基础数据标识 EMCountryBaseDBFlag
151 	char szName[BRIDGE_NAME_MAXSIZE];	// 本区国家名称
152 	char szWorldName[BRIDGE_NAME_MAXSIZE];		// 跨区国家名称
153 	char szDBWorldName[BRIDGE_NAME_MAXSIZE];	// 所属数据库游戏世界名称
155 	SBridgeCountryProperty(void)
164 {
165 	ENUM_EVENT_BRIDGE_INVALID = 0,
166 	ENUM_EVENT_BRIDGE_HANDSHAKE,					// 与跨区桥服务器握手成功事件
167 	ENUM_EVENT_BRIDGE_BUILD_PART,					// 创建扩展信息数据事件
168 	ENUM_EVENT_BRIDGE_SERVERLIST_ALL,				// 全部服务器加入事件
181 #define EVENT_BRIDGE_MAXID						ENUM_EVENT_BRIDGE_MAXID
183 //////////////////////////////////////////////////////////////////////////
184 // 与跨区桥服务器握手成功事件
185 #define EVENT_BRIDGE_HANDSHAKE				ENUM_EVENT_BRIDGE_HANDSHAKE
186 // 事件数据结构
333 // 消息码与数据结构
335 /***************************************************************/
336 ///////////////////// 跨区桥服务器模块 的消息码/////////////////
337 // 上层的消息码必定是 MSG_MODULEID_BRIDGE
338 /***************************************************************/

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DBattleRideModule.h 24 KB H 文件 2014/2/25 11:36:30 2018/10/23 19:49:26 2018/10/23 19:49:26 1
434 	bool	bReceiveCastleEvent;	// 接收标志
435 	bool	bLastMapIsOnSteed;		// 前面切地图时战骑状态
436 	int		nNo1NewPowerValue;		// 排行榜第1名战力值（仅对跨区作用）
437 	int		nLastChangeMapID;		// 上张地图mapID
438 	DWORD	dwBRCampFightPDBID;		// 铁骑营挑战玩家PDBID

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\ChatMsgDef.h 18 KB H 文件 2014/2/25 11:36:24 2018/10/23 19:49:25 2018/10/23 19:49:25 3
470 	// 禁言自己， 上下文：(const char* reason)
471 	ChatMsg_MuteSelf,
473 	// 跨区踢人
474 	ChatMsg_KickoutToPublicWorld,
474 	ChatMsg_KickoutToPublicWorld,
476 	// 跨区传送
477 	ChatMsg_HangAround,
477 	ChatMsg_HangAround,
479 	// 跨区聊天
480 	ChatMsg_KuaQuChat,
482 	/// 聊天信息到达	上下文：(dbid sender, UID senderUID, ulong channel, ulong worldId, const char* name, [const char* honor,] [uchar city,] [const char* targetName,] const char* text, const char* datetime)

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Tools\bdr\data\DbSvr_output\DBSvrProtocolImport.h 263 KB H 文件 2014/2/25 14:40:29 2018/10/23 19:47:02 2018/10/23 19:47:02 10
599   int unpack(ORM::COrmSerializer *pOrmSerializer);
601 };
602 // 玩家跨区竞技
603 struct TStrikePartData
604 {
631   int unpack(ORM::COrmSerializer *pOrmSerializer);
633 };
634 // 玩家跨区副本结构
635 struct TKqEctypePartContext
636 {
650   int unpack(ORM::COrmSerializer *pOrmSerializer);
652 };
653 // 玩家跨区副本位置信息
654 struct TKqEctypePartLocInfo
655 {
684   int unpack(ORM::COrmSerializer *pOrmSerializer);
686 };
687 // 跨区副本助手部件
688 struct TEctypeAssistPartData
689 {
688 struct TEctypeAssistPartData
689 {
690 	TKqEctypePartContext stEctypeInfo;   //玩家跨区副本结构
691 	TKqEctypePartLocInfo stLocInfo;   //玩家跨区副本位置信息
692 	TKqDummyDBInfo stDummyInfo;   //玩家挑战系统个人数据
693   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
1131 	TCalnSkillPartData stCalnSkillPartData;   //氏族技能
1132 	TCountryPartData stCountryPartData;   //国家部件
1133 	TEctypeAssistPartData stEctypeAssistData;   //跨区副本
1134 	TStrikePartData stStrikeData;   //跨区竞技
1135 	TMiscPartData stMiscData;   //杂项部件
1136 	TZenSkillPartData stZenSkillData;   //创招部件
2174 	BYTE bReceiveCastleEvent;   //接收标志
2175 	BYTE bLastMapIsOnSteed;   //前面切地图时战骑状态
2176 	int nNo1NewPowerValue;   //排行榜第1名战力值（仅对跨区作用）
2177 	int nLastChangeMapID;   //上张地图mapID
2178 	DWORD dwBRCampFightPDBID;   //铁骑营挑战玩家PDBID
2573 	DWORD dwFlag;   //国家基础数据标识 EMCountryBaseDBFlag
2574 	char szLocalName[DB_COUNTRY_NAME_MAXSIZE];   //本区国家短名称
2575 	char szWorldName[DB_COUNTRY_NAME_MAXSIZE];   //跨区国家名称
2576 	char szDBWorldName[DB_COUNTRY_NAME_MAXSIZE];   //游戏世界区名
2577   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Tools\bdr\data\Communicate_output\commprotocol.h 70 KB H 文件 2014/2/25 14:40:22 2018/10/23 19:47:01 2018/10/23 19:47:01 5
836   int unpack(ORM::COrmSerializer *pOrmSerializer);
838 };
839 // 跨区现场
840 struct TEctypePartContextData
841 {
874   int unpack(ORM::COrmSerializer *pOrmSerializer);
876 };
877 // 跨区副本现场（私有）
878 struct TEctypeAssistPartPrivateContext
879 {
878 struct TEctypeAssistPartPrivateContext
879 {
880 	BYTE nState;   //跨区副本状态
881 	TEctypePartContextData stEctypePartData;   //跨区现场
882 	TEctypeDummyDBInfo stEctypeDummyDBInfo;   //玩家挑战系统个人数据
883   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
1236 	TMiscPartPrivateContext stMiscPart;   //人物公用混合部件
1237 	TCardCollectPartPrivateContext stCardCollectPart;   //卡片收集部件
1238 	TEctypeAssistPartPrivateContext stEctypeAssistPart;   //跨区副本部件
1239 	TPKModePartPrivateContext stPKModePart;   //PK模式部件
1240 	TTitlePartPrivateContext stTitlePart;   //称号部件

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\TeachService\ResAdjustService.h 6 KB H 文件 2014/2/25 14:32:14 2018/10/23 19:46:52 2018/10/23 19:46:52 1
133 	virtual void onMessage(ulong nEndpointId, ulong nActionId, SGameMsgHead* pHead, void* pData, size_t nLen);
135 	/**
136 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
137 	@param actionId  : 消息码
138 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\SocialServer\RPCMessageHandler.h 3 KB H 文件 2014/2/25 14:32:04 2018/10/23 19:46:49 2018/10/23 19:46:49 1
56 	virtual void onServerInfoUpdated(CSID ServerID, SERVER_STATE nState, ServerData* pInfo){}
57 	/**
58 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
59 	@param actionId  : 消息码
60 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\SocialServer\GlobalSocialServer.h 17 KB H 文件 2014/2/25 14:32:01 2018/10/23 19:46:48 2018/10/23 19:46:48 5
144 	bool						mCheckHeartBeat;			/// 是否检测心跳
146 	IManagerConnector *			m_ManagerConnector;			/// 服务器管理连接器
148 	IBridgeConnector *			m_BridgeConnector;			/// 跨区桥服务器连接器
150 	IMatchService *				m_MatchService;				/// 跨服组队撮合系统服务
151 	IAuctionService*			mAuctionService;			//  竞拍服务
197 	/// 关闭管理连接器
198 	void ReleaseManagerConnector(void);
200 	/// 启动跨区桥服务器连接器
201 	void CreateBridgeConnector(void);
201 	void CreateBridgeConnector(void);
202 	/// 关闭跨区桥服务器连接器
203 	void ReleaseBridgeConnector(void);
205 	/// 启动语音服务器连接器
251 	*/
252 	virtual void HandleManagerMessage(ulong actionId, SManagerMsgHead* head, LPSTR data, size_t len);
254 	////////// IBridgeEventHandler 处理处理跨区桥服务器执行事件 //////////////////
255 	/** 
256 	@param   wEventID ：事件ID
463 		return m_ManagerConnector;
464 	}
466 	// 获得跨区桥服务器连接器
467 	virtual Bridge::IBridgeConnector* GetBridgeConnector(void)
468 	{

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\MiscService\BattleRideCampService.h 11 KB H 文件 2014/2/25 14:31:46 2018/10/23 19:46:43 2018/10/23 19:46:43 1
134 	void					DateCome(int nTriggerID);
136 	/**
137 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
138 	@param actionId  : 消息码
139 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\MatchService\WarService.h 17 KB H 文件 2014/2/25 14:31:44 2018/10/23 19:46:42 2018/10/23 19:46:42 6
5 ** 日  期:	2011-03-19
6 ** 版  本:	1.0
7 ** 描  述:	跨区战场系统
8 ** 应  用:  	
9 	
214 // 跨服国战数据列表，以ID 为关键字
215 typedef map<DWORD,SCheckCountryWorldWarDataInfo> TMAP_CheckCountryWarDataInfoList;
218 // 跨区战场系统
219 class CWarService: public IWarService,public TimerHandler
220 {
250 	//////////////////////////////////////////////////////////////////////////
252 	/**
253 	@name   : 创建跨区战场系统
254 	*/
255 	bool Create();
255 	bool Create();
257 	/**
258 	@name   : 关闭跨区战场系统
259 	*/
260 	virtual void Release();
326 	// 服务器战场撮合信息子消息
327 	void OnMessage(ulong endpointId, ulong actionId, SGameMsgHead* head, void* data, size_t len);
329 	//  处理跨区桥服务器发过来的消息
330 	void HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
332 	virtual bool IsCountryWarFight(UserInfo* dwMyInfo,UserInfo* dwTrageInfo);
392 	// 检查国家在跨服国战中的参战类型
393 	DWORD CheckCountryWorldWarType(DWORD dwWorldID,DWORD dwCountryID,SCountryWorldWarInfo &node);
394 	// 跨区国战召集
395 	void OnBridgeMsgRequestWarCall(unsigned long actionId,LPSTR data, size_t len);
397 	// 加入服务器开战场信息

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\MatchService\StrikeService.h 7 KB H 文件 2014/2/25 14:31:43 2018/10/23 19:46:42 2018/10/23 19:46:42 5
5 ** 日  期:	2010-10-29
6 ** 版  本:	1.0
7 ** 描  述:	跨区竞技系统
8 ** 应  用:  	
9 	
96 // 竞技场信息列表,以场景服ID+竞技场ID为关键字
97 typedef map<LONGLONG,SStrikeNode> TMAP_StrikeNodeList;
99 // 跨区竞技系统
100 class CStrikeService: public IStrikeService,public TimerHandler
101 {
122 	//////////////////////////////////////////////////////////////////////////
124 	/**
125 	@name   : 创建跨区竞技系统
126 	*/
127 	bool Create();
127 	bool Create();
129 	/**
130 	@name   : 关闭跨区竞技系统
131 	*/
132 	virtual void Release();
186 	// 服务器竞技撮合信息子消息
187 	void OnMessage(ulong endpointId, ulong actionId, SGameMsgHead* head, void* data, size_t len);
189 	//  处理跨区桥服务器发过来的消息
190 	void HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
192 	//////////////////////////////////////////////////////////////////////////

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\MatchService\StrikeMatch.h 8 KB H 文件 2014/2/25 14:31:42 2018/10/23 19:46:42 2018/10/23 19:46:42 1
184 	// 服务器竞技撮合信息子消息
185 	void OnMessage(ulong endpointId, ulong actionId, SGameMsgHead* head, void* data, size_t len);
187 	//  处理跨区桥服务器发过来的消息
188 	void HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
191 	//////////////////////////////////////////////////////////////////////////

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\MatchService\MatchService.h 30 KB H 文件 2014/2/25 14:31:40 2018/10/23 19:46:42 2018/10/23 19:46:42 17
271 	virtual void onServerInfoUpdated(CSID ServerID, SERVER_STATE nState, ServerData* pInfo);
273 	//////////////////IBridgeMessageHandler////////////////////////////////////////////////////////
275 	/** 处理跨区桥服务器发过来的消息
276 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
277 	@param actionId  : 消息码
278 	@param bridgeHead  : 桥消息头
496 	*/
497 	virtual bool IsBudoOpen();
499 	/** 取得跨区副本接口
500 	*/
501 	virtual IEctypeAssist* GetEctypeAssist();
504 	*/
505 	virtual IStrikeMatch* GetStrikeMatch();
507 	/** 取得跨区竞技系统接口
508 	*/
509 	virtual IStrikeService* GetStrikeService();
508 	*/
509 	virtual IStrikeService* GetStrikeService();
511 	/** 取得跨区战场系统接口
512 	*/
513 	virtual IWarService* GetWarService();
590 	// 接收一个非副本队伍
591 	void AcceptNormalTeam(SGlobalEctypeTeam &team);
593 	// 发跨区撮合信息消息 dwServerID:服务器ID ,跨区信息专用
594 	bool SendDataBridgeToServer(DWORD dwServerID,WORD wKeyAction,DWORD dwMsgCode,DWORD dwUserData1=0,DWORD dwUserData2=0,DWORD dwUserData3=0,const char * pData=0,DWORD dwLen=0);
595 	// 发本区撮合信息消息 dwServerID:服务器ID 为0时广播给所有所有场景服
599 	// 智能选择发送数据目标服务器 nDestEndPoint 目标端点码(支持 MSG_ENDPOINT_ZONE,MSG_ENDPOINT_SOCIAL,MSG_ENDPOINT_CLIENT), dwActorID: 要发送的角色ID,DWORD dwFromWorldID 角色来自游戏世界ID
600 	bool SendAutoBridgeData(BYTE nDestEndPoint,DWORD dwFromWorldID,DWORD dwActorID,WORD wKeyAction,DWORD dwMsgCode,DWORD dwUserData1=0,DWORD dwUserData2=0,DWORD dwUserData3=0,const char * pData=0,DWORD dwLen=0);
602 	// 取得跨区副本
603 	CEctypeAssist& GetEctypeAssistInstance();
604 	// 取得跨服竞技撮合系统
604 	// 取得跨服竞技撮合系统
605 	CStrikeMatch& GetStrikeMatchInstance();
606 	// 取得跨区竞技系统
607 	CStrikeService& GetStrikeServiceInstance();
607 	CStrikeService& GetStrikeServiceInstance();
608 	// 取得跨区战争系统
609 	CWarService& GetWarServiceInstance();
610 	// 取得挑战系统
708 	// 职业位标识得分点分配百分比例
709 	double GetMatchVocationScoreRate(BYTE nVocationFlag);
711 	// 请求跨区查看玩家装备
712 	bool RequestLookWorldEquip(DWORD dwActorID,DWORD dwWorldID,DWORD dwFromServerID,const char * pData,DWORD dwLen);
714 	// 检查等待信息数据是否可加入新节点
742 	// 跨服 服务器撮合信息子消息
743 	void OnBridgeMsgMatchSubMsg(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
744 	// 跨服 跨区中转消息
745 	void OnBridgeMsgMatchBridgeData(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
746 	
746 	
747 	//////////////////////////////////////////////////////////////////////////
748 	// 跨区用户上线
749 	void OnMsgWorldOnlineUserAdd(DWORD dwActorID,DWORD dwWorldID,DWORD dwUserData);
749 	void OnMsgWorldOnlineUserAdd(DWORD dwActorID,DWORD dwWorldID,DWORD dwUserData);
750 	// 跨区用户下线
751 	void OnMsgWorldOnlineUserRemove(DWORD dwActorID,DWORD dwWorldID,DWORD dwUserData);
753 	// 改变房主索引
793 	// 挑战假人系统配置信息
794 	SDummyConfigSchemeInfo m_DummyConfigSchemeInfo;
796 	// 跨区副本保姆
797 	CEctypeAssist m_EctypeAssist;
798 	// 跨服竞技撮合系统
798 	// 跨服竞技撮合系统
799 	CStrikeMatch m_StrikeMatch;
800 	// 跨区竞技系统
801 	CStrikeService m_StrikeService;
801 	CStrikeService m_StrikeService;
802 	// 跨区战场系统
803 	CWarService m_WarService;
804 	// 挑战系统

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\MatchService\EctypeAssist.h 4 KB H 文件 2014/2/25 14:31:37 2018/10/23 19:46:42 2018/10/23 19:46:42 9
5 ** 日  期:	2010/07/14
6 ** 版  本:	1.0
7 ** 描  述:	跨区副本助手
8 ** 应  用:  	
9 ********************************************************************/
16 #include "DMatchModule.h"
17 #include "ExternalFacade.h"
19 // 跨区副本脚本配置文件
20 #define KQECTYPE_FILENAME		"Scp\\KqEctype.csv"
21 #define KQECTYPE_FILENAME_PUBIC	"Scp\\KqEctype_Publicworld.csv"
20 #define KQECTYPE_FILENAME		"Scp\\KqEctype.csv"
21 #define KQECTYPE_FILENAME_PUBIC	"Scp\\KqEctype_Publicworld.csv"
23 // 跨区副本保姆
24 class CEctypeAssist	: public IEctypeAssist, public ISchemeUpdateSink
25 {
32 	
33 	/**
34 	@name   : 创建跨区副本保姆
35 	*/
36 	virtual bool Create();
36 	virtual bool Create();
38 	/**
39 	@name   : 关闭跨区副本保姆
40 	*/
41 	virtual void Close();
51 	virtual ECreateKqeRet AcceptEctypeTeam(SGlobalEctypeTeam* pEctypeTeam);
52 	
53 	/** 取得跨区副本信息
54 	*/
55 	const SKqEctypeScheme* GetKqEctypeScheme(WORD wTypeID);
54 	*/
55 	const SKqEctypeScheme* GetKqEctypeScheme(WORD wTypeID);
57 	/** 取得跨区副本配置信息
58 	*/
59 	const SKqEctypeConfig* GetKqEctypeConfig();
80 	*/
81 	virtual void OnMessage(ulong endpointId, ulong actionId, SGameMsgHead* head, void* data, size_t len);
83 	/** 解析跨区桥服务器来的消息，子消息码为ENUM_MSG_MATCH_GLOBALECTYPE
84 	*/
85 	virtual void HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
91 	bool LoadScheme();
92 	
93 	/** 加载跨区副本配置脚本
94 	*/
95 	bool LoadKqEctypeScheme(ICSVReader * pCSVReader);

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\MatchService\DummyService.h 9 KB H 文件 2014/2/25 14:31:36 2018/10/23 19:46:41 2018/10/23 19:46:41 3
117 	//////////////////////////////////////////////////////////////////////////
118 	/**
119 	@name   : 创建跨区竞技系统
120 	*/
121 	bool Create();
121 	bool Create();
123 	/**
124 	@name   : 关闭跨区竞技系统
125 	*/
126 	virtual void Release();
149 	// 服务器竞技撮合信息子消息
150 	void OnMessage(ulong endpointId, ulong actionId, SGameMsgHead* head, void* data, size_t len);
152 	//  处理跨区桥服务器发过来的消息
153 	void HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
155 	//////////////////////////////////////////////////////////////////////////

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\MatchService\BudoService.h 13 KB H 文件 2014/2/25 14:31:35 2018/10/23 19:46:41 2018/10/23 19:46:41 3
57 	//////////////////////////////////////////////////////////////////////////
58 	/**
59 	@name   : 创建跨区竞技系统
60 	*/
61 	bool Create();
61 	bool Create();
63 	/**
64 	@name   : 关闭跨区竞技系统
65 	*/
66 	virtual void Release();
215 	// 服务器竞技撮合信息子消息
216 	void OnMessage(ulong endpointId, ulong actionId, SGameMsgHead* head, void* data, size_t len);
218 	//  处理跨区桥服务器发过来的消息
219 	void HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
221 	//////////////////////////////////////////////////////////////////////////

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\LuaService\LuaAPI.h 42 KB H 文件 2014/2/25 14:31:27 2018/10/23 19:46:39 2018/10/23 19:46:39 2
698 void CleanHorseSNSMessage( unsigned long dwActorDBID );
700 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
701 /**************************************  跨区相关 ***********************************************************/
702 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
704 /** 是否是公共区
824 */
825 DWORD GetPersonOrderValue(int nOrderKey, int order);
828 /**  跨区世界聊天频道开关
829 @param   bState ： 开关 true 为开 false 为关闭
830 @return  

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\KinService\KinService.h 16 KB H 文件 2014/2/25 14:31:19 2018/10/23 19:46:37 2018/10/23 19:46:37 1
180 	//@ return : buffer 
181 	virtual void OnBridgeEventExecute(WORD wEventID, LPSTR pszContext, size_t nLen);
183 	/// purpose: 处理其他服务器通过跨区桥服务器转发的消息
184 	//@ param: actionId 消息码
185 	//@ param: bridgeHead 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\KinService\ComKinService.h 4 KB H 文件 2014/2/25 14:31:14 2018/10/23 19:46:36 2018/10/23 19:46:36 1
57 	virtual void onServerInfoUpdated(CSID ServerID, SERVER_STATE nState, ServerData* pInfo);
58 	
59 	/// purpose: 处理其他服务器通过跨区桥服务器转发的消息
60 	//@ param: actionId 消息码
61 	//@ param: bridgeHead 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\Include\ISchemeCenter.h 21 KB H 文件 2014/2/25 14:31:12 2018/10/23 19:46:36 2018/10/23 19:46:36 1
330 	bool			bForbidTank;							// 禁止其载具进入
331 	bool			bForbidBWM;								// 禁止双人坐骑进入
332 	bool			bForbidStarTrek;						// 不允许跨区传送
333 	int				nFlag;									// 标志位
334 	int				nPKMode;								// 自动切换PK模式

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\Include\IMatchService.h 31 KB H 文件 2014/2/25 14:31:10 2018/10/23 19:46:36 2018/10/23 19:46:36 6
207 	*/
208 	virtual bool IsBudoOpen() = NULL;
210 	/** 取得跨区副本接口
211 	*/
212 	virtual IEctypeAssist* GetEctypeAssist() = NULL;
215 	*/
216 	virtual IStrikeMatch* GetStrikeMatch() = NULL;
218 	/** 取得跨区竞技系统接口
219 	*/
220 	virtual IStrikeService* GetStrikeService() = NULL;
219 	*/
220 	virtual IStrikeService* GetStrikeService() = NULL;
222 	/** 取得跨区战场系统接口
223 	*/
224 	virtual IWarService* GetWarService() = NULL;
392 };
394 //////////////////////////////////////////////////////////////////////////
395 // 跨区副本
396 struct IEctypeAssist
397 {
400 	*/
401 	virtual ECreateKqeRet AcceptEctypeTeam(SGlobalEctypeTeam* pEctypeTeam) = NULL;
403 	/** 取得跨区副本信息
404 	*/
405 	virtual const SKqEctypeScheme* GetKqEctypeScheme(WORD wTypeID) = NULL;
404 	*/
405 	virtual const SKqEctypeScheme* GetKqEctypeScheme(WORD wTypeID) = NULL;
407 	/** 取得跨区副本配置信息
408 	*/
409 	virtual const SKqEctypeConfig* GetKqEctypeConfig() = NULL;

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\Include\IGlobalSocialServer.h 9 KB H 文件 2014/2/25 14:31:09 2018/10/23 19:46:36 2018/10/23 19:46:36 1
231 	// 取得领地服务
232 	virtual ICastleService * GetCastleService(void) = 0;
234 	// 获得跨区桥服务器连接器
235 	virtual Bridge::IBridgeConnector* GetBridgeConnector(void) = NULL;
237 	// 取得跨服组队撮合系统服务

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\FriendService\FriendService.h 5 KB H 文件 2014/2/25 14:31:06 2018/10/23 19:46:35 2018/10/23 19:46:35 1
83 	virtual void OnExecute(WORD wEventID, BYTE bSrcType, DWORD dwSrcID, LPCSTR pszContext, int nLen);
87 	//  IBridgeMessageHandler
88 	/// purpose: 处理其他服务器通过跨区桥服务器转发的消息
89 	//@ param: actionId 消息码
90 	//@ param: bridgeHead 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\FriendService\ComFriendService.h 3 KB H 文件 2014/2/25 14:31:04 2018/10/23 19:46:35 2018/10/23 19:46:35 1
69 	bool SendToPublicServer(DWORD dwMyWorldID,void* pData, int nLen);
72 	//  IBridgeMessageHandler
73 	/// purpose: 处理其他服务器通过跨区桥服务器转发的消息
74 	//@ param: actionId 消息码
75 	//@ param: bridgeHead 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\CountryService\CountryService.h 35 KB H 文件 2014/2/25 14:30:52 2018/10/23 19:46:33 2018/10/23 19:46:33 4
226 	*/
227 	virtual bool		OnVote(WORD wEventID, BYTE bSrcType, DWORD dwSrcID, LPCSTR pszContext, int nLen);
229 	////////////// IBridgeEventHandler 处理处理跨区桥服务器执行事件 ////////////////////////////////////////////////////////////
231 	/** 处理处理跨区桥服务器执行事件
232 	@param   wEventID ：事件ID
233 	@param   pszContext : 上下文
237 	virtual void		OnBridgeEventExecute(WORD wEventID, LPSTR pszContext, size_t nLen);
239 	//////////////////IBridgeMessageHandler////////////////////////////////////////////////////////
241 	/** 处理跨区桥服务器发过来的消息
242 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
243 	@param actionId  : 消息码
244 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\ClanService\ComClanService.h 4 KB H 文件 2014/2/25 14:30:46 2018/10/23 19:46:33 2018/10/23 19:46:33 1
57 	virtual void onServerInfoUpdated(CSID ServerID, SERVER_STATE nState, ServerData* pInfo);
58 	
59 	/// purpose: 处理其他服务器通过跨区桥服务器转发的消息
60 	//@ param: actionId 消息码
61 	//@ param: bridgeHead 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\ChatService\ChatService.h 11 KB H 文件 2014/2/25 14:30:35 2018/10/23 19:46:31 2018/10/23 19:46:31 3
138 	bool StartServerLoadData(void);
140 	//////////////////IBridgeMessageHandler////////////////////////////////////////////////////////
142 	/** 处理跨区桥服务器发过来的消息
143 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
144 	@param actionId  : 消息码
145 	@param bridgeHead  : 桥消息头
182 	//处理举报消息
183 	void handleReportMessage(DWORD dwClientID, const SMsgReportToGMInfo& repInfo);
185 	// 跨区聊天
186 	void KuaquBroadcastChatMessage(UserInfoEx* info, ulong senderRank, ulong channel, const char* text, int orderSet=-1);
188 	

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\ZoneServerLogic\ZoneServiceProvider.h 23 KB H 文件 2014/2/25 14:30:21 2018/10/23 19:46:15 2018/10/23 19:46:15 5
568 	*/
569 	virtual DBREQ_RESULT_READ_GAMEAREAINFO * GetGameAreaInfo(void);
571 	/** 获得跨区桥服务器连接器
572 	@param   
573 	@param   
589 	*/
590 	virtual int							GetCurAreaLoadMapMode(void);
592 	/** 取得跨区服务器
593 	@param   
594 	@param   
706 	*/
707 	bool								RequestManagerStart(DWORD dwStartFlag = 0);
711 	/** 关闭跨区桥服务器连接器
712 	@param   
713 	@param   
735 	*/
736 	virtual void						OnTimer( unsigned long dwTimerID );
739 	////////// IBridgeEventHandler 处理处理跨区桥服务器执行事件 //////////////////
740 	/** 
741 	@param   wEventID ：事件ID
1084 	// 服务器管理连接器
1085 	IManagerConnector *					m_ManagerConnector;
1087 	// 跨区桥服务器连接器
1088 	IBridgeConnector *					m_BridgeConnector;
1090 	// 脚本数据

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\ZoneServerLogic\RPCMessageHandler.h 3 KB H 文件 2014/2/25 14:29:54 2018/10/23 19:46:10 2018/10/23 19:46:10 1
52 	}
54 	/**
55 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
56 	@param actionId  : 消息码
57 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\ZoneServer\ZoneServiceProvider.h 23 KB H 文件 2014/2/25 14:29:39 2018/10/23 19:46:01 2018/10/23 19:46:01 6
547 	*/
548 	virtual DBREQ_RESULT_READ_GAMEAREAINFO * GetGameAreaInfo(void);
550 	/** 获得跨区桥服务器连接器
551 	@param   
552 	@param   
568 	*/
569 	virtual int							GetCurAreaLoadMapMode(void);
571 	/** 取得跨区服务器
572 	@param   
573 	@param   
705 	*/
706 	bool								RequestManagerStart(DWORD dwStartFlag = 0);
708 	/** 启动跨区桥服务器连接器
709 	@param   
710 	@param   
712 	*/
713 	void								CreateBridgeConnector(void);
715 	/** 关闭跨区桥服务器连接器
716 	@param   
717 	@param   
751 	*/
752 	virtual void						HandleManagerMessage(ulong actionId, SManagerMsgHead* head, LPSTR data, size_t len);
754 	////////// IBridgeEventHandler 处理处理跨区桥服务器执行事件 //////////////////
755 	/** 
756 	@param   wEventID ：事件ID
1107 	// 服务器管理连接器
1108 	IManagerConnector *					m_ManagerConnector;
1110 	// 跨区桥服务器连接器
1111 	IBridgeConnector *					m_BridgeConnector;
1113 	// 脚本数据

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\ZoneServer\RPCMessageHandler.h 3 KB H 文件 2014/2/25 14:29:21 2018/10/23 19:45:55 2018/10/23 19:45:55 1
52 	}
54 	/**
55 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
56 	@param actionId  : 消息码
57 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\StarTrekServer\StdAfx.h 4 KB H 文件 2014/2/25 14:28:38 2018/10/23 19:45:41 2018/10/23 19:45:41 1
95 #endif
97 #define IS_HAVEFLAG(valuec, flagc)	(((valuec & flagc) == flagc) ? true : false)
99 /// 打开此宏，可调试跨区失败的问题
100 #define OPEN_DEBUG_STARTREK

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\StarTrekServer\StarTrekServer.h 5 KB H 文件 2014/2/25 14:28:37 2018/10/23 19:45:41 2018/10/23 19:45:41 7
33 	*/
34 	virtual void			Release(void);
36 	/** 预判断能否跨区	
37 	@param	 nInGameWorldID		: 迁入世界ID
38 	@param   dwInZoneID			：迁入场景ID
40 	@param   nStarTrekType		：传送类型
41 	@param   dwStarTrekFlag		：传送标志
42 	@param   bAsyncCheck		: 是否需要跨区判断
43 	@param   pszCanInLuaFunction: 迁入场景服能否接收的Lua函数
43 	@param   pszCanInLuaFunction: 迁入场景服能否接收的Lua函数
44 	@param   pszCheckResultLua	: 跨区判断的结果Lua函数
45 	@param   跨区判断:
46 	　　　　 1: 若在当前进程都失败，则直接返回
47 			 2: 最终结果在pszCheckResultLua返回, 参数输入只需填函数名, 参数依次为:
54 	virtual int				CanStarTrek(DWORD PDBID, int nInGameWorldID, DWORD dwInZoneID, POINT ptInLoc, int nStarTrekType, DWORD dwStarTrekFlag, 
55 										bool bAsyncCheck = false, LPCSTR pszCanInLuaFunction = NULL, LPCSTR pszCheckResultLua = NULL);
57 	/** 跨区
58 	@param	 nInGameWorldID			: 迁入世界ID
59 	@param   dwInZoneID				：迁入场景ID
74 									 LPCSTR pszCanInLuaFunction = NULL, 
75 									 LPCSTR pszDoneInLuaFunction = NULL);
77 	/** 释放跨区对像
78 	@param   nSTDir : tStarTrek_MsgDir_In, tStarTrek_MsgDir_Out
79 	@param   
98 	//////////////// IBridgeMessageHandler /////////////////////////////
99 	/**
100 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
101 	@param actionId  : 消息码
102 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\StarTrekServer\OutDirHandler.h 7 KB H 文件 2014/2/25 14:28:37 2018/10/23 19:45:41 2018/10/23 19:45:41 11
34 	///////////////////////// COutDirHandler //////////////////////
35 	/**
36 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
37 	@param actionId  : 消息码
38 	@param bridgeHead  : 桥消息头
42 	*/
43 	void		HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
45 	/** 预判断能否跨区	
46 	@param	 nInGameWorldID		: 迁入世界ID
47 	@param   dwInZoneID			：迁入场景ID
49 	@param   nStarTrekType		：传送类型
50 	@param   dwStarTrekFlag		：传送标志
51 	@param   bAsyncCheck		: 是否需要跨区判断
52 	@param   pszCanInLuaFunction: 迁入场景服能否接收的Lua函数
52 	@param   pszCanInLuaFunction: 迁入场景服能否接收的Lua函数
53 	@param   pszCheckResultLua	: 跨区判断的结果Lua函数
54 	@param   跨区判断:
55 	　　　　 1: 若在当前进程都失败，则直接返回
56 			 2: 最终结果在pszCheckResultLua返回, 参数输入只需填函数名, 参数依次为:
63 	int			CanStarTrek(DWORD PDBID, int nInGameWorldID, DWORD dwInZoneID, POINT ptInLoc, int nStarTrekType, DWORD dwStarTrekFlag, 
64 							bool bAsyncCheck = false, LPCSTR pszCanInLuaFunction = NULL, LPCSTR pszCheckResultLua = NULL);
66 	/** 跨区
67 	@param	 nInGameWorldID			: 迁入世界ID
68 	@param   dwInZoneID				：迁入场景ID
155 	DWORD		GetBridgeServerIDByZoneID(int nGameWorldID, DWORD dwZoneID);
157 private:
158 	/** 判断能否跨区	
159 	@param	 nInGameWorldID		: 迁入世界ID
160 	@param	 dwInBridgeServerID	: 迁入服务器ID
163 	@param   nStarTrekType		：传送类型
164 	@param   dwStarTrekFlag		：传送标志
165 	@param   bAsyncCheck		: 是否需要跨区判断
166 	@param   pszCanInLuaFunction: 迁入场景服能否接收的Lua函数
166 	@param   pszCanInLuaFunction: 迁入场景服能否接收的Lua函数
167 	@param   pszCheckResultLua	: 跨区判断的结果Lua函数
168 	@return  返回:参见tStarTrek_Result_　....
169 	*/
170 	int			__CanStarTrek(DWORD PDBID, int nInGameWorldID, DWORD dwInBridgeServerID, DWORD dwInZoneID, POINT ptInLoc, int nStarTrekType, 
171 							  DWORD dwStarTrekFlag, bool bAsyncCheck, LPCSTR pszCanInLuaFunction, LPCSTR pszCheckResultLua, STID stid);
173 	/** 本游戏世界判断是否能跨区
174 	@param   nInGameWorldID	　  : 迁入世界ID
175 	@param	 dwInBridgeServerID	: 迁入服务器ID
196 	// 生成STID的时间参数
197 	int					m_nMakeSTIDTimeidt;
199 	// 需要跨区的对像
200 	TMAP_NEEDOUTOBJECT	m_mapNeedOutObject;	
201 };

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\StarTrekServer\InDirHandler.h 4 KB H 文件 2014/2/25 14:28:35 2018/10/23 19:45:41 2018/10/23 19:45:41 1
39 public:
40 	/**
41 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
42 	@param actionId  : 消息码
43 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\ShareServer\ZoneSvrSource.h 6 KB H 文件 2014/2/25 14:28:15 2018/10/23 19:45:35 2018/10/23 19:45:35 1
90 	virtual void			OnExecute(WORD wEventID, BYTE bSrcType, DWORD dwSrcID, LPCSTR pszContext, int nLen);
91 	
92 	////////// IBridgeEventHandler 处理处理跨区桥服务器执行事件 /////////////////////////////////////////////////////////
93 	/** 
94 	@param   wEventID ：事件ID

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\ServerModule\PetPart.h 14 KB H 文件 2014/2/25 14:28:06 2018/10/23 19:45:30 2018/10/23 19:45:30 2
257 	*/
258 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
260 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
261 	@param   
262 	@param   
271 	*/
272 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen) { nLen = 0; return false; }
274 	/** 跨区切换地图时，将部件数据现场导入
275 	@param   
276 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\RelationServer\VerifyPart.h 14 KB H 文件 2014/2/25 14:27:43 2018/10/23 19:45:22 2018/10/23 19:45:22 2
136 	*/
137 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);	
139 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
140 	@param   
141 	@param   
150 	*/
151 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
153 	/** 跨区切换地图时，将部件数据现场导入
154 	@param   
155 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\RelationServer\TitlePart.h 14 KB H 文件 2014/2/25 14:27:42 2018/10/23 19:45:22 2018/10/23 19:45:22 2
144 	*/
145 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);	
147 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
148 	@param   
149 	@param   
158 	*/
159 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
161 	/** 跨区切换地图时，将部件数据现场导入
162 	@param   
163 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\NerveServer\ZenSkillPart.h 20 KB H 文件 2014/2/25 14:27:25 2018/10/23 19:45:17 2018/10/23 19:45:17 2
169 	*/
170 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
172 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
173 	@param   
174 	@param   
183 	*/
184 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
186 	/** 跨区切换地图时，将部件数据现场导入
187 	@param   
188 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\NerveServer\NervePart.h 18 KB H 文件 2014/2/25 14:27:22 2018/10/23 19:45:16 2018/10/23 19:45:16 2
172 	*/
173 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
175 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
176 	@param   
177 	@param   
186 	*/
187 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
189 	/** 跨区切换地图时，将部件数据现场导入
190 	@param   
191 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\WarServer.h 9 KB H 文件 2014/2/25 14:27:19 2018/10/23 19:45:15 2018/10/23 19:45:15 4
5 ** 日  期:	2011-03-15
6 ** 版  本:	1.0
7 ** 描  述:	跨区战争系统
8 ** 应  用:  管理场景服中的所有战场
10 **************************** 修改记录 ******************************
51 	// 释放
52 	virtual void Release(void);
54 	/** 处理跨区桥服务器发过来的消息
55 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
56 	@param actionId  : 消息码
57 	@param bridgeHead  : 桥消息头
181 	*/
182 	virtual const SCountryBorderWarZoneInfo * GetBorderWarZoneInfoByRoomID(DWORD dwRoomID);
185 	/**  请求更新跨区共享国家信息
186 	@return  
187 	*/

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\StrikeVote.h 4 KB H 文件 2014/2/25 14:27:15 2018/10/23 19:45:13 2018/10/23 19:45:13 1
5 ** 日  期:	2011-2-11
6 ** 版  本:	1.0
7 ** 描  述:	跨区竞技系统
8 ** 应  用:  管理场景服中的所有竞技场
10 **************************** 修改记录 ******************************

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\StrikeServer.h 5 KB H 文件 2014/2/25 14:27:14 2018/10/23 19:45:13 2018/10/23 19:45:13 3
5 ** 日  期:	2010-10-27
6 ** 版  本:	1.0
7 ** 描  述:	跨区竞技系统
8 ** 应  用:  管理场景服中的所有竞技场
10 **************************** 修改记录 ******************************
58 	// 释放
59 	virtual void Release(void);
61 	/** 处理跨区桥服务器发过来的消息
62 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
63 	@param actionId  : 消息码
64 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\StrikeMatch.h 3 KB H 文件 2014/2/25 14:27:14 2018/10/23 19:45:13 2018/10/23 19:45:13 2
43 	// 释放
44 	virtual void Release(void);
46 	/** 处理跨区桥服务器发过来的消息
47 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
48 	@param actionId  : 消息码
49 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\StrikeDropPrize.h 12 KB H 文件 2014/2/25 14:27:13 2018/10/23 19:45:13 2018/10/23 19:45:13 1
5 ** 日  期:	2011-3-12
6 ** 版  本:	1.0
7 ** 描  述:	跨区竞技系统
8 ** 应  用:  管理场景服中的所有竞技场
10 **************************** 修改记录 ******************************

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\PersonStrikePart.h 21 KB H 文件 2014/2/25 14:27:09 2018/10/23 19:45:12 2018/10/23 19:45:12 2
176 	*/
177 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);	
179 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
180 	@param   
181 	@param   
190 	*/
191 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
193 	/** 跨区切换地图时，将部件数据现场导入
194 	@param   
195 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\MatchServer.h 34 KB H 文件 2014/2/25 14:27:05 2018/10/23 19:45:11 2018/10/23 19:45:11 20
134 	virtual bool			OnSchemeUpdate(TiXmlDocument * pTiXmlDocument, const char* szFileName);
136 	//////////////////IBridgeMessageHandler////////////////////////////////////////////////////////
138 	/** 处理跨区桥服务器发过来的消息
139 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
140 	@param actionId  : 消息码
141 	@param bridgeHead  : 桥消息头
410 	*/
411 	virtual bool IsBudoOpen();
413 	/** 创建跨区副本部件
414 	*/
415 	virtual IEctypeAssistPart* CreateEctypeAssistPart();
417 	// 竞技部件
418 	virtual IPersonStrikePart* CreatePersonStrikePart();
420 	/** 取得跨区副本助手
421 	*/
422 	virtual IEctypeAssist* GetEctypeAssist();
425 	*/
426 	virtual IStrikeMatch* GetStrikeMatch();
428 	/** 取得跨区竞技系统接口
429 	*/
430 	virtual IStrikeServer* GetStrikeServer();
433 	*/
434 	virtual IStrikeManager* GetStrikeManager();
436 	/** 取得跨区战争系统接口
437 	*/
438 	virtual IWarServer* GetWarServer();
504 	*/
505 	virtual bool IsMatchTypeOpen(DWORD dwTypeID);
507 	/** 请求跨区查看玩家装备
508 	@param  const char * pData	: 请求消息数据
509 	@param  DWORD dwLen			: 请求消息数据长度
529 	*/
530 	virtual IWarRes* GetWarResByUID(LONGLONG uid);
532 	/** 取得跨区世界文明等级
533 	@param  DWORD dwWorldID		: 游戏世界ID
533 	@param  DWORD dwWorldID		: 游戏世界ID
534 	@return  DWORD 跨区世界文明等级
535 	*/
536 	virtual DWORD GetWorldCivilGrade(DWORD dwWorldID);
535 	*/
536 	virtual DWORD GetWorldCivilGrade(DWORD dwWorldID);
538 	/** 取得跨区世界文明点数
539 	@param  DWORD dwWorldID		: 游戏世界ID
539 	@param  DWORD dwWorldID		: 游戏世界ID
540 	@return  DWORD 跨区世界文明点数
541 	*/
542 	virtual DWORD GetWorldCivilDot(DWORD dwWorldID);
611 	// 获取跨服国战平衡BUFF配置信息
612 	const SCountryWarBalanceConfig & GetCountryWarBalanceConfig(DWORD dwIndex);
614 	// 取得跨区副本助手
615 	CEctypeAssist& GetEctypeAssistInstance();
616 	// 取得跨服竞技撮合系统
616 	// 取得跨服竞技撮合系统
617 	CStrikeMatch& GetStrikeMatchInstance();
618 	// 取得跨区竞技系统
619 	CStrikeServer& GetStrikeServerInstance();
620 	// 取得竞技场管理器
620 	// 取得竞技场管理器
621 	CStrikeManager& GetStrikeManagerInstance();
622 	// 取得跨区战争系统
623 	CWarServer& GetWarServerInstance();
624 	// 取得战场管理器
692 	void OnEventSystemZoneBalanceSet(DWORD dwZoneID, DWORD dwMapID, bool bOpen);
694 	//////////////////////////////////////////////////////////////////////////
695 	// 发跨区撮合信息消息 dwServerID:服务器ID ,跨区信息专用
696 	bool SendDataBridgeToServer(DWORD dwServerID,WORD wKeyAction,DWORD dwMsgCode,DWORD dwUserData1=0,DWORD dwUserData2=0,DWORD dwUserData3=0,const char * pData=0,DWORD dwLen=0);
697 	// 发本区撮合信息消息给社会服
732 	// 撮合结果处理
733 	void OnMatchResult(DWORD dwActorID,DWORD dwResultFlag,DWORD dwUserData);
735 	// 请求跨区查看玩家装备
736 	void OnMsgRequestLookWorldEquip(DWORD dwActorID,DWORD dwWorldID,DWORD dwFromServerID,const char * pData,DWORD dwLen);
738 	// 请求队员全部副本状态数据
849 	// 挑战假人系统配置信息
850 	SDummyConfigSchemeInfo m_DummyConfigSchemeInfo;
852 	// 跨区副本助手
853 	CEctypeAssist m_EctypeAssist;
854 	// 公共区遣返模块
856 	// 跨服竞技撮合系统模块
857 	CStrikeMatch m_StrikeMatch;
858 	// 跨区竞技系统模块
859 	CStrikeServer m_StrikeServer;
860 	// 竞技场管理器
860 	// 竞技场管理器
861 	CStrikeManager m_StrikeManager;
863 	// 跨区战争系统模块
864 	CWarServer m_WarServer;
865 	// 战场管理器

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\KqEctype.h 3 KB H 文件 2014/2/25 14:27:04 2018/10/23 19:45:11 2018/10/23 19:45:11 1
5 ** 日  期:	2010-7-19
6 ** 版  本:	1.0
7 ** 描  述:	跨区副本对象
8 ** 应  用:  	
9 ********************************************************************/

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\ExternalFacade.h 23 KB H 文件 2014/2/25 14:27:03 2018/10/23 19:45:11 2018/10/23 19:45:11 1
404 	*/
405 	virtual ICenterServerConnector *	GetCenterConnector(void);
408 	//  获取跨区桥接器
409 	IBridgeConnector * GetBridgeConnector(void);
411 	/** 

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\EctypeAssistPart.h 8 KB H 文件 2014/2/25 14:27:03 2018/10/23 19:45:10 2018/10/23 19:45:10 6
5 ** 日  期:	2010-7-15
6 ** 版  本:	1.0
7 ** 描  述:	跨区副本部件
8 ** 应  用:  	
9 ********************************************************************/
109 	virtual bool ImportRenewContext(LPSTR pszContext, int nLen);
110 	
111 	/// purpose: 是否正在进行跨区副本
112 	virtual bool IsEctypeing();
112 	virtual bool IsEctypeing();
114 	/// purpose: 取得跨区现场
115 	virtual const SKqEctypePartContext* GetEctypeContext();
115 	virtual const SKqEctypePartContext* GetEctypeContext();
117 	/// purpose: 设置跨区现场
118 	virtual void SetEctypeContext(SKqEctypePartContext* pContext);
120 	/// purpose: 取得位置信息
232 	// 所属人物
233 	IPerson* m_pMaster;
235 	// 跨区现场现场
236 	SKqEctypePartContext m_Context;
238 	// 位置信息
244 	// 遣返信息
245 	SWatcherContext m_WatcherContext;
247 	// 跨区副本状态
248 	BYTE m_nState;
250 	// 验证副本时间

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\EctypeAssist.h 10 KB H 文件 2014/2/25 14:27:02 2018/10/23 19:45:10 2018/10/23 19:45:10 10
5 ** 日  期:	2010-7-15
6 ** 版  本:	1.0
7 ** 描  述:	跨区副本助手
8 ** 应  用:  	
9 ********************************************************************/
16 #include "KqEctype.h"
18 struct IPerson;
20 // 跨区副本脚本配置文件
21 #define KQECTYPE_FILENAME		"Scp\\KqEctype.csv"
22 #define KQECTYPE_FILENAME_PUBIC	"Scp\\KqEctype_Publicworld.csv"
41 	// 关闭
42 	void Close(void);
44 	/** 取得跨区副本信息
45 	*/
46 	const SKqEctypeScheme* GetKqEctypeScheme(WORD wTypeID);
45 	*/
46 	const SKqEctypeScheme* GetKqEctypeScheme(WORD wTypeID);
48 	/** 取得跨区副本配置信息
49 	*/
50 	const SKqEctypeConfig* GetKqEctypeConfig();
130 	*/
131 	void SendToNormalPersonZone(SKqEctypeMember& member, DWORD dwMsgID, void* pMsg, size_t nLen);
133 	/** 处理跨区桥服务器发过来的消息
134 	*/
135 	void HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
175 	// 加载脚本
176 	bool LoadScheme();
178 	/// purpose:  加载跨区副本配置脚本
179 	bool LoadKqEctypeScheme(ICSVReader * pCSVReader);
181 private:
187 	*/
188 	DWORD FindBestServer(const SKqEctypeScheme* pScheme, int& nReason);
190 	/** 创建一个跨区副本序号
191 	*/
192 	DWORD CreateSerialID();
227 	*/
228 	void OnClientQuitEctype(IPerson* pPerson, SMsgMatchDataSubMsg* pSubMsg, LPSTR pszMsg, size_t nLen);
230 	/** 创建一个跨区副本
231 	*/
232 	void OnTransmitCreateEctype(DWORD dwServerID, SMsgMatchDataSubMsg* pSubMsg, LPSTR pszMsg, size_t nLen);
297 	bool CanGoEctype(IPerson* pPerson);
300 private:
301 	// 副本列表，以跨区副本序号为键值 map<副本序号, 跨区副本指针>
302 	map<DWORD, CKqEctype*> m_KqEctypeList;
304 	// 以玩家为索引的副本列表 map<玩家ID, 副本序号>

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\DummyServer.h 4 KB H 文件 2014/2/25 14:27:01 2018/10/23 19:45:10 2018/10/23 19:45:10 2
40 	// 释放
41 	virtual void Release(void);
43 	/** 处理跨区桥服务器发过来的消息
44 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
45 	@param actionId  : 消息码
46 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\CGameMatchAPI.h 50 KB H 文件 2014/2/25 14:26:58 2018/10/23 19:45:08 2018/10/23 19:45:08 17
65 	*/
66 	virtual const char * GetWarConfigName(DWORD dwConfigNameType);
68 	/**  取得跨区战争系统
69 	@param   
69 	@param   
70 	@return  取得跨区战争系统
71 	*/
72 	virtual IWarServer * GetWarServer();
71 	*/
72 	virtual IWarServer * GetWarServer();
75 	//========================================================跨区副本API==================================================
76 	/** 取得某个玩家的副本ID
77 	@return 副本序号
78 	*/
79 	virtual DWORD GetKqEctypeID(DWORD dwPDBID);
81 	/** 取得跨区副本现场
82 	@param dwSerialID 副本序号
83 	*/
83 	*/
84 	virtual const SKqEctypeContext* GetKqeContext(DWORD dwSerialID);
86 	/** 取得跨区副本成员个数
87 	@param dwSerialID 副本序号
88 	*/
88 	*/
89 	virtual int GetKqeMemberCount(DWORD dwSerialID);
91 	/** 取得跨区副本成员信息
92 	@param dwSerialID 副本序号
93 	*/
93 	*/
94 	virtual const SKqEctypeMember* GetKqeMemberInfo(DWORD dwSerialID, int nIndex);
96 	/** 取得跨区副本成员信息
97 	@param dwSerialID 副本序号
98 	*/
98 	*/
99 	virtual const SKqEctypeMember* GetKqeMemberInfoByPDBID(DWORD dwSerialID, DWORD dwPDBID);
101 	/** 跨区副本结束
102 	@param dwSerialID 副本序号
103 	*/
103 	*/
104 	virtual void KqEctypeEnd(DWORD dwSerialID);
106 	/** 跨区副本结束
107 	@param nActor		玩家序列号
108 	@param wEctypeType	副本类型
109 	*/
110 	virtual int CanKqEctype(int nActor, WORD wEctypeType);
112 	/** 取得玩家跨区部件身上的副本序号
113 	@param nActor		玩家序列号
114 	@param wEctypeType	需要匹配的副本类型，为0的时候不匹配
115 	*/
116 	virtual DWORD GetKqEctypeIDByActor(int nActor, WORD wEctypeType=0);
118 	/** 进入跨区副本
119 	@param nActor		玩家序列号
120 	@param wEctypeType	副本序号
121 	*/
122 	virtual void EnterKqEctype(int nActor);
124 	/** 离开跨区副本
125 	@param nActor		玩家序列号
126 	@param wEctypeType	副本序号
132 	*/
133 	virtual void KqeSetCurZoneID(DWORD dwSerialID, DWORD dwZoneID);
135 	/** 创建跨区副本 开始
136 	@param dwEctypeType	 副本类型
137 	@param nDifficulty	 副本难度
140 	*/ 
141 	virtual void NewKqeBegin(WORD dwEctypeType, BYTE nDifficulty, BYTE nCaptainIndex, int  nTeamID);
143 	/** 创建跨区副本 添加成员
144 	@param dwPDBID	 副本类型
145 	@param dwWorldID 副本难度
148 	*/ 
149 	virtual void NewKqeAddMember(DWORD dwPDBID, DWORD dwWorldID, int  nLevel, string szName, bool bOnlyTransport=false);
151 	/** 创建跨区副本 完成
152 	*/ 
153 	virtual int NewKqeEnd();
152 	*/ 
153 	virtual int NewKqeEnd();
155 	/** 到社会服创建跨区副本 完成
156 	*/ 
157 	virtual int SocialNewKqeEnd();
254 	*/
255 	virtual bool WarChangeActorTank(DWORD dwActorID, DWORD dwTankID);
257 	///////////// 跨区战场API /////////////////////////////////////////////////////////////
259 	/** 用现场创建跨服国战
260 	@param  DWORD dwWarTypeID		: 战场场类型 EMWarItemType

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\BudoServer.h 10 KB H 文件 2014/2/25 14:26:57 2018/10/23 19:45:08 2018/10/23 19:45:08 2
206 	virtual bool		OnVote(WORD wEventID, BYTE bSrcType, DWORD dwSrcID, LPCSTR pszContext, int nLen);
208 public:
209 	/** 处理跨区桥服务器发过来的消息
210 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
211 	@param actionId  : 消息码
212 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MarryServer\TeachStudPart.h 9 KB H 文件 2014/2/25 14:26:50 2018/10/23 19:45:06 2018/10/23 19:45:06 2
164 	*/
165 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
167 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
168 	@param   
169 	@param   
178 	*/
179 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
181 	/** 跨区切换地图时，将部件数据现场导入
182 	@param   
183 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MarryServer\StockPart.h 8 KB H 文件 2014/2/25 14:26:46 2018/10/23 19:45:06 2018/10/23 19:45:06 2
163 	*/
164 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
166 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
167 	@param   
168 	@param   
177 	*/
178 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
180 	/** 跨区切换地图时，将部件数据现场导入
181 	@param   
182 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MarryServer\SecurityPart.h 12 KB H 文件 2014/2/25 14:26:44 2018/10/23 19:45:05 2018/10/23 19:45:05 2
187 	*/
188 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
190 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
191 	@param   
192 	@param   
201 	*/
202 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
204 	/** 跨区切换地图时，将部件数据现场导入
205 	@param   
206 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MarryServer\RoleVendedPart.h 10 KB H 文件 2014/2/25 14:26:39 2018/10/23 19:45:04 2018/10/23 19:45:04 2
163 	*/
164 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
166 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
167 	@param   
168 	@param   
177 	*/
178 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
180 	/** 跨区切换地图时，将部件数据现场导入
181 	@param   
182 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MarryServer\ResAdjustPart.h 8 KB H 文件 2014/2/25 14:26:38 2018/10/23 19:45:04 2018/10/23 19:45:04 3
164 	*/
165 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
167 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
168 	@param   
169 	@param   
178 	*/
179 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
181 	/** 跨区切换地图时，将部件数据现场导入
182 	@param   
183 	@param   
245 	virtual void OnExecute(WORD wEventID, BYTE bSrcType, DWORD dwSrcID, LPCSTR pszContext, int nLen);
247 private:
248 	/** 设置跨区用值
249 	@param   
250 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MarryServer\MiscPart.h 13 KB H 文件 2014/2/25 14:26:35 2018/10/23 19:45:02 2018/10/23 19:45:02 2
172 	*/
173 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
175 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
176 	@param   
177 	@param   
186 	*/
187 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
189 	/** 跨区切换地图时，将部件数据现场导入
190 	@param   
191 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MarryServer\MarryPart.h 15 KB H 文件 2014/2/25 14:26:33 2018/10/23 19:45:02 2018/10/23 19:45:02 2
212 	*/
213 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
215 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
216 	@param   
217 	@param   
226 	*/
227 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
229 	/** 跨区切换地图时，将部件数据现场导入
230 	@param   
231 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MarryServer\InvitePart.h 13 KB H 文件 2014/2/25 14:26:31 2018/10/23 19:45:01 2018/10/23 19:45:01 2
164 	*/
165 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
167 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
168 	@param   
169 	@param   
178 	*/
179 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
181 	/** 跨区切换地图时，将部件数据现场导入
182 	@param   
183 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MarryServer\CreditPart.h 9 KB H 文件 2014/2/25 14:26:27 2018/10/23 19:45:00 2018/10/23 19:45:00 2
164 	*/
165 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
167 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
168 	@param   
169 	@param   
178 	*/
179 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
181 	/** 跨区切换地图时，将部件数据现场导入
182 	@param   
183 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MarryServer\CardCollectPart.h 10 KB H 文件 2014/2/25 14:26:25 2018/10/23 19:45:00 2018/10/23 19:45:00 2
173 	*/
174 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
176 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
177 	@param   
178 	@param   
187 	*/
188 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
190 	/** 跨区切换地图时，将部件数据现场导入
191 	@param   
192 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\LuaServer\LuaServer.h 4 KB H 文件 2014/2/25 14:25:55 2018/10/23 19:44:40 2018/10/23 19:44:40 1
54 	virtual void			OutputStatInfo(void);
56 	/**
57 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
58 	@param actionId  : 消息码
59 	@param bridgeHead  : 桥消息头

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\LuaServer\ITrigger.h 5 KB H 文件 2014/2/25 14:25:54 2018/10/23 19:44:39 2018/10/23 19:44:39 1
59 	ETriggerType_KillAllMonster,						// 杀所有怪触发器:KillAllMonsterTrigger
60 	ETriggerType_ActorStrike,							// 完成一局竞技触发器:ActorStrikeTrigger
61 	ETriggerType_CountryWarTask,						// 跨区国战-笑傲江湖任务:ETriggerType_CountryWarTask
62 	ETriggerType_ActorExpChange,						// 角色经验变更触发器:CActorExpChangeTrigger
63 	ETriggerType_CivilChange,							// 世界文明等级变化时触发器

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\LuaServer\GameMatchAPI.h 50 KB H 文件 2014/2/25 14:25:52 2018/10/23 19:44:39 2018/10/23 19:44:39 17
78 */
79 MATCH_API const char * GetWarConfigName(DWORD dwConfigNameType);
81 /**  取得跨区战争系统
82 @param   
82 @param   
83 @return  取得跨区战争系统
84 */
85 MATCH_API IWarServer * GetWarServer();
84 */
85 MATCH_API IWarServer * GetWarServer();
88 //========================================================跨区副本API==================================================
89 /** 取得某个玩家的副本ID
90 @return 副本序号
91 */
92 MATCH_API DWORD GetKqEctypeID(DWORD dwPDBID);
94 /** 取得跨区副本现场
95 @param dwSerialID 副本序号
96 */
96 */
97 MATCH_API const SKqEctypeContext* GetKqeContext(DWORD dwSerialID);
99 /** 取得跨区副本成员个数
100 @param dwSerialID 副本序号
101 */
101 */
102 MATCH_API int GetKqeMemberCount(DWORD dwSerialID);
104 /** 取得跨区副本成员信息
105 @param dwSerialID 副本序号
106 */
106 */
107 MATCH_API const SKqEctypeMember* GetKqeMemberInfo(DWORD dwSerialID, int nIndex);
109 /** 取得跨区副本成员信息
110 @param dwSerialID 副本序号
111 */
111 */
112 MATCH_API const SKqEctypeMember* GetKqeMemberInfoByPDBID(DWORD dwSerialID, DWORD dwPDBID);
114 /** 跨区副本结束
115 @param dwSerialID 副本序号
116 */
116 */
117 MATCH_API void KqEctypeEnd(DWORD dwSerialID);
119 /** 跨区副本结束
120 @param nActor		玩家序列号
121 @param wEctypeType	副本类型
122 */
123 MATCH_API int CanKqEctype(int nActor, WORD wEctypeType);
125 /** 取得玩家跨区部件身上的副本序号
126 @param nActor		玩家序列号
127 @param wEctypeType	需要匹配的副本类型，为0的时候不匹配
128 */
129 MATCH_API DWORD GetKqEctypeIDByActor(int nActor, WORD wEctypeType=0);
131 /** 进入跨区副本
132 @param nActor		玩家序列号
133 @param wEctypeType	副本序号
134 */
135 MATCH_API void EnterKqEctype(int nActor);
137 /** 离开跨区副本
138 @param nActor		玩家序列号
139 @param wEctypeType	副本序号
145 */
146 MATCH_API void KqeSetCurZoneID(DWORD dwSerialID, DWORD dwZoneID);
148 /** 创建跨区副本 开始
149 @param dwEctypeType	 副本类型
150 @param nDifficulty	 副本难度
153 */ 
154 MATCH_API void NewKqeBegin(WORD dwEctypeType, BYTE nDifficulty, BYTE nCaptainIndex, int  nTeamID);
156 /** 创建跨区副本 添加成员
157 @param dwPDBID	 副本类型
158 @param dwWorldID 副本难度
161 */ 
162 MATCH_API void NewKqeAddMember(DWORD dwPDBID, DWORD dwWorldID, int  nLevel, string szName, bool bOnlyTransport=false);
164 /** 创建跨区副本 完成
165 */ 
166 MATCH_API int NewKqeEnd();
165 */ 
166 MATCH_API int NewKqeEnd();
168 /** 到社会服创建跨区副本 完成
169 */ 
170 MATCH_API int SocialNewKqeEnd();
267 */
268 MATCH_API bool WarChangeActorTank(DWORD dwActorID, DWORD dwTankID);
270 ///////////// 跨区战场API /////////////////////////////////////////////////////////////
272 /** 用现场创建跨服国战
273 @param  DWORD dwWarTypeID		: 战场场类型 EMWarItemType

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\LuaServer\GameEngineAPI.h 82 KB H 文件 2014/2/25 14:25:49 2018/10/23 19:44:38 2018/10/23 19:44:38 1
565 int CreateDotaTrigger(const char* szEnterMapFunc, const char* szExitMapFunc, const char* szMonsterDieFunc, const char* mzPersonDieFunc, const char* m_szPersonReliveFunc, const char* szMapList);
568 /**
569 @name            : 创建人物完成跨区笑傲江湖任务
570 @brief           : 
571 @param szCallFunc: 回调函数名

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\Include\IZoneServiceProvider.h 18 KB H 文件 2014/2/25 14:25:34 2018/10/23 19:44:10 2018/10/23 19:44:10 1
759 	*/
760 	virtual Bridge::IBridgeConnector*	GetBridgeConnector(void) = NULL;
762 	/** 取得跨区服务器
763 	@param   
764 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\Include\IZoneManager.h 28 KB H 文件 2014/2/25 14:25:34 2018/10/23 19:44:10 2018/10/23 19:44:10 4
209 	@param   PDBID    ：需要进入的PDBID
210 	@param   uid      ：需要进入的uid，如果为跨进程传送，则为INVALID_UID
211 	@param   nType    ：1＝上线进入；2＝同进程切换进入；3＝跨进程切换进入；4＝跨区切换进入
212 	@param   pszReason：不能进入的原因
213 	@return  
218 	@param   PDBID    ：已进入的PDBID
219 	@param   uid      ：已进入的uid
220 	@param   nType    ：1＝上线进入；2＝同进程切换进入；3＝跨进程切换进入；4＝跨区切换进入
221 	@return  
222 	*/
226 	@param   PDBID    ：需要退出的PDBID
227 	@param   uid      ：需要进入的uid，如果为跨进程传送，则为INVALID_UID
228 	@param   nType    ：1＝下线退出；2＝同进程切换退出；3＝跨进程切换退出；4＝跨区切换退出
229 	@param   pszReason：不能进入的原因
230 	@param   
236 	@param   PDBID    ：已退出的PDBID
237 	@param   uid      ：已退出的uid  
238 	@param   nType    ：1＝下线退出；2＝同进程切换退出；3＝跨进程切换退出；4＝跨区切换退出
239 	@return  
240 	*/

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\Include\IStarTrekServer.h 5 KB H 文件 2014/2/25 14:25:31 2018/10/23 19:44:09 2018/10/23 19:44:09 9
5 ** 日  期:	2010/6/29 16:42
6 ** 版  本:	1.0
7 ** 描  述:	跨区迁移服务
8 ** 应  用:  	
9 	
17 #include "DStarTrekDef.h"
18 /*! \addtogroup IStarTrekServer
19 *  跨区迁移服务
20 *  @{
21 */
22 struct INeedInObject
23 {
24 	/** 取得跨区传送的现场
25 	@param   
26 	@param   
56 	*/
57 	virtual void			Release(void) = NULL;
59 	/** 预判断能否跨区	
60 	@param	 nInGameWorldID		: 迁入世界ID
61 	@param   dwInZoneID			：迁入场景ID
63 	@param   nStarTrekType		：传送类型
64 	@param   dwStarTrekFlag		：传送标志
65 	@param   bAsyncCheck		: 是否需要跨区判断
66 	@param   pszCanInLuaFunction: 迁入场景服能否接收的Lua函数
66 	@param   pszCanInLuaFunction: 迁入场景服能否接收的Lua函数
67 	@param   pszCheckResultLua	: 跨区判断的结果Lua函数
68 	@param   跨区判断:
69 	　　　　 1: 若在当前进程都失败，则直接返回
70 			 2: 最终结果在pszCheckResultLua返回, 参数输入只需填函数名, 参数依次为:
77 	virtual int				CanStarTrek(DWORD PDBID, int nInGameWorldID, DWORD dwInZoneID, POINT ptInLoc, int nStarTrekType, DWORD dwStarTrekFlag, 
78 										bool bAsyncCheck = false, LPCSTR pszCanInLuaFunction = NULL, LPCSTR pszCheckResultLua = NULL) = NULL;
80 	/** 跨区
81 	@param	 nInGameWorldID			: 迁入世界ID
82 	@param   dwInZoneID				：迁入场景ID
97 									 LPCSTR pszCanInLuaFunction = NULL, 
98 									 LPCSTR pszDoneInLuaFunction = NULL) = NULL;
99 	/** 释放跨区对像
100 	@param   nSTDir : tStarTrek_MsgDir_In, tStarTrek_MsgDir_Out
101 	@param   nReleaseTreakReason : tReleaseTreak_Reason_SwitchState

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\Include\ISchemeCenter.h 63 KB H 文件 2014/2/25 14:25:29 2018/10/23 19:44:08 2018/10/23 19:44:08 1
356 	bool			bForbidTank;							// 禁止其载具进入
357 	bool			bForbidBWM;								// 禁止双人坐骑进入
358 	bool			bForbidStarTrek;						// 不允许跨区传送
359 	int				nFlag;									// 标志位(EMatron_ForbidFollow...)
360 	int				nPkMode;								// PK模式(EPKMode_Name_Safe)

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\Include\IMatchServer.h 101 KB H 文件 2014/2/25 14:25:26 2018/10/23 19:44:08 2018/10/23 19:44:08 16
283 	*/
284 	virtual bool IsBudoOpen() = NULL;
286 	/** 创建跨区副本部件
287 	*/
288 	virtual IEctypeAssistPart* CreateEctypeAssistPart() = NULL;
289 	// 竞技部件
290 	virtual IPersonStrikePart* CreatePersonStrikePart() = NULL;
292 	/** 取得跨区副本接口
293 	*/
294 	virtual IEctypeAssist* GetEctypeAssist() = NULL;
297 	*/
298 	virtual IStrikeMatch* GetStrikeMatch() = NULL;
300 	/** 取得跨区竞技系统接口
301 	*/
302 	virtual IStrikeServer* GetStrikeServer() = NULL;
305 	*/
306 	virtual IStrikeManager* GetStrikeManager() = NULL;
308 	/** 取得跨区战争系统接口
309 	*/
310 	virtual IWarServer* GetWarServer() = NULL;
351 	virtual bool IsMatchTypeOpen(DWORD dwTypeID) = NULL;
353 // tolua_end
355 	/** 请求跨区查看玩家装备
356 	@param  const char * pData	: 请求消息数据
357 	@param  DWORD dwLen			: 请求消息数据长度
379 	*/
380 	virtual IWarRes* GetWarResByUID(LONGLONG uid) = NULL;
382 	/** 取得跨区世界文明等级
383 	@param  DWORD dwWorldID		: 游戏世界ID
383 	@param  DWORD dwWorldID		: 游戏世界ID
384 	@return  DWORD 跨区世界文明等级
385 	*/
386 	virtual DWORD GetWorldCivilGrade(DWORD dwWorldID) = NULL;
385 	*/
386 	virtual DWORD GetWorldCivilGrade(DWORD dwWorldID) = NULL;
388 	/** 取得跨区世界文明点数
389 	@param  DWORD dwWorldID		: 游戏世界ID
389 	@param  DWORD dwWorldID		: 游戏世界ID
390 	@return  DWORD 跨区世界文明点数
391 	*/
392 	virtual DWORD GetWorldCivilDot(DWORD dwWorldID) = NULL;
2136 //////////////////////////////////////////////////////////////////////////
2138 // tolua_end
2140 // 跨区副本部件
2141 struct IEctypeAssistPart : public IEntityPart
2142 {
2141 struct IEctypeAssistPart : public IEntityPart
2142 {
2143 	/** 是否正在进行跨区副本
2144 	*/
2145 	virtual bool IsEctypeing() = NULL;
2144 	*/
2145 	virtual bool IsEctypeing() = NULL;
2147 	/** 取得跨区现场
2148 	*/
2149 	virtual const SKqEctypePartContext* GetEctypeContext() = NULL;
2232 	virtual void SetDummyDBDailyTimes(int nValue) = NULL;
2233 };
2235 // 跨区副本对象
2236 struct IKqEctype
2237 {
2255 	virtual const SKqEctypeMember* GetMemberInfoByPDBID(DWORD dwPDBID) = NULL;
2256 };
2258 // 跨区副本助手
2259 struct IEctypeAssist
2260 {
2259 struct IEctypeAssist
2260 {
2261 	/** 取得跨区副本信息
2262 	*/
2263 	virtual const SKqEctypeScheme* GetKqEctypeScheme(WORD wTypeID) = NULL;
2299 	*/
2300 	virtual ECreateKqeRet AcceptEctypeTeam(SGlobalEctypeTeam* pEctypeTeam) = NULL;
2302 	/** 取得跨区副本配置信息
2303 	*/
2304 	virtual const SKqEctypeConfig* GetKqEctypeConfig() = NULL;

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\Include\IGameMatchAPI.h 49 KB H 文件 2014/2/25 14:25:24 2018/10/23 19:44:07 2018/10/23 19:44:07 17
69 */
70 virtual const char * GetWarConfigName(DWORD dwConfigNameType)=0;
72 /**  取得跨区战争系统
73 @param   
73 @param   
74 @return  取得跨区战争系统
75 */
76 virtual IWarServer * GetWarServer()=0;
75 */
76 virtual IWarServer * GetWarServer()=0;
79 //========================================================跨区副本API==================================================
80 /** 取得某个玩家的副本ID
81 @return 副本序号
82 */
83 virtual DWORD GetKqEctypeID(DWORD dwPDBID)=0;
85 /** 取得跨区副本现场
86 @param dwSerialID 副本序号
87 */
87 */
88 virtual const SKqEctypeContext* GetKqeContext(DWORD dwSerialID)=0;
90 /** 取得跨区副本成员个数
91 @param dwSerialID 副本序号
92 */
92 */
93 virtual int GetKqeMemberCount(DWORD dwSerialID)=0;
95 /** 取得跨区副本成员信息
96 @param dwSerialID 副本序号
97 */
97 */
98 virtual const SKqEctypeMember* GetKqeMemberInfo(DWORD dwSerialID, int nIndex)=0;
100 /** 取得跨区副本成员信息
101 @param dwSerialID 副本序号
102 */
102 */
103 virtual const SKqEctypeMember* GetKqeMemberInfoByPDBID(DWORD dwSerialID, DWORD dwPDBID)=0;
105 /** 跨区副本结束
106 @param dwSerialID 副本序号
107 */
107 */
108 virtual void KqEctypeEnd(DWORD dwSerialID)=0;
110 /** 跨区副本结束
111 @param nActor		玩家序列号
112 @param wEctypeType	副本类型
113 */
114 virtual int CanKqEctype(int nActor, WORD wEctypeType)=0;
116 /** 取得玩家跨区部件身上的副本序号
117 @param nActor		玩家序列号
118 @param wEctypeType	需要匹配的副本类型，为0的时候不匹配
119 */
120 virtual DWORD GetKqEctypeIDByActor(int nActor, WORD wEctypeType=0)=0;
122 /** 进入跨区副本
123 @param nActor		玩家序列号
124 @param wEctypeType	副本序号
125 */
126 virtual void EnterKqEctype(int nActor)=0;
128 /** 离开跨区副本
129 @param nActor		玩家序列号
130 @param wEctypeType	副本序号
136 */
137 virtual void KqeSetCurZoneID(DWORD dwSerialID, DWORD dwZoneID)=0;
139 /** 创建跨区副本 开始
140 @param dwEctypeType	 副本类型
141 @param nDifficulty	 副本难度
144 */ 
145 virtual void NewKqeBegin(WORD dwEctypeType, BYTE nDifficulty, BYTE nCaptainIndex, int  nTeamID)=0;
147 /** 创建跨区副本 添加成员
148 @param dwPDBID	 副本类型
149 @param dwWorldID 副本难度
152 */ 
153 virtual void NewKqeAddMember(DWORD dwPDBID, DWORD dwWorldID, int  nLevel, string szName, bool bOnlyTransport=false)=0;
155 /** 创建跨区副本 完成
156 */ 
157 virtual int NewKqeEnd()=0;
156 */ 
157 virtual int NewKqeEnd()=0;
159 /** 到社会服创建跨区副本 完成
160 */ 
161 virtual int SocialNewKqeEnd()=0;
258 */
259 virtual bool WarChangeActorTank(DWORD dwActorID, DWORD dwTankID)=0;
261 ///////////// 跨区战场API /////////////////////////////////////////////////////////////
263 /** 用现场创建跨服国战
264 @param  DWORD dwWarTypeID		: 战场场类型 EMWarItemType

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\Include\IEntityServer.h 92 KB H 文件 2014/2/25 14:25:23 2018/10/23 19:44:07 2018/10/23 19:44:07 5
685 	*/	
686 	virtual	void				SyncHPForTeam(int nCurHP = -1, bool bAllMember = false, bool bBoradcast = true)	= NULL;
688 	/** 跨区切换地图时，将临时小型数据导出带过去, 如果没有数据，将nLen设为0或返回false
689 	@param   
690 	@param   
692 	*/
693 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen) = NULL;
695 	/** 跨区切换地图时，将临时小型数据导入
696 	@param   
697 	@param   
1505 	*/
1506 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen) = NULL;
1508 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
1509 	@param   
1510 	@param   
1519 	*/
1520 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen) { nLen = 0; return false; }
1522 	/** 跨区切换地图时，将部件数据现场导入
1523 	@param   
1524 	@param   
3102 	*/
3103 	virtual IEntity *			BuildEntityMap(DWORD dwZoneID, DWORD dwEntityClass, LPCSTR pszContext, int nLen) = NULL;
3105 	/** 通过跨区数据构造实体(只限人物)
3106 	@param   
3107 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\Include\IEnterManager.h 4 KB H 文件 2014/2/25 14:25:22 2018/10/23 19:44:07 2018/10/23 19:44:07 3
21 	TERMINAL_DBRET_SETUSERLOCK,			// 设置锁返回
22 	
23 	TERMINAL_TREK_SAVETODB,				// 存入数据库(跨区切换)
24 	TERMINAL_DBRET_SETPUBLICUSERLOCK,	// 设置公共区帐号锁
26 	TERMINAL_SHOOT_SAVETODBANDLOGOUT,	// 存入数据库(跨进程切换)下线，这种情况是在收到应答导出数据出错调用
26 	TERMINAL_SHOOT_SAVETODBANDLOGOUT,	// 存入数据库(跨进程切换)下线，这种情况是在收到应答导出数据出错调用
27 	TERMINAL_SHOOT_REMOTE_ANSWER,		// (跨进程切换), 收到远程服务器回答.  消息现场为SMsgShootAnswer_ZZ
29 	TERMINAL_TREK_SAVETODBANDLOGOUT,	// 存入数据库(跨区切换)下线，这种情况是在收到应答导出数据出错调用
30 };
32 /*! \addtogroup IEnterManager
76 	*/
77 	virtual void			EntityChangePlace(IEntity * pMaster, DWORD dwNewZoneID, POINT ptTile, int nTransportType, bool bCoercive, int nCallupType, LPCSTR lpStrFunc=NULL) = NULL;
79 	/** 获取跨区切换的现场
80 	@param   
81 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\EntityServer\PersonPropBank.h 19 KB H 文件 2014/2/25 14:25:15 2018/10/23 19:43:54 2018/10/23 19:43:54 2
319 	*/
320 	IGameZone *				GetGameZone(void);
322 	/** 跨区切换地图时，将临时小型数据导出带过去, 如果没有数据，将nLen设为0或返回false
323 	@param   
324 	@param   
326 	*/
327 	bool					ExportTrekContext(LPSTR pszContext, int &nLen);
329 	/** 跨区切换地图时，将临时小型数据导入
330 	@param   
331 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\EntityServer\PersonMountingPart.h 6 KB H 文件 2014/2/25 14:25:12 2018/10/23 19:43:53 2018/10/23 19:43:53 2
111 	virtual bool				ExportRenewContext(LPSTR pszContext, int &nLen);
113 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
115 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
116 	@param   
117 	@param   
126 	*/
127 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
129 	/** 跨区切换地图时，将部件数据现场导入
130 	@param   
131 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\EntityServer\PersonBattleRidePart.h 27 KB H 文件 2014/2/25 14:25:09 2018/10/23 19:43:51 2018/10/23 19:43:51 2
488 	*/
489 	virtual bool				ImportRenewContext(LPSTR pszContext, int nLen);
491 	/** 跨区切换地图时，将部件数据导出带过去,　如果没有数据，将nLen设为0或返回false
492 	@param   
493 	@param   
502 	*/
503 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
505 	/** 跨区切换地图时，将部件数据现场导入
506 	@param   
507 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\EntityServer\Person.h 22 KB H 文件 2014/2/25 14:25:08 2018/10/23 19:43:51 2018/10/23 19:43:51 2
552 	*/	
553 	virtual	void				SyncHPForTeam(int nCurHP = -1, bool bAllMember = false, bool bBoradcast = true);
555 	/** 跨区切换地图时，将临时小型数据导出带过去, 如果没有数据，将nLen设为0或返回false
556 	@param   
557 	@param   
559 	*/
560 	virtual bool				ExportTrekContext(LPSTR pszContext, int &nLen);
562 	/** 跨区切换地图时，将临时小型数据导入
563 	@param   
564 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\EntityServer\EntityServer.h 9 KB H 文件 2014/2/25 14:24:48 2018/10/23 19:43:45 2018/10/23 19:43:45 1
81 	*/
82 	virtual IEntity *			BuildEntityMap(DWORD dwZoneID, DWORD dwEntityClass, LPCSTR pszContext, int nLen);
84 	/** 通过跨区数据构造实体(只限人物)
85 	@param   
86 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\EnterManager\TerminalTunnel.h 6 KB H 文件 2014/2/25 14:24:35 2018/10/23 19:43:40 2018/10/23 19:43:40 2
291 	// 重建角色态
292 	CConnectStateRebuild		m_ConnectStateRebuild;
294 	// 跨区切换态
295 	CConnectStateTrek			m_ConnectStateTrek;
295 	CConnectStateTrek			m_ConnectStateTrek;
297 	// 跨区登陆态
298 	CConnectStateLoginForTrek	m_ConnectStateLoginForTrek;
300 	//  数据保存状态

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\EnterManager\SaveActorToVan.h 3 KB H 文件 2014/2/25 14:24:33 2018/10/23 19:43:39 2018/10/23 19:43:39 1
64 	*/
65 	int				ExportRenewContext(IPerson * pPerson, DWORD dwNewZoneID, POINT ptTile, LPSTR pszInBuffer, int nInLen);
67 	/** 获取跨区切换的现场
68 	@param   
69 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\EnterManager\EnterManager.h 5 KB H 文件 2014/2/25 14:24:30 2018/10/23 19:43:37 2018/10/23 19:43:37 1
67 	*/
68 	virtual void			EntityChangePlace(IEntity * pMaster, DWORD dwNewZoneID, POINT ptTile, int nTransportType, bool bCoercive, int nCallupType, LPCSTR lpStrFunc = NULL);
70 	/** 获取跨区切换的现场
71 	@param   
72 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\EnterManager\DBRetSinkSetSolidLockForTrek.h 2 KB H 文件 2014/2/25 14:24:29 2018/10/23 19:43:36 2018/10/23 19:43:36 1
5 ** 日  期:	2010/7/13 10:06
6 ** 版  本:	1.0
7 ** 描  述:	跨区加永久锁
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\EnterManager\DBRetSinkSelectActorForTrek.h 2 KB H 文件 2014/2/25 14:24:28 2018/10/23 19:43:36 2018/10/23 19:43:36 1
5 ** 日  期:	2010/8/2 16:48
6 ** 版  本:	1.0
7 ** 描  述:	DBREQ_RESULT_SELECTACTOR 给跨区用的
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\EnterManager\ConnectStateTrek.h 2 KB H 文件 2014/2/25 14:24:28 2018/10/23 19:43:36 2018/10/23 19:43:36 1
5 ** 日  期:	2010/7/2 18:11
6 ** 版  本:	1.0
7 ** 描  述:	跨区切换态
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\EnterManager\ConnectStateLoginForTrek.h 2 KB H 文件 2014/2/25 14:24:26 2018/10/23 19:43:34 2018/10/23 19:43:34 1
5 ** 日  期:	2010/7/11 19:10
6 ** 版  本:	1.0
7 ** 描  述:	跨区登陆态
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Common\dbsvr_pol\DBSvrProtocolImport.h 263 KB H 文件 2014/2/25 14:22:00 2018/10/23 19:42:27 2018/10/23 19:42:27 10
599   int unpack(ORM::COrmSerializer *pOrmSerializer);
601 };
602 // 玩家跨区竞技
603 struct TStrikePartData
604 {
631   int unpack(ORM::COrmSerializer *pOrmSerializer);
633 };
634 // 玩家跨区副本结构
635 struct TKqEctypePartContext
636 {
650   int unpack(ORM::COrmSerializer *pOrmSerializer);
652 };
653 // 玩家跨区副本位置信息
654 struct TKqEctypePartLocInfo
655 {
684   int unpack(ORM::COrmSerializer *pOrmSerializer);
686 };
687 // 跨区副本助手部件
688 struct TEctypeAssistPartData
689 {
688 struct TEctypeAssistPartData
689 {
690 	TKqEctypePartContext stEctypeInfo;   //玩家跨区副本结构
691 	TKqEctypePartLocInfo stLocInfo;   //玩家跨区副本位置信息
692 	TKqDummyDBInfo stDummyInfo;   //玩家挑战系统个人数据
693   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
1131 	TCalnSkillPartData stCalnSkillPartData;   //氏族技能
1132 	TCountryPartData stCountryPartData;   //国家部件
1133 	TEctypeAssistPartData stEctypeAssistData;   //跨区副本
1134 	TStrikePartData stStrikeData;   //跨区竞技
1135 	TMiscPartData stMiscData;   //杂项部件
1136 	TZenSkillPartData stZenSkillData;   //创招部件
2174 	BYTE bReceiveCastleEvent;   //接收标志
2175 	BYTE bLastMapIsOnSteed;   //前面切地图时战骑状态
2176 	int nNo1NewPowerValue;   //排行榜第1名战力值（仅对跨区作用）
2177 	int nLastChangeMapID;   //上张地图mapID
2178 	DWORD dwBRCampFightPDBID;   //铁骑营挑战玩家PDBID
2573 	DWORD dwFlag;   //国家基础数据标识 EMCountryBaseDBFlag
2574 	char szLocalName[DB_COUNTRY_NAME_MAXSIZE];   //本区国家短名称
2575 	char szWorldName[DB_COUNTRY_NAME_MAXSIZE];   //跨区国家名称
2576 	char szDBWorldName[DB_COUNTRY_NAME_MAXSIZE];   //游戏世界区名
2577   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Common\BridgeConnector\IBridgeConnector.h 15 KB H 文件 2014/2/25 14:21:58 2018/10/23 19:42:26 2018/10/23 19:42:26 21
5 ** 日  期:      2010-6-24
6 ** 版  本:      1.0
7 ** 描  述:      跨区桥服务器连接器
8 ** 应  用:      
10 **************************** 修改记录 ******************************
38 {
40 	/**
41 	@name : 处理跨区桥服务器发过来的消息
42 	@brief:
43 	*/
45 	{
46 		/**
47 		@name         : 处理其他服务器通过跨区桥服务器转发的消息
48 		@param actionId  : 消息码
49 		@param bridgeHead  : 桥消息头
54 		virtual void HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len) = 0;
55 	};
57 	/// 处理处理跨区桥服务器执行事件
58 	struct IBridgeEventHandler
59 	{
66 		virtual void OnBridgeEventExecute(WORD wEventID, LPSTR pszContext, size_t nLen) = 0;
67 	};
69 	/// 场景服 跨区桥服务器连接器扩展部件接口
70 	struct IBridgePart
71 	{
124 		virtual DWORD GetServerCounts(void) = 0;
125 	};
127 	/// 跨区桥服务器连接器扩展部件接口
128 	struct IBridgeZonePart : public IBridgePart
129 	{
179 		// 取国家名称
180 		virtual const char * GetName(void) = 0;
181 		// 取跨区国家名称
182 		virtual const char * GetWorldCountryName(void) = 0;
183 		// 取数据库游戏世界名称
184 		virtual const char * GetDBWorldName(void) = 0;
185 	};
187 	/// 跨区桥服务器连接器扩展部件接口
188 	struct IBridgeSocialPart : public IBridgePart
189 	{
196 	//////////////////////////////////////////////////////////////////////////
198 	/**
199 	@name : 跨区桥服务器连接器
200 	@brief: 该模块负责维护和跨区桥服务器之间的连接,并转发各种命令
201 	*/
202 	struct IBridgeConnector
204 		virtual bool Create(DWORD dwGameWorldID,WORD wServerType,WORD wSubID,const char * szServerName,const char * szWorldName) = 0;
206 		/**
207 		@name         : 连接跨区桥服务器
208 		@brief        : 启动服务器时连接跨区桥服务器,以后如果连接断开,该模块内部会定时重试
209 		@param szCSIP : 跨区桥服务器IP 
210 		@param nCSPort: 跨区桥服务器端口
211 		@return       : 如果没有网络错误,则返回成功
212 		*/
213 		virtual bool Connect(const char * szCSIP,WORD nCSPort) = 0;
215 		/**
216 		@name                 : 向跨区桥服务器注册本地服务器信息
217 		@brief                : 如果本地服务器信息更改了,也调用这个接口进行Update 
218 		@param szName         : 服务器名称,必须小于32
223 		virtual bool RegisterServer(DWORD dwGameWorldID,WORD wServerType,WORD wSubID) = 0;
225 		/**
226 		@name         : 取得本地服务器在跨区桥服务器上的ID
227 		@brief        :
228 		*/
239 		virtual bool  IsConnected() = 0;
241 		/**
242 		@name                : 直接发送数据给跨区桥服务器
243 		@brief               : 
244 		@param pData         : 要发送的数据
289 		// 广播数据给指定列表游戏服务器 pServerArray:服务器ID列表,wServerNum:列表个数
290 		virtual void BroadcastDataToServer(DWORD * pServerArray,WORD wServerNum,const char * pData,DWORD dwLen) = 0;
292 		// 发服务器扩展信息消息 dwServerID:服务器ID 为0时广播给所有桥服务器连接器,跨区桥服务器连接器同步服务器扩展信息专用
293 		virtual bool SendExtDataToServer(DWORD dwServerID,DWORD dwMsgCode,DWORD dwUserData1=0,DWORD dwUserData2=0,DWORD dwUserData3=0,const char * pData=0,DWORD dwLen=0) = 0;
295 		////// 常用服务器列表相关接口 ////////////////////////////////////////////////////////////////////
402 	};
404 	/**
405 	@name            : 创建一个跨区桥服务器连接对象
406 	@brief           :
407 	@param pTimerAxis: 时间轴接口,主要用来定时重试
406 	@brief           :
407 	@param pTimerAxis: 时间轴接口,主要用来定时重试
408 	@return          : 返回跨区桥服务器连接对象指针
409 	*/
410 	// IBridgeConnector * CreateBridgeConnector(rkt::TimerAxis * pTimerAxis);
413 }; // namespace
415 //////////////////////////////////////////////////////////////////////////
417 // 取得跨区桥服务器连接器接口
418 BRIDGE_API Bridge::IBridgeConnector* GetGlobalBridgeConnector();
420 /// 静态库版本

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\PassportConnector\PassportCommonPart.h 2 KB H 文件 2014/2/25 14:21:24 2018/10/23 19:41:46 2018/10/23 19:41:46 2
5 ** 日  期:	2010-6-28
6 ** 版  本:	1.0
7 ** 描  述:	通用 跨区桥连接器扩展信息类
8 ** 应  用:  	
10 **************************** 修改记录 ******************************
22 using namespace rkt;
25 /**
26 @name : 社会服 跨区桥连接器扩展信息类
27 @brief:
28 */

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\LoginServer\LoginServerImp.h 20 KB H 文件 2014/2/25 14:20:54 2018/10/23 19:41:17 2018/10/23 19:41:17 7
154 	/// 关闭管理连接器
155 	void ReleaseManagerConnector(void);
157 	/// 启动跨区桥服务器连接器
158 	void CreateBridgeConnector(void);
158 	void CreateBridgeConnector(void);
159 	/// 关闭跨区桥服务器连接器
160 	void ReleaseBridgeConnector(void);
162 	/// 启动通行证服务器连接器
293 	void	OnSetGameWorldID(void);
295 	/**
296 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
297 	@param actionId  : 消息码
298 	@param bridgeHead  : 桥消息头
312 	*/
313 	virtual void HandlePassportMessage(unsigned long actionId,SMsgPassportHead &passportHead,SGameMsgHead* head, LPSTR data, size_t len);
315 	/** 取跨区登陆临时数据
316 	@param   
317 	@param   
344 	*/
345 	char VerifyCodeRandToLow( char szCode);
349 	/** 删除跨区登陆临时数据
350 	@param   
351 	@param   
644 	CLIENT_LIST                   m_ClientList;   
646 	IManagerConnector *			m_ManagerConnector;			// 服务器管理连接器
647 	IBridgeConnector *			m_BridgeConnector;			/// 跨区桥服务器连接器
648 	IPassportConnector *		m_PassportConnector;		/// 通行证服务器连接器
650 	producer_consumer_queue<std::string>  m_CommandQueue;
661 	//end add
663 	typedef map<DWORD, SAreaSwitchInfo> TMAP_ASINFO;
664 	TMAP_ASINFO					m_mapASInfo;			// 跨区请求的数据
665 	
666 	CServerCapabilityClient		m_CapabilityTestClient;	// 性能测试

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\LoginServer\LoginServerDef.h 1 KB H 文件 2014/2/25 14:20:53 2018/10/23 19:41:17 2018/10/23 19:41:17 1
15 #pragma once
17 #pragma pack(1)
18 // 跨区数据
19 struct SAreaSwitchInfo 
20 {

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\LoginServer\ClientState_Login.h 7 KB H 文件 2014/2/25 14:20:47 2018/10/23 19:41:14 2018/10/23 19:41:14 1
104 	// 处理用户登陆
105 	void HandleUserLogin(ibuffer & buffer);
107 	// 处理用户跨区登陆请求
108 	void HandleUserSwitchAreaLogin(ibuffer & buffer);
110 	// 处理数据库请求返回

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\LoginServer\ClientState_AreaSwitch.h 4 KB H 文件 2014/2/25 14:20:46 2018/10/23 19:41:14 2018/10/23 19:41:14 6
67 	// 默认构造被禁止
68 	ClientState_AreaSwitch(){}
70 	// 处理用户跨区登陆请求(在通行证库中查询)
71 	void HandleUserSwitchAreaQueryUserInfo(DWORD dwUserID, DWORD dwPDBID);
71 	void HandleUserSwitchAreaQueryUserInfo(DWORD dwUserID, DWORD dwPDBID);
73 	// 处理用户跨区登陆请求 数据库返回
74 	void HandleDBResult_SwitchAreaQueryUserInfo(DBREQ_RESULT_QUERYUSERLOGIN * result,DWORD dwResultLen);
74 	void HandleDBResult_SwitchAreaQueryUserInfo(DBREQ_RESULT_QUERYUSERLOGIN * result,DWORD dwResultLen);
77 	// 处理用户跨区选角色请求
78 	void HandleUserSwitchAreaQueryActorInfo(DWORD dwPDBID);
78 	void HandleUserSwitchAreaQueryActorInfo(DWORD dwPDBID);
80 	// 处理用户跨区选角色请求 数据库返回
81 	void HandleDBResult_SwitchAreaQueryActorInfo(DBREQ_RESULT_QUERYACTORLOGIN * result,DWORD dwResultLen);
81 	void HandleDBResult_SwitchAreaQueryActorInfo(DBREQ_RESULT_QUERYACTORLOGIN * result,DWORD dwResultLen);
84 	// 处理用户跨区登陆请求(在区库中查询)
85 	void HandleUserSwitchAreaQueryUserAreaInfo(LPCSTR pData, int nLen);
85 	void HandleUserSwitchAreaQueryUserAreaInfo(LPCSTR pData, int nLen);
87 	// 处理用户跨区登陆请求 数据库返回
88 	void HandleDBResult_SwitchAreaQueryUserAreaInfo(DBREQ_RESULT_QUERYUSERLOGINAREA * result,DWORD dwResultLen);
91 protected:

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\LoginServer2\LoginServerImp.h 20 KB H 文件 2014/2/25 14:21:14 2018/10/23 19:41:33 2018/10/23 19:41:33 7
154 	/// 关闭管理连接器
155 	void ReleaseManagerConnector(void);
157 	/// 启动跨区桥服务器连接器
158 	void CreateBridgeConnector(void);
158 	void CreateBridgeConnector(void);
159 	/// 关闭跨区桥服务器连接器
160 	void ReleaseBridgeConnector(void);
162 	/// 启动通行证服务器连接器
293 	void	OnSetGameWorldID(void);
295 	/**
296 	@name         : 处理其他服务器通过跨区桥服务器转发的消息
297 	@param actionId  : 消息码
298 	@param bridgeHead  : 桥消息头
312 	*/
313 	virtual void HandlePassportMessage(unsigned long actionId,SMsgPassportHead &passportHead,SGameMsgHead* head, LPSTR data, size_t len);
315 	/** 取跨区登陆临时数据
316 	@param   
317 	@param   
344 	*/
345 	char VerifyCodeRandToLow( char szCode);
349 	/** 删除跨区登陆临时数据
350 	@param   
351 	@param   
644 	CLIENT_LIST                   m_ClientList;   
646 	IManagerConnector *			m_ManagerConnector;			// 服务器管理连接器
647 	IBridgeConnector *			m_BridgeConnector;			/// 跨区桥服务器连接器
648 	IPassportConnector *		m_PassportConnector;		/// 通行证服务器连接器
650 	producer_consumer_queue<std::string>  m_CommandQueue;
661 	//end add
663 	typedef map<DWORD, SAreaSwitchInfo> TMAP_ASINFO;
664 	TMAP_ASINFO					m_mapASInfo;			// 跨区请求的数据
665 	
666 	CServerCapabilityClient		m_CapabilityTestClient;	// 性能测试

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\LoginServer2\LoginServerDef.h 1 KB H 文件 2014/2/25 14:21:13 2018/10/23 19:41:33 2018/10/23 19:41:33 1
15 #pragma once
17 #pragma pack(1)
18 // 跨区数据
19 struct SAreaSwitchInfo 
20 {

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\LoginServer2\ClientState_Login.h 7 KB H 文件 2014/2/25 14:21:06 2018/10/23 19:41:28 2018/10/23 19:41:28 1
109 	// 处理用户登陆
110 	void HandleUserLogin(ibuffer & buffer);
112 	// 处理用户跨区登陆请求
113 	void HandleUserSwitchAreaLogin(ibuffer & buffer);
115 	// 处理数据库请求返回

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\LoginServer2\ClientState_AreaSwitch.h 4 KB H 文件 2014/2/25 14:21:04 2018/10/23 19:41:27 2018/10/23 19:41:27 6
67 	// 默认构造被禁止
68 	ClientState_AreaSwitch(){}
70 	// 处理用户跨区登陆请求(在通行证库中查询)
71 	void HandleUserSwitchAreaQueryUserInfo(DWORD dwUserID, DWORD dwPDBID);
71 	void HandleUserSwitchAreaQueryUserInfo(DWORD dwUserID, DWORD dwPDBID);
73 	// 处理用户跨区登陆请求 数据库返回
74 	void HandleDBResult_SwitchAreaQueryUserInfo(DBREQ_RESULT_QUERYUSERLOGIN * result,DWORD dwResultLen);
74 	void HandleDBResult_SwitchAreaQueryUserInfo(DBREQ_RESULT_QUERYUSERLOGIN * result,DWORD dwResultLen);
77 	// 处理用户跨区选角色请求
78 	void HandleUserSwitchAreaQueryActorInfo(DWORD dwPDBID);
78 	void HandleUserSwitchAreaQueryActorInfo(DWORD dwPDBID);
80 	// 处理用户跨区选角色请求 数据库返回
81 	void HandleDBResult_SwitchAreaQueryActorInfo(DBREQ_RESULT_QUERYACTORLOGIN * result,DWORD dwResultLen);
81 	void HandleDBResult_SwitchAreaQueryActorInfo(DBREQ_RESULT_QUERYACTORLOGIN * result,DWORD dwResultLen);
84 	// 处理用户跨区登陆请求(在区库中查询)
85 	void HandleUserSwitchAreaQueryUserAreaInfo(LPCSTR pData, int nLen);
85 	void HandleUserSwitchAreaQueryUserAreaInfo(LPCSTR pData, int nLen);
87 	// 处理用户跨区登陆请求 数据库返回
88 	void HandleDBResult_SwitchAreaQueryUserAreaInfo(DBREQ_RESULT_QUERYUSERLOGINAREA * result,DWORD dwResultLen);
91 protected:

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\Include\IVoiceConnector.h 12 KB H 文件 2014/2/25 14:20:44 2018/10/23 19:41:13 2018/10/23 19:41:13 1
66 		virtual void OnVoiceEventExecute(WORD wEventID, LPSTR pszContext, size_t nLen) = 0;
67 	};
69 	/// 场景服 跨区语音服务器连接器扩展部件接口
70 	struct IVoicePart
71 	{

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\Include\IPassportConnector.h 11 KB H 文件 2014/2/25 14:20:43 2018/10/23 19:41:12 2018/10/23 19:41:12 1
66 		virtual void OnPassportEventExecute(WORD wEventID, LPSTR pszContext, size_t nLen) = 0;
67 	};
69 	/// 场景服 跨区通行证服务器连接器扩展部件接口
70 	struct IPassportPart
71 	{

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\Include\ILoginClient.h 11 KB H 文件 2014/2/25 14:20:43 2018/10/23 19:41:12 2018/10/23 19:41:12 1
66 	BYTE	 nGestureFlags;						 // 手势密码标识 0--未启用提醒 1--启用 2--未启用不提醒
67 	DWORD    dwGameWorldID;						 // 游戏世界ID
68 	LONGLONG stid;								 // 跨区时的STID
69 	DBREQ_RESULT_CHECKUSERLOCK::ACTOR_INFO		actorInfo;
70 	char	 szGesture[DBDEF_MAX_GESTURE_BUFF_LEN];

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\Include\IGlobalBridgeServer.h 2 KB H 文件 2014/2/25 14:20:42 2018/10/23 19:41:12 2018/10/23 19:41:12 2
5 ** 日  期:	2010-6-24
6 ** 版  本:	1.0
7 ** 描  述:	跨区桥服务器全局接口
8 ** 应  用:  	
9 	
23 #define __I_GlobalBridgeServer_H__
25 class ServerUser;
28 /// 跨区桥服务器全局对象
29 struct IGlobalBridgeServer
30 {

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\Include\IBridgeConnector.h 15 KB H 文件 2014/2/25 14:20:41 2018/10/23 19:41:12 2018/10/23 19:41:12 21
5 ** 日  期:      2010-6-24
6 ** 版  本:      1.0
7 ** 描  述:      跨区桥服务器连接器
8 ** 应  用:      
10 **************************** 修改记录 ******************************
38 {
40 	/**
41 	@name : 处理跨区桥服务器发过来的消息
42 	@brief:
43 	*/
45 	{
46 		/**
47 		@name         : 处理其他服务器通过跨区桥服务器转发的消息
48 		@param actionId  : 消息码
49 		@param bridgeHead  : 桥消息头
54 		virtual void HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len) = 0;
55 	};
57 	/// 处理处理跨区桥服务器执行事件
58 	struct IBridgeEventHandler
59 	{
66 		virtual void OnBridgeEventExecute(WORD wEventID, LPSTR pszContext, size_t nLen) = 0;
67 	};
69 	/// 场景服 跨区桥服务器连接器扩展部件接口
70 	struct IBridgePart
71 	{
124 		virtual DWORD GetServerCounts(void) = 0;
125 	};
127 	/// 跨区桥服务器连接器扩展部件接口
128 	struct IBridgeZonePart : public IBridgePart
129 	{
179 		// 取国家名称
180 		virtual const char * GetName(void) = 0;
181 		// 取跨区国家名称
182 		virtual const char * GetWorldCountryName(void) = 0;
183 		// 取数据库游戏世界名称
184 		virtual const char * GetDBWorldName(void) = 0;
185 	};
187 	/// 跨区桥服务器连接器扩展部件接口
188 	struct IBridgeSocialPart : public IBridgePart
189 	{
196 	//////////////////////////////////////////////////////////////////////////
198 	/**
199 	@name : 跨区桥服务器连接器
200 	@brief: 该模块负责维护和跨区桥服务器之间的连接,并转发各种命令
201 	*/
202 	struct IBridgeConnector
204 		virtual bool Create(DWORD dwGameWorldID,WORD wServerType,WORD wSubID,const char * szServerName,const char * szWorldName) = 0;
206 		/**
207 		@name         : 连接跨区桥服务器
208 		@brief        : 启动服务器时连接跨区桥服务器,以后如果连接断开,该模块内部会定时重试
209 		@param szCSIP : 跨区桥服务器IP 
210 		@param nCSPort: 跨区桥服务器端口
211 		@return       : 如果没有网络错误,则返回成功
212 		*/
213 		virtual bool Connect(const char * szCSIP,WORD nCSPort) = 0;
215 		/**
216 		@name                 : 向跨区桥服务器注册本地服务器信息
217 		@brief                : 如果本地服务器信息更改了,也调用这个接口进行Update 
218 		@param szName         : 服务器名称,必须小于32
223 		virtual bool RegisterServer(DWORD dwGameWorldID,WORD wServerType,WORD wSubID) = 0;
225 		/**
226 		@name         : 取得本地服务器在跨区桥服务器上的ID
227 		@brief        :
228 		*/
239 		virtual bool  IsConnected() = 0;
241 		/**
242 		@name                : 直接发送数据给跨区桥服务器
243 		@brief               : 
244 		@param pData         : 要发送的数据
289 		// 广播数据给指定列表游戏服务器 pServerArray:服务器ID列表,wServerNum:列表个数
290 		virtual void BroadcastDataToServer(DWORD * pServerArray,WORD wServerNum,const char * pData,DWORD dwLen) = 0;
292 		// 发服务器扩展信息消息 dwServerID:服务器ID 为0时广播给所有桥服务器连接器,跨区桥服务器连接器同步服务器扩展信息专用
293 		virtual bool SendExtDataToServer(DWORD dwServerID,DWORD dwMsgCode,DWORD dwUserData1=0,DWORD dwUserData2=0,DWORD dwUserData3=0,const char * pData=0,DWORD dwLen=0) = 0;
295 		////// 常用服务器列表相关接口 ////////////////////////////////////////////////////////////////////
402 	};
404 	/**
405 	@name            : 创建一个跨区桥服务器连接对象
406 	@brief           :
407 	@param pTimerAxis: 时间轴接口,主要用来定时重试
406 	@brief           :
407 	@param pTimerAxis: 时间轴接口,主要用来定时重试
408 	@return          : 返回跨区桥服务器连接对象指针
409 	*/
410 	// IBridgeConnector * CreateBridgeConnector(rkt::TimerAxis * pTimerAxis);
413 }; // namespace
415 //////////////////////////////////////////////////////////////////////////
417 // 取得跨区桥服务器连接器接口
418 BRIDGE_API Bridge::IBridgeConnector* GetGlobalBridgeConnector();
420 /// 静态库版本

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\Include\BridgeFun.h 3 KB H 文件 2014/2/25 14:20:40 2018/10/23 19:41:12 2018/10/23 19:41:12 1
5 ** 日  期:	2010-6-25
6 ** 版  本:	1.0
7 ** 描  述:	跨区桥服务器共用函数
8 ** 应  用:  	
10 **************************** 修改记录 ******************************

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\BridgeServer\ServerUser.h 4 KB H 文件 2014/2/25 14:22:01 2018/10/23 19:40:55 2018/10/23 19:40:55 2
5 ** 日  期:	2010-6-24
6 ** 版  本:	1.0
7 ** 描  述:	跨区桥服务器用户
8 ** 应  用:  	
10 **************************** 修改记录 ******************************
26 /////////////////////////////////////////////////////////////////////////////////////////////////////////////
27 /**
28 @name : 跨区桥服务器用户
29 @brief: 
30 */

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\BridgeServer\ServerList.h 2 KB H 文件 2014/2/25 14:22:01 2018/10/23 19:40:55 2018/10/23 19:40:55 2
5 ** 日  期:	2010-6-24
6 ** 版  本:	1.0
7 ** 描  述:	跨区桥服务器用户列表
8 ** 应  用:  	
10 **************************** 修改记录 ******************************
23 using namespace std;
27 /**
28 @name : 跨区桥服务器用户列表
29 @brief:
30 */

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\BridgeServer\GlobalBridgeServer.h 8 KB H 文件 2014/2/25 14:22:00 2018/10/23 19:40:54 2018/10/23 19:40:54 1
5 ** 日  期:	2010-6-24
6 ** 版  本:	1.0
7 ** 描  述:	跨区桥服务器
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\BridgeServer\BridgeServerDlg.h 4 KB H 文件 2014/2/25 14:21:59 2018/10/23 19:40:53 2018/10/23 19:40:53 3
5 ** 日  期:	2010-6-24
6 ** 版  本:	1.0
7 ** 描  述:	跨区桥服务器主程序界面
8 ** 应  用:  	
9 	
37 };
40 #define WM_MY_TRAY_NOTIFICATION			WM_USER+0				//任务栏图标message 
41 #define SERVICE_TRAYICON_TIP		"跨区桥服务器"			//任务栏图标Tip
43 // CBridgeServerDlg 对话框
44 class CBridgeServerDlg : public CResizingDialog
102 	CButton m_StartBt;				// 启动服务
103 	CButton m_StopBt;				// 停止服务
105 	GlobalBridgeServer m_BridgeServer;	//跨区桥服务器服务
106 	TraceListener*			mTrace;
108 	BOOL m_bStart;				//服务已启动

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\BridgeServer\BridgeServer.h 2 KB H 文件 2014/2/25 14:21:58 2018/10/23 19:40:53 2018/10/23 19:40:53 1
5 ** 日  期:	2010-6-24
6 ** 版  本:	1.0
7 ** 描  述:	跨区桥服务器主程序
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\BridgeConnector\BridgeZonePart.h 4 KB H 文件 2014/2/25 14:21:57 2018/10/23 19:40:52 2018/10/23 19:40:52 2
5 ** 日  期:	2010-6-28
6 ** 版  本:	1.0
7 ** 描  述:	场景服 跨区桥连接器扩展信息类
8 ** 应  用:  	
10 **************************** 修改记录 ******************************
30 //////////////////////////////////////////////////////////////////////////
32 /**
33 @name : 场景服 跨区桥连接器扩展信息类
34 @brief:
35 */

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\BridgeConnector\BridgeSocialPart.h 5 KB H 文件 2014/2/25 14:21:57 2018/10/23 19:40:52 2018/10/23 19:40:52 3
5 ** 日  期:	2010-6-28
6 ** 版  本:	1.0
7 ** 描  述:	社会服 跨区桥连接器扩展信息类
8 ** 应  用:  	
10 **************************** 修改记录 ******************************
22 using namespace rkt;
25 /**
26 @name : 社会服 跨区桥连接器扩展信息类
27 @brief:
28 */
76 		// 取国家名称
77 		virtual const char * GetName(void)			{ return m_Property.szName;			}
78 		// 取跨区国家名称
79 		virtual const char * GetWorldCountryName(void)	{ return m_Property.szWorldName;	}
80 		// 取跨所属数据库游戏世界名称

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\BridgeConnector\BridgeConnector.h 12 KB H 文件 2014/2/25 14:21:57 2018/10/23 19:40:52 2018/10/23 19:40:52 5
5 ** 日  期:	2009/8/25
6 ** 版  本:	1.0
7 ** 描  述:	跨区桥服务器连接器
8 ** 应  用:  	
10 **************************** 修改记录 ******************************
68 	BridgeConnector(TimerAxis * pTimerAxis);
70 	virtual ~BridgeConnector();
73 	///////////////////////// IBridgeMessageHandler 处理跨区桥服务器发过来的消息 /////////////////////////
74 	virtual void HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
76 	//////////////////////////////////////////////////////////////////////////
107 	virtual DWORD GetPublicWorldID();
109 	virtual void  Release();
110 	// 发给跨区桥服务器数据
111 	virtual void  SendData(const char * pData,DWORD dwLen);
113 	std::string ToString();
151 	// 广播数据给指定列表游戏服务器 pServerArray:服务器ID列表,wServerNum:列表个数
152 	virtual void BroadcastDataToServer(DWORD * pServerArray,WORD wServerNum,const char * pData,DWORD dwLen);
154 	// 发服务器扩展信息消息 dwServerID:服务器ID 为0时广播给所有桥服务器连接器,跨区桥服务器连接器同步服务器扩展信息专用
155 	virtual bool SendExtDataToServer(DWORD dwServerID,DWORD dwMsgCode,DWORD dwUserData1=0,DWORD dwUserData2=0,DWORD dwUserData3=0,const char * pData=0,DWORD dwLen=0);
157 	// 通过指定服务器发中转消息数据给目标游戏服务器 dwServerID:服务器ID 为0时广播给所有服务器,DWORD dwTransitServerID 中转到服务器ID
275 	// 清除所有服务器信息列表
276 	void ClearAllList(void);
278 	///////////////////////// 处理跨区桥服务器发过来的消息 /////////////////////////
279 	// 回应握手消息
280 	void OnMsgHandshakeResponse(unsigned long actionId,SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\BridgeConnector\BridgCommonPart.h 3 KB H 文件 2014/2/25 14:21:56 2018/10/23 19:40:51 2018/10/23 19:40:51 2
5 ** 日  期:	2010-6-28
6 ** 版  本:	1.0
7 ** 描  述:	通用 跨区桥连接器扩展信息类
8 ** 应  用:  	
10 **************************** 修改记录 ******************************
22 using namespace rkt;
25 /**
26 @name : 社会服 跨区桥连接器扩展信息类
27 @brief:
28 */

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\MatchClient\WarClient.h 3 KB H 文件 2014/2/25 13:44:54 2018/10/23 19:34:25 2018/10/23 19:34:25 1
5 ** 日  期:	2011-03-19
6 ** 版  本:	1.0
7 ** 描  述:	跨区战场客户端系统
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\MatchClient\War.h 4 KB H 文件 2014/2/25 13:44:54 2018/10/23 19:34:25 2018/10/23 19:34:25 1
5 ** 日  期:	2011-03-19
6 ** 版  本:	1.0
7 ** 描  述:	跨区战场客户端系统基类
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\MatchClient\StrikeClient.h 9 KB H 文件 2014/2/25 13:44:53 2018/10/23 19:34:25 2018/10/23 19:34:25 1
5 ** 日  期:	2010-10-29
6 ** 版  本:	1.0
7 ** 描  述:	跨区竞技客户端系统
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\MatchClient\MatchClient.h 24 KB H 文件 2014/2/25 13:44:51 2018/10/23 19:34:25 2018/10/23 19:34:25 10
311 	*/
312 	virtual int GetStrikeSkillAngryValue(DWORD dwSkillID, DWORD dwIndex);
314 	/** 创建跨区助手部件
315 	*/
316 	virtual IEctypeAssistPart* CreateEctypeAssistPart();
323 	*/
324 	virtual IStrikeMatch* GetStrikeMatch();
326 	/** 取得跨区竞技系统接口
327 	*/
328 	virtual IStrikeClient* GetStrikeClient();
327 	*/
328 	virtual IStrikeClient* GetStrikeClient();
330 	/** 取得跨区战场客户端系统接口定义
331 	*/
332 	virtual IWarClient* GetWarClient();
331 	*/
332 	virtual IWarClient* GetWarClient();
334 	/** 取得跨区战场客户端系统接口定义
335 	*/
336 	virtual IDummyClient* GetDummyClient();
545 	//  副本难度标识定义
546 	LPCSTR GetMatchFuBenDifficultyName(DWORD dwFlag);
548 	// 取得跨区副本助手
549 	CEctypeAssist& GetCEctypeAssistInstance();
550 	// 取得跨服竞技撮合系统接口
550 	// 取得跨服竞技撮合系统接口
551 	CStrikeMatch& GetStrikeMatchInstance();
552 	// 取得跨区竞技系统接口
553 	CStrikeClient& GetStrikeClientInstance();
553 	CStrikeClient& GetStrikeClientInstance();
554 	// 取得跨区战场客户端系统接口定义
555 	CWarClient& GetWarClientInstance();
556 	// 取得挑战假人系统客户端系统接口定义
635 	// 正在撮合队伍成员信息
636 	SMatchTeamMemberInfo m_TeamMemberList[TEAM_MEMBER_MAXCOUNT+1];
638 	// 跨区副本助手
639 	CEctypeAssist m_EctypeAssist;
640 	// 服竞技撮合系统客户端
640 	// 服竞技撮合系统客户端
641 	CStrikeMatch m_StrikeMatch;
642 	// 跨区竞技客户端系统
643 	CStrikeClient m_StrikeClient;
643 	CStrikeClient m_StrikeClient;
644 	// 跨区战场客户端系统
645 	CWarClient m_WarClient;
646 	// 挑战假人系统客户端系统

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\MatchClient\EctypeAssistPart.h 3 KB H 文件 2014/2/25 13:44:50 2018/10/23 19:34:25 2018/10/23 19:34:25 2
5 ** 日  期:	2010-7-15
6 ** 版  本:	1.0
7 ** 描  述:	跨区副本助手部件
8 ** 应  用:  	
9 ********************************************************************/
85 	// 副本现场信息
86 	SKqEctypePartContext m_Context;			
88 	// 跨区副本状态
89 	BYTE m_nState;
91 	// 玩家挑战系统个人数据

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\MatchClient\EctypeAssist.h 1 KB H 文件 2014/2/25 13:44:49 2018/10/23 19:34:25 2018/10/23 19:34:25 1
5 ** 日  期:	2010-7-15
6 ** 版  本:	1.0
7 ** 描  述:	跨区副本助手
8 ** 应  用:  	
9 ********************************************************************/

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\MatchClient\CountryWar.h 5 KB H 文件 2014/2/25 13:44:48 2018/10/23 19:34:25 2018/10/23 19:34:25 1
5 ** 日  期:	2011-03-31
6 ** 版  本:	1.0
7 ** 描  述:	跨区国战客户端系统
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\Include\SwitchAreaForm.h 2 KB H 文件 2014/2/25 13:44:05 2018/10/23 19:34:20 2018/10/23 19:34:20 1
5 ** 日  期:	2010-07-02
6 ** 版  本:	1.0
7 ** 描  述:	用于跨区切换过渡界面，（暂时没有启用）
8 ** 应  用:  
9 ******************************************************************/

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\Include\ISchemeCenter.h 39 KB H 文件 2014/2/25 13:43:59 2018/10/23 19:34:19 2018/10/23 19:34:19 1
344 	bool			bForbidTank;							// 禁止其载具进入
345 	bool			bForbidBWM;								// 禁止双人坐骑进入
346 	bool			bForbidStarTrek;						// 不允许跨区传送
347 	int				nFlag;									// 标志位
348 	int				nPKMode;								// 自动切换PK模式

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\Include\IMatchClient.h 41 KB H 文件 2014/2/25 13:43:56 2018/10/23 19:34:19 2018/10/23 19:34:19 7
43 	// 释放对象
44 	virtual void Release(void) = NULL;
46 	/** 创建跨区助手部件
47 	*/
48 	virtual IEctypeAssistPart* CreateEctypeAssistPart() = NULL;
57 	*/
58 	virtual IStrikeMatch* GetStrikeMatch() = NULL;
60 	/** 取得跨区竞技系统接口
61 	*/
62 	virtual IStrikeClient* GetStrikeClient() = NULL;
61 	*/
62 	virtual IStrikeClient* GetStrikeClient() = NULL;
64 	/** 取得跨区战场客户端系统接口定义
65 	*/
66 	virtual IWarClient* GetWarClient() = NULL;
65 	*/
66 	virtual IWarClient* GetWarClient() = NULL;
68 	/** 取得跨区战场客户端系统接口定义
69 	*/
70 	virtual IDummyClient* GetDummyClient() = NULL;
441 	virtual IMatrixClient *GetMatrixClient() = NULL;
442 };
444 // 跨区部件
445 struct IEctypeAssistPart : public IEntityPart
446 {
876 	virtual const SCountryBorderWarBaseInfo* GetWarBaseExtInfo(void) = NULL;
877 };
880 // 跨区战场客户端系统接口定义
881 struct IWarClient
882 {
920 	virtual bool RequestWarResMapPoint() = NULL;
921 };
923 // 跨区战场客户端系统接口定义
924 struct IDummyClient
925 {

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\Include\ICountryClient.h 41 KB H 文件 2014/2/25 13:43:53 2018/10/23 19:34:19 2018/10/23 19:34:19 1
1510 	// 世界文明点数
1511 	virtual DWORD GetCivilDot(void) = 0;
1512 	// 跨区国家名称
1513 	virtual const char * GetWorldCountryName(void)	= 0;
1514 };

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\Include\FormManager.h 13 KB H 文件 2014/2/25 13:43:50 2018/10/23 19:34:19 2018/10/23 19:34:19 1
30 	unLockForm, // 帐号被锁
31 	defaltForm,  //默认模态
32 	swtichAreaForm, // 跨区状态
33 	gestureForm,	// 手势密码
34 };

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\CountryClient\CountryClient.h 27 KB H 文件 2014/2/25 13:42:00 2018/10/23 19:33:54 2018/10/23 19:33:54 1
97 		// 世界文明点数
98 		virtual DWORD GetCivilDot(void)	{	return m_Property.dwCivilDot;	}
99 		// 取跨区国家名称
100 		virtual const char * GetWorldCountryName(void)	{ return m_Property.szCountryName;	}
101 	};

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\controller\GameForm.h 7 KB H 文件 2014/2/25 13:46:39 2018/10/23 19:33:49 2018/10/23 19:33:49 3
49 	int					m_isHideOtherActor; // 用于记录小退游戏前是否隐藏了其他角色
50 	bool                m_bTryToExit;		// 尝试退出游戏
52 	SMsgLoginServer_AreaSwitchRes m_switchAreaBuf;	// 跨区数据
53 	bool				m_bSwitchArea;				// 是否开始跨区
54 	int					m_nSwitchGatewayNum;		// 切换网关次数
55 	//bool				m_needCheckFps;
185 	bool isWantsSelectNPC(const POINT& pt) const;
186 	virtual void OnExecute(WORD wEventID, BYTE bSrcType, DWORD dwSrcID, LPCSTR pszContext, int nLen);
188 	// 重新连跨区网关
189 	virtual void ConnectNewAreaGateway();
191 	// 重新登陆新区

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\commprotocol\commprotocol.h 70 KB H 文件 2014/2/25 14:54:12 2018/10/23 19:32:38 2018/10/23 19:32:38 5
836   int unpack(ORM::COrmSerializer *pOrmSerializer);
838 };
839 // 跨区现场
840 struct TEctypePartContextData
841 {
874   int unpack(ORM::COrmSerializer *pOrmSerializer);
876 };
877 // 跨区副本现场（私有）
878 struct TEctypeAssistPartPrivateContext
879 {
878 struct TEctypeAssistPartPrivateContext
879 {
880 	BYTE nState;   //跨区副本状态
881 	TEctypePartContextData stEctypePartData;   //跨区现场
882 	TEctypeDummyDBInfo stEctypeDummyDBInfo;   //玩家挑战系统个人数据
883   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
1236 	TMiscPartPrivateContext stMiscPart;   //人物公用混合部件
1237 	TCardCollectPartPrivateContext stCardCollectPart;   //卡片收集部件
1238 	TEctypeAssistPartPrivateContext stEctypeAssistPart;   //跨区副本部件
1239 	TPKModePartPrivateContext stPKModePart;   //PK模式部件
1240 	TTitlePartPrivateContext stTitlePart;   //称号部件

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\OssLogDef.h 27 KB H 文件 2014/2/25 14:54:06 2018/10/23 19:32:39 2018/10/23 19:32:39 1
506 	// 竞技场抽奖
507 	OssResAdd_StrikeDropPrize,
509 	// 跨区国战
510 	OssResAdd_CountryWar,	
512 	// 运商完成时统计银票

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\OrderDef.h 20 KB H 文件 2014/2/25 14:54:06 2018/10/23 19:32:39 2018/10/23 19:32:39 35
58 	AchievePoint_Person_key,						//add by lgf 10.08.25 成就点数排行榜
59 	Contribute_Person_key,							// add by Yuxb 月累政绩考量值 [2010-10-08:16:30]
60     KQArena_Level_Person_Key,						// 跨区竞技场等级排行
61 	KQArean_Times_Person_Key,						// 跨区竞技场参与周次数排行
62 	KQArean_Score_Person_Key,						// 跨区竞技场积分排行
63 	KQArean_Kill_Person_Key,						// 跨区竞技场杀人排行
64 	WuXinLianZhu_Link_Person_Key,					// (前几个已被预订，所用20)五子连珠次数排行
64 	WuXinLianZhu_Link_Person_Key,					// (前几个已被预订，所用20)五子连珠次数排行
65 	KQArean_MonthScore_Person_Key,					// 跨区竞技场本月积分排行
66 	KQArean_WeekScore_Person_Key,					// 跨区竞技场本周积分排行
67 	KQArean_StrikeMoney_Person_Key,					// 跨区竞技场徽章排行
68 	Flower_Person_Key,								// 鲜花榜
69 	ContributeWeek_Person_Key,						// 个人政绩周排名
108 	AchievePoint_Person_WS_key,						// add by lgf 10.08.25 成就点数排行榜
109 	Contribute_Person_WS_key,						// add by Yuxb 月累政绩考量值 [2010-10-08:16:30]
110 	KQArena_Level_Person_WS_Key,					// 跨区竞技场等级排行
111 	KQArean_Times_Person_WS_Key,					// 跨区竞技场参与周次数排行	
112 	KQArean_Score_Person_WS_Key,					// 跨区竞技场积分排行
113 	KQArean_Kill_Person_WS_Key,						// 跨区竞技场杀人排行
114 	KQArean_MonthScore_Person_WS_Key=121,			// 跨区竞技场本月积分排行
115 	KQArean_WeekScore_Person_WS_Key,				// 跨区竞技场本周积分排行
116 	KQArean_StrikeMoney_Person_WS_Key,				// 跨区竞技场徽章排行
117 	WingLevel_Person_WS_Key=128,					// 翅膀成长度排行榜
118 	NewPower_Person_WS_Key=142,                     // 新战力值排行
137 	AchievePoint_Person_TS_key,						// add by lgf 10.08.25 成就点数排行榜
138 	Contribute_Person_TS_key,						// add by Yuxb 月累政绩考量值 [2010-10-08:16:30]
139 	KQArena_Level_Person_TS_Key,					// 跨区竞技场等级排行
140 	KQArean_Times_Person_TS_Key,					// 跨区竞技场参与周次数排行
141 	KQArean_Score_Person_TS_Key,					// 跨区竞技场积分排行
142 	KQArean_Kill_Person_TS_Key,						// 跨区竞技场杀人排行
143 	KQArean_MonthScore_Person_TS_Key=221,			// 跨区竞技场本月积分排行
144 	KQArean_WeekScore_Person_TS_Key,				// 跨区竞技场本周积分排行
145 	KQArean_StrikeMoney_Person_TS_Key,				// 跨区竞技场徽章排行
146 	WingLevel_Person_TS_Key=228,					// 翅膀成长度排行榜
147 	NewPower_Person_TS_Key=242,	                    // 新战力值排行
166 	AchievePoint_Person_YM_key,						// add by lgf 10.08.25 成就点数排行榜
167 	Contribute_Person_YM_key,						// add by Yuxb 月累政绩考量值 [2010-10-08:16:30]
168 	KQArena_Level_Person_YM_Key,					// 跨区竞技场等级排行
169 	KQArean_Times_Person_YM_Key,					// 跨区竞技场参与周次数排行
170 	KQArean_Score_Person_YM_Key,					// 跨区竞技场积分排行
171 	KQArean_Kill_Person_YM_Key,						// 跨区竞技场杀人排行
172 	KQArean_MonthScore_Person_YM_Key=321,			// 跨区竞技场本月积分排行
173 	KQArean_WeekScore_Person_YM_Key,				// 跨区竞技场本周积分排行
174 	KQArean_StrikeMoney_Person_YM_Key,				// 跨区竞技场徽章排行
175 	WingLevel_Person_YM_Key=328,					// 翅膀成长度排行榜
176 	NewPower_Person_YM_Key=342,                     // 新战力值排行
195 	AchievePoint_Person_JX_key,						// add by lgf 10.08.25 成就点数排行榜
196 	Contribute_Person_JX_key,						// add by Yuxb 月累政绩考量值 [2010-10-08:16:30]
197 	KQArena_Level_Person_JX_Key,					// 跨区竞技场等级排行
198 	KQArean_Times_Person_JX_Key,					// 跨区竞技场参与周次数排行
199 	KQArean_Score_Person_JX_Key,					// 跨区竞技场积分排行
200 	KQArean_Kill_Person_JX_Key,						// 跨区竞技场杀人排行
201 	KQArean_MonthScore_Person_JX_Key=421,			// 跨区竞技场本月积分排行
202 	KQArean_WeekScore_Person_JX_Key,				// 跨区竞技场本周积分排行
203 	KQArean_StrikeMoney_Person_JX_Key,				// 跨区竞技场徽章排行
204 	WingLevel_Person_JX_Key=428,					// 翅膀成长度排行榜
205 	NewPower_Person_JX_Key=442,                     // 新战力值排行

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\ILoginServerProtocol.h 35 KB H 文件 2014/2/25 14:54:02 2018/10/23 19:32:39 2018/10/23 19:32:39 4
325 			DWORD	 nEnterMapID;			  // 准备进入地图
326 			POINT	 ptEnterTile;			  // 准备进入位置		
328 			LONGLONG stid;					  // 跨区时的STID
329 			int      nPartnerID;			  // 游戏合作商ID，直通 add by lgf 11.04.01
330 			BYTE     nBlackFlags;             // 1--正常，2--异地，3--异地+黑名单
484 		};
486 		/**
487 		@name         : 跨区切换请求
488 		@brief        : 
489 		*/
498 		};
500 		/**
501 		@name         : 响应跨区切换请求
502 		@brief        : 
503 		*/
515 		};
517 		/**
518 		@name         : 跨区登陆
519 		@brief        : 
520 		*/

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\IGameDatabaseDef.h 463 KB H 文件 2014/2/25 14:54:02 2018/10/23 19:32:39 2018/10/23 19:32:39 13
96 2010.07.14: 读取推广人详细信息
97 2010.07.16: 读取推广人分成声望
98 2010.07.31: 增加跨区副本部件数据
99 2010.08.21: 增加游戏世界文明数据
100 2010.09.08: 官职信息增加救人次数
208 #	define	DBDEF_MAX_OFFEXP_LEN			32			// 离线经验数据 2009.07.20  
209 #	define	DBDEF_MAX_COUNTRY_LEN			96			// 国家数据			64 --> 96
210 #	define	DBDEF_MAX_KQE_LEN				64			// 跨区副本部件数据
211 	/***************************  安全服务相关  *********************************/
212 #	define	DBDEF_MAX_SECURITY_PASSWORD_LEN		41		// 最大安全密码长度
1954         BYTE	 byOffExpData[DBDEF_MAX_OFFEXP_LEN];	// 离线经验	2009.7.16
1955 		BYTE	 byCountryData[DBDEF_MAX_COUNTRY_LEN];	// 国家数据	2011.10.31	64 --> 96
1956 		BYTE	 byKqEctypeData[DBDEF_MAX_KQE_LEN];		// 跨区副本数据
1957 		BYTE	 byStrikeData[DBDEF_STRIKE_BUFF_LEN];	// 跨服竞技数据
1959 		BYTE	 nWareLevel;								// 仓库等级
2066 		BYTE	 byCountryData[DBDEF_MAX_COUNTRY_LEN];		// 国家数据	2011.10.31	64 --> 96
2067 		BYTE	 byFormData[DBDEF_MAX_FORMDATA_LEN];		// 外观数据	
2068 		BYTE	 byKqEctypeData[DBDEF_MAX_KQE_LEN];			// 跨区副本数据
2069 		BYTE	 byStrikeData[DBDEF_STRIKE_BUFF_LEN];		// 跨服竞技数据
2071 		BYTE	 nCurLingHun;								// 当前灵魂态（命=0;地=1;天=2）
2518 		DWORD	dwUserID;								/// 帐号ID
2519 		DWORD   dwActorID;								/// 角色ID
2520 		BYTE    byOnOffLine;							/// 上下线标志:0:跨进程切换 1:上线(也包括因跨区切换而上线) 2:下线(也包括因跨区切换而下线)
2521 		BYTE	nCheckExistPDBID;						/// 是否需要检查PDBID是否存在(0:不需要 1:需要)
2523 		DBREQ_PARAM_ACTORFINISH(void)
2546 		DWORD	dwUserID;								/// 帐号ID
2547 		DWORD   dwActorID;								/// 角色ID
2548 		BYTE    OnOffLine;								/// 上下线标志,0:跨进程切换 1:上线(也包括因跨区切换而上线) 2:下线(也包括因跨区切换而下线) 3:因创建人物失败而取消永久锁
2549 		int		nLockFlag;								/// 锁标志
2550 		bool	bOnlySetLock;							/// 仅加锁（为0是采用下面的规则，为1时如果以前没有锁，则只加一把永久锁，如果有锁就直接返回，
7264 		int   nOnlineAvgNum;		//本区一分钟内平均在线人数
7265 		int   nOnlineMinNum;		//本区一分钟内最小在线人数
7266 		int   nOnlineAreaMaxNum;    //跨区一分钟内最高在线人数 
7267 		int   nOnlineAreaAvgNum;    //跨区一分钟内平均在线人数 
7268 		int   nOnlineAreaMinNum;    //跨区一分钟内最小在线人数 
7271 		GAMEDB_PARAM_LOG_ONLINENUM_NEW(void)
7272 		{
10697 		{
10698 			DWORD   dwWorldID;								//游戏世界ID
10699 			DWORD   dwNewWorldID;							//新游戏世界ID（漂移可以跨区移民）
10700 			DWORD   dwUserID;								//账号ID
10701 			DWORD   dwActorID;								//角色ID
10740 		{
10741 			DWORD   dwWorldID;							//游戏世界ID
10742 			DWORD   dwNewWorldID;						//新游戏世界ID（漂移可以跨区移民）
10743 			DWORD   dwUserID;							//账号ID
10744 			DWORD   dwActorID;							//角色ID

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\ICountryDataBaseDef.h 88 KB H 文件 2014/2/25 14:53:58 2018/10/23 19:32:39 2018/10/23 19:32:39 2
147 		DWORD dwFlag;									// 国家基础数据标识 EMCountryBaseDBFlag
148 		char szLocalName[DBDEF_COUNTRY_NAME_MAXSIZE];	// 本区国家短名称
149 		char szWorldName[DBDEF_COUNTRY_NAME_MAXSIZE];	// 跨区国家名称
150 		char szDBWorldName[DBDEF_COUNTRY_NAME_MAXSIZE];	// 游戏世界区名
152 		DB_Table_CountryBase(void)
505 		DWORD dwFlag;									// 国家基础数据标识 EMCountryBaseDBFlag
506 		char szLocalName[DBDEF_COUNTRY_NAME_MAXSIZE];	// 本区国家短名称
507 		char szWorldName[DBDEF_COUNTRY_NAME_MAXSIZE];	// 跨区国家名称
509 		DB_Param_Add_Country(void)
510 		{

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\EctypeAssistDef.h 10 KB H 文件 2014/2/25 14:53:56 2018/10/23 19:32:39 2018/10/23 19:32:39 6
5 ** 日  期:	2010-7-15
6 ** 版  本:	1.0
7 ** 描  述:	跨区副本助手定义文件
8 ** 应  用:  	
9 ********************************************************************/
127 	}
128 };
130 // 跨区副本成员结构
131 struct SKqEctypeContext
132 {
145 	}
146 };
148 // 跨区副本成员结构
149 struct SKqEctypeMember
150 {
164 	}
165 };
167 // 玩家跨区副本结构
168 struct SKqEctypePartContext
169 {
182 	}
183 };
185 // 玩家跨区副本位置信息
186 struct SKqEctypePartLocInfo
187 {
231 //=====================================消息定义==================================
232 // 上层消息码为 MSG_MATCH_KQE
234 // 创建一个跨区副本
235 #define MSG_KQE_CREATEECTYPE		1
236 // 方向：公共区社会服 - > 公共区场景服

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DWarDef.h 36 KB H 文件 2014/2/25 14:53:56 2018/10/23 19:32:39 2018/10/23 19:32:39 1
591 	};
592 };
595 // 跨区国战基本信息扩展数据结构 客户端
596 struct SCountryWarBaseInfo
597 {

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DVoice.h 76 KB H 文件 2014/2/25 14:53:55 2018/10/23 19:32:39 2018/10/23 19:32:39 3
633 };
635 ///// 公用数据结构定义 //////////////////////////////////////////////
637 // 通过跨区语音服务器中转消息必须加入此消息体
638 struct SMsgVoiceHead
639 {
1374 	ENUM_MSG_VOICE_CHATINVITE,						// 私聊邀请
1375 	ENUM_MSG_VOICE_ADDVOICEBLUEDIAMOND,				// 添加蓝钻
1377 	ENUM_MSG_VOICE_BRIDGEDATA,						// 发送消息到其他服务器，可跨区
1378 	ENUM_MSG_VOICE_CHECK,							// 检测消息，用来跨服检测网络连接状态
1379 	ENUM_MSG_VOICE_CHECKBACK,						// 检测消息回复，用来跨服检测网络连接状态
2505 };
2508 //////////////////////////////////////////////////////////////////////////
2509 // 发送消息到其他服务器，可跨区
2510 #define MSG_VOICE_BRIDGEDATA ENUM_MSG_VOICE_BRIDGEDATA
2511 struct SMsgVoiceBridgeData

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DStarTrekMsg.h 3 KB H 文件 2014/2/25 14:53:52 2018/10/23 19:32:39 2018/10/23 19:32:39 1
5 ** 日  期:	2010/6/29 17:24
6 ** 版  本:	1.0
7 ** 描  述:	跨区消息定义头文件
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DStarTrekDef.h 8 KB H 文件 2014/2/25 14:53:52 2018/10/23 19:32:39 2018/10/23 19:32:39 6
5 ** 日  期:	2010/6/29 17:24
6 ** 版  本:	1.0
7 ** 描  述:	跨区数据宏定义头文件
8 ** 应  用:  	
9 	
22 enum
23 {
24 	tStarTrek_Type_GoEctype = 0,			// 跨区下副本
25 	tStarTrek_Type_GoNormal = 0,			// 返回本区
26 };
43 	tStarTrek_Result_Succeed = 1,			// 成功
44 	tStarTrek_Result_ParameterError,		// 参数错误
45 	tStarTrek_Result_NoSupport,				// 不支持跨区
46 	tStarTrek_Result_DisconBridge,			// 与桥服务器断开
47 	tStarTrek_Result_StateError,			// 人物控制状态错误
58 	tStarTrek_Result_InGameWorldUserLock,	// 迁入游戏世界已有角色
59 	tStarTrek_Result_ExecuteSPFail,			// 调用存储过程失败
60 	tStarTrek_Result_CloseStarTreak,		// 关闭了跨区传送
61 	tStarTrek_Result_PersonNoExist,			// 回迁时，角色不存在
62 	tStarTrek_Result_OverMemory,			// 内存已达上限
62 	tStarTrek_Result_OverMemory,			// 内存已达上限
63 	tStarTrek_Result_NoMakeSTID,			// 无法生成STID
64 	tStarTrek_Result_STing,					// 正在跨区状态
65 	tStarTrek_Result_CannotForceExitTank,	// 无法拉下载具
66 	tStarTrek_Result_PublicDBPersonExist,	// 公共区游戏库内存在此角色
101 typedef LONGLONG	STID;
103 ///////////////////////////////////////////////////////////////////
104 // 跨区传送的上下文
105 struct SStarTrekContext
106 {	

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DPassportModule.h 14 KB H 文件 2014/2/25 14:53:50 2018/10/23 19:32:39 2018/10/23 19:32:39 1
73 };
76 ///// 公用数据结构定义 //////////////////////////////////////////////
78 // 通过跨区通行证服务器中转消息必须加入此消息体
79 struct SMsgPassportHead
80 {

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DMatchModule.h 131 KB H 文件 2014/2/25 14:53:50 2018/10/23 19:32:39 2018/10/23 19:32:39 17
2260 	ENUM_MSG_MATCH_INVALID = 0,
2261 	ENUM_MSG_MATCH_DATE_SUBMSG,			// 服务器撮合信息子消息
2262 	ENUM_MSG_MATCH_ECTYPEASSIST,		// 跨区副本保姆子消息
2263 	ENUM_MSG_MATCH_BRIDGE_DATA,			// 跨区中转消息
2264 	ENUM_MSG_MATCH_DATE_CSMSG,			// 服务器竞技撮合信息子消息
2265 	ENUM_MSG_MATCH_DATE_PKMSG,			// 服务器竞技信息子消息
2340 	Match_SubMsg_RequestAcceptMatch,			// 发送确认组队撮合
2341 	Match_SubMsg_RequestTeamInfo,				// 请求撮合队伍信息
2342 	Match_SubMsg_RequestLookWorldEquip,			// 请求跨区查看玩家装备
2343 	Match_SubMsg_LookWorldEquipResult,			// 请求跨区查看玩家装备结果
2344 	Match_SubMsg_RequestStateData,				// 请求初始化状态数据
2345 	Match_SubMsg_RequestTeamFubenInfo,			// 请求队员全部副本状态数据
2350 	Match_SubMsg_InviteJoinMatchTeam,			// 邀请加入撮合队伍
2351 	Match_SubMsg_AcceptInviteJoinMatch,			// 同意被邀请加入撮合队伍
2352 	Match_SubMsg_WorldOnlineUserAdd,			// 跨区用户上线
2353 	Match_SubMsg_WorldOnlineUserRemove,			// 跨区用户下线
2354 	Match_SubMsg_RequestSetMemberMinCount,		// 请求设定最少进入副本人数
2355 	Match_SubMsg_RequestOwnerSetMemberMinCount,	// 同队玩家请求房主设定最少进入副本人数
2511 //};
2513 //////////////////////////////////////////////////////////////////////////
2514 // 跨区副本助手子消息
2515 #define MSG_MATCH_KQE					ENUM_MSG_MATCH_ECTYPEASSIST
2515 #define MSG_MATCH_KQE					ENUM_MSG_MATCH_ECTYPEASSIST
2517 // 跨区副本保姆子消息数据结构
2518 // 与 SMsgMatchDataSubMsg 一样
2518 // 与 SMsgMatchDataSubMsg 一样
2520 // 跨区副本助手子消息代码定义
2521 enum EMMatchMatronSubMsgCode
2522 {
2526 };
2529 //////////////////////////////////////////////////////////////////////////
2530 // 跨区中转消息
2531 #define MSG_MATCH_BRIDGE_DATA					ENUM_MSG_MATCH_BRIDGE_DATA
2531 #define MSG_MATCH_BRIDGE_DATA					ENUM_MSG_MATCH_BRIDGE_DATA
2533 // 跨区中转消息数据结构
2534 struct SMsgMatchBridgeData
2535 {
3152 	Match_WarMsg_RequestSetNotice,		// 国王请求设置公告信息
3153 	Match_WarMsg_SendWorldWarResult,	// 更新国战场战斗结果信息到社会服
3154 	Match_WarMsg_RequestCountryInfo,	// 请求更新跨区共享国家信息
3155 	Match_WarMsg_RequestAddHistory,		// 请求加入国家历史信息
3156 	Match_WarMsg_RequestAddClanGold,	// 请求增加帮会资金
3162 	Match_WarMsg_CountryWarAutoJoin,	// 客户端显示并可直接加入国战
3163 	Match_WarMsg_RequestOutRelive,		// 请求离开复活点
3164 	Match_WarMsg_RequestKqWarCall,		// 国王发起跨区国战召集
3165 	Match_WarMsg_CountryWarResultNotice,// 国战信息结果通知
3166 	Match_WarMsg_SendCountryWarScore,	// 更新国战场积分结果信息到社会服
3205 	Match_WarMsg_Max
3206 };
3209 // Match_WarMsg_UpdateCountryBase,		// 更新跨区国战基本信息
3212 // 更新跨区国战基本信息消息数据结构
3213 struct SMsgWarUpdateBase_SC
3214 {
3351 	}
3352 };
3355 // 跨区国战 国王 发起召集原区国民参与跨区国战
3356 struct SMsgMatchRequestRequestKqWarCall_SS
3357 {

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DMatchEvent.h 13 KB H 文件 2014/2/25 14:53:49 2018/10/23 19:32:39 2018/10/23 19:32:39 5
5 ** 日  期:	2011-03-03
6 ** 版  本:	1.0
7 ** 描  述:	跨区系统模块事件公共定义
8 ** 应  用:  	
9 	
24 // 公共定义
27 /***************************************************************/
28 ////////////////////// 跨区系统事件码  //////////////////////////
29 // 上层的事件码必定是 SOURCE_TYPE_MATCH
30 /***************************************************************/
29 // 上层的事件码必定是 SOURCE_TYPE_MATCH
30 /***************************************************************/
31 // 跨区系统事件码 EVENT_MATCH + 事件码名
34 ///////////////////////////////////////////////////////////////////
35 // 事件码枚举定义: ENUM + 事件码名
36 enum EMEventMatch
37 {
38 	ENUM_EVENT_MATCH_ROOTID = 1,				// 跨区系统根事件码
39 	ENUM_EVENT_MATCH_ADDUSER,					// 跨服玩家上线
40 	ENUM_EVENT_MATCH_REMOVEUSER,				// 跨服玩家下线
65 	ENUM_EVENT_MATCH_PLAYER_EXIT,				// 玩家退出竞技事件 											
66 	ENUM_EVENT_MATCH_STRIKE_RELEASE,			// 竞技场关闭事件										
68 	ENUM_EVENT_MATCH_MAXID,						// 跨区系统最大事件码
69 };
72 /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DManagerModule.h 108 KB H 文件 2014/2/25 14:53:49 2018/10/23 19:32:39 2018/10/23 19:32:39 1
155 	MSG_MG_ENDPOINT_VERIFY,				// 验证码服务器	［简称：Y］
156 	MSG_MG_ENDPOINT_TRACKER,			// Tracker服务器［简称：T］
157 	MSG_MG_ENDPOINT_BRIDGE,				// 跨区桥服务器	［简称：B］
158 	MSG_MG_ENDPOINT_DBHTTP,				// DB应用服务器	［简称：D］
159 	MSG_MG_ENDPOINT_PASSPORT,			// 通行证服务器	［简称：P］	

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DGlobalMisc.h 50 KB H 文件 2014/2/25 14:53:47 2018/10/23 19:32:39 2018/10/23 19:32:39 3
781 	EKickoutClient_Reason_StopZoneSvr,				// 停止场景服
782 	EKickoutClient_Reason_GMKickout,				// GM强制踢人
783 	EKickoutClient_Reason_StarTrekFailed,			// 跨区切换失败
784 	EKickoutClient_Reason_SecretiveError,			// 诡异的错误
785 	EKickoutClient_Reason_KickoutSelf,				// 自己踢掉自己
908 	ECONNECT_STATE_SHOOT,						    // 切换进程状态
909 	ECONNECT_STATE_REBUILD,							// 重建态
910 	ECONNECT_STATE_TREK,							// 跨区切换态
911 	ECONNECT_STATE_TREKLOGIN,						// 跨区登陆态
912 	ECONNECT_STATE_SAVEDATA,						// 保存数据状态	
913 	ECONNECT_STATE_RELEASE,						    // 释放状态, 一个玩家的连接最终会走到这个状态来释放全部资源

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DGlobalMessage.h 80 KB H 文件 2014/2/25 14:53:47 2018/10/23 19:32:39 2018/10/23 19:32:39 4
1968 };
1970 ///////////////////////////////////////////////////////////////////
1971 // 同步跨区副本部件身上的数据到客户端
1972 #define MSG_ACTION_KQE_SYNCH									135
1972 #define MSG_ACTION_KQE_SYNCH									135
1974 // 同步跨区副本部件状态到客户端
1975 #define MSG_ACTION_KQE_STATE									136
1977 /// 上下文：SKqEctypePartContext
1977 /// 上下文：SKqEctypePartContext
1979 //////////////////////////////////////////////////////////////////////////
1980 // 跨区查看玩家装备
1981 #define MSG_ACTION_WORLD_LOOKEQUIP								137
1983 struct SMsgActionWorldLookEquip_SC
2222 };
2224 ///////////////////////////////////////////////////////////////////
2225 // 同步跨区副本部件挑战假人数据到客户端
2226 #define MSG_ACTION_DUMMY_SYNCH									166
2228 // 使用法宝技能

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DGlobalGame.h 23 KB H 文件 2014/2/25 14:53:46 2018/10/23 19:32:39 2018/10/23 19:32:39 3
497 	MSG_ENDPOINT_VERIFY,						// 验证码服务器	［简称：Y］	
498 	MSG_ENDPOINT_TRACKER,						// Tracker服务器［简称：T］	
499 	MSG_ENDPOINT_BRIDGE,						// 跨区桥服务器	［简称：B］	
500 	MSG_ENDPOINT_DBHTTP,						// DB应用服务器	［简称：D］	
501 	MSG_ENDPOINT_PASSPORT,						// 通行证服务器	［简称：P］	
564 	MSG_MODULEID_STATUE,						// 雕塑系统	
565 	MSG_MODULEID_CASTLE,						// 帮会领地战	
566 	MSG_MODULEID_BRIDGE,						// 跨区桥服务器模块
567 	MSG_MODULEID_STARTREK,						// 跨区模块
568 	MSG_MODULEID_MATCH,							// 跨服组队撮合系统模块
569 	MSG_MODULEID_AUCTION,						// 竞拍模块

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DGlobalEvent.h 54 KB H 文件 2014/2/25 14:53:46 2018/10/23 19:32:39 2018/10/23 19:32:39 3
46 	SOURCE_TYPE_TRANSPORT,			// 传送事件
47 	SOURCE_TYPE_CASTLE,				// 领地事件
48 	SOURCE_TYPE_MATCH,				// 跨区事件
49 	SOURCE_TYPE_WING,				// 翅膀事件
50 	SOURCE_TYPE_MAX,
469 {
470 	LONGLONG	uidPerson;			// 哪个人
471 	int			nMode;				// 1:下线 2:跨进程切换 3:跨区切换
472 	int			nWaitTime;			// 还等待多少ms，过了后强制切换
473 	// 如果否决，请将原因填至此变量中，发事件模块好提示玩家
759 	LONGLONG		uidEntity;			// 实体uid
760 };
762 // 人物需要跨区传送
763 #define EVENT_PERSON_STARTREK									63
764 // 场景服（vote/execute）

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DEntityProp.h 45 KB H 文件 2014/2/25 14:53:45 2018/10/23 19:32:39 2018/10/23 19:32:39 2
93 	ENTITYPART_PERSON_SUIT,				// 套装部件
94 	ENTITYPART_PERSON_RESADJUST,		// 资源部件
95 	ENTITYPART_PERSON_ECTYPEASSIST,		// 跨区副本助手
96 	ENTITYPART_PERSON_STRIKE,			// 跨区竞技部件
97 	ENTITYPART_PERSON_ROLEVENDED,		// 角色出售部件
98 	ENTITYPART_PERSON_CARDCOLLECT,		// 卡片收集部件

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DEntityBuild.h 24 KB H 文件 2014/2/25 14:53:45 2018/10/23 19:32:39 2018/10/23 19:32:39 2
330 /// 切换场景国家部件数据最长长度
331 #define TRANSMAP_MAX_CountryData_LEN		96  // 64 ---> 96 2011.11.02
333 /// 切换场景跨区副本数据最长长度
334 #define TRANSMAP_MAX_KQE_LEN				64
336 // 跨服竞技PK数据
425 	BYTE				byOffExpData[TRANSMAP_MAX_OFFEXPDATA_LEN];		// 离线经验数据
426 	BYTE				byCountryData[TRANSMAP_MAX_CountryData_LEN];	// 国战部件数据 
427 	BYTE				byKqEctypeData[TRANSMAP_MAX_KQE_LEN];			// 跨区副本数据
428 	BYTE				byStrikeData[DBDEF_STRIKE_BUFF_LEN];			// 跨服竞技数据
429 	BYTE				byNerveData[TRANSMAP_NERVE_BUFF_LEN];			// 经脉数据

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DCountryModule.h 165 KB H 文件 2014/2/25 14:53:44 2018/10/23 19:32:39 2018/10/23 19:32:39 8
382 	DWORD dwFlag;									// 国家基础数据标识 EMCountryBaseDBFlag
383 	char szLocalName[COUNTRY_NAME_MAXSIZE];			// 本区国家短名称
384 	char szWorldName[COUNTRY_NAME_MAXSIZE];			// 跨区国家名称
385 	char szDBWorldName[COUNTRY_NAME_MAXSIZE];		// 所属数据库游戏世界名称
387 	SCountryBaseInfo(void)
2435 	ENUM_MSG_COUNTRY_WORLDWAR_REQUEST,				// 请求发国战记录信息
2436 	ENUM_MSG_COUNTRY_WORLDCOUNTRY_UPDATE,			// 更新共享国家信息
2437 	ENUM_MSG_COUNTRY_WORLDCOUNTRY_CALL,				// 跨区国战召集
2439 	// 其他
2440 	ENUM_MSG_COUNTRY_SEND_CLIENT_NOTICE,			// 社会服发送给客户端的公告消息
2805 	BYTE nTitleLen;						// 国家公告长度
2806 	BYTE nLocalNameLen;					// 本区国家短名称长度
2807 	BYTE nWorldNameLen;					// 跨区国家名称长度
2808 	BYTE nDBWorldNameLen;				// 所属数据库游戏世界名称长度
2810 	//char szName[COUNTRY_NAME_MAXSIZE];				// 国家名称
2811 	//char szTitle[COUNTRY_LONGSTR_MAXSIZE];			// 国家公告
2812 	//char szLocalName[COUNTRY_NAME_MAXSIZE];			// 本区国家短名称
2813 	//char szWorldName[COUNTRY_NAME_MAXSIZE];			// 跨区国家名称
2814 	//char szDBWorldName[COUNTRY_NAME_MAXSIZE];			// 所属数据库游戏世界名称
2816 	SMsgCountryBaseAnswerBuildServer_OS(void)
2855 	BYTE nTitleLen;						// 国家公告长度
2856 	BYTE nLocalNameLen;					// 本区国家短名称长度
2857 	BYTE nWorldNameLen;					// 跨区国家名称长度
2858 	BYTE nDBWorldNameLen;				// 所属数据库游戏世界名称长度
2860 	//char szName[COUNTRY_NAME_MAXSIZE];						// 国家名称
2861 	//char szTitle[COUNTRY_LONGSTR_MAXSIZE];					// 国家公告
2862 	//char szLocalName[COUNTRY_NAME_MAXSIZE];					// 本区国家短名称
2863 	//char szWorldName[COUNTRY_NAME_MAXSIZE];					// 跨区国家名称
2864 	//char szDBWorldName[COUNTRY_NAME_MAXSIZE];					// 所属数据库游戏世界名称
2866 	SMsgCountryBaseAnswerBuildClient_OC(void)
4368 	}
4369 };
4372 // 跨区国战 召集员消息定义
4373 #define MSG_COUNTRY_WORLDCOUNTRY_CALL					ENUM_MSG_COUNTRY_WORLDCOUNTRY_CALL
4373 #define MSG_COUNTRY_WORLDCOUNTRY_CALL					ENUM_MSG_COUNTRY_WORLDCOUNTRY_CALL
4375 // 跨区国战 召集员结构体
4376 struct SMsgCountryWorldCountryCall_S
4377 {

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DBridgeModule.h 19 KB H 文件 2014/2/25 14:53:42 2018/10/23 19:32:39 2018/10/23 19:32:39 6
5 ** 日  期:	2009/8/20
6 ** 版  本:	1.0
7 ** 描  述:	跨区桥服务器模块定义	
8 ** 应  用:  	
9 	
89 };
92 ///// 公用数据结构定义 //////////////////////////////////////////////
94 // 通过跨区桥服务器中转消息必须加入此消息体
95 struct SMsgBridgeHead
96 {
150 	DWORD dwFlag;						// 国家基础数据标识 EMCountryBaseDBFlag
151 	char szName[BRIDGE_NAME_MAXSIZE];	// 本区国家名称
152 	char szWorldName[BRIDGE_NAME_MAXSIZE];		// 跨区国家名称
153 	char szDBWorldName[BRIDGE_NAME_MAXSIZE];	// 所属数据库游戏世界名称
155 	SBridgeCountryProperty(void)
164 {
165 	ENUM_EVENT_BRIDGE_INVALID = 0,
166 	ENUM_EVENT_BRIDGE_HANDSHAKE,					// 与跨区桥服务器握手成功事件
167 	ENUM_EVENT_BRIDGE_BUILD_PART,					// 创建扩展信息数据事件
168 	ENUM_EVENT_BRIDGE_SERVERLIST_ALL,				// 全部服务器加入事件
181 #define EVENT_BRIDGE_MAXID						ENUM_EVENT_BRIDGE_MAXID
183 //////////////////////////////////////////////////////////////////////////
184 // 与跨区桥服务器握手成功事件
185 #define EVENT_BRIDGE_HANDSHAKE				ENUM_EVENT_BRIDGE_HANDSHAKE
186 // 事件数据结构
333 // 消息码与数据结构
335 /***************************************************************/
336 ///////////////////// 跨区桥服务器模块 的消息码/////////////////
337 // 上层的消息码必定是 MSG_MODULEID_BRIDGE
338 /***************************************************************/

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DBattleRideModule.h 24 KB H 文件 2014/2/25 14:53:42 2018/10/23 19:32:38 2018/10/23 19:32:38 1
434 	bool	bReceiveCastleEvent;	// 接收标志
435 	bool	bLastMapIsOnSteed;		// 前面切地图时战骑状态
436 	int		nNo1NewPowerValue;		// 排行榜第1名战力值（仅对跨区作用）
437 	int		nLastChangeMapID;		// 上张地图mapID
438 	DWORD	dwBRCampFightPDBID;		// 铁骑营挑战玩家PDBID

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\ChatMsgDef.h 18 KB H 文件 2014/2/25 14:53:35 2018/10/23 19:32:38 2018/10/23 19:32:38 3
470 	// 禁言自己， 上下文：(const char* reason)
471 	ChatMsg_MuteSelf,
473 	// 跨区踢人
474 	ChatMsg_KickoutToPublicWorld,
474 	ChatMsg_KickoutToPublicWorld,
476 	// 跨区传送
477 	ChatMsg_HangAround,
477 	ChatMsg_HangAround,
479 	// 跨区聊天
480 	ChatMsg_KuaQuChat,
482 	/// 聊天信息到达	上下文：(dbid sender, UID senderUID, ulong channel, ulong worldId, const char* name, [const char* honor,] [uchar city,] [const char* targetName,] const char* text, const char* datetime)

I:\work\source\盛世OL\[src.cool]盛世OL\Server\GameServer\share\protocol.h 36 KB H 文件 2014/2/25 15:44:20 2018/10/23 13:19:21 2018/10/23 13:19:21 1
64 		MAPGROUP_UPDATE_TEAM_LEADER = MAPGROUP_BASE + 32,           // 更改队长 [哈达 ?7/7/2008]
65 		MAPGROUP_FORBID_IPROLE		= MAPGROUP_BASE + 33,			// 所有区封IP上的用户 [YuHaiyun 2008-9-12 16:43]
66 		MAPGROUP_FORBID_SEND_MACID_TIMEOUT /*= MAPGROUP_BASE + 34*/,			// 跨区封发机超 [YuHaiyun 2008-9-30 0:20]
67 		MAPGROUP_SET_PLAYER_EXP		= MAPGROUP_BASE + 35,		//设置玩家打完怪翻几倍经验奖励
68 		MAPGROUP_QUERY_USER			= MAPGROUP_BASE + 36,			// 远程查询玩家是否在线,或其他

I:\work\source\武侠无双\zccode_chess_0027\武侠无双\WXWS_CODE\SwordClient\uiparse\CYUIDlg.h 18 KB H 文件 2011/4/26 14:22:54 2018/10/23 15:35:24 2018/10/23 15:35:24 1
207 	//CY_VENDUE,				//在拍卖系统里面的确认按钮
208 	//CY_SEEWAR,				//确定观战
209 	//CY_ACROSSWORLD,         //申请跨区
210 	//CY_USERGETEXP,          //领取USER经验
211 	//CY_BBGETEXP,            //领取BB的经验

I:\work\source\武侠无双\zccode_chess_0027\武侠无双\WXWS_CODE\NewDBServer\Define.h 3 KB H 文件 2011/3/25 10:15:55 2018/10/23 15:32:47 2018/10/23 15:32:47 1
40 	//0x03双人点卡返回信息，同上面的标志
41 	//0x05查询最后在线时间和当日累计在线时间
42 const BYTE TO_LOGIN_KICKOTHERLOGINMAN = 0x63;//发送给login要求跨区域T人
44 const BYTE ONCLOSE = 0xf0;//关闭Socket后添加的任务包的类型，用于一些逻辑的处理
45 const BYTE CIRCLE  = 0xf1;//循环发送包，检测是否意外关闭

I:\work\source\武侠无双\zccode_chess_0027\武侠无双\WXWS_CODE\CreateAccount\Define.h 3 KB H 文件 2011/5/4 13:22:55 2018/10/23 15:30:20 2018/10/23 15:30:20 1
39 	//0x03双人点卡返回信息，同上面的标志
40 	//0x05查询最后在线时间和当日累计在线时间
41 const BYTE TO_LOGIN_KICKOTHERLOGINMAN = 0x63;//发送给login要求跨区域T人
43 const BYTE ONCLOSE = 0xf0;//关闭Socket后添加的任务包的类型，用于一些逻辑的处理
44 const BYTE CIRCLE  = 0xf1;//循环发送包，检测是否意外关闭

I:\work\source\天空之剑\[src.cool]天空之剑\sky\Code\SrcServer\ObjectServer\9GridMan.h 6 KB H 文件 2013/5/24 13:10:14 2018/10/23 14:48:33 2018/10/23 14:48:33 4
32 	
33 	//////////////////////////////////////////////////////////////////////////
34 	// 描  述：返回两个TILE坐标点之间是否跨区了（即：两点在不同的九宫格内）
35 	//         若跨过了九宫返回新接触的格子编号列表（格子在地图上的编号）
36 	// 输  入：两个TILE坐标点ptTileFirst、ptTileSecond
36 	// 输  入：两个TILE坐标点ptTileFirst、ptTileSecond
37 	//         nOldGridCount为pOldGrid的大小，nNewGridCount为pNewGrid的大小
38 	// 返回值：返回FALSE表示没有跨区
39 	//         nOldGridCount为旧的不要了的格子数，pOldGrid存放旧的不要了的格子编号列表，
40 	//         nNewGridCount为新进入的格子数，pNewGrid存放新进入的格子编号列表
63 	//////////////////////////// 以下函数用于小九宫格 ////////////////////////
64 	//////////////////////////////////////////////////////////////////////////
65 	// 描  述：返回两个TILE坐标点之间是否跨区了（即：两点在不同的小九宫格内）
66 	//         若跨过了九宫返回新接触的格子编号
67 	// 输  入：两个TILE坐标点ptTileFirst、ptTileSecond
66 	//         若跨过了九宫返回新接触的格子编号
67 	// 输  入：两个TILE坐标点ptTileFirst、ptTileSecond
68 	// 返回值：返回FALSE表示没有跨区
69 	//         nnOldGridID为旧的格子ID，nNewGridID为新的格子ID
70 	// 备  注：小九宫格一个格子的宽度为GRID9_T_SIZEX_SMALL，高度为GRID9_T_SIZEY_SMALL

I:\work\source\剑侠时代\jxsd\core\地图插件\jxsd\code\Server\GameServer\share\protocol.h 31 KB H 文件 2010/12/21 10:11:51 2018/10/19 14:11:35 2018/10/19 14:11:35 1
62 		MAPGROUP_UPDATE_TEAM_LEADER = MAPGROUP_BASE + 32,           // 更改队长 [wxy ?7/7/2008]
63 		MAPGROUP_FORBID_IPROLE		= MAPGROUP_BASE + 33,			// 所有区封IP上的用户 [wxy 2008-9-12 16:43]
64 		MAPGROUP_FORBID_SEND_MACID_TIMEOUT /*= MAPGROUP_BASE + 34*/,			// 跨区封发机超 [wxy 2008-9-30 0:20]
65 		MAPGROUP_SET_PLAYER_EXP		= MAPGROUP_BASE + 35,		//设置玩家打完怪翻几倍经验奖励
66 		MAPGROUP_QUERY_USER			= MAPGROUP_BASE + 36,			// 远程查询玩家是否在线,或其他

I:\work\source\剑侠时代\[src.cool]剑侠时代\jxsd\code\Server\GameServer\share\protocol.h 31 KB H 文件 2010/12/21 10:11:51 2018/10/19 14:11:14 2018/10/19 14:11:14 1
62 		MAPGROUP_UPDATE_TEAM_LEADER = MAPGROUP_BASE + 32,           // 更改队长 [wxy ?7/7/2008]
63 		MAPGROUP_FORBID_IPROLE		= MAPGROUP_BASE + 33,			// 所有区封IP上的用户 [wxy 2008-9-12 16:43]
64 		MAPGROUP_FORBID_SEND_MACID_TIMEOUT /*= MAPGROUP_BASE + 34*/,			// 跨区封发机超 [wxy 2008-9-30 0:20]
65 		MAPGROUP_SET_PLAYER_EXP		= MAPGROUP_BASE + 35,		//设置玩家打完怪翻几倍经验奖励
66 		MAPGROUP_QUERY_USER			= MAPGROUP_BASE + 36,			// 远程查询玩家是否在线,或其他

