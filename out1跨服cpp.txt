H:\work\source\QQ西游\3D QQ西游全套源码\QQ.wim\QQ西遊\servers\WorldServer\FJDB.cpp 41 KB CPP 文件 2010/6/22 11:20:49 2018/5/20 0:11:19 2018/5/20 0:11:19 3
836 				MSG_SET_STR( smsg, src_player);
837 				//MSG_SET_UINT( smsg, unit_->guid_ );
838 				MSG_SET_UINT( smsg, 0 );// 跨服，所以无效。
839 				MSG_SET_UCHAR( smsg, u_char(1)	);
840 				MSG_SET_STR( smsg, dest_player);
878 			MSG_NEW( SMSG_CHAT_GUILD, smsg );
879 			MSG_SET_STR( smsg, src_player );
880 			MSG_SET_UINT( smsg, 0 );// 跨服，无效
881 			MSG_SET_STR( smsg, content );
882 			guild->bc_message( smsg, member );
900 			MSG_SET_STR( smsg, src_player);
901 			MSG_SET_INT( smsg, src_force_id);
902 			MSG_SET_UINT( smsg, 0 );// 跨服，无效
903 			MSG_SET_STR( smsg, content);
904 			// 系统广播

H:\work\source\QQ西游\3D QQ西游全套源码\servers\servers\GameServer\QGameServer.cpp 34 KB CPP 文件 2011/5/3 17:29:34 2018/5/20 0:09:50 2018/5/20 0:09:50 1
454 	if (!TalismanCompound::load("tables/clsvshare/fabao_hecheng_level.csv"))
455 		return false;
457 	// 跨服战场初始坐标
458 	if (!load_battle_start_loc("levels/InterServiceBattleStartLoc.xml"))
459 		return false;

H:\work\source\QQ西游\3D QQ西游全套源码\servers\servers\GameServer\QPlayerController.cpp 171 KB CPP 文件 2011/5/3 17:29:34 2018/5/20 0:09:50 2018/5/20 0:09:50 3
263 	//记录日志用
264 	__int64		eventid = QGameServer::inst->eventid_++;
266 	//跨服战场服务器不要送礼
267 	if (QGameServer::inst->is_InterServiceBattleServer() == false)
268 	{
1225 		unit_->set_fvalue(FHP,				c_info->hp_);				
1226 		unit_->set_fvalue(FMP,				c_info->mp_);				
1228 		//加入跨服战场的判定
1229 		if (QGameServer::inst->is_InterServiceBattleServer())
1230 		{
1927 	//	}
1928 	//}
1930 	//跨服战场服务器不要送礼
1931 	if (QGameServer::inst->is_InterServiceBattleServer() == false)
1932 	{

H:\work\source\QQ西游\3D QQ西游全套源码\servers\servers\GameServer\QPlayerItem.cpp 132 KB CPP 文件 2011/5/3 17:29:34 2018/5/20 0:09:50 2018/5/20 0:09:50 1
752 		return true;
753 	}
754 	//跨服战场禁掉
755 	if (QGameServer::inst->is_InterServiceBattleServer())
756 	{

H:\work\source\QQ西游\3D QQ西游全套源码\servers\servers\GameServer\QRaid.cpp 28 KB CPP 文件 2011/5/3 17:29:34 2018/5/20 0:09:50 2018/5/20 0:09:50 1
677 	else
678 	{
679 		//跨服战场需要判势力
680 		if (QGameServer::inst->is_InterServiceBattleServer())
681 		{

H:\work\source\QQ西游\3D QQ西游全套源码\servers\servers\GameServer\QSkillAct.cpp 245 KB CPP 文件 2011/5/3 17:29:34 2018/5/20 0:09:50 2018/5/20 0:09:50 2
5969 	virtual void action( u_short skill_guid, QUnit* dest, QUnit* src, void* param , float result_modify_rate )
5970 	{
5971 		//是不是在跨服战场中
5972 		if (QGameServer::inst->is_InterServiceBattleServer())
5973 		{
9383 				return;
9384 			}
9386 			//跨服战场禁掉
9387 			if (QGameServer::inst->is_InterServiceBattleServer())
9388 			{

H:\work\source\QQ西游\3D QQ西游全套源码\servers\servers\InstServer\FJInstDB.cpp 34 KB CPP 文件 2011/5/3 17:26:46 2018/5/20 0:09:49 2018/5/20 0:09:49 2
368 				MSG_SET_STR( smsg, src_player);
369 				//MSG_SET_UINT( smsg, unit_->guid_ );
370 				MSG_SET_UINT( smsg, 0 );// 跨服，所以无效。
371 				MSG_SET_UCHAR( smsg, u_char(1)	);
372 				MSG_SET_STR( smsg, dest_player);
433 			MSG_NEW( SMSG_CHAT_GUILD, smsg );
434 			MSG_SET_STR( smsg, src_player );
435 			MSG_SET_UINT( smsg, 0 );// 跨服，无效
436 			MSG_SET_STR( smsg, content );
437 			guild->bc_message( smsg, member );

H:\work\source\QQ西游\3D QQ西游全套源码\servers\servers\WorldServer\FJDB.cpp 108 KB CPP 文件 2011/5/3 17:29:08 2018/5/20 0:09:49 2018/5/20 0:09:49 2
1853 				MSG_SET_STR( smsg, src_player);
1854 				//MSG_SET_UINT( smsg, unit_->guid_ );
1855 				MSG_SET_UINT( smsg, 0 );// 跨服，所以无效。
1856 				MSG_SET_UCHAR( smsg, u_char(1)	);
1857 				MSG_SET_STR( smsg, dest_player);
1918 			MSG_NEW( SMSG_CHAT_GUILD, smsg );
1919 			MSG_SET_STR( smsg, src_player );
1920 			MSG_SET_UINT( smsg, 0 );// 跨服，无效
1921 			MSG_SET_STR( smsg, content );
1922 			guild->bc_message( smsg, member );

H:\work\source\QQ西游\3D QQ西游全套源码\servers\servers\WorldServer\FJWorldServer.cpp 164 KB CPP 文件 2011/5/3 17:29:08 2018/5/20 0:09:49 2018/5/20 0:09:49 2
1088 	if( !player->unit_->is_dead() )
1089 		return true;
1091 	//跨服战场有自己的复活规则
1092 	if (QGameServer::inst->is_InterServiceBattleServer())
1093 	{
5455 		return true;
5456 	}
5458 	//给客户端发 跨服战场服务器的gateway地址
5459 	MSG_NEW(SMSG_SERVICE_BATTLE_ADDR, smsg);
5460 	MSG_SET_STR		(smsg, QGameServer::inst->s_props_[GSS_InterServiceBattleGateway]	);

H:\work\source\QQ西游\[src.cool]QQ西遊\servers\WorldServer\FJDB.cpp 41 KB CPP 文件 2010/6/22 11:20:49 2018/7/25 0:04:24 2018/7/25 0:04:24 3
836 				MSG_SET_STR( smsg, src_player);
837 				//MSG_SET_UINT( smsg, unit_->guid_ );
838 				MSG_SET_UINT( smsg, 0 );// 跨服，所以无效。
839 				MSG_SET_UCHAR( smsg, u_char(1)	);
840 				MSG_SET_STR( smsg, dest_player);
878 			MSG_NEW( SMSG_CHAT_GUILD, smsg );
879 			MSG_SET_STR( smsg, src_player );
880 			MSG_SET_UINT( smsg, 0 );// 跨服，无效
881 			MSG_SET_STR( smsg, content );
882 			guild->bc_message( smsg, member );
900 			MSG_SET_STR( smsg, src_player);
901 			MSG_SET_INT( smsg, src_force_id);
902 			MSG_SET_UINT( smsg, 0 );// 跨服，无效
903 			MSG_SET_STR( smsg, content);
904 			// 系统广播

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\cmtool\Code\BOTPLATFORM\MFUI.cpp 45 KB CPP 文件 2008/5/27 13:54:53 2018/9/21 20:30:34 2018/9/21 20:30:34 9
26 //		2005-02-15	Victor		根据要求改变道具在背包中的存放方案，由原来的统一
27 //								放在第一页第一格改为在第一页中随机找位置存放
28 //		2005-02-17	Victor		开始跨服务器支持，CMD_GUI_ASK 的消息格式有所变化，
29 //								多了一个整形参数：GlobalID；
29 //								多了一个整形参数：GlobalID；
30 //								为使跨服务器聊天成为可能，私聊接口加入 NetID 和
31 //								GlobalID 两个参数
31 //								GlobalID 两个参数
32 //		2005-02-18	Victor		为支持跨服务器切换场景，UI 需要做些额外的工作
33 //		2005-02-20	Victor		为支持跨服务器，组队消息发生变化，需要 GlobalID
34 //		2005-02-28	Victor		服务器 CMD_GUI_ADD_I(1506) 消息格式更改，并且增加了
35 //								“鉴定”的概念
261 	// 2005-02-18 added by Victor.
262 	// Begin VS specific
263 	case 1592:	// 准备跨服务器切换场景，UI 应该立即存盘
264 		ProcessSpanServerPrepare();
265 		break;
264 		ProcessSpanServerPrepare();
265 		break;
266 	case 1612:	// 开始跨服务器切换场景
267 		ProcessSpanServerBegin();
268 		break;
270 		ProcessQuit();
271 		break;
272 	case 1613:	// 跨服务器切换场景成功
273 		ProcessSpanServerEnd();
274 		break;
273 		ProcessSpanServerEnd();
274 		break;
275 	case 1614:	// 跨服务器切换场景失败
276 		ProcessSpanServerFailed();
277 		break;
1408 void CMFUI::ProcessSpanServerEnd()
1409 {
1410 	// 这条消息来自 NET，意为通知 UI：“跨服务器操作结束了，如果你再收到 CMD_GUI_Q_OK 就表示
1411 	// 你自己要求退出了，或者网络出错了，或者你 PP 上挨了一脚……”
1412 	m_bServerSpanning = FALSE;

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\GmSDK\Code\NetServer\Source\NetConnect.cpp 34 KB CPP 文件 2008/5/27 13:56:10 2018/9/21 20:32:29 2018/9/21 20:32:29 2
479 		}
480 		break;
481 		//接收跨服务器操作
482 	case NMC_COMMANDTOGS:
483 		{
503 		}
504 		break;
505 		//接收跨服务器失败操作
506 	case NMC_COMMANDTOGS_RETURN:
507 		{

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\GmSDK\Code\NetServer\Source\NetWorkGame.cpp 76 KB CPP 文件 2008/5/27 13:56:11 2018/9/21 20:32:29 2018/9/21 20:32:29 3
161 	SetCriticalSectionSpinCount( &g_csSRVR, 4000 );			//设置ER尝试4000次后进入内核方式
162 	
163 	//InitializeCriticalSection( &g_csChangeScen );			//跨服务器切场景
165 	InitializeCriticalSection( &g_csLogoff );				//退出
167 	InitializeCriticalSection( &g_csWorldMsg );				//社会
177 	DeleteCriticalSection( &g_csSRVR );							//ER
178 	
179 	//DeleteCriticalSection( &g_csChangeScen );					//跨服务器切场景
181 	DeleteCriticalSection( &g_csLogoff );						//退出
183 	DeleteCriticalSection( &g_csWorldMsg );					//社会
532 		SRVR_Fini();
533 		WriteLog( "SRVR_Fini() ER module succeed!\r\n" );
535 		//跨服务器切场景链表
536 		
537 		GetServer()->RemoveAllChangeScen();

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\GmSDK\Code\NetServer\Source\NetWorkServer.cpp 102 KB CPP 文件 2008/5/27 13:56:11 2018/9/21 20:32:29 2018/9/21 20:32:29 21
134 	m_nGameType = 0;										//战区类型
136 	memset( m_sGameOperations, 0, sizeof( m_sGameOperations ) );//战区名字
138 	InitializeCriticalSection( &g_csChangeScen );			//跨服务器切场景
140 	WriteLog( "CNetWorkserver constitution succeed!\r\n" );
142 }
148 	ClearDispAll();											//显示结束
150 	DeleteCriticalSection( &m_csDislist );					//显示关键区删除
152 	DeleteCriticalSection( &g_csChangeScen );				//跨服务器切场景
153  
154 	//DeleteCriticalSection( &m_csLogoff );					//玩家退出关键区删除
554 			SBaseCharacterInfo n_BaseCharacter;
555 			FormatBaseCharacterInfo( n_pUserInfo, &n_BaseCharacter );
556 			//跨服务不更新服务器
557 			WORD updatapara[4]={ NMC_UPDATECHARACTER, n_pUserInfo->IDNet(), 0, 0 };
558 			Send_AddCmd( updatapara, (char*) &n_BaseCharacter, sizeof( SBaseCharacterInfo ), MPT_COMMAND, n_nConnectSerial );
666 		//if( IsFull() == TRUE )
667 		//{
668 		//	//跨服务器切换场景失败
669 		//	WriteLog( "ServerChangeScen: fail, IsFull(), CharacterID %d, Alias %d.\r\n",
670 		//		f_userInfo->IDNet(), f_userInfo->GetAlias() );
742 		if( f_userInfo->GetChangeS() == TRUE )
743 		{
744 			//跨服务器切换场景失败
745 #ifdef _NET_LOG
746 			WriteLog( "Client ChangeScen fail, SRVR_LogOn(), CharacterID %d, Alias %d.\r\n",
988 	//转换为SBaseCharacterInfo结构
989 	FormatBaseCharacterInfo( n_pTemp, f_pCharacter );
990 	//跨服务不更新服务器
991 	if( f_bChangeServer == FALSE )
992 	{
995 		WORD updatapara[4]={ NMC_UPDATECHARACTER, n_pTemp->IDNet(), 0, 0 };
996 		Send_AddCmd( updatapara, (char*) f_pCharacter, sizeof( SBaseCharacterInfo ), MPT_COMMAND, n_nConnectSerial );
997 		//如果跨服务器过程中退出则把跨服务器标志制回
998 		n_pTemp->SetChangServer( FALSE );
999 	}
1078 			g_nIDTest = -1;
1079 		}
1081 		//检查该退出是否位跨服务器切换
1082 		ChangeServerData n_Data;
1083 		//角色退出后角色数量计数
1090 			if( RemoveChangeScenItem( &n_Data, n_NetId ) == FALSE )
1091 			{
1092 				//当成普通玩家退出,有跨服务器的玩家时,关闭主动踢出玩家时会出现.
1093 				return 1;
1094 			}
1109 				n_Data.m_BaseInfo.m_nAuthID, n_Data.m_BaseInfo.m_nCharacterID, n_Data.m_BaseInfo.m_nGlobleClientID );
1110 #endif _NET_LOG
1111 			//告诉GateServer跨服务器切场景
1112 			int n_nConnectSerial = GetAsunderGateID( n_NetId );
1113 			WORD para[4] = {NMC_CHANGESCENARIO, n_NetId, n_Data.m_RoomID ,0 };
1597 				{
1598 					WriteLog( "GM:*nosave_logoff CharacterID %d, Alias %s.\r\n", n_nID, n_Alias );
1599 					//检查该退出是否位跨服务器切换
1600 					ChangeServerData n_Data;
1601 					//角色退出后角色数量计数
1608 						if( RemoveChangeScenItem( &n_Data, n_nID, TRUE ) == FALSE )
1609 						{
1610 							//当成普通玩家退出,有跨服务器的玩家时,关闭主动踢出玩家时会出现.
1611 							return n_breturn;
1612 						}
1921 		if( LogonToCharacter( n_pUserInfo, (void*) &n_ERSaveItem) == TRUE )
1922 		{	
1923 			//区分跨服务器
1924 			if( n_pUserInfo->GetChangeS() == FALSE )
1925 			{
2000 		if( n_bLogoff == 2 )
2001 		{
2002 			// liqiang跨服务器切场景 [9/16/2004]
2003 #ifdef _NET_LOG
2004 			WriteLog( "ServerChangeScen: LogoffToCharacter() succeed, is ChangServer.\r\n" );
2207 				char szStr[1024];
2208 				memset( szStr, 0, sizeof( 0 ) );
2209 				sprintf(szStr,"Client角色跨服务器切换场景，FDBI成功接受读盘请求.Client ID为<%s>",
2210 					n_UserInfo.GetAlias() );
2211 				MessageDisplay( szStr, strlen(szStr) );
2221 				//显示信息
2222 				char szStr [NET_MESSAGE_SIZE];
2223 				sprintf(szStr,"Client跨服务器切换场景失败.Client ID为<%d>",
2224 					n_UserInfo.IDNet() );
2225 				MessageDisplay( szStr, strlen(szStr) );
2491 			//获得命令内容
2492 			n_pBuf = (MPACK_HEADER*) ( n_pmsg + sizeof(int) );
2493 			//跨服务器操作
2494 			char* n_pData = ( char* ) ( ( char* )n_pBuf + sizeof( MPACK_HEADER ) );
2495 			assert( n_pData != NULL );
2604 			//获得命令内容
2605 			n_pBuf = (MPACK_HEADER*) ( n_pmsg + sizeof(int) );
2606 			//跨服务器操作
2607 			char* n_pData = ( char* ) ( ( char* )n_pBuf + sizeof( MPACK_HEADER ) );
2608 			assert( n_pData != NULL );
2620 			case 1:
2621 				{
2622 					//检测是否为跨服务器测试消息
2623 					if( strncmp( n_pData, MSG_CHANGESCENTEST, strlen( MSG_CHANGESCENTEST ) ) == 0 )
2624 					{
3095 }
3099 //////////////////////////////////////////////////////////////////////////
3100 //跨服务器切换场景等待链表
3101 //////////////////////////////////////////////////////////////////////////
3103 ////链表

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\GmSDK\Code\NetServer\Source\SrvrER.cpp 37 KB CPP 文件 2008/5/27 13:56:11 2018/9/21 20:32:29 2018/9/21 20:32:29 2
163 	m_nKey = -1;				// 唯一标识, Mar.10.2003
164 	m_nGiftCount = 0;
166 	m_nRoomID = 0;				//跨服务器切场景
168 	m_nNetRoom = -1;			//游戏者所在场景的编号
170     m_nGlobleCharacterID = -1;	//角色全局ID(GateServer分配)
846 		}
847 		g_ERc = 5;
848 		//跨服务器消息
849 		return ER_Explain( nIDUser, szCommand, nSize, bInternal );
850 	}

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\GmSDK\Code\NetServer\Source\复件 NetWorkGame.cpp 75 KB CPP 文件 2008/5/27 13:56:11 2018/9/21 20:32:29 2018/9/21 20:32:29 3
157 	SetCriticalSectionSpinCount( &g_csSRVR, 4000 );			//设置ER尝试4000次后进入内核方式
158 	
159 	//InitializeCriticalSection( &g_csChangeScen );			//跨服务器切场景
161 	InitializeCriticalSection( &g_csLogoff );				//退出
163 	InitializeCriticalSection( &g_csWorldMsg );				//社会
173 	DeleteCriticalSection( &g_csSRVR );							//ER
174 	
175 	//DeleteCriticalSection( &g_csChangeScen );					//跨服务器切场景
177 	DeleteCriticalSection( &g_csLogoff );						//退出
179 	DeleteCriticalSection( &g_csWorldMsg );					//社会
528 		SRVR_Fini();
529 		WriteLog( "SRVR_Fini() ER module succeed!\r\n" );
531 		//跨服务器切场景链表
532 		
533 		GetServer()->RemoveAllChangeScen();

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Client\UI\Source\Functions\UIOptExplain.cpp 267 KB CPP 文件 2008/5/27 13:58:13 2018/9/21 20:32:32 2018/9/21 20:32:32 2
5885 	//
5886 	// Jan 28th , 2004	EL.AHong.F <. money ! money .>
5887 	// 为了解决跨服务器问题，所以不能用NETID判断
5888 	// 改成用GlobalID。并同时增加交易聊天。
5890 	// 记录和你交易的人。
7268 }
7270 /////////////////////////////////////////////////
7271 // 已经修改成跨服务器切场景的时候服务器请求客户端存盘
7272 BOOL OPT_QuestTime( )
7273 {

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Client\UI\Source\TJ2_Dialogs\TJ2_RoleHeadWindow.cpp 27 KB CPP 文件 2008/5/27 13:58:16 2018/9/21 20:32:32 2018/9/21 20:32:32 1
614 		//在跨场景时换马可能会出现消息不同步，导致在前一个服务器发消息，
615 		//后一个服务器收消息，结果换马时发现马不存在。
616 		//本来在跨服时有个标志位，但是李强说万一这个标志位错了，就永远
617 		//不能换马了，所以不使这个标志位，但是这个assert测试总是报，所以给他关了
618 		//DISABLE_ASSERT( "为什么没有吗的装备!" );

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\easyrpg_test\er_test\Source\CmdFun.cpp 264 KB CPP 文件 2009/12/10 0:11:57 2018/9/21 20:32:33 2018/9/21 20:32:33 2
6570 	else
6571 	{
6572 		// 跨服务器先不考虑
6574 		//FACTION_MEMBER_INFO info;
6575 		//if( Faction_GetMemberAttrInfo( nParams[1] , info ) <= 0 )
6837 	else
6838 	{
6839 		//跨服务器先不考虑吧。
6840 		//   FACTION_MEMBER_INFO info;
6841 		//if( ThisPlayer()->IsFaction() )

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\easyrpg_test\er_test\Source\ERCmd.CPP 397 KB CPP 文件 2009/12/10 0:59:27 2018/9/21 20:32:33 2018/9/21 20:32:33 2
50 #include "ERRandom.h"	// clearNameColor()
52 extern int ER_GetNetType();// declared in ERMain.cpp
54 // add by xufeng 跨服务器的消息指令 [3/22/2005]
55 #include "EROptCmd.h"	// ServerCommand
57 //aug.12.2003 majin test
5459 #endif*/
5460 	assert( strlen(szIndex) < sizeof(szIndex) );
5461 	// liqiang检测是否跨服务器切场景 [1/24/2005]
5462 	CERPlayer* n_pPlay = ThisPlayer();
5463 	assert( n_pPlay != NULL );

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\easyrpg_test\er_test\Source\ERCore.cpp 113 KB CPP 文件 2009/12/10 0:33:28 2018/9/21 20:32:33 2018/9/21 20:32:33 1
1709 			if( strcmp( szIntAttrName, "G_LogSent" ) == 0 )	continue;
1711 			// 2005-07-17 added by Victor.
1712 			// 只有跨服务器时才保留那两个控制社会属性经验加成的整形属性
1713 			// Begin VS specific
1714 			OPERATE_ON_SPAN_SERVER_BEGIN

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\easyrpg_test\er_test\Source\ERFunc.CPP 1,101 KB CPP 文件 2009/12/10 0:41:32 2018/9/21 20:32:33 2018/9/21 20:32:33 5
216 CStack<CERPlayer*, ER_STACK_MAX> gPlayerStack;
218 //////////////////////////////////////////////////////////////////////////
219 // liqiang 角色跨服务器切换场景状态 [8/1/2004]
220 BOOL gChangScen = FALSE;
222 char* GetTimeString( char* szTime )
3687 		return;
3688 	}//END_IF
3690 	//  跨服务器处理 PK 模式
3691 	CERObject* pRoom = Environment(pPerson);
3692 	if (!IsRoom(pRoom)) 
20828 	if( !IsPlayer( pPlayer ) )	return;
20829 	CERPlayer* pThisPlayer = MAKEPLAYER( pPlayer );
20830 	// 跨服务器信息
20831 	char szString[ER_MESSAGE_SIZE];
20832 	sprintf( szString, "%d %s %d %d",nInID,szIndex,nX ,nY);
22219 	}//END_IF
22220 	
22221 	// 跨服务器切场景,或者切换到不同的国家.
22222 	if( pOldRoom && pRoom && 
22223 		( ( pOldRoom->GetInt( ROOM_NATIONAL ) != pRoom->GetInt( ROOM_NATIONAL ) ) ) )
35571 	}
35572 	
35573 	// liqiang增加了跨服务器检查 [1/24/2005]
35574 	//检查该目的场景是否为本服务器场景
35575 	BOOL n_bInServer = IsRoomOpen( szRoomIndex );

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\easyrpg_test\er_test\Source\ERFunc2.cpp 111 KB CPP 文件 2008/5/27 13:58:21 2018/9/21 20:32:33 2018/9/21 20:32:33 1
3162 	return(1);
3163 }
3164 //跨服务器场景动作
3165 int SceneAction(int nSceneID, int nActionID)
3166 {

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\easyrpg_test\er_test\Source\ERLimitQuest.cpp 38 KB CPP 文件 2008/5/27 13:58:21 2018/9/21 20:32:33 2018/9/21 20:32:33 1
1029 	else if( nCurTime < nChallengeTime )
1030 	{
1031 		//跨服务器时两太服务器时间不一致，给玩家点便宜吧
1032 		nRefreshTime = ENCORAGETIME;
1033 	}

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\easyrpg_test\er_test\Source\ERLocal.CPP 227 KB CPP 文件 2009/12/10 0:29:12 2018/9/21 20:32:33 2018/9/21 20:32:33 1
4246 	// 称号
4247 	NewStr( "Title" );
4249 	NewStr( "SpanServer" );	//	跨服务器信息
4250 	// 是否打开公共频道
4251 	NewInt( "Channel" );

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\easyrpg_test\er_test\Source\ERMain.cpp 25 KB CPP 文件 2009/10/2 21:08:47 2018/9/21 20:32:33 2018/9/21 20:32:33 1
578 				*/
579 				// 跑到这里是不正常的，所以报一个警告
580 				FH_ASSERT(FALSE, "未能在初始化阶段成功读取场景映射表（scene_map.txt），跨服务器消息传递有可能出现异常。");
581 			}
582 			gnRoomSuffix ++;

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\easyrpg_test\er_test\Source\ERMaster.cpp 52 KB CPP 文件 2008/5/27 13:58:22 2018/9/21 20:32:33 2018/9/21 20:32:33 3
219 	}
220 OPERATE_ON_SPAN_SERVER_END
221 //	跨服务器的每次上线操作: 1 如果我是师傅 上线标志就要更改 标志场景号和上线标志 2.徒弟
222 	if( pPerson->GetInt( PLAYER_MasterID ) == -2 )
223 	{
760 		char sMsg[1024];
761 		//sprintf( sMsg, ER_LoadString( 27015 ),pPrentice->GetName() );
762 		// liqiang FIX跨服务器和不跨服务器提示不一致 [7/30/2005]
763 		sprintf( sMsg, ER_LoadString( 27027 ) );
764 		LogUpdateEx( pObj,15,-1,sMsg);

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\easyrpg_test\er_test\Source\ERMate.cpp 53 KB CPP 文件 2008/5/27 13:58:22 2018/9/21 20:32:33 2018/9/21 20:32:33 2
12 #include "ERMate.h"
14 ////////////////////////////////////////////////////////////////////////////////
15 // 内部函数：跨服务器发送配偶消息
16 static BOOL sendMateMsg(CERPlayer *pPlayer, MATE_NOTIFY code, int nNetID = -1)
17 {
439 }
441 ////////////////////////////////////////////////////////////////////////////////
442 // 处理配偶跨服务器发送来的消息
443 // pObject		:	发给谁的消息？
444 // code			:	通知码

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\easyrpg_test\er_test\Source\EROptCmd.cpp 44 KB CPP 文件 2009/12/10 0:23:24 2018/9/21 20:32:33 2018/9/21 20:32:33 2
1154 		break;
1155 		//---------------------------------
1156 		// Lijiangpo 2006-10-24 帮派跨服务器发送消息
1157 	case FACTION_CHATG:
1158 		nFactionID = pPackage->m_nParams[0];
1621 		TellPlayer( pPackage->m_strParams.Get(), MAKEPLAYER( pSendClient ) );
1622 		break;
1624 		// 跨服务器配偶通知消息
1625 	case GLOBAL_MATE_NOTIFY:
1626 		if (pPackage->m_nParamsCount != 3) 

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\easyrpg_test\er_test\Source\ERRandom.cpp 343 KB CPP 文件 2009/12/10 0:34:54 2018/9/21 20:32:33 2018/9/21 20:32:33 2
9267 	return IsRoomOpen( n_Index );
9268 }
9270 //发送跨服务器切换场景
9271 BOOL SendChangeScen( const char* f_Room, int f_NetID, int f_RoomID , int x , int y )
9272 {
9275 	int n_Index = RoomToIndex( f_Room );
9276 	assert( n_Index >= 0 );
9278 	FH_ASSERT_FORMAT4( n_Index >= 0 && n_Index < 1000, "角色<%s(%s)>跨服务器切换场景<%s>时场景ID<%d>非法！", ThisPlayer()->GetName(), ThisPlayer()->GetAlias(), f_Room, n_Index );
9280 	char n_smsg[ER_MESSAGE_SIZE];
9281 	memset( n_smsg, 0, sizeof( n_smsg ) );

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\easyrpg_test\er_test\Source\ERUser.cpp 92 KB CPP 文件 2009/12/10 0:35:32 2018/9/21 20:32:33 2018/9/21 20:32:33 6
54 BOOL MyFastMoveFile( LPCTSTR oldfile, LPCTSTR newfile );	// ERSave.cpp
55 /////////////////////////////////////////////////
57 BOOL gSpanServer = FALSE;			//是否跨服务器
58 #define SPAN_SERVER_BEGIN( bEnterRoom, USERINFO )	if( ( bEnterRoom && ##USERINFO.m_bChangeS ) || ( !bEnterRoom && ##USERINFO.m_bChangeServer )) gSpanServer = TRUE;
59 #define SPAN_SERVER_END		gSpanServer = FALSE;
174 	//****************临时测试******************
175 	//int r = Random( 50 );
176 	//m_nRoomID = r + 101;				//跨服务器切场景
177 	m_nRoomID = -1;				//跨服务器切场景
179 	m_nNetRoom = -1;			//游戏者所在场景的编号
181 	m_nGlobleCharacterID = -1;	//角色全局ID(GateServer分配)
1038 		gbLeaveAndAccept = FALSE;	// 只有Loading时不走
1040 	aaa = 10;
1042 	// liqiang检查是跨服务器切场景还是普通用户读盘登陆 [9/8/2004]
1043 	
1044 	int n_RoomPos = User.GetRoomID();
1048 	if( n_RoomPos != -1 && n_RoomPos != 300 )
1049 	{
1050 		//说明该用户为跨服务器切换场景
1051 		pChild->SetInt( PERSON_G_PosX, -1 );
1052 		pChild->SetInt( PERSON_G_PosY, -1 );
2716 		int nMemUsed1 = g_nNewSize - g_nDelSize;
2718 		// 2005-07-17 modified by Victor.
2719 		// 读盘阶段也需要跨服务器信息
2720 		// Begin VS specific
2721 		// ret = USER_Load( User, lpData );

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\easyrpg_test\er_test\Source\ERUserFast.cpp 29 KB CPP 文件 2009/12/10 0:41:07 2018/9/21 20:32:33 2018/9/21 20:32:33 1
252 		User.SetStartRoom( szValue );
253 	}
254 	//否则为跨服务器切换场景
256 	// liqiang [8/1/2004]
257 	//	posX

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\Source\CmdFun.cpp 264 KB CPP 文件 2008/5/27 13:58:21 2018/9/21 20:32:33 2018/9/21 20:32:33 2
6570 	else
6571 	{
6572 		// 跨服务器先不考虑
6574 		//FACTION_MEMBER_INFO info;
6575 		//if( Faction_GetMemberAttrInfo( nParams[1] , info ) <= 0 )
6837 	else
6838 	{
6839 		//跨服务器先不考虑吧。
6840 		//   FACTION_MEMBER_INFO info;
6841 		//if( ThisPlayer()->IsFaction() )

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\Source\ERCmd.CPP 397 KB CPP 文件 2008/5/27 13:58:21 2018/9/21 20:32:34 2018/9/21 20:32:34 2
50 #include "ERRandom.h"	// clearNameColor()
52 extern int ER_GetNetType();// declared in ERMain.cpp
54 // add by xufeng 跨服务器的消息指令 [3/22/2005]
55 #include "EROptCmd.h"	// ServerCommand
57 //aug.12.2003 majin test
5458 #endif*/
5459 	assert( strlen(szIndex) < sizeof(szIndex) );
5460 	// liqiang检测是否跨服务器切场景 [1/24/2005]
5461 	CERPlayer* n_pPlay = ThisPlayer();
5462 	assert( n_pPlay != NULL );

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\Source\ERCore.cpp 113 KB CPP 文件 2008/5/27 13:58:21 2018/9/21 20:32:34 2018/9/21 20:32:34 1
1708 			if( strcmp( szIntAttrName, "G_LogSent" ) == 0 )	continue;
1710 			// 2005-07-17 added by Victor.
1711 			// 只有跨服务器时才保留那两个控制社会属性经验加成的整形属性
1712 			// Begin VS specific
1713 			OPERATE_ON_SPAN_SERVER_BEGIN

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\Source\ERFunc.CPP 1,100 KB CPP 文件 2008/5/27 13:58:21 2018/9/21 20:32:34 2018/9/21 20:32:34 5
216 CStack<CERPlayer*, ER_STACK_MAX> gPlayerStack;
218 //////////////////////////////////////////////////////////////////////////
219 // liqiang 角色跨服务器切换场景状态 [8/1/2004]
220 BOOL gChangScen = FALSE;
222 char* GetTimeString( char* szTime )
3686 		return;
3687 	}//END_IF
3689 	//  跨服务器处理 PK 模式
3690 	CERObject* pRoom = Environment(pPerson);
3691 	if (!IsRoom(pRoom)) 
20827 	if( !IsPlayer( pPlayer ) )	return;
20828 	CERPlayer* pThisPlayer = MAKEPLAYER( pPlayer );
20829 	// 跨服务器信息
20830 	char szString[ER_MESSAGE_SIZE];
20831 	sprintf( szString, "%d %s %d %d",nInID,szIndex,nX ,nY);
22218 	}//END_IF
22219 	
22220 	// 跨服务器切场景,或者切换到不同的国家.
22221 	if( pOldRoom && pRoom && 
22222 		( ( pOldRoom->GetInt( ROOM_NATIONAL ) != pRoom->GetInt( ROOM_NATIONAL ) ) ) )
35568 	}
35569 	
35570 	// liqiang增加了跨服务器检查 [1/24/2005]
35571 	//检查该目的场景是否为本服务器场景
35572 	BOOL n_bInServer = IsRoomOpen( szRoomIndex );

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\Source\ERFunc2.cpp 111 KB CPP 文件 2008/5/27 13:58:21 2018/9/21 20:32:34 2018/9/21 20:32:34 1
3162 	return(1);
3163 }
3164 //跨服务器场景动作
3165 int SceneAction(int nSceneID, int nActionID)
3166 {

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\Source\ERLimitQuest.cpp 38 KB CPP 文件 2008/5/27 13:58:21 2018/9/21 20:32:34 2018/9/21 20:32:34 1
1029 	else if( nCurTime < nChallengeTime )
1030 	{
1031 		//跨服务器时两太服务器时间不一致，给玩家点便宜吧
1032 		nRefreshTime = ENCORAGETIME;
1033 	}

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\Source\ERLocal.CPP 227 KB CPP 文件 2008/5/27 13:58:21 2018/9/21 20:32:34 2018/9/21 20:32:34 1
4246 	// 称号
4247 	NewStr( "Title" );
4249 	NewStr( "SpanServer" );	//	跨服务器信息
4250 	// 是否打开公共频道
4251 	NewInt( "Channel" );

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\Source\ERMain.cpp 25 KB CPP 文件 2008/5/27 13:58:22 2018/9/21 20:32:34 2018/9/21 20:32:34 1
577 				*/
578 				// 跑到这里是不正常的，所以报一个警告
579 				FH_ASSERT(FALSE, "未能在初始化阶段成功读取场景映射表（scene_map.txt），跨服务器消息传递有可能出现异常。");
580 			}
581 			gnRoomSuffix ++;

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\Source\ERMaster.cpp 52 KB CPP 文件 2008/5/27 13:58:22 2018/9/21 20:32:34 2018/9/21 20:32:34 3
219 	}
220 OPERATE_ON_SPAN_SERVER_END
221 //	跨服务器的每次上线操作: 1 如果我是师傅 上线标志就要更改 标志场景号和上线标志 2.徒弟
222 	if( pPerson->GetInt( PLAYER_MasterID ) == -2 )
223 	{
760 		char sMsg[1024];
761 		//sprintf( sMsg, ER_LoadString( 27015 ),pPrentice->GetName() );
762 		// liqiang FIX跨服务器和不跨服务器提示不一致 [7/30/2005]
763 		sprintf( sMsg, ER_LoadString( 27027 ) );
764 		LogUpdateEx( pObj,15,-1,sMsg);

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\Source\ERMate.cpp 53 KB CPP 文件 2008/5/27 13:58:22 2018/9/21 20:32:34 2018/9/21 20:32:34 2
12 #include "ERMate.h"
14 ////////////////////////////////////////////////////////////////////////////////
15 // 内部函数：跨服务器发送配偶消息
16 static BOOL sendMateMsg(CERPlayer *pPlayer, MATE_NOTIFY code, int nNetID = -1)
17 {
439 }
441 ////////////////////////////////////////////////////////////////////////////////
442 // 处理配偶跨服务器发送来的消息
443 // pObject		:	发给谁的消息？
444 // code			:	通知码

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\Source\EROptCmd.cpp 44 KB CPP 文件 2008/5/27 13:58:22 2018/9/21 20:32:34 2018/9/21 20:32:34 2
1153 		break;
1154 		//---------------------------------
1155 		// Lijiangpo 2006-10-24 帮派跨服务器发送消息
1156 	case FACTION_CHATG:
1157 		nFactionID = pPackage->m_nParams[0];
1620 		TellPlayer( pPackage->m_strParams.Get(), MAKEPLAYER( pSendClient ) );
1621 		break;
1623 		// 跨服务器配偶通知消息
1624 	case GLOBAL_MATE_NOTIFY:
1625 		if (pPackage->m_nParamsCount != 3) 

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\Source\ERRandom.cpp 343 KB CPP 文件 2008/5/27 13:58:22 2018/9/21 20:32:34 2018/9/21 20:32:34 2
9267 	return IsRoomOpen( n_Index );
9268 }
9270 //发送跨服务器切换场景
9271 BOOL SendChangeScen( const char* f_Room, int f_NetID, int f_RoomID , int x , int y )
9272 {
9275 	int n_Index = RoomToIndex( f_Room );
9276 	assert( n_Index >= 0 );
9278 	FH_ASSERT_FORMAT4( n_Index >= 0 && n_Index < 1000, "角色<%s(%s)>跨服务器切换场景<%s>时场景ID<%d>非法！", ThisPlayer()->GetName(), ThisPlayer()->GetAlias(), f_Room, n_Index );
9280 	char n_smsg[ER_MESSAGE_SIZE];
9281 	memset( n_smsg, 0, sizeof( n_smsg ) );

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\Source\ERUser.cpp 92 KB CPP 文件 2008/5/27 13:58:22 2018/9/21 20:32:34 2018/9/21 20:32:34 6
54 BOOL MyFastMoveFile( LPCTSTR oldfile, LPCTSTR newfile );	// ERSave.cpp
55 /////////////////////////////////////////////////
57 BOOL gSpanServer = FALSE;			//是否跨服务器
58 #define SPAN_SERVER_BEGIN( bEnterRoom, USERINFO )	if( ( bEnterRoom && ##USERINFO.m_bChangeS ) || ( !bEnterRoom && ##USERINFO.m_bChangeServer )) gSpanServer = TRUE;
59 #define SPAN_SERVER_END		gSpanServer = FALSE;
174 	//****************临时测试******************
175 	//int r = Random( 50 );
176 	//m_nRoomID = r + 101;				//跨服务器切场景
177 	m_nRoomID = -1;				//跨服务器切场景
179 	m_nNetRoom = -1;			//游戏者所在场景的编号
181 	m_nGlobleCharacterID = -1;	//角色全局ID(GateServer分配)
1037 		gbLeaveAndAccept = FALSE;	// 只有Loading时不走
1039 	aaa = 10;
1041 	// liqiang检查是跨服务器切场景还是普通用户读盘登陆 [9/8/2004]
1042 	
1043 	int n_RoomPos = User.GetRoomID();
1047 	if( n_RoomPos != -1 && n_RoomPos != 300 )
1048 	{
1049 		//说明该用户为跨服务器切换场景
1050 		pChild->SetInt( PERSON_G_PosX, -1 );
1051 		pChild->SetInt( PERSON_G_PosY, -1 );
2715 		int nMemUsed1 = g_nNewSize - g_nDelSize;
2717 		// 2005-07-17 modified by Victor.
2718 		// 读盘阶段也需要跨服务器信息
2719 		// Begin VS specific
2720 		// ret = USER_Load( User, lpData );

H:\work\source\凤舞天骄\[src.cool]凤舞天骄\Prj_TJ2\Code\Server\ER\Source\ERUserFast.cpp 29 KB CPP 文件 2008/5/27 13:58:22 2018/9/21 20:32:34 2018/9/21 20:32:34 1
252 		User.SetStartRoom( szValue );
253 	}
254 	//否则为跨服务器切换场景
256 	// liqiang [8/1/2004]
257 	//	posX

H:\work\source\剑网3\剑网3完整源代码\Source\Common\SO3World\Src\KPlayer.cpp 147 KB CPP 文件 2009/12/31 6:03:08 2018/9/26 20:26:59 2018/9/26 20:26:59 4
3652 	    g_RelayClient.DoTeamSyncMemberMaxLMR(this);
3653     }
3655     // 跨服同步队友当前血量等
3656     if (nFrame % GAME_FPS == 0)
3657     {
3658 	    g_RelayClient.DoTeamSyncMemberCurrentLMR(this);
3659     }
3661     // 同步附近队友当前生命,注意,这个同步的频率会被跨服同步覆盖
3662     if (nFrame % 7 == 0)
3663     {
3664 	    g_PlayerServer.DoSyncTeamMemberCurrentLMRLocal(this);
3665     }
3667     // 跨服同步队友当前位置
3668     if (nFrame % (GAME_FPS * 2) == 0)
3669     {
3670 	    g_RelayClient.DoSyncTeamMemberPosition(this);
3671     }
3673     // 本地同步队友当前位置,注意,这个同步的频率会被跨服同步覆盖
3674     if (nFrame % GAME_FPS == 0)
3675     {

H:\work\source\剑网3\剑网3完整源代码\Source\Common\SO3World\Src\KRelayClient.cpp 256 KB CPP 文件 2010/1/8 9:05:28 2018/9/26 20:26:59 2018/9/26 20:26:59 2
662 	if (pRespond->bSwitchServer)
663 	{
664         // 将角色数据存盘,位置保存为跨服的目标点
665         pPlayer->m_SavePosition.nX              = pRespond->nPosX;
666         pPlayer->m_SavePosition.nY              = pRespond->nPosY;
777 	R2S_TRANSFER_PLAYER_RESPOND*    pRespond    = (R2S_TRANSFER_PLAYER_RESPOND*)pbyData;
778     KPlayer*                        pPlayer     = NULL;
780     // 跨服中断线就可能找不到
781 	pPlayer = g_pSO3World->m_PlayerSet.GetObj(pRespond->dwPlayerID);
782 	KG_PROCESS_ERROR(pPlayer);

H:\work\source\剑网3\剑网3完整源代码\Source\Common\SO3World\Test\TestProject\KRoleSLTest\SO3GameCenter\KGameServer.cpp 225 KB CPP 文件 2009/7/10 13:56:02 2018/9/26 20:26:55 2018/9/26 20:26:55 6
985                 continue;
986             }
988             // 注意,这里不见得就是跨服,确切的说应该是跨地图等待创建目标地图
989             if (pRole->m_nConnIndex == nConnIndex)
990             {
1010             else
1011             {
1012                 // 玩家并不在本服务器上,那么等待源服务器传角色数据过来(跨服)
1013                 DoSearchMapRespond(
1014                     pRole->m_nConnIndex, it->dwPlayerID, smrcSuccess, true, 
1246     DO_SEARCH_MAP_FAILED_RETURN(pMapCopy->m_eState == eMapStateNormal, smrcFailed);
1248     DO_SEARCH_MAP_FAILED_RETURN(pMapCopy->m_nPlayerCount < pMapInfo->m_nMaxPlayerCount, smrcGameOverLoaded);
1250     // 找到了，看是不是要跨服务器
1251     if (pMapCopy->m_nConnIndex == nConnIndex)
1252     {        
1251     if (pMapCopy->m_nConnIndex == nConnIndex)
1252     {        
1253 	    // 不跨服务器, 通知GS换地图
1254         DoSearchMapRespond(
1255             nConnIndex, pRequest->dwPlayerID, smrcSuccess, false, 
1271     else
1272     {
1273         // 进入跨服流程
1274 	    DoSearchMapRespond(
1275             nConnIndex, pRequest->dwPlayerID, smrcSuccess, true, 
1394 	else
1395 	{
1396         // 跨服被拒绝后,要把目标地图的人数减下来(之前 SearchMap的时候加的)
1397         bRetCode = g_pSO3GameCenter->m_MapManager.DecreaseMapCopyPlayerCount(pRole->m_dwDestMapID, pRole->m_nDestMapCopyIndex);
1398         KGLOG_PROCESS_ERROR(bRetCode);

H:\work\source\剑网3\剑网3完整源代码\Source\Common\SO3World\Test\TestProject\KRoleSLTest\SO3World\KPlayer.cpp 127 KB CPP 文件 2009/7/10 11:45:54 2018/9/26 20:26:59 2018/9/26 20:26:59 4
3491 	    g_RelayClient.DoTeamSyncMemberMaxLMR(this);
3492     }
3494     // 跨服同步队友当前血量等
3495     if (nFrame % GAME_FPS == 0)
3496     {
3497 	    g_RelayClient.DoTeamSyncMemberCurrentLMR(this);
3498     }
3500     // 同步附近队友当前生命,注意,这个同步的频率会被跨服同步覆盖
3501     if (nFrame % 7 == 0)
3502     {
3503 	    g_PlayerServer.DoSyncTeamMemberCurrentLMRLocal(this);
3504     }
3506     // 跨服同步队友当前位置
3507     if (nFrame % (GAME_FPS * 2) == 0)
3508     {
3509 	    g_RelayClient.DoSyncTeamMemberPosition(this);
3510     }
3512     // 本地同步队友当前位置,注意,这个同步的频率会被跨服同步覆盖
3513     if (nFrame % GAME_FPS == 0)
3514     {

H:\work\source\剑网3\剑网3完整源代码\Source\Common\SO3World\Test\TestProject\KRoleSLTest\SO3World\KRelayClient.cpp 180 KB CPP 文件 2009/7/10 11:45:54 2018/9/26 20:26:59 2018/9/26 20:26:59 2
594 	if (pRespond->bSwitchServer)
595 	{
596         // 将角色数据存盘,位置保存为跨服的目标点
597         pPlayer->m_SavePosition.nX              = pRespond->nPosX;
598         pPlayer->m_SavePosition.nY              = pRespond->nPosY;
701 	R2S_TRANSFER_PLAYER_RESPOND*    pRespond    = (R2S_TRANSFER_PLAYER_RESPOND*)pbyData;
702     KPlayer*                        pPlayer     = NULL;
704     // 跨服中断线就可能找不到
705 	pPlayer = g_pSO3World->m_PlayerSet.GetObj(pRespond->dwPlayerID);
706 	KGLOG_PROCESS_ERROR(pPlayer);

H:\work\source\剑网3\剑网3完整源代码\Source\Server\SO3GameCenter\KGameServer.cpp 309 KB CPP 文件 2010/1/8 9:05:32 2018/9/26 20:26:55 2018/9/26 20:26:55 6
1108                 continue;
1109             }
1111             // 注意,这里不见得就是跨服,确切的说应该是跨地图等待创建目标地图
1112             if (pRole->m_nConnIndex == nConnIndex)
1113             {
1133             else
1134             {
1135                 // 玩家并不在本服务器上,那么等待源服务器传角色数据过来(跨服)
1136                 DoSearchMapRespond(
1137                     pRole->m_nConnIndex, it->dwPlayerID, smrcSuccess, true, 
1379     bRetCode = pMapInfo->CheckPlayerEnterNewCopyTimes(pRequest->dwPlayerID, nMapCopyIndex);  
1380     DO_SEARCH_MAP_FAILED_RETURN(bRetCode, smrcEnterNewCopyTooManyTimes);
1382     // 找到了，看是不是要跨服务器
1383     if (pMapCopy->m_nConnIndex == nConnIndex)
1384     {        
1383     if (pMapCopy->m_nConnIndex == nConnIndex)
1384     {        
1385 	    // 不跨服务器, 通知GS换地图
1386         DoSearchMapRespond(
1387             nConnIndex, pRequest->dwPlayerID, smrcSuccess, false, 
1403     else
1404     {
1405         // 进入跨服流程
1406 	    DoSearchMapRespond(
1407             nConnIndex, pRequest->dwPlayerID, smrcSuccess, true, 
1535 	else
1536 	{
1537         // 跨服被拒绝后,要把目标地图的人数减下来(之前 SearchMap的时候加的)
1538         bRetCode = g_pSO3GameCenter->m_MapManager.DecreaseMapCopyPlayerCount(pRole->m_dwDestMapID, pRole->m_nDestMapCopyIndex);
1539         KGLOG_PROCESS_ERROR(bRetCode);

H:\work\source\剑网3\剑网3完整源代码\Source\Server\SO3GameCenter\KRole.cpp 14 KB CPP 文件 2009/12/16 6:13:56 2018/9/26 20:27:01 2018/9/26 20:27:01 6
165 			break;
167         case rsCG_WaitForCreateMap:
168             // 跨服,等待地图加载的过程中,玩家退出,或者源服务器宕机(可能源和目标是同一个服务器)
169             bRetCode = g_pSO3GameCenter->m_MapManager.DecreaseMapCopyPlayerCount(m_dwMapID, m_nMapCopyIndex);
170             KGLOG_PROCESS_ERROR(bRetCode);
220 			break;
222 		case rsCG_WaitForSrcLeave:
223             // 跨服已经进入目标GS,等待从源GS离开
224             // 将源副本人数减1
225             bRetCode = g_pSO3GameCenter->m_MapManager.DecreaseMapCopyPlayerCount(m_dwMapID, m_nMapCopyIndex);
301             break;
303         case rsCG_WaitForPlayerData:
304             // 跨服等待角色信息的时候,目标GS宕机,这时什么也不用做,等待角色信息来了再退回去
305             break;
307         case rsCG_WaitForGuid:
305             break;
307         case rsCG_WaitForGuid:
308             // 在等待GUID的时候,目标GS宕机了,这时应该给源GS回包否决这次跨服
309             // 当然,没必要去减目标副本的人数,因为目标Server都宕机了,呵呵
310             g_pSO3GameCenter->m_GameServer.DoTransferPlayerRespond(m_nConnIndex, m_dwPlayerID, false);
315 		case rsCG_WaitForEnter_Leave:
316 		case rsCG_WaitForSrcLeave:
317             // 玩家在跨服后期从目标GS退出,这时要等待玩家从源GS退出,然后离线
318             // 注意,这时跨服并没有真正完成,玩家的ConnIndex还是算在源GS上的
319             // 将目标副本人数减1
320             bRetCode = g_pSO3GameCenter->m_MapManager.DecreaseMapCopyPlayerCount(m_dwDestMapID, m_nDestMapCopyIndex);

H:\work\source\剑网3\剑网3完整源代码\Source\Server\SO3GameCenter\Test\TestProject\KTestPlayerCGStateConver.cpp 37 KB CPP 文件 2009/12/22 6:06:12 2018/9/26 20:27:03 2018/9/26 20:27:03 10
285     DWORD     dwSearchMapID = 0;
286     __int64   nSearchMapCopyID = 0;
288     CASE_INFO("玩家切换副本时，副本存在不需要跨服", "");
290     nRetCode = ComparePlayerState(m_TestRoleInfo.dwPlayerID, rsOnline);
291     ASSERT_TRUE(nRetCode);
330     BOOL	  bResult		       = false;
331     int		  nRetCode			   = false;
333     CASE_INFO("玩家切换副本时，副本存在需要跨服", "");
335     nRetCode = ComparePlayerState(m_TestRoleInfo.dwPlayerID, rsOnline);
336     ASSERT_TRUE(nRetCode);
449     BOOL	  bResult		       = false;
450     int		  nRetCode			   = false;
452     CASE_INFO("跨服副本创建过程中，目标GS宕机", "");
454     nRetCode = MakeRoleToCreateMap(m_pSrcGameServer, m_pDesGameServer, m_TestRoleInfo.dwPlayerID,
455         m_MapCopyCanCreate.dwMapID, m_MapCopyCanCreate.nMapCopy);
473     BOOL	  bResult		       = false;
474     int		  nRetCode			   = false;
476     CASE_INFO("跨服副本创建不成功", "");
478     nRetCode = MakeRoleToCreateMap(m_pSrcGameServer, m_pDesGameServer, m_TestRoleInfo.dwPlayerID,
479         m_MapCopyCanCreate.dwMapID, m_MapCopyCanCreate.nMapCopy);
500     BOOL	  bResult		       = false;
501     int		  nRetCode			   = false;
503     CASE_INFO("跨服副本创建成功", "");
505     nRetCode = MakeRoleToCreateMap(m_pSrcGameServer, m_pDesGameServer, m_TestRoleInfo.dwPlayerID,
506         m_MapCopyCanCreate.dwMapID, m_MapCopyCanCreate.nMapCopy);
776     BOOL	  bResult		       = false;
777     int		  nRetCode			   = false;
779     CASE_INFO("玩家等待跨服时，目标GS宕机", "");
781     nRetCode = MakeRoleToEnter_Leave(m_pSrcGameServer, m_pDesGameServer, m_TestRoleInfo, 
782         m_MapCopyExistInDes.dwMapID, m_MapCopyExistInDes.nMapCopy);
798     BOOL	  bResult		       = false;
799     int		  nRetCode			   = false;
801     CASE_INFO("玩家等待跨服时，玩家登录目标GS超时", "");
803     nRetCode = MakeRoleToEnter_Leave(m_pSrcGameServer, m_pDesGameServer, m_TestRoleInfo, 
804         m_MapCopyExistInDes.dwMapID, m_MapCopyExistInDes.nMapCopy);
821     BOOL	  bResult		       = false;
822     int		  nRetCode			   = false;
824     CASE_INFO("玩家等待跨服时，离开源GS", "");
826     nRetCode = MakeRoleToEnter_Leave(m_pSrcGameServer, m_pDesGameServer, m_TestRoleInfo, 
827         m_MapCopyExistInDes.dwMapID, m_MapCopyExistInDes.nMapCopy);
842     BOOL	  bResult		       = false;
843     int		  nRetCode			   = false;
845     CASE_INFO("玩家等待跨服时，源GS宕机", "");
847     nRetCode = MakeRoleToEnter_Leave(m_pSrcGameServer, m_pDesGameServer, m_TestRoleInfo, 
848         m_MapCopyExistInDes.dwMapID, m_MapCopyExistInDes.nMapCopy);
862     BOOL	  bResult		       = false;
863     int		  nRetCode			   = false;
865     CASE_INFO("玩家等待跨服时，GC收到目标GS确认登录消息", "");
867     nRetCode = MakeRoleToEnter_Leave(m_pSrcGameServer, m_pDesGameServer, m_TestRoleInfo, 
868         m_MapCopyExistInDes.dwMapID, m_MapCopyExistInDes.nMapCopy);

H:\work\source\剑网3\剑网3完整源代码\Source\Server\SO3GameServer\Test\TestProject\Robot\SO3World\KPlayerClient.cpp 104 KB CPP 文件 2007/4/23 20:32:50 2018/9/26 20:26:59 2018/9/26 20:26:59 1
2556 	else	
2557 	{
2558         // 在原服务器上跨地图, 注意: 跨服务器时不走这个协议
2559 		KScene* pScene = g_SO3World.GetScene(m_pOwner->m_dwClientMapID, m_pOwner->m_dwClientMapCopyIndex);
2560 		KGLOG_PROCESS_ERROR(pScene);

H:\work\source\剑网3\剑网3完整源代码\Source\Tools\GameDesignerEditor\AtlKG3DEngineProxy\IndeSource\SO3World\KPlayer.cpp 127 KB CPP 文件 2009/9/14 13:49:10 2018/9/26 20:26:59 2018/9/26 20:26:59 4
3337 	    g_RelayClient.DoTeamSyncMemberMaxLMR(this);
3338     }
3340     // 跨服同步队友当前血量等
3341     if (nFrame % GAME_FPS == 0)
3342     {
3343 	    g_RelayClient.DoTeamSyncMemberCurrentLMR(this);
3344     }
3346     // 同步附近队友当前生命,注意,这个同步的频率会被跨服同步覆盖
3347     if (nFrame % 7 == 0)
3348     {
3349 	    g_PlayerServer.DoSyncTeamMemberCurrentLMRLocal(this);
3350     }
3352     // 跨服同步队友当前位置
3353     if (nFrame % (GAME_FPS * 2) == 0)
3354     {
3355 	    g_RelayClient.DoSyncTeamMemberPosition(this);
3356     }
3358     // 本地同步队友当前位置,注意,这个同步的频率会被跨服同步覆盖
3359     if (nFrame % GAME_FPS == 0)
3360     {

H:\work\source\剑网3\剑网3完整源代码\Source\Tools\GameDesignerEditor\AtlKG3DEngineProxy\IndeSource\SO3World\KRelayClient.cpp 181 KB CPP 文件 2009/8/17 9:33:44 2018/9/26 20:26:59 2018/9/26 20:26:59 2
570 	if (pRespond->bSwitchServer)
571 	{
572         // 将角色数据存盘,位置保存为跨服的目标点
573         pPlayer->m_SavePosition.nX              = pRespond->nPosX;
574         pPlayer->m_SavePosition.nY              = pRespond->nPosY;
677 	R2S_TRANSFER_PLAYER_RESPOND*    pRespond    = (R2S_TRANSFER_PLAYER_RESPOND*)pbyData;
678     KPlayer*                        pPlayer     = NULL;
680     // 跨服中断线就可能找不到
681 	pPlayer = g_pSO3World->m_PlayerSet.GetObj(pRespond->dwPlayerID);
682 	KGLOG_PROCESS_ERROR(pPlayer);

H:\work\source\古剑奇侠\[src.cool]古剑奇侠\Server\Code\CoreDevPlatform\src\Components\GameServer\Extends\GameEngine\Item\UseItemManager.cpp 60 KB CPP 文件 2013/12/12 11:35:50 2018/7/30 11:42:09 2018/7/30 11:42:09 1
1238 uint32 UseItemManager::usePetEgg(ObjHuman *objHuman, const ItemBase *itemBase)
1239 {
1240 	//如果是跨服就返回
1241 	if(g_SrvConfig.serverType > 0)
1242 	{

H:\work\source\古剑奇侠\[src.cool]古剑奇侠\Server\Code\CoreDevPlatform\src\Components\GameServer\Extends\GameEngine\Obj\ObjHuman.cpp 605 KB CPP 文件 2013/12/12 11:35:53 2018/7/30 11:42:10 2018/7/30 11:42:10 3
707 bool ObjHuman::saving(bool logout)
708 {
709 	//跨服里面就不保存了,免得占流量
710 	if (g_SrvConfig.serverType > 0 && false == logout)
711 	{
1305 bool ObjHuman::initWorldSyncInfo(Proto::WGLogin& infoSync)
1306 {
1307 	//跨服场景直接登录,还要初始化人物的服务器名字
1308 	if (g_SrvConfig.serverType > 0)
1309 	{
14338 uint32 ObjHuman::addNewPet(uint32 petType)
14339 {
14340 	//如果是跨服就返回
14341 	if(g_SrvConfig.serverType > 0)
14342 	{

H:\work\source\古剑奇侠\[src.cool]古剑奇侠\Server\Code\CoreDevPlatform\src\Components\GameServer\Extends\GameEngine\Pet\PetPlayerManager.cpp 111 KB CPP 文件 2013/12/12 11:35:47 2018/7/30 11:42:10 2018/7/30 11:42:10 1
911 uint32 PetPlayerManager::petIntegrate(uint8 majorIndex, uint8 secondaryIndex,  Proto::GCPetIntegrateRsp& petIntegrateRsp)
912 {
913 	//如果是跨服就返回
914 	if(g_SrvConfig.serverType > 0)
915 	{

H:\work\source\古剑奇侠\[src.cool]古剑奇侠\Server\Code\CoreDevPlatform\src\Components\GameServer\Extends\GameEngine\Scene\Scene_Event.cpp 8 KB CPP 文件 2013/12/12 11:35:50 2018/7/30 11:42:10 2018/7/30 11:42:10 1
54 		pHuman->getSession()->sendG2C(Opcodes::GCFishStatusNotify, msg);
55 	}
57    // 跨服处理
58 	if (_sceneId == g_GlobalConfig.globalInfo.crossTvTMapId)
59 	{

H:\work\source\古剑奇侠\[src.cool]古剑奇侠\Server\Code\CoreDevPlatform\src\Components\GameServer\Extends\GameEngine\Scene\SceneThread.cpp 10 KB CPP 文件 2013/12/12 11:35:50 2018/7/30 11:42:10 2018/7/30 11:42:10 2
296 	if (g_SrvConfig.serverType > 0)
297 	{
298 		setTimer(GAME_LOAD_CROSS_INFO_TIMER_ID, _loadCrossInfoUserTimerID, 60*1000, 0, NULL);   //如果是跨服服务器,定期加载跨服信息
299 	}
301 	//消息队列循环处理

H:\work\source\古剑奇侠\[src.cool]古剑奇侠\Server\Code\CoreDevPlatform\src\Components\GameServer\Extends\GameEngine\Scene\Cross\CrossServerManager.cpp 11 KB CPP 文件 2013/12/12 11:35:49 2018/7/30 11:42:10 2018/7/30 11:42:10 4
45 		string regIp   = crossList[i].regIp;
46 		int32  regPort = crossList[i].regPort;
48 		//记录该跨服信息
49 		_crossInfoMap[sid] = crossList[i];
51 		//注册该节点
170 				}
171 			}
173 			//先该服发送跨服关闭信息
174 			ProxyManager* crossProxy = g_pProxyManager->getCrossProxy(sid);
175 			if (NULL != crossProxy)
211 			string regIp   = crossInfoList[i].regIp;
212 			int32  regPort = crossInfoList[i].regPort;
214 			//记录该跨服信息
215 			_crossInfoMap[sid] = crossInfoList[i];
215 			_crossInfoMap[sid] = crossInfoList[i];
217 			//注册该跨服信息
218 			ProxyManager* crossProxy = g_pProxyManager->regCrossProxy(sid, platformName, _srvName, regIp, regPort);
220 			if (NULL != crossProxy && Proxy_Active == crossProxy->getStatus())

H:\work\source\古剑奇侠\[src.cool]古剑奇侠\Server\Code\CoreDevPlatform\src\Components\GateServer\Extends\OpcodeHandler.cpp 33 KB CPP 文件 2013/12/12 11:35:55 2018/7/30 11:42:10 2018/7/30 11:42:10 1
338     _opcodeTable[Opcodes::CWGetFundExInfoReq]        = {"CWGetFundExInfoReq",       &NetworkSession::sendGate2World};
339     _opcodeTable[Opcodes::CWGetFundExRewardReq]      = {"CWGetFundExRewardReq",     &NetworkSession::sendGate2World};
341     //跨服模块
342     _opcodeTable[Opcodes::CGCross1v1ServerDetailReq] = {"CGCross1v1ServerDetailReq", &NetworkSession::sendGate2World};
343     _opcodeTable[Opcodes::CGCross1v1GetLastRankListReq] = {"CGCross1v1GetLastRankListReq", &NetworkSession::sendGate2World};

H:\work\source\古剑奇侠\[src.cool]古剑奇侠\Server\Code\CoreDevPlatform\src\Components\WorldServer\Extends\Copy\MVMAthleticsManager.cpp 77 KB CPP 文件 2013/9/22 11:00:29 2018/7/30 11:42:11 2018/7/30 11:42:11 4
930 {
931 	closeCross1v1();
933 	//跨服前三
934 	_crossTop3List.clear();
935 	_crossTop3List = crossResult.top3List;
1901 	strBounesData = bounesWriter.write(bounesRoot) + "||" + bounesWriter.write(crossBounesRoot) + "||" + bounesWriter.write(crossTop3BounesRoot);
1902 	WRITE_DEBUG("strBounesData = " << strBounesData);
1904 	//序列化跨服前三雕像
1905 	Json::Value crossTop3Value;
1906 	crossTop3Value.resize(_crossTop3List.size());
2306 		player->getSession()->sendW2C(Opcodes::GC3v3BounesNotify, bounesNotify);
2307 	}
2309 	//判断是否有跨服奖励
2310 	auto crossIter = _crossBounesMap.find(playerId);
2311 	if (crossIter != _crossBounesMap.end())
2318 		player->getSession()->sendW2C(Opcodes::GCCross1v1BounesNotify, bounesNotify);
2319 	}
2321 	//判断跨服1v1活动是否开启,如果开启,则推送活动开启图标
2322 	if (true == _crossTvTStatus)
2323 	{

H:\work\source\古剑奇侠\[src.cool]古剑奇侠\Server\Code\CoreDevPlatform\src\Components\WorldServer\Extends\Player\PlayerManager.cpp 37 KB CPP 文件 2013/12/12 11:36:00 2018/7/30 11:42:11 2018/7/30 11:42:11 2
646 void PlayerManager::calcTopHonourList()
647 {
648     //如果跨服还没开放,则直接返回
649 	if (false == _crossStatus)
650 	{
707 		return;
708 	}
710 	//通知跨服前5名
711 	Proto::GGReportServerInfoNotify serverInfoNotify;
712 	serverInfoNotify.crossServerInfo.serverId   = g_SrvConfig.sid;

H:\work\source\古剑奇侠\[src.cool]古剑奇侠\Server\Code\CoreDevPlatform\src\Components\WorldServer\Extends\Session\SessionManager.cpp 26 KB CPP 文件 2013/12/12 11:35:59 2018/7/30 11:42:11 2018/7/30 11:42:11 1
162 void SessionManager::loadSceneCfg()
163 {
164 	//加载跨服场景
165 	Json::Value sceneThreadValue;
166     LoadManager loader;

H:\work\source\古剑奇侠\[src.cool]古剑奇侠\Server\Code\CoreDevPlatform\src\Components\WorldServer\Extends\Session\SessionMessage.cpp 22 KB CPP 文件 2013/12/12 11:35:59 2018/7/30 11:42:11 2018/7/30 11:42:11 8
72 	//计算前5荣誉值
73 	g_pPlayerManager->calcTopHonourList();
75 	//通知跨服中心
76 	g_pPlayerManager->notifyInfo2CrossCenter();
78 	//保存玩家消耗元宝
709 void CrossServerStartMessage::execute()
710 {
711 	//先检查跨服版本和自己的版本是不是一致
712 	Proto::GGCrossServerStartNotify crossStartNotify;
713 	crossStartNotify.decode((const char*)&_msg.body[0], _msg.body.size());
715 	WRITE_DEBUG("Recv CrossServerStartMessage, CrossServer version = " << crossStartNotify.version << ", CurServer version = " << g_Version);
717 	WRITE_DB_LOG("CrossServer restart, CrossServer version = " << crossStartNotify.version << ", CurServer version = " << g_Version);
719 	//先关闭所有跨服场景
720 	g_pSessionManager->closeAllCrossScene();
720 	g_pSessionManager->closeAllCrossScene();
722 	//关闭跨服仙道会
723 	g_pMvMAthleticsManager->closeCross1v1();
725 	//上报本服版本号
732 	//可以开始上报信息了
733 	g_pPlayerManager->setCrossStatus(true);
735 	//上报奔赴信息到跨服中心
736 	g_pPlayerManager->notifyInfo2CrossCenter();
738 	if (g_Version == crossStartNotify.version)
754 	Proto::GWReportServerInfoNotify notify;
755 	g_pPlayerManager->updateCrossServerInfo(notify.crossSrvInfoList);
757 	//先关闭所有跨服场景
758 	g_pSessionManager->closeAllCrossScene();
758 	g_pSessionManager->closeAllCrossScene();
760 	//关闭跨服仙道会
761 	g_pMvMAthleticsManager->closeCross1v1();
761 	g_pMvMAthleticsManager->closeCross1v1();
763 	//设置跨服状态为false
764 	g_pPlayerManager->setCrossStatus(false);
765 }

H:\work\source\古剑奇侠\[src.cool]古剑奇侠\Server\Code\CoreDevPlatform\src\Components\WorldServer\Extends\Session\WorldSession.cpp 45 KB CPP 文件 2013/12/12 11:35:59 2018/7/30 11:42:11 2018/7/30 11:42:11 15
241 	loginReq.marryInfo.marryName = "";
242 	loginReq.fixSceneId = 0;
244 	//判断是否跨服场景
245 	if (false == g_pSessionManager->isCrossSceneOpen(_player->getPlayerSimpleData()->sceneId))
246 	{
250 		loginReq.fixSceneId = 1;
251 	}
253     //如果在跨服仙道会战斗副本内下线,则把该当前场景设置为大厅场景
254 	if (_player->getPlayerSimpleData()->sceneId == g_GlobalConfig.globalInfo.crossTvTCopyId)
255 	{
782 	DECODE(msg, reqMsg);
784     WRITE_TRACE(TRACE_LOGIN, "HandleLogout, playerId = " << _playerId << ", curStatus = " << StateDesc[_status]);
786     //如果是跨服场景关闭
787     if (reqMsg.reason == CROSS_SCENE_CLOSE)
788     {
903 	//先让玩家数据在世界服下线
904 	logout();
906 	//跨服场景不开启,此时在跨服场景中刷新则认为是登出
907 	uint32 sceneId = _player->getSceneId();
908 	if (sceneId == g_GlobalConfig.globalInfo.crossTvTCopyId || sceneId == g_GlobalConfig.globalInfo.crossTvTMapId)
1053     
1054 	uint32 sceneId = _player->getSceneId();
1056 	//跨服几个场景在这里特殊处理
1057 	//1.进入跨服1v1战斗场景必须在跨服仙道会大厅中,并且跨服仙道会已经开启
1058 	if (((uint32)enterSceneReq.sceneId == g_GlobalConfig.globalInfo.crossTvTCopyId
1059 	 && sceneId != g_GlobalConfig.globalInfo.crossTvTMapId)
1068 		return;
1069 	}
1071 	//2.如果要进入跨服1v1战斗场景,必须跨服仙道会要开启
1072 	if ((uint32)enterSceneReq.sceneId == g_GlobalConfig.globalInfo.crossTvTCopyId
1073 	 && false == g_pMvMAthleticsManager->isCross1v1Open())
1081 		return;
1082 	}
1084 	//3.如果当前在跨服1v1战斗场景,则只能请求传到外面跨服仙道会大厅
1085 	if (((uint32)sceneId == g_GlobalConfig.globalInfo.crossTvTCopyId
1086 	 && (uint32)enterSceneReq.sceneId != g_GlobalConfig.globalInfo.crossTvTMapId)
1095 		return;
1096 	}
1098 	//4.跨服1v1大厅的出口只可以是大地图
1099 	if (((uint32)sceneId == g_GlobalConfig.globalInfo.crossTvTMapId
1100 	 && true == g_SceneConfig.isCopyScene((uint32)enterSceneReq.sceneId))
1137         return;
1138     }
1140 	//判断是否跨服场景
1141     if (false == g_pSessionManager->isCrossSceneOpen(enterSceneReq.sceneId))
1142     {

H:\work\source\古剑奇侠\[src.cool]古剑奇侠\Server\Code\CoreDevPlatform\src\Tools\CrossMatchTool\main.cpp 16 KB CPP 文件 2013/9/16 11:24:24 2018/7/30 11:42:18 2018/7/30 11:42:18 2
248 void updateWeekly()
249 {
250 	//1.先找出新开的服需要跨服的
251 	map<int32, vector<ServerNode> > newServerMap;
253 	string sql = "SELECT platform_id, server_id, server_name, reg_ip, reg_port, avg_power, total_player_num, open_server_time, update_time, merge_flag FROM server_info WHERE + open_server_time > " + IceUtilEx::tostr(g_lastWeekBeginTime) + " AND open_server_time < " + IceUtilEx::tostr(g_lastWeekEndTime);
410 		}
411 	}
413 	//清空跨服表
414 	g_dbPool.DirectExecute("TRUNCATE TABLE cross_info;");
416 	//分组

H:\work\source\古剑奇侠\[src.cool]古剑奇侠\Server\Code\CoreDevPlatform\src\Tools\LogAdmin\LogClient.cpp 37 KB CPP 文件 2013/12/12 11:35:43 2018/7/30 11:42:18 2018/7/30 11:42:18 10
48 			"cdpadmin [-s Service] -ban opcode on/off (on表示屏蔽这个opcode,off表示去屏蔽掉opcode)\n"
49 			"cdpadmin [-s Service] -forbiden type id flag (type 禁止的类型 0为禁止进入场景. id 要设置的id.  flag 是否禁止 0为不禁止1为禁止. )\n"
50 			"cdpadmin [-s Service] -startcross (通知该服务器,跨服服务器已经开启)\n"
51 			"cdpadmin [-s Service] -stopcross (通知该服务器,跨服服务器已经关闭)\n"
52 			"cdpadmin [-s Service] -opencross sceneId (通知该服务器,开启某跨服地图)\n"
53 			"cdpadmin [-s Service] -closecross sceneId (通知该服务器,关闭某跨服地图)\n"
54             "cdpadmin [-s Service] -cleancross (清理跨服服务器列表信息)\n"
55 			"cdpadmin [-s Service] -setRingArenaOpen id (0是正常擂台不可开启，1是正常擂台可开启,命令开启不受限制)\n"
56 			"cdpadmin [-s Service] -setRingArenaRobot id (0是不匹配机器人，1是匹配机器人)\n"
167 	bool   isOpcode = false;
168 	uint16 opcode = 0;
170 	bool   isOpenCrossScene  = false;  //开启某个跨服场景
171 	bool   isCloseCrossScene = false;  //关闭某个跨服场景
172 	uint32 crossSceneId = 0;           //跨服场景ID
174 	bool   isStartCrossServer  = false;   //开启跨服场景
175 	string crossServerVer;
175 	string crossServerVer;
176 	bool   isStopCrossServer  = false;  //关闭跨服场景
178 	bool isSetRingArena = false;
179 	uint8 isOpen = 0;

H:\work\source\大唐豪侠\datang client full code\ENGINE\Src\ArkCore\ArkCoreLogic\GasCoreLogic\GasSceneAllocMgr.cpp 2 KB CPP 文件 2005/4/27 8:39:40 2018/9/18 17:10:59 2018/9/18 17:10:59 1
33 			{
34 				// Gas上有公开地图也有副本地图
35 				// 需要跨服务器的由Gcc处理, 其余由Gas自己处理, 例如:
36 				// 公开地图由Gcc处理; 副本地图由Gas处理
37 				// Shell层负责把对公开地图的申请发给Gcc, 把对副本地图的申请发给GasLogic层

H:\work\source\大唐豪侠\datang client full code\ENGINE\Src\ArkCore\ArkCoreLogic\GccCoreLogic\CSceneData.cpp 2 KB CPP 文件 2005/3/23 10:59:18 2018/9/18 17:10:58 2018/9/18 17:10:58 1
14 #endif
16 // [注意]
17 // 本文件中注释掉的部分代码，原本是为了支持跨服务器的副本地图而设计，
18 // 由于网络延迟可能造成场景状态在各服务器上的镜像不一致，因此，将
19 // 副本地图、擂台地图限制在玩家所在的同一个服务器上。 [2004/12/14,weck]

H:\work\source\大唐豪侠\datang client full code\ENGINE\Src\ArkCore\ArkCoreLogic\GccCoreLogic\GccSceneAllocMgr.cpp 2 KB CPP 文件 2005/4/27 8:39:38 2018/9/18 17:10:59 2018/9/18 17:10:59 1
30 			bool CSceneInfo::Acquire( uint32 CharId ) 
31 			{
32 				// Gcc负责处理跨服务器的场景申请
33 				bool retval = false;
34 				switch( GetLoadMode() )

H:\work\source\大唐豪侠\datang client full code\GAME\GacShell\CGameFov.cpp 123 KB CPP 文件 2005/7/21 21:46:34 2018/9/18 17:10:56 2018/9/18 17:10:56 1
2545 	if ( NULL == pNetData )
2546 		return 0;
2548     //TODO: 在客户端显示跨服务器动画或提示
2549     return sizeof( CScene2FovPrepareTransfer );
2550 }

H:\work\source\大唐豪侠\datang client full code\GAME\GasShell\CGameScene.cpp 98 KB CPP 文件 2005/7/21 21:46:40 2018/9/18 17:10:56 2018/9/18 17:10:56 1
1408 unsigned int CGameScene::OnReceivedPlayerInfo(const void* pData,unsigned int uSize)
1409 {
1410 	// 作为主角跨服务器流程的目标场景，接受来自源场景的主角信息
1411 	const CScene2Scene_Player_Info *spi =
1412 		GetCommandFromBuffer<CScene2Scene_Player_Info>(pData,uSize);

H:\work\source\大唐豪侠\datang client full code\GAME\GasShell\CGameServer.cpp 10 KB CPP 文件 2005/7/21 21:46:38 2018/9/18 17:10:56 2018/9/18 17:10:56 1
369 void CGameServer::CheckChangeSceneTimeout()
370 {
371 	// 跨服务器数据超时检查
372 	uint32 uSceneCount=GetSceneCount();
373 	for (uint32 i = 0; i < uSceneCount; i++ ) 

H:\work\source\大唐豪侠\datang client full code\GAME\GasShell\CPlayerServer.cpp 162 KB CPP 文件 2005/7/21 21:46:40 2018/9/18 17:10:58 2018/9/18 17:10:58 2
2352 		break;
2353 	case 'M':
2354 		// 测试跨服务器流程 added by weck
2355 		{
2356 			CGameScene* pScene=static_cast<CGameScene*>(this->GetSceneFovShell());
2377 }
2379 /*
2380 *	载入主角信息，可能是从数据库读取，也可能是跨服务器引起的
2381 */
2382 bool CPlayerServer::LoadInfo(CObjectCreateInfo& ocs)

H:\work\source\大唐豪侠\datang client full code\GAME\GasShell\CRebornMgr.cpp 6 KB CPP 文件 2005/7/21 21:46:38 2018/9/18 17:10:58 2018/9/18 17:10:58 1
15 * -----------------------------------------------------------------------
16 *  1. 选择重   | 不修改当前重生点  |  RequestMap请求能进入的重生点,
17 *     生点	   |			       |  如果成功, 就执行跨服务器
18 * -----------------------------------------------------------------------
19 *  2. 传送到   | SetPos修改坐标	   |  TransferTo

H:\work\source\大唐豪侠\datang client full code\GAME\GasShell\CRequestMapController.cpp 3 KB CPP 文件 2005/6/24 11:46:18 2018/9/18 17:10:58 2018/9/18 17:10:58 1
30 void CRequestMapController::DoRequest()
31 {
32 	// 如果请求的场景是要跨服务器的, 那么就要向Gcc发请求
33 	// 向GCC发请求
34 	CGameScene* pGameScene = static_cast<CGameScene*>( m_pPlayer->GetSceneFovShell() );

H:\work\source\大唐豪侠\datang client full code\GAME\GasShell\RequestMapManager.cpp 5 KB CPP 文件 2005/6/17 12:29:16 2018/9/18 17:10:59 2018/9/18 17:10:59 1
36 		void CCommand::DoRequest()
37 		{
38 			// 如果请求的场景是要跨服务器的, 那么就要向Gcc发请求
39 			// 向GCC发请求
40 			CGameServer *pGameServer =static_cast< CManager* >( GetScheduler() )->GetGameServer();

H:\work\source\大神传\[src.cool]大神传\yl_32\sourcecode\gameworld\onlinegamemodule\qplayerteam.cpp 24 KB CPP 文件 2016/2/23 2:04:58 2018/7/27 0:12:04 2018/7/27 0:12:04 4
50 		QTeamGCHandler::DoTeamSyncMemberMaxLMR(&m_rPlayer);
51 	}
53 	// 跨服同步队友当前血量等
54 	if (nFrame % GAME_FPS == 0)
55 	{
56 		QTeamGCHandler::DoTeamSyncMemberCurrentLMR(&m_rPlayer);
57 	}
59 	// 同步附近队友当前生命,注意,这个同步的频率会被跨服同步覆盖
60 	if (nFrame % 7 == 0)
61 	{
62 		DoSyncTeamMemberCurrentLMRLocal(&m_rPlayer);
63 	}
65 	// 跨服同步队友当前位置
66 	if (nFrame % (GAME_FPS * 2) == 0)
67 	{
68 		QTeamGCHandler::DoSyncTeamMemberPosition(&m_rPlayer);
69 	}
71 	// 本地同步队友当前位置,注意,这个同步的频率会被跨服同步覆盖
72 	if (nFrame % GAME_FPS == 0)
73 	{

H:\work\source\大神传\[src.cool]大神传\yl_32\sourcecode\gameworld\onlinegamemodule\item2\kitemprotocolprocess.cpp 21 KB CPP 文件 2016/2/23 2:04:58 2018/7/27 0:12:03 2018/7/27 0:12:03 4
258 BOOL KItemProtocol::c2sApplyEnhance(KPlayer* pPlayer, LPCBYTE pProtocol, UINT nDataLen)
259 {
260 	// 跨服状态下不能强化
261 	if(IS_BZONE_PLAYER(pPlayer->GetId()))
262 		return FALSE;
368 BOOL KItemProtocol::c2sEquipIdentify(KPlayer* pPlayer, LPCBYTE pProtocol, UINT nDataLen)
369 {
370 	// 跨服状态下不能鉴定
371 	if(IS_BZONE_PLAYER(pPlayer->GetId()))
372 		return FALSE;
395 BOOL KItemProtocol::c2sStoneMix(KPlayer* pPlayer, LPCBYTE pProtocol, UINT nDataLen)
396 {
397 	// 跨服状态下不能宝石合成
398 	if(IS_BZONE_PLAYER(pPlayer->GetId()))
399 		return FALSE;
491 BOOL KItemProtocol::c2sStoneMount(KPlayer* pPlayer, LPCBYTE pProtocol, UINT nDataLen)
492 {
493 	// 跨服状态下不能宝石镶嵌
494 	if(IS_BZONE_PLAYER(pPlayer->GetId()))
495 		return FALSE;

H:\work\source\大神传\[src.cool]大神传\yl_32\sourcecode\gameworld\onlinegamemodule\item2\kplayeritem.cpp 151 KB CPP 文件 2016/2/23 2:04:58 2018/7/27 0:12:03 2018/7/27 0:12:03 2
4840 		return	FALSE;		// 失效道具不能使用
4842 	if (IS_BZONE_PLAYER(m_rcPlayer.GetId()) && !rcItem.CanUseInBZone())
4843 		return FALSE;		// 跨服状态且非跨服道具不能使用
4845 	if (KD_ISEQUIP(rcItem.GetGenre()))
4846 	{	// 装备检查是否可以装备

H:\work\source\大神传\[src.cool]大神传\yl_32\sourcecode\gameworld\onlinegamemodule\task\ktasktimer.cpp 13 KB CPP 文件 2016/2/23 2:04:58 2018/7/27 0:12:04 2018/7/27 0:12:04 1
138 		// 多少时间未上线？
139 		INT nLostTime = (KSysService::Time(NULL) - pTimer->nLastQuit) * GAME_FPS;
140 		// 跨服时可能有时间误差，所以nLostTime可能为负数，这种情况下调整为0
141 		if (nLostTime < 0)
142 			nLostTime = 0;

H:\work\source\大神传\[src.cool]大神传\yl_32\sourcecode\gameworld\onlinegameworld\kluacharacter.cpp 36 KB CPP 文件 2016/2/23 2:04:58 2018/7/27 0:12:04 2018/7/27 0:12:04 1
224 // @ClassName		: KLuaCharacter
225 // @LuaApiName		: IsBZonePlayer
226 // @Description		: 判断一个Character是否是一个跨服Player
227 // @ReturnCode		: 
228 // @ArgumentFlag	: 

H:\work\source\大神传\[src.cool]大神传\yl_32\sourcecode\gameworld\onlinegameworld\kluaplayer.cpp 37 KB CPP 文件 2016/2/23 2:04:58 2018/7/27 0:12:04 2018/7/27 0:12:04 4
228 // @ClassName		: KLuaCharacter
229 // @LuaApiName		: IsBZonePlayer
230 // @Description		: 是否是跨服过来的玩家
231 // @ReturnCode		: 
232 // @ArgumentFlag	: 
290 // @ClassName		: KLuaPlayer
291 // @LuaApiName		: DoMultiTransferRequest
292 // @Description		: 多人副本跨服传送
293 // @ReturnCode		: 
294 // @ArgumentFlag	: 
308 // @ClassName		: KLuaPlayer
309 // @LuaApiName		: DoGetMultiAwardRequest
310 // @Description		: 跨服回来后请求奖励信息
311 // @ReturnCode		: 
312 // @ArgumentFlag	: 
324 // @ClassName		: KLuaPlayer
325 // @LuaApiName		: DoGetCrossSvExDataRequest
326 // @Description		: 跨服回来后请求额外数据
327 // @ReturnCode		: 
328 // @ArgumentFlag	: 

H:\work\source\大神传\[src.cool]大神传\yl_32\sourcecode\gameworld\onlinegameworld\kplayerbaseprocess_client.cpp 24 KB CPP 文件 2016/2/23 2:04:58 2018/7/27 0:12:04 2018/7/27 0:12:04 1
182 	if (pReceived->nCode) // TODO: 临时方案
183 		return TRUE;
185 	printf("\n跨服: %s:%d\n", inet_ntoa(*(in_addr*)&pReceived->uServerIp), pReceived->wPort);
187 	extern IKSocketClientInterface* g_piSocketClient;
188 	g_piSocketClient->ShutDown();

H:\work\source\大神传\[src.cool]大神传\yl_32\sourcecode\gameworld\onlinegameworld\kplayerserver.cpp 45 KB CPP 文件 2016/2/23 2:04:58 2018/7/27 0:12:04 2018/7/27 0:12:04 1
393 {
394 	BOOL                        bRetCode            = false;
396 	// 将角色数据存盘,位置保存为跨服的目标点
397 	m_SavePosition.nX              = nX;
398 	m_SavePosition.nY              = nY;

H:\work\source\大神传\[src.cool]大神传\yl_32\sourcecode\gameworld\onlinegameworld\KRelayClient.cpp 99 KB CPP 文件 2016/2/23 2:04:58 2018/7/27 0:12:04 2018/7/27 0:12:04 6
236 	REGISTER_MODULE_FUNC(r2s_get_server_record_respond, &RecordRelayClient::OnGetServerRecordRespond, sizeof(R2S_GET_SERVER_RECORD_RESPOND));
237 	REGISTER_MODULE_FUNC(r2s_get_all_purchase_buy_respond, &RecordRelayClient::OnGetAllPurchaseRespond, sizeof(R2S_BUY_ALL_PURCHASE_REQUEST));
239 	// ------------------------ 跨服组队 --------------------------------------------------------------
240 	REGISTER_MODULE_FUNC(r2s_sync_overall_teams, &KOverallRelayClient::OnSyncOverallTeamList, sizeof(R2S_SYNC_OVERALL_TEAM));
241 	REGISTER_MODULE_FUNC(r2s_sync_overall_teamops_result, &KOverallRelayClient::OnSyncOverallTeamOpsResult, sizeof(R2S_OVERALL_TEAM_OPS_RESULT));
726 	if (pRespond->bSwitchServer)
727 	{
728         // 将角色数据存盘,位置保存为跨服的目标点
729         pPlayer->m_cPlayerServer.m_SavePosition.nX              = pRespond->nPosX;
730         pPlayer->m_cPlayerServer.m_SavePosition.nY              = pRespond->nPosY;
869 	R2S_TRANSFER_PLAYER_RESPOND*    pRespond    = (R2S_TRANSFER_PLAYER_RESPOND*)pbyData;
870     KPlayer*                        pPlayer     = NULL;
872     // 跨服中断线就可能找不到
873 	pPlayer = g_cPlayerMgr.GetById(pRespond->dwPlayerID);
874 	PROCESS_ERROR(pPlayer);
899 	R2S_BZONE_TRANSFER_PLAYER_RESPOND*    pRespond    = (R2S_BZONE_TRANSFER_PLAYER_RESPOND*)pbyData;
900 	KPlayer*                        pPlayer     = NULL;
902 	// 跨服中断线就可能找不到
903 	pPlayer = g_cPlayerMgr.GetById(pRespond->dwPlayerID);
904 	PROCESS_ERROR(pPlayer);
909 	{
910 		pPlayer->SetGameState(gsPlaying);
912 		g_ChatChannelManager.ProcessRespond(trLocalSys, emKSYSTEMMSG_NORMAL, pPlayer->GetId(), "DEBUG", "跨服服务器人数已满，请稍后再试", emQCHAT_PANEL);
913 		/*
914 		QLogPrintf(LOG_INFO, "Switch GS failed, shutdown(%d)\n", pPlayer->GetPlayerIndex());
935 	R2S_BZONE_RETURN_RESPOND*		pRespond    = (R2S_BZONE_RETURN_RESPOND*)pbyData;
936 	KPlayer*                        pPlayer     = NULL;
938 	// 跨服中断线就可能找不到
939 	pPlayer = g_cPlayerMgr.GetById(pRespond->dwPlayerID);
940 	PROCESS_ERROR(pPlayer);

H:\work\source\大神传\[src.cool]大神传\yl_32\sourcecode\server\coordinator2\KRole.cpp 14 KB CPP 文件 2016/2/23 2:04:58 2018/7/27 0:12:10 2018/7/27 0:12:10 6
164 			break;
166         case rsCG_WaitForCreateMap:
167             // 跨服,等待地图加载的过程中,玩家退出,或者源服务器宕机(可能源和目标是同一个服务器)
168             bRetCode = g_pGameCenter->m_MapManager.DecreaseMapCopyPlayerCount(m_dwMapID, m_nMapCopyIndex);
169             LOG_PROCESS_ERROR(bRetCode);
223 			break;
225 		case rsCG_WaitForSrcLeave:
226             // 跨服已经进入目标GS,等待从源GS离开
227             // 将源副本人数减1
228             bRetCode = g_pGameCenter->m_MapManager.DecreaseMapCopyPlayerCount(m_dwMapID, m_nMapCopyIndex);
313             break;
315         case rsCG_WaitForPlayerData:
316             // 跨服等待角色信息的时候,目标GS宕机,这时什么也不用做,等待角色信息来了再退回去
317             break;
319         case rsCG_WaitForGuid:
317             break;
319         case rsCG_WaitForGuid:
320             // 在等待GUID的时候,目标GS宕机了,这时应该给源GS回包否决这次跨服
321             // 当然,没必要去减目标副本的人数,因为目标Server都宕机了,呵呵
322             g_pGameCenter->m_GameServer.DoTransferPlayerRespond(m_nConnIndex, m_dwPlayerID, false);
328 		case rsCG_WaitForEnter_Leave:
329 		case rsCG_WaitForSrcLeave:
330             // 玩家在跨服后期从目标GS退出,这时要等待玩家从源GS退出,然后离线
331             // 注意,这时跨服并没有真正完成,玩家的ConnIndex还是算在源GS上的
332             // 将目标副本人数减1
333             bRetCode = g_pGameCenter->m_MapManager.DecreaseMapCopyPlayerCount(m_dwDestMapID, m_nDestMapCopyIndex);

H:\work\source\大神传\[src.cool]大神传\yl_32\sourcecode\server\coordinator2\ServerHandler.cpp 139 KB CPP 文件 2016/2/23 2:04:58 2018/7/27 0:12:10 2018/7/27 0:12:10 6
1288                 continue;
1289             }
1291             // 注意,这里不见得就是跨服,确切的说应该是跨地图等待创建目标地图
1292             if (pRole->m_nConnIndex == nConnIndex)
1293             {
1313             else
1314             {
1315                 // 玩家并不在本服务器上,那么等待源服务器传角色数据过来(跨服)
1316                 DoSearchMapRespond(
1317                     pRole->m_nConnIndex, it->dwPlayerID, smrcSuccess, true, 
1590     bRetCode = pMapInfo->CheckPlayerEnterNewCopyTimes(pRequest->dwPlayerID, nMapCopyIndex);  
1591     DO_SEARCH_MAP_FAILED_RETURN(bRetCode, smrcEnterNewCopyTooManyTimes);
1593     // 找到了，看是不是要跨服务器
1594     if (pMapCopy->m_nConnIndex == nConnIndex)
1595     {        
1594     if (pMapCopy->m_nConnIndex == nConnIndex)
1595     {        
1596 	    // 不跨服务器, 通知GS换地图
1597         DoSearchMapRespond(
1598             nConnIndex, pRequest->dwPlayerID, smrcSuccess, false, 
1614     else
1615     {
1616         // 进入跨服流程
1617 	    DoSearchMapRespond(
1618             nConnIndex, pRequest->dwPlayerID, smrcSuccess, true, 
1906 	else
1907 	{
1908         // 跨服被拒绝后,要把目标地图的人数减下来(之前 SearchMap的时候加的)
1909         bRetCode = g_pGameCenter->m_MapManager.DecreaseMapCopyPlayerCount(pRole->m_dwDestMapID, pRole->m_nDestMapCopyIndex);
1910         LOG_PROCESS_ERROR(bRetCode);

H:\work\source\幻想学园\[src.cool]幻想学园\su-p\client\client\Game.cpp 227 KB CPP 文件 2008/10/16 17:28:37 2018/9/25 17:39:14 2018/9/25 17:39:14 1
1852 		EventHandlerMgr.AddCustomEvent(CLIENTEVENT_1ST_TIME_ENTERGAME, 0, 0);
1853 	}
1855 	g_pNetIO->DisconnectOld();	//g_pNetIO->DispatchNetMsg(); 可能收到跨服务器跳转包，所以这句话一定要在其上面。
1856 	g_pNetIO->DispatchNetMsg();	
1857 	

H:\work\source\幻想学园\[src.cool]幻想学园\su-p\library\libserverarea\playermanager.cpp 325 KB CPP 文件 2008/10/9 17:48:40 2018/9/25 17:39:22 2018/9/25 17:39:22 1
675 		return 0;
677 	//加入到关卡地图中。(如果是队员，队长已经移动了，需要把位置设置到队长边上)
678 	if(p_player->getConnectState() == CONNECTSTATE_LOAD_MOVEMAP)	//跨服务器过图
679 	{
680 		if(p_player->_nTeamMemberDBID[0])

H:\work\source\幻想学园\[src.cool]幻想学园\su-p\library\libserverarea\servernpc.cpp 38 KB CPP 文件 2008/9/16 13:49:58 2018/9/25 17:39:22 2018/9/25 17:39:22 2
646 		Team* lpTeam = 0;
647 		if(mpidTeam != 0 && (lpTeam = g_pTeamMgr->getTeam(mpidTeam)))
648 		{//组队跨服务器瞬移
649 			//初始化队员状态
650 			PlayerState state;
701 		}
702 		else if(pPlayer->getConnectState() == CONNECTSTATE_GAME || pPlayer->getConnectState() == CONNECTSTATE_LOGINED)
703 		{//单人跨服务器瞬移
704 			pPlayer->prepareMoveMap(nDestLevel, nX, fY, nZ, nMapImplID, nTeleMode);
705 			//发包给ServerManager. 请求过图

H:\work\source\幻想物语\xwzg1\xwzgServerSource\MsgServer\MSGSERVER\WORLDKERNEL\WorldKernel.cpp 108 KB CPP 文件 2012/8/10 22:55:48 2018/8/1 19:41:01 2018/8/1 19:41:01 8
1887 								case ITEMACT_GETINFO:
1888 								{
1889 									///篡改消息以支持跨服
1890 									msgItem.m_pInfo->usAction=ITEMACT_QUERYITEMINFO;
1891 									GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,&msgItem);
1894 								case ITEMACT_GETEUDEMONINFO:
1895 								{
1896 									///篡改消息以支持跨服
1897 									msgItem.m_pInfo->usAction=ITEMACT_QUERYEUDEMONINFO;
1898 									GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,&msgItem);
1908 // 								case ITEMACT_GETINFO:
1909 // 								{
1910 // 									///篡改消息以支持跨服
1911 // 									pMsg->m_pInfo->usAction=ITEMACT_QUERYITEMINFO;
1912 // 									GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,pMsg);
1915 // 								case ITEMACT_GETEUDEMONINFO:
1916 // 								{
1917 // 									///篡改消息以支持跨服
1918 // 									pMsg->m_pInfo->usAction=ITEMACT_QUERYEUDEMONINFO;
1919 // 									GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,pMsg);
1955 						case EM_MSGWPSL_QUERY:
1956 							{
1957 								///篡改消息以支持跨服
1958 								msgItem.m_pInfo->usAction=EM_MSGWPSL_QUERY_LINE;
1959 								GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,&msgItem);
1962 						case EM_MSGWPSL_UPDATE:
1963 							{
1964 								///篡改消息以支持跨服
1965 								msgItem.m_pInfo->usAction=EM_MSGWPSL_UPDATE_LINE;
1966 								GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,&msgItem);
2007 					memcpy(&idUser,pMsg+nMsgSize-4,4);///提取extra数据,里面保存的是源用户的id
2008 					CPlayer* pPlayer = UserList()->GetPlayer(idUser);
2009 					switch(msgptr->ucAction)///真痛苦，跨服消息处理真麻烦，以后设计服务器架构一定要多线的
2010 					{
2011 						case _FRIEND_ADDSUCCESSREPLY:
2027 							break;
2028 						case _FRIEND_ADDSUCCESS_PASSIVE:
2029 						case _FRIEND_ADDSUCCESS:///跨服中断消息
2030 							{
2031 								///添加别人添加好友成功，告诉你一声

H:\work\source\征三国\征三国\Server\Common\ServerVarInterface.cpp 174 KB CPP 文件 2014/6/10 15:10:44 2018/7/1 11:28:20 2018/7/1 11:28:20 1
1826 void CServerVarInterface::AddStatusByScript(int nStatusID, int nStatusLevel)
1827 {
1828     // Todo 现在已经修改成为跨服的，需要请求到center去同步  
1830 }
1831 void CServerVarInterface::PopNpcList()

H:\work\source\御剑江湖\[src.cool]御剑江湖\yjjh\Server\MsgServer_Npc_new\MSGSERVER\WORLDKERNEL\WorldKernel.cpp 108 KB CPP 文件 2011/7/22 10:32:42 2018/8/16 0:57:30 2018/8/16 0:57:30 8
1887 								case ITEMACT_GETINFO:
1888 								{
1889 									///篡改消息以支持跨服
1890 									msgItem.m_pInfo->usAction=ITEMACT_QUERYITEMINFO;
1891 									GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,&msgItem);
1894 								case ITEMACT_GETEUDEMONINFO:
1895 								{
1896 									///篡改消息以支持跨服
1897 									msgItem.m_pInfo->usAction=ITEMACT_QUERYEUDEMONINFO;
1898 									GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,&msgItem);
1908 // 								case ITEMACT_GETINFO:
1909 // 								{
1910 // 									///篡改消息以支持跨服
1911 // 									pMsg->m_pInfo->usAction=ITEMACT_QUERYITEMINFO;
1912 // 									GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,pMsg);
1915 // 								case ITEMACT_GETEUDEMONINFO:
1916 // 								{
1917 // 									///篡改消息以支持跨服
1918 // 									pMsg->m_pInfo->usAction=ITEMACT_QUERYEUDEMONINFO;
1919 // 									GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,pMsg);
1955 						case EM_MSGWPSL_QUERY:
1956 							{
1957 								///篡改消息以支持跨服
1958 								msgItem.m_pInfo->usAction=EM_MSGWPSL_QUERY_LINE;
1959 								GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,&msgItem);
1962 						case EM_MSGWPSL_UPDATE:
1963 							{
1964 								///篡改消息以支持跨服
1965 								msgItem.m_pInfo->usAction=EM_MSGWPSL_UPDATE_LINE;
1966 								GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,&msgItem);
2007 					memcpy(&idUser,pMsg+nMsgSize-4,4);///提取extra数据,里面保存的是源用户的id
2008 					CPlayer* pPlayer = UserList()->GetPlayer(idUser);
2009 					switch(msgptr->ucAction)///真痛苦，跨服消息处理真麻烦，以后设计服务器架构一定要多线的
2010 					{
2011 						case _FRIEND_ADDSUCCESSREPLY:
2027 							break;
2028 						case _FRIEND_ADDSUCCESS_PASSIVE:
2029 						case _FRIEND_ADDSUCCESS:///跨服中断消息
2030 							{
2031 								///添加别人添加好友成功，告诉你一声

H:\work\source\御剑江湖\[src.cool]御剑江湖\yjjh\Toolz\MsgServer_gateway\MSGSERVER\WORLDKERNEL\WorldKernel.cpp 106 KB CPP 文件 2011/6/17 14:44:32 2018/8/16 0:57:46 2018/8/16 0:57:46 8
1885 								case ITEMACT_GETINFO:
1886 								{
1887 									///篡改消息以支持跨服
1888 									msgItem.m_pInfo->usAction=ITEMACT_QUERYITEMINFO;
1889 									GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,&msgItem);
1892 								case ITEMACT_GETEUDEMONINFO:
1893 								{
1894 									///篡改消息以支持跨服
1895 									msgItem.m_pInfo->usAction=ITEMACT_QUERYEUDEMONINFO;
1896 									GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,&msgItem);
1906 // 								case ITEMACT_GETINFO:
1907 // 								{
1908 // 									///篡改消息以支持跨服
1909 // 									pMsg->m_pInfo->usAction=ITEMACT_QUERYITEMINFO;
1910 // 									GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,pMsg);
1913 // 								case ITEMACT_GETEUDEMONINFO:
1914 // 								{
1915 // 									///篡改消息以支持跨服
1916 // 									pMsg->m_pInfo->usAction=ITEMACT_QUERYEUDEMONINFO;
1917 // 									GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,pMsg);
1953 						case EM_MSGWPSL_QUERY:
1954 							{
1955 								///篡改消息以支持跨服
1956 								msgItem.m_pInfo->usAction=EM_MSGWPSL_QUERY_LINE;
1957 								GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,&msgItem);
1960 						case EM_MSGWPSL_UPDATE:
1961 							{
1962 								///篡改消息以支持跨服
1963 								msgItem.m_pInfo->usAction=EM_MSGWPSL_UPDATE_LINE;
1964 								GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,&msgItem);
2005 					memcpy(&idUser,pMsg+nMsgSize-4,4);///提取extra数据,里面保存的是源用户的id
2006 					CPlayer* pPlayer = UserList()->GetPlayer(idUser);
2007 					switch(msgptr->ucAction)///真痛苦，跨服消息处理真麻烦，以后设计服务器架构一定要多线的
2008 					{
2009 						case _FRIEND_ADDSUCCESSREPLY:
2025 							break;
2026 						case _FRIEND_ADDSUCCESS_PASSIVE:
2027 						case _FRIEND_ADDSUCCESS:///跨服中断消息
2028 							{
2029 								///添加别人添加好友成功，告诉你一声

H:\work\source\御剑江湖\[src.cool]御剑江湖\yjjh\Toolz\MsgServer_log\MSGSERVER\WORLDKERNEL\WorldKernel.cpp 108 KB CPP 文件 2011/7/5 17:29:06 2018/8/16 0:57:48 2018/8/16 0:57:48 8
1887 								case ITEMACT_GETINFO:
1888 								{
1889 									///篡改消息以支持跨服
1890 									msgItem.m_pInfo->usAction=ITEMACT_QUERYITEMINFO;
1891 									GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,&msgItem);
1894 								case ITEMACT_GETEUDEMONINFO:
1895 								{
1896 									///篡改消息以支持跨服
1897 									msgItem.m_pInfo->usAction=ITEMACT_QUERYEUDEMONINFO;
1898 									GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,&msgItem);
1908 // 								case ITEMACT_GETINFO:
1909 // 								{
1910 // 									///篡改消息以支持跨服
1911 // 									pMsg->m_pInfo->usAction=ITEMACT_QUERYITEMINFO;
1912 // 									GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,pMsg);
1915 // 								case ITEMACT_GETEUDEMONINFO:
1916 // 								{
1917 // 									///篡改消息以支持跨服
1918 // 									pMsg->m_pInfo->usAction=ITEMACT_QUERYEUDEMONINFO;
1919 // 									GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,pMsg);
1955 						case EM_MSGWPSL_QUERY:
1956 							{
1957 								///篡改消息以支持跨服
1958 								msgItem.m_pInfo->usAction=EM_MSGWPSL_QUERY_LINE;
1959 								GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,&msgItem);
1962 						case EM_MSGWPSL_UPDATE:
1963 							{
1964 								///篡改消息以支持跨服
1965 								msgItem.m_pInfo->usAction=EM_MSGWPSL_UPDATE_LINE;
1966 								GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,&msgItem);
2007 					memcpy(&idUser,pMsg+nMsgSize-4,4);///提取extra数据,里面保存的是源用户的id
2008 					CPlayer* pPlayer = UserList()->GetPlayer(idUser);
2009 					switch(msgptr->ucAction)///真痛苦，跨服消息处理真麻烦，以后设计服务器架构一定要多线的
2010 					{
2011 						case _FRIEND_ADDSUCCESSREPLY:
2027 							break;
2028 						case _FRIEND_ADDSUCCESS_PASSIVE:
2029 						case _FRIEND_ADDSUCCESS:///跨服中断消息
2030 							{
2031 								///添加别人添加好友成功，告诉你一声

H:\work\source\御剑江湖\[src.cool]御剑江湖\yjjh\Toolz\MsgServer_new\MSGSERVER\WORLDKERNEL\WorldKernel.cpp 108 KB CPP 文件 2011/8/6 12:40:54 2018/8/16 0:57:49 2018/8/16 0:57:49 8
1887 								case ITEMACT_GETINFO:
1888 								{
1889 									///篡改消息以支持跨服
1890 									msgItem.m_pInfo->usAction=ITEMACT_QUERYITEMINFO;
1891 									GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,&msgItem);
1894 								case ITEMACT_GETEUDEMONINFO:
1895 								{
1896 									///篡改消息以支持跨服
1897 									msgItem.m_pInfo->usAction=ITEMACT_QUERYEUDEMONINFO;
1898 									GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,&msgItem);
1908 // 								case ITEMACT_GETINFO:
1909 // 								{
1910 // 									///篡改消息以支持跨服
1911 // 									pMsg->m_pInfo->usAction=ITEMACT_QUERYITEMINFO;
1912 // 									GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,pMsg);
1915 // 								case ITEMACT_GETEUDEMONINFO:
1916 // 								{
1917 // 									///篡改消息以支持跨服
1918 // 									pMsg->m_pInfo->usAction=ITEMACT_QUERYEUDEMONINFO;
1919 // 									GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,pMsg);
1955 						case EM_MSGWPSL_QUERY:
1956 							{
1957 								///篡改消息以支持跨服
1958 								msgItem.m_pInfo->usAction=EM_MSGWPSL_QUERY_LINE;
1959 								GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,&msgItem);
1962 						case EM_MSGWPSL_UPDATE:
1963 							{
1964 								///篡改消息以支持跨服
1965 								msgItem.m_pInfo->usAction=EM_MSGWPSL_UPDATE_LINE;
1966 								GameWorld()->TransmitMapGroupMsg(pPlayer->idProcess,&msgItem);
2007 					memcpy(&idUser,pMsg+nMsgSize-4,4);///提取extra数据,里面保存的是源用户的id
2008 					CPlayer* pPlayer = UserList()->GetPlayer(idUser);
2009 					switch(msgptr->ucAction)///真痛苦，跨服消息处理真麻烦，以后设计服务器架构一定要多线的
2010 					{
2011 						case _FRIEND_ADDSUCCESSREPLY:
2027 							break;
2028 						case _FRIEND_ADDSUCCESS_PASSIVE:
2029 						case _FRIEND_ADDSUCCESS:///跨服中断消息
2030 							{
2031 								///添加别人添加好友成功，告诉你一声

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-client\GameCommandSystem.cpp 78 KB CPP 文件 2013/3/9 12:56:24 2018/9/13 20:28:00 2018/9/13 20:28:00 1
1139 	{ GCD_ASK_JOIN_FUBEN_WITH_TEAM, "ASK_JOIN_FUBEN_WITH_TEAM" },
1140 	{ GCD_ASK_EXIT_ROOM, "ASK_EXIT_ROOM" },
1142 	//跨服副本报名搜索
1143 	{ GCD_UPDATE_FUBEN_SEARCH_STATE,"UPDATE_FUBEN_SEARCH_STATE" },
1145 	//军团信息更新

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-client\GameStateChangeServer.cpp 6 KB CPP 文件 2013/3/9 12:57:04 2018/9/13 20:28:03 2018/9/13 20:28:03 1
217 			::GetPrivateProfileString( "Debug", "Login.WorldID", "", szReadTemp, MAX_PATH, DEBUG_FILE_NAME );
218 			static ut_id s_nWorldID = atoi(szReadTemp); 
219 			GAME_DATA_PLAYER_PTR->SetWorldID(s_nWorldID); // 支持跨服自架测试
220 																			
221 		}

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-client\GameStateRun.cpp 100 KB CPP 文件 2013/3/9 12:57:06 2018/9/13 20:28:03 2018/9/13 20:28:03 2
663 	MsgFCSYSData.SetType(HYCSYS_GRATULATION_ALL_DATA);
664 	NET_MANAGER_PTR->SendMessage(&MsgFCSYSData);
666 	//跨服关卡的处理 
668 	//清除小地图上的军团信息
669 	GAME_DATA_RELATION_PTR->GetCorps()->ClearCorpsInfo();
681 	//请求军团数据
682 	GAME_DATA_QUEST_PTR->AskRoomBattleGroupData();
683 	/////跨服关卡的处理	
685 	//请求宠物属性点培养冷却时间
686 	GAME_DATA_PET_PTR->AskAttrUpCDTime();

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-client\UIMap.cpp 24 KB CPP 文件 2013/3/9 12:57:43 2018/9/13 20:28:04 2018/9/13 20:28:04 1
483 		case MAP_POINT_TRANSER_NPC:		szChildWinType = MAP_POINT_TYPE_TRANSER_NPC;	break;
484 		case MAP_POINT_MONSTER:			szChildWinType = MAP_POINT_TYPE_MONSTER;		break;
486 		// 跨服6v6的旗子
487 		case MAP_POINT_OneLevelFlag:			szChildWinType = MAP_POINT_TYPE_ONELEVELFLAG; break;
488 		case MAP_POINT_TwoLevelFlag:			szChildWinType = MAP_POINT_TYPE_TWOLEVELFLAG; break;

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-client\UIPartyMessageBox.cpp 33 KB CPP 文件 2013/3/9 12:57:44 2018/9/13 20:28:04 2018/9/13 20:28:04 1
404 		}
405 		break;
407 	case MGUILD_BATTLE_TYPE: // 跨服帮会战
408 		{
409 			CXMPVPBattle msg;

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-dbshare\MKLogicManager.cpp 133 KB CPP 文件 2013/3/9 12:58:37 2018/9/13 20:28:05 2018/9/13 20:28:05 2
3741 }
3743 /************************************************************************/
3744 /* 跨服战积分相关                                                       */
3745 /************************************************************************/
3746 /*
4439 }
4441 /************************************************************************/
4442 /* 跨服联赛结果
4443 /************************************************************************/
4444 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-glserver\GL.cpp 48 KB CPP 文件 2013/3/9 12:58:45 2018/9/13 20:28:05 2018/9/13 20:28:05 7
415 		ret = g_GlobalValMKPool.Init(MAX_KHAN_DB_GLOBAL_SIZE, WorldInfo.m_GlobalKey, SMPT_WORLD, SLOW_LOG_GL_SHAREMEM, bCreateShareMem);
416 		KCheckEx(ret, "GlobalKey共享内存初始化错误,请先启动DBShare ");
417 		// 跨服联赛  [11/24/2012 sunlei]
418 		ret = g_MPVPLeaguePointMKPool.Init(MAX_MPVP_POINT_POOL_NUM, WorldInfo.m_MPVPLeaguePointKey, SMPT_WORLD, SLOW_LOG_GL_SHAREMEM, bCreateShareMem );
419 		KCheckEx(ret, "MPVPLeaguePoint共享内存初始化错误,请先启动DBShare ");
446 	KCheck(g_pGuildBattleManager);
447 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildBattleManager...OK");
449 	//跨服帮战的管理器
450 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new MultiGuildBattleManager ... ");
451 	g_pMGuildBattleManager = new MGuildBattleManager;
488 	KCheck(g_pPVP6v6BattleManager);
489 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new PVP6v6BattleManager...OK");
491 	//跨服联赛管理器
492 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new CPVPLeagueMatchManager ... ");
493 	g_pPVPLeagueMatchManager = new CPVPLeagueMatchManager();
535 	KCheck(g_pGuildCenter);
536 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildManager...OK");
538 	//跨服战积分管理器
539 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMPVPPointManager ... ");
540 	g_pMPVPPointManager = new MPVPPointManager;
721 	KCheck(g_pSystemParamsManager);
722 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new g_pSystemParamsManager...OK");
725 	// 跨服管理器
726 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMutiGroupMapServerManager ... ");
727 	g_pMutiGroupMapServerManager = new MutiGroupMapServerManager;
994 	KCheck(ret);
995 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager->Init()...OK");
998 	//跨服管理器
999 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[Init] g_pMutiGroupMapServerManager->Init()...OK");
1000 	ret = g_pMutiGroupMapServerManager->Init();
1197 	KSafeDelete(g_pSystemParamsManager);
1198 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager delete...OK");
1200 	//跨服管理器
1201 	KSafeDelete(g_pMutiGroupMapServerManager);
1202 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pMutiGroupMapServerManager delete...OK");

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 15 KB CPP 文件 2013/3/9 12:58:55 2018/9/13 20:28:05 2018/9/13 20:28:05 1
227 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
228 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
230 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
231 		if (pFindPlayer == NULL)
232 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-glserver\MGuildBattleManager.cpp 15 KB CPP 文件 2013/3/9 12:58:58 2018/9/13 20:28:05 2018/9/13 20:28:05 8
94 	// 当前赛季进度
95 	int32 nSeasonWeek = (GET_TIME().GetWeekNumFrom2011() - g_Config.m_ConfigInfo.m_MPVPGuildBeginWeek) % g_Config.m_ConfigInfo.m_MPVPPointPeriodWeeks;
97 	// 取得跨服服务器
98 	int32 nServerNum = 0;
99 	ut_id serverIDs[SERVER_CAPACITY] = {-1};
145 	//	if (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / nServerNum <= 0)
146 	//		return serverIDs[0];
148 	//	// 2011-07-26 by rj 改进原来的等分算法，在所连跨服服务器数量等于 2 时用用 4/6 算法来解决高分帮会人数过多的问题
149 	//	int32 iSeg = iIndex / (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / (nServerNum <= 2 ? 2.5f : nServerNum) );
150 	//	if (iSeg >= nServerNum)
166 	if (uPrevSignupTime)
167 	{
168 		// 超时保护（防止报名完成后跨服服务器宕机导致 GL 无法清理报名）
169 		if (GET_TIME().GetCTime() - uPrevSignupTime > 90*60)
170 		{
258 	if(!pGuild || pGuild->GetGuildID() == INVALID_KHAN_ID)
259 		return FALSE;
261 	// 转发跨服战场进入通知到报名玩家所在 Map
262 	GXMPVPBattle msg;
263 	msg.SetBattleType(MPVP_GUILD_BATTLE_TYPE);
416 					aSignupPlayers[0].GuildPoint = pPoint->m_nCurrentPoint;
417 				}
419 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
420 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
421 				msg.SetSignupType(pKMessage->GetSignupType());
472 				if (NULL != pServePlayer_Target)
473 				{
474 					// 转发跨服战场状态到报名玩家所在 Map
475 					GXMPVPBattle msg;
476 					msg.SetBattleType(pKMessage->GetBattleType());
503 				return MP_CONTINUE;
504 			}
506 			// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
507 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pMatch->nServerID);
508 			if (pServePlayer_Target)
524 			if (NULL != pServePlayer_Target)
525 			{
526 				// 转发跨服战场进入响应到报名玩家所在 Map
527 				GXMPVPBattle msg;
528 				msg.SetBattleType(pKMessage->GetBattleType());

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-glserver\MPVPGuildPoint.cpp 8 KB CPP 文件 2013/3/9 12:58:58 2018/9/13 20:28:05 2018/9/13 20:28:05 3
1 /************************************************************************/
2 /* 帮会跨服战积分信息接口的具体实现                                     */
3 /************************************************************************/
5 #include "stdafx.h"
195 /*
196 =======================================================================================================================
197 处理不同跨服战各自的额外参数填充
198 =======================================================================================================================
199 */
223 /*
224 =======================================================================================================================
225 加载跨服帮战每周的场次信息
226 =======================================================================================================================
227 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-glserver\MPVPPointArithmetic.cpp 2 KB CPP 文件 2013/3/9 12:58:58 2018/9/13 20:28:05 2018/9/13 20:28:05 3
1 /************************************************************************/
2 /* 跨服战积分算法器,负责各种跨服战积分的计算逻辑实现                    */
3 /************************************************************************/
5 #include "stdafx.h"
16 /*
17 ===============================================================================================================
18 根据实力来计算跨服帮会的加权分
19 帮会实力-(错过的场次*放弃损失的分数)
20 ===============================================================================================================

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-glserver\MPVPPointInfo.cpp 14 KB CPP 文件 2013/3/9 12:58:58 2018/9/13 20:28:05 2018/9/13 20:28:05 2
1 /************************************************************************/
2 /* 跨服战积分信息接口的具体实现                                         */
3 /************************************************************************/
5 #include "stdafx.h"
72 /*
73 =======================================================================================================================
74 获取跨服积分的数据信息
75 =======================================================================================================================
76 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-glserver\MPVPPointManager.cpp 11 KB CPP 文件 2013/3/9 12:58:59 2018/9/13 20:28:05 2018/9/13 20:28:05 5
1 /************************************************************************/
2 /* 跨服战积分管理器的实现                                               */
3 /************************************************************************/
5 #include "stdafx.h"
98 /*
99 ===============================================================================================================
100 注册跨服积分的实现
101 ===============================================================================================================
102 */
220 /*
221 ===============================================================================================================
222 获取指定类型跨服战全部积分信息
223 ===============================================================================================================
224 */
243 /*
244 ===============================================================================================================
245 获取指定跨服战当前的赛季开始周
246 ===============================================================================================================
247 */
266 /*
267 ===============================================================================================================
268 获取指定跨服战当前周
269 ===============================================================================================================
270 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-glserver\MPVPToplist.cpp 8 KB CPP 文件 2013/3/9 12:58:59 2018/9/13 20:28:05 2018/9/13 20:28:05 2
1 /************************************************************************/
2 /* 跨服帮会战排行榜的具体实现		                                    */
3 /************************************************************************/
5 #include "stdafx.h"
25 /*
26 =======================================================================================================================
27 积分数据加载,从跨服积分管理器中加载需要的信息
28 =======================================================================================================================
29 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-glserver\MutiGroupMapServerManager.cpp 18 KB CPP 文件 2013/3/9 12:59:01 2018/9/13 20:28:05 2018/9/13 20:28:05 1
4 Author:Michael		
5 Created:Michael
6 Description :跨服MapServer管理器实现
7 Revision :  2011/06/17 Michael create
9 =============================================================================*/

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-glserver\PVPLeagueMatchManager.cpp 31 KB CPP 文件 2013/3/9 12:59:04 2018/9/13 20:28:05 2018/9/13 20:28:05 3
128 			stMsg.GetLeagueMatch()->m_Begin.m_nTime = stState.m_nCountDownTime;
129 			stMsg.GetLeagueMatch()->m_Begin.m_nScriptID = stState.m_nFlag;
130 			// 取得跨服服务器
131 			int32 nServerNum = 0;
132 			ut_id serverIDs[SERVER_CAPACITY] = {-1};
155 			stMsg.GetLeagueMatch()->m_nType = STRU_GX_LEAGUEMATCH::GX_LEAGUEMATCH_TYPE_MATCHEEND;
156 		
157 			// 取得跨服服务器
158 			int32 nServerNum = 0;
159 			ut_id serverIDs[SERVER_CAPACITY] = {-1};
194 }
196 void SetGuildLeagueMatchResult(Guild *pGuild,uint32 nWinTimes)
197 {// 记录家族在跨服联赛中的结果
198 	if(!pGuild || nWinTimes==0)
199 		return;

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-glserver\ServerConnectorManager_GL.cpp 12 KB CPP 文件 2013/3/9 12:59:07 2018/9/13 20:28:05 2018/9/13 20:28:05 3
539 			_NET_TRY
540 			{
541 				// 跨服帮战管理器心跳
542 				ret = g_pMGuildBattleManager->HeartBeat(uTime);
543 				KCheck(ret);
549 			_NET_TRY
550 			{
551 				//处理跨服战积分管理器相关的心跳
552 				ret = g_pMPVPPointManager->HeartBeat(uTime);		
553 				KCheck(ret);
599 			_NET_TRY
600 			{
601 				//处理跨服联赛战管理器相关的心跳
602 				ret = g_pPVPLeagueMatchManager->HeartBeat(uTime);	
603 				KCheck(ret);

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-glserver\TopListManager.cpp 20 KB CPP 文件 2013/3/9 12:59:14 2018/9/13 20:28:05 2018/9/13 20:28:05 1
153 	Register(HONOR_CHARIOT_TOP_LIST_BK,			new TopList,					"Chariot_Honor_bk" );
154 	// add by dragon 战车排行榜 }
156 	// 跨服帮会战排行榜
157 	Register(MPVP_GUILD_CURRENT,			new CurrentMPVPGuildTopList,		"MPVP_Guild_Current" );
158 	Register(MPVP_GUILD_CURRENT_BK,			new TopList,				"MPVP_Guild_Current_bk" );

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-glserver\XGBattleDispatch.cpp 96 KB CPP 文件 2013/3/9 12:59:17 2018/9/13 20:28:05 2018/9/13 20:28:05 25
2507 }
2509 /***********************************************************
2510 desc:	跨服战场 XG 服务器消息处理
2511 auth:	rj
2512 date:	2011-2-14
2520 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2521 	{
2522 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2523 		static IntegerHashMap mapMPVP2v2SignupRecord;
2524 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2526 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2527 		}
2529 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2530 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2531 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2548 		case MPVP_BATTLE_RETSTATE:
2549 			{
2550 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名。值是当前报名的时间。
2551 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2552 				{
2582 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2583 				KCheck(pServePlayer_Target);
2585 				// 转发跨服战场进入通知到报名玩家所在 Map
2586 				GXMPVPBattle msg;
2587 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2613 				if (uPrevSignupTime)
2614 				{
2615 					// 6 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2616 					if (GET_TIME().GetCTime() - uPrevSignupTime > 360)
2617 					{
2719 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2720 				}
2722 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2723 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2724 				msg.SetSignupType(pKMessage->GetSignupType());
2734 				if (NULL != pServePlayer_Target)
2735 				{
2736 					// 转发跨服战场状态到报名玩家所在 Map
2737 					GXMPVPBattle msg;
2738 					msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2752 				if (iServerID)
2753 				{
2754 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2755 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2756 					if (NULL != pServePlayer_Target)
2777 				if (NULL != pServePlayer_Target)
2778 				{
2779 					// 转发跨服战场进入响应到报名玩家所在 Map
2780 					GXMPVPBattle msg;
2781 					msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2793 	else if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_6V6)
2794 	{
2795 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2796 		static IntegerHashMap mapMPVP6v6SignupRecord;
2797 		if (mapMPVP6v6SignupRecord.GetMaxCount() == 0)
2799 			mapMPVP6v6SignupRecord.InitTable(MAX_WORLD_PLAYER);
2800 		}
2802 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2803 		static IntegerHashMap mapMPVP6v6EnterBattleRecord;
2804 		if (mapMPVP6v6EnterBattleRecord.GetMaxCount() == 0)
2821 		case MPVP_BATTLE_RETSTATE:
2822 			{
2823 				// 记录这次跨服 6v6 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 6v6 的报名。值是当前报名的时间。
2824 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2825 				{
2856 				if (NULL != pServePlayer_Target)
2857 				{
2858 					// 转发跨服战场进入通知到报名玩家所在 Map
2859 					GXMPVPBattle msg;
2860 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
2890 				if (uPrevSignupTime)
2891 				{
2892 					// 11 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2893 					if (GET_TIME().GetCTime() - uPrevSignupTime > 660)
2894 					{
2996 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2997 				}
2999 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
3000 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
3001 				msg.SetSignupType(pKMessage->GetSignupType());
3011 				if (NULL != pServePlayer_Target)
3012 				{
3013 					// 转发跨服战场状态到报名玩家所在 Map
3014 					GXMPVPBattle msg;
3015 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
3029 				if (iServerID)
3030 				{
3031 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
3032 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
3033 					if (NULL != pServePlayer_Target)
3054 				if (NULL != pServePlayer_Target)
3055 				{
3056 					// 转发跨服战场进入响应到报名玩家所在 Map
3057 					GXMPVPBattle msg;
3058 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\Bus.cpp 66 KB CPP 文件 2013/3/9 12:59:40 2018/9/13 20:28:06 2018/9/13 20:28:06 3
805 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
806 		= CaculateMonsterExpRuler::eCALC_TYPE_TEAM;
808 	//如果是跨服副本
809 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
810 	{
810 	{
811 		nValidMemberCount = GetValidOwnerListGroup(MAX_GROUP_MEMBER,apValidMember);
812 		eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
813 	}
814 	else
1091 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1093 	if(Get_OccupantTeamID() != INVALID_KHAN_ID) iFadeoutType = Obj_ItemRuler::FADE_OUT_TEAM;
1095 	//是否是跨服
1096 	BOOL BGroup = FALSE;
1097 	Map* pMap = GetMap();

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\ChangeMapDelegater.cpp 45 KB CPP 文件 2013/3/9 13:00:04 2018/9/13 20:28:06 2018/9/13 20:28:06 2
1575 		pPlayer->ClearMutexState(MS_Fuben);
1576 	}
1578 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1579 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1580 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\CXBattleDispatch.cpp 16 KB CPP 文件 2013/3/9 12:59:43 2018/9/13 20:28:06 2018/9/13 20:28:06 2
134 }
136 /***********************************************************
137 desc:	跨服战场客户端请请求处理
138 auth:	rj
139 date:	2011-2-14
158 		case MPVP_BATTLE_SIGNUP:
159 			{
160 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
161 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
162 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\CXItemDispatch.cpp 69 KB CPP 文件 2013/3/9 12:59:52 2018/9/13 20:28:06 2018/9/13 20:28:06 1
2233 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
2234 	{
2235 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
2236 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2237 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\GMCommand.cpp 221 KB CPP 文件 2013/3/9 13:00:16 2018/9/13 20:28:06 2018/9/13 20:28:06 1
546 	REGISTER_HANDLER(addchariothonour);	// \gm addchariothonour =100	增加战车荣誉
547 	REGISTER_HANDLER(unlockhorse);		// \gm unlockhorse =objid =horseindex  强制解锁骑乘
548 	REGISTER_HANDLER(addguildwin);		// \gm addguildwin =num 增加跨服帮战胜利次数
550 	REGISTER_HANDLER(getviewgroup);		// \gm getviewgroup	//获取当前的可视组
551 	REGISTER_HANDLER(setviewgroup);		// \gm setviewgroup	=groupnum //设置当前的可视组

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\GMRoomBattleDispatch.cpp 5 KB CPP 文件 2013/3/9 13:00:16 2018/9/13 20:28:06 2018/9/13 20:28:06 1
53 	else
54 	{
55 		ut_id_map nBackSceneID = g_pFubenManager->GetServerBakSceneID();  //跨服处的副本入口场景
57 		ut_id_map nTarSceneId = pPacket->GetRoomBattle()->u_RoomBattleData.m_SceneID;
58 		

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\GuildCacheManager.cpp 19 KB CPP 文件 2013/3/9 13:00:30 2018/9/13 20:28:06 2018/9/13 20:28:06 1
179 	m_aFreeParam[GD_GUILD_MBATTLE_JOINCOUNT] = pGuildInfo->m_nMBattleJoinCount;
180 	m_aFreeParam[GD_GUILD_MBATTLE_FORWARD] = pGuildInfo->m_nMBattleForward;
181 	// 跨服联赛数据 [11/9/2012 sunlei]
182 	m_aFreeParam[GD_GUILD_MLEAGUE_RESULT_REWARD] = pGuildInfo->m_nLMLeagueReward;
183 	m_aFreeParam[GD_GUILD_MLEAGUE_RESULT_WIN] = pGuildInfo->m_nLMLeagueWinTimes;

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\GXBattleDispatch.cpp 63 KB CPP 文件 2013/3/9 13:00:16 2018/9/13 20:28:06 2018/9/13 20:28:06 6
1483 }
1485 /***********************************************************
1486 desc:	跨服战场 GX 服务器消息处理
1487 auth:	rj
1488 date:	2011-2-14
1505 			case MPVP_BATTLE_SIGNUP:
1506 				{
1507 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1509 					IMPVPBattle *pMPVPBattle = g_pMPVPBattleManager->GetMPVPBattleByType((MPVP_BATTLE_TYPE)pKMessage->GetBattleType());
1510 					//KCheck(pMPVPBattle);
1573 						return MP_CONTINUE;
1574 					}
1576 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1577 					pMPVPBattle->TellPlayerEnterMap(pKMessage, pConnector);
1578 				}
1619 			case MPVP_BATTLE_RETSTATE:
1620 				{
1621 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1622 					pMap->GetLuaSystem()->RunScriptFunction
1623 						(
1635 			case MPVP_BATTLE_RES_ENTERSCENE:
1636 				{
1637 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1638 					pMap->GetLuaSystem()->RunScriptFunction
1639 						(
1666 }
1668 /***********************************************************
1669 desc:	跨服战场场景通知消息处理
1670 auth:	rj
1671 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 28 KB CPP 文件 2013/3/9 13:00:18 2018/9/13 20:28:06 2018/9/13 20:28:06 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\GXMapDispatch.cpp 21 KB CPP 文件 2013/3/9 13:00:23 2018/9/13 20:28:06 2018/9/13 20:28:06 2
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{
621 		return MP_CONTINUE;
622 	}
624 	//以下是跨服的副本的处理
626 	//给报名服务器返回创建成功消息			
627 	MGMRoomBattle* Msg = CREATE_MESSAGE_OBJ(MGMRoomBattle,MESSAGE_MGM_ROOMBATTLE);

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\KLDaemonThread.cpp 9 KB CPP 文件 2013/3/9 13:00:43 2018/9/13 20:28:07 2018/9/13 20:28:07 3
160 		}
162 		m_OPSteps = 7;
164 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
165 		_NET_TRY
166 		{
165 		_NET_TRY
166 		{
167 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
168 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
169 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\LuaFunction_Chat.cpp 63 KB CPP 文件 2013/3/9 13:00:46 2018/9/13 20:28:07 2018/9/13 20:28:07 1
1086 		pMsg->SetCycleCount(nParam);
1087 	g_pServerConnectorMgr->SendMessage_SingleMode(pMsg);
1090 	//世界频道支持跨服
1091 	for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
1092 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\LuaFunction_Map.cpp 237 KB CPP 文件 2013/3/9 13:00:49 2018/9/13 20:28:07 2018/9/13 20:28:07 16
264 	SelectMap.m_MapDataType = 0;
265 	SelectMap.m_CopyData = * pFD;
266 	SelectMap.m_CopyData.m_bRoom = false;//非跨服房间类型
268 	if (nRoomType == 1)
269 	{
1718 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1720 	KCheck(szName);
1722 	// 2010-11-2 对发送脚本邮件进行跨服支持
1723 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1725 	if (INVALID_KHAN_ID == selfId)
6043 	return 0;
6044 }
6046 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
6047 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
6048 {
6069 	LUA_RETURNERROR_1;
6070 }
6072 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
6073 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
6074 {
6116 	return 0;
6117 }
6119 // 跨服 6v6 战场场景注册函数
6120 int32 LuaFunction_MPVP6v6RegisterMap(Lua_State *L)
6121 {
6142 	LUA_RETURNERROR_1;
6143 }
6145 // 跨服 6v6 战场场景更新战场 UI 面板
6146 int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
6147 {
6189 	return 0;
6190 }
6192 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
6193 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
6194 //{
6216 //}
6217 //
6218 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
6219 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
6220 //{
6286 //}
6287 //
6288 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
6289 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
6290 //{
6356 //}
6357 //
6358 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
6359 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
6360 //{
6390 //}
6391 //
6392 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
6393 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
6394 //{
6437 //}
6438 //
6439 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
6440 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
6441 //{
6489 //}
6490 //
6491 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
6492 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
6493 //{
6534 //}
6535 //
6536 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
6537 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
6538 //{
7380 	return 0;
7381 }
7383 // 跨服战场场景注册函数
7384 int32 LuaFunction_MPVPRegisterMap(Lua_State *L)
7385 {
7475 	if(pMap)
7476 	{
7477 		// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
7478 		int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
7479 			(

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\LuaSystem_Function.cpp 158 KB CPP 文件 2013/3/9 13:00:56 2018/9/13 20:28:07 2018/9/13 20:28:07 13
1199 	m_LuaVM.RegisterFunction("AddBattleHonour", (void *) (LuaFunction_AddBattleHonour));							// 增加战功
1200 	m_LuaVM.RegisterFunction("SubBattleHonour", (void *) (LuaFunction_SubBattleHonour));							// 减少战功
1201 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));					// 跨服 2v2 战场注册场景 
1202 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));			// 跨服 2v2 战场名称显示
1203 	m_LuaVM.RegisterFunction("MPVP6v6RegisterScene", (void *) (LuaFunction_MPVP6v6RegisterMap));					// 跨服 6v6 战场注册场景
1204 	m_LuaVM.RegisterFunction("SetMPVP6v6BattleDisable", (void *) (LuaFunction_SetMPVP6v6BattleDisable));			// 跨服 6v6 战场名称显示
1205 	m_LuaVM.RegisterFunction("MPVPRegisterMap", (void *) (LuaFunction_MPVPRegisterMap));							// 跨服战场注册场景
1206 	m_LuaVM.RegisterFunction("MPVPLeagueRegisterMap",(void *)(LuaFunction_MPVPLeagueRegisterMap));					// 跨服联赛战
1207 	m_LuaVM.RegisterFunction("MPVPLeagueSetEnterSceneCutDown",(void *)(LuaFunction_MPVPLeagueSetEnterSceneCutDown));					// 跨服联赛战
1208 	m_LuaVM.RegisterFunction("MPVPLeagueSetMatchResult",(void *)(LuaFunction_MPVPLeagueSetMatchResult));					// 跨服联赛战，战斗结果
1209 	
1210 	m_LuaVM.RegisterFunction("CountryIsFortuneTimeEx", (void *) (LuaFunction_CountryIsFortuneTimeEx));				// 获取特定国家的国运是否进行
1327 	m_LuaVM.RegisterFunction("IsLeague", (void*)(LuaFunction_IsLeague));											// 判断两国是否是弱国联盟
1328 	m_LuaVM.RegisterFunction("CountryLeagueZhaoji", (void*)(LuaFunction_CountryLeagueZhaoji));						// 发送联盟召集令
1329 	m_LuaVM.RegisterFunction("AskEnterMGuildBattleScene",(void*)(LuaFunction_AskEnterMGuildBattleScene)); 			// 请求进入跨服帮会战场
1330 	m_LuaVM.RegisterFunction("MGuildBattleSignup",(void*)(LuaFunction_MGuildBattleSignup)); 						// 跨服帮会战报名
1331 	m_LuaVM.RegisterFunction("MGuildBattleResult",(void*)(LuaFunction_MGuildBattleResult)); 						// 跨服帮会战结果
1332 	m_LuaVM.RegisterFunction("MGuildBattleSeasonWeek",(void*)(LuaFunction_MGuildBattleSeasonWeek)); 				// 跨服帮会战赛季当前周数
1333 	m_LuaVM.RegisterFunction("GetMGuildNumOfBattleCurSeason", (void*)(LuaFunction_GetMGuildNumOfBattleCurSeason));	// 获取跨服帮战当前赛季的场数
1334 	m_LuaVM.RegisterFunction("SetEquipPokerData",(void*)(LuaFunction_SetEquipPokerData));							// 设置装备扑克牌属性
1335 	m_LuaVM.RegisterFunction("SetEquipPokerCount",(void*)(LuaFunction_SetEquipPokerCount));							// 设置装备扑克牌个数

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\MapCore.cpp 39 KB CPP 文件 2013/3/9 13:01:00 2018/9/13 20:28:07 2018/9/13 20:28:07 2
612 			if(	(pSceneData->m_uExtraType & EXTRA_MAPTYPE_FUBENENTRANCE) ||
613 				g_Config.m_ConfigInfo.IsGardenMap(pSceneData->m_MapID) || //家园场景副本入口
614 				pSceneData->m_MapID == g_pFubenManager->GetServerBakSceneID())//  支持跨服副本				
615 			{
616 				//以上场景是副本入口场景 创建副本数据
670 				m_bFirstInit = FALSE;
671 			}
672 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
673 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
674 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\MapManager.cpp 64 KB CPP 文件 2013/3/9 13:01:01 2018/9/13 20:28:07 2018/9/13 20:28:07 3
1743 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1744 		{
1745 			KCheck(FALSE);//跨服服务器上找不到报错
1746 		}
1748 		return INVALID_KHAN_ID;
2026 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2027 	{
2028 		//以下开始通知广播,支持跨服架构
2029 		for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
2030 		{
2058 BOOL FubenManager::BroadcastFubenSceneInfo(void)
2059 {
2060 	//如果不开跨服副本，不广播
2061 	if (g_Config.m_MultiGroupConfig.IsMultMapOpen() == FALSE)
2062 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\MapServer.cpp 36 KB CPP 文件 2013/3/9 13:01:02 2018/9/13 20:28:07 2018/9/13 20:28:07 1
614 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
615 	
616 	// 跨服战场管理器 2010-10-13 by rj
617 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
618 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\MGuildBattle.cpp 28 KB CPP 文件 2013/3/9 13:00:57 2018/9/13 20:28:07 2018/9/13 20:28:07 3
1 /***********************************************************
2 desc:	跨服帮会战场实现
3 auth:	txp
4 date:	2011-6-10
122 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，
123 		// 为这个很少出现的异常进行处理。
124 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，
125 		// 如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
126 		if (FindSignup(pSignupPlayers[i].iWorldID, pSignupPlayers[i].GuildID))
427 		m_MatchList.m_aMatch[m_MatchList.m_nCount].m_bFinished = FALSE;
429 		int32 nLevelFlag=0, nDisLevel = s1.m_nSignupLevel - s2.m_nSignupLevel;
431 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
432 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
433 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\Monster.cpp 91 KB CPP 文件 2013/3/9 13:01:05 2018/9/13 20:28:07 2018/9/13 20:28:07 6
902 		return;
903 	}
905 	//跨服副本
906 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
907 	{
1038 		nExp = (int32) (nBaseExp * fExpParam);
1039 	}
1041 	uint32	auExp[MAX_GROUP_MEMBER];//  for 跨服军团
1042 	int32	_Idx;
1044 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
1053 			if (pMap->m_FubenDataParty.IsRoomType())
1054 			{
1055 				eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
1056 				eGroupType = DamageInfo::GROUP_CORPS;
1057 			}
1802 		return 0;
1803 	}
1805 	//如果是跨服副本
1806 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
1807 	{
2041 	Player *apValidMember[MAX_GROUP_MEMBER];
2042 	uint32 nValidMemberCount = 0;
2044 	// 跨服副本
2045 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
2046 	{
3150 		return 0;
3151 	}
3153 	//场景类型必须为跨服副本
3154 	Map* pMap = GetMap();
3155 	if (NULL == pMap)

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\MPVP2v2Battle.cpp 35 KB CPP 文件 2013/3/9 13:00:58 2018/9/13 20:28:07 2018/9/13 20:28:07 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
249 		{
250 			// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
251 			// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
252 			if (FindSignup(pSignupPlayers[i].uSNID))
253 			{
649 			nLevelFlag = 0;
650 		}
652 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
653 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
654 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\MPVP6v6Battle.cpp 30 KB CPP 文件 2013/3/9 13:00:58 2018/9/13 20:28:07 2018/9/13 20:28:07 3
1 /***********************************************************
2 desc:	跨服 6v6 战场实现
3 auth:	txp
4 date:	2011-3-16
154 	{
155 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
156 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
157 		if (FindSignup(pSignupPlayers[i].uSNID))
158 		{
536 			nLevelFlag = 0;
537 		}
539 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
540 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
541 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/9 13:00:58 2018/9/13 20:28:07 2018/9/13 20:28:07 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
100 	__UNGUARD__ return FALSE;
101 }
103 // 以类型方式获得跨服战场类
104 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
105 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 22 KB CPP 文件 2013/3/9 13:01:24 2018/9/13 20:28:08 2018/9/13 20:28:08 4
38 // 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
39 // 
40 // 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
41 // 		SSHandShake msg;
42 // 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());
284 	if(g_Config.m_MultiGroupConfig.IsSignUpServer())
285 	{
286 		//只要一组服务器连接正常,跨服房间管理器的心跳仍然执行 
287 		if (GetGLServerActiveCount() > 0)
288 		{
650 				{
651 					AddGroupTmp( connID, g_Config.m_MultiGroupConfig.m_GLServerInfo[i].m_WorldID );
653 					//2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，
654 					//当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
655 // 					SSHandShake msg;
726 	if(FALSE == IsGLServerActiveTmp())//处理断线重连
727 	{
728 		//跨服重连机制
729 		if (FALSE == m_ConnectTimer.IsSetTimer())
730 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-mapserver\SignUpMgr.cpp 83 KB CPP 文件 2013/3/9 13:01:26 2018/9/13 20:28:08 2018/9/13 20:28:08 1
4 Author:shangy		
5 Created:shangy    
6 Description :跨服报名管理类
7 Revision :  2011/06/20 shangy create
8 			2011/08/05 Michael Lin Modify

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/9 13:59:20 2018/9/13 20:28:08 2018/9/13 20:28:08 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/9 13:59:20 2018/9/13 20:28:08 2018/9/13 20:28:08 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/9 13:59:21 2018/9/13 20:28:08 2018/9/13 20:28:08 1
199 }
200 	
201 // 2010-10-9 by rj 跨服线程连接方式
202 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
203 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-share\Core\Setting.cpp 101 KB CPP 文件 2013/3/9 13:59:24 2018/9/13 20:28:08 2018/9/13 20:28:08 6
350 /*
351 =======================================================================================================================
352  加载跨服配置信息
353 =======================================================================================================================
354 */
364 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
365 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
367 	// 跨服战场最大场景数量配置 2010-9-23 by rj
368 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
369 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
370 	
371 	m_MultiGroupConfig.m_nMaxMGuildMapCnt = ini.Get_Property_Int("MGuild", "Max_SceneCount");
372 	KCheckEx(m_MultiGroupConfig.m_nMaxMGuildMapCnt>0 && m_MultiGroupConfig.m_nMaxMGuildMapCnt<=MGUILD_MAX_MAPCOUNT, "跨服帮战场景数量要小于512");
374 // 	m_MultiGroupConfig.m_nMGuildBeginWeek = ini.Get_Property_Int("MGuild", "BeginWeek");
375 // 	KCheckEx(m_MultiGroupConfig.m_nMGuildBeginWeek>0 && m_MultiGroupConfig.m_nMGuildBeginWeek<=52, "起始周只能在1-52之间");
389 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
390 		
391 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
393 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "", szMapIpString1[512] = "";
395 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);
462 		}		
463 	}
465 	//跨服关卡报名服务器开关 
466 	m_MultiGroupConfig.m_SignUpServerToggle = ini.Get_Property_Int( "Room", "SignUpServerToggle" );
467 	m_MultiGroupConfig.m_MapFubenToogle = ini.Get_Property_Int( "Room", "MapFubenToogle" );
1123 	m_ConfigInfo.m_nEmpireOfficerMinLevel = ini.Get_Property_Int("Empire","OfficerMinLevel");
1124 	//[Empire] End
1126 	//added for跨服军团  
1127 	for (int32 _nGIndex = 0; _nGIndex < MAX_GROUP_MEMBER; ++_nGIndex)
1128 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-share\DataBase\ArchiveInterface.cpp 406 KB CPP 文件 2013/3/9 13:59:26 2018/9/13 20:28:08 2018/9/13 20:28:08 2
10115 }
10117 /************************************************************************/
10118 /* 跨服战积分相关                                                       */
10119 /************************************************************************/
10121 /*
13476 }
13478 /************************************************************************/
13479 /* 跨服联赛结果
13480 /************************************************************************/
13482 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-share\DataBase\SqlStatement.cpp 27 KB CPP 文件 2013/3/9 13:59:28 2018/9/13 20:28:08 2018/9/13 20:28:08 2
248 char	*g_LoadLostItemInfo = "select aid,playerguid,srcplayerguid,srcplayername,guid,world,server,itemclass,creator,dataproperty,data,termendtime,islock,unlocktime,gmoptime from %s where aid>%u order by aid asc" ;
249 char	*g_DelLostItemInfo = "delete from %s where aid=%u";
251 // 跨服战积分相关处理
252 char	*LoadMPVPPointInfo = "select unitid, unitname, world, currentpoint, totalpoint, currentwintimes, currentjointimes, totalwintimes, totaljointimes, mpvptypename, currentweek, startweek, params from %s where valid = 1";
253 char	*SaveMPVPPointInfo = "call proc_save_mpvppoint(%d,\'%s\', %d, %d, %d, %d, %d, %d, %d, \'%s\', %d, %d, %d, 1)";
306 char	*DelMaskInfo	= "update %s set valid=0 where playersnid = %u";
307 char	*SaveMaskInfo	= "call proc_save_maskdata(%u,%u,%d,%d,\'%s\',%d)";
309 // 跨服联赛纪录
310 char	*LoadMPVPLeaguePointInfo = "select worldid, countryid, guildid, guildname, signindex, wintimes from %s where valid = 1";
311 char	*SaveMPVPLeaguePointInfo = "call proc_save_mpvpleague_result(%d,%d,%d,\'%s\', %d, %d)";

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-share\Messages\StructRoomBattle.cpp 68 KB CPP 文件 2013/3/9 14:01:22 2018/9/13 20:28:11 2018/9/13 20:28:11 19
4 Author:Michael		
5 Created:Michael    
6 Description :跨服房间相关结构
7 Revision :  2011/06/21 Michael create
9 =============================================================================*/
791 }
794 /************************************************************************/
795 /* 跨服报名候选数据结构定义  		                                    */
796 /************************************************************************/
797 BOOL RoomBattleSignupInfo::IsRoomIDInList(ut_id_room nRoomID) const
931 }
932 /************************************************************************/
933 /* 跨服报名候选数据结构定义 客户端消息结构                              */
934 /************************************************************************/
935 void RoomBattleSignupInfo_CX_Msg::Clear()
972 }
974 /************************************************************************/
975 /* 跨服取消报名结构定义   客户端消息结构	                           */
976 /************************************************************************/
977 void RoomBattleSignupCancel_CX_Msg::Clear()
1002 }
1004 /************************************************************************/
1005 /* 跨服确认进入结构定义    客户端消息结构	                           */
1006 /************************************************************************/
1007 void RoomBattleWaitingEnter_CX_Msg::Clear()
1109 }
1111 /************************************************************************/
1112 /* 跨服玩家确认结构定义    服务器消息结构	                           */
1113 /************************************************************************/
1114 void RoomBattlePlayerEnter_XC_Msg::Clear()
1148 }
1150 /************************************************************************/
1151 /* 跨服军团成员离开    服务器消息结构	                                */
1152 /************************************************************************/
1153 void RoomBattlePlayerLeave_XC_Msg::Clear()
1207 }
1210 /************************************************************************/
1211 /* 跨服确认进入结构定义    服务器消息结构	                           */
1212 /************************************************************************/
1213 void RoomBattleWaitingEnter_XC_Msg::Clear()
1581 }
1582 /************************************************************************/
1583 /* 跨服MapServer信息                  		                            */
1584 /************************************************************************/
1585 float SMutiGroupMapServerInfo::GetUseRate() const
1725 }
1727 /************************************************************************/
1728 /* 跨服关卡消息结构定义 MGP-->GL               		                    */
1729 /************************************************************************/
1730 uint32 MsgMGRoomBattle::GetMsgSize() const
1802 }
1804 /************************************************************************/
1805 /* 跨服关卡消息结构定义 GL-->MGP               		                    */
1806 /************************************************************************/
1807 uint32 MsgGMRoomBattle::GetMsgSize() const
1894 }
1895 /************************************************************************/
1896 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消            */
1897 /************************************************************************/
1898 uint32 MsgXGMRoomBattle_ReplyEnter::GetMsgSize()const
1931 }
1933 /************************************************************************/
1934 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消广播            */
1935 /************************************************************************/
1936 uint32 MsgXGMRoomBattle_ReplyEnter_BROADCAST::GetMsgSize()const
1969 }
1971 /************************************************************************/
1972 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  客户端确认离开，重新返回报名状态 */
1973 /************************************************************************/
1974 uint32 MsgXGMRoomBattle_Leave::GetMsgSize()const
2007 }
2009 /************************************************************************/
2010 /* 跨服关卡消息结构定义 MGP-->GL-->MGP        		                    */
2011 /************************************************************************/
2012 uint32 MsgMGMRoomBattle::GetMsgSize() const
2066 }
2068 /************************************************************************/
2069 /* 跨服关卡消息结构定义 MAP-->GL-->MGP        		                    */
2070 /************************************************************************/
2071 uint32 MsgXGMRoomBattle::GetMsgSize() const
2185 }
2187 /************************************************************************/
2188 /* 跨服关卡消息结构定义 MGP-->GL-->MAP        		                    */
2189 /************************************************************************/
2190 uint32 MsgMGXRoomBattle::GetMsgSize() const
2301 }
2303 /************************************************************************/
2304 /* 跨服关卡消息结构定义 Client-->MAP        		                    */
2305 /************************************************************************/
2306 uint32 MsgCXRoomBattle::GetMsgSize() const
2396 }
2398 /************************************************************************/
2399 /* 跨服关卡消息结构定义 MAP-->Client        		                    */
2400 /************************************************************************/
2401 uint32 MsgXCRoomBattle::GetMsgSize() const

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-share\TAB\TabDefine_Map_Misc.cpp 98 KB CPP 文件 2013/3/9 14:03:19 2018/9/13 20:28:14 2018/9/13 20:28:14 2
2239 /*
2240 =======================================================================================================================
2241 跨服关卡 逻辑数据表
2242 =======================================================================================================================
2243 */
2295 /*
2296 =======================================================================================================================
2297 跨服关卡 配置数据表
2298 =======================================================================================================================
2299 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\han3_tgwc\src\khan2-share\TAB\TabDefine_Share.cpp 69 KB CPP 文件 2013/3/9 14:03:22 2018/9/13 20:28:14 2018/9/13 20:28:14 2
447 {
448 	__GUARD__
450 	//如果不开跨服副本，默认不读BackScene
451 	if (g_Config.m_MultiGroupConfig.m_nGroupCount <= 0)
452 	{
503 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0) 
504 	{
505 		//如果是跨服MapServer确保BackScene有配置
506 		KCheckEx(bFindCurrServerBackScene,"BakSceneInfo.tab表配置错误");
507 	}

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\AE\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 13 KB CPP 文件 2013/3/10 11:24:46 2018/9/13 20:31:23 2018/9/13 20:31:23 1
191 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
192 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
194 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
195 		if (pFindPlayer == NULL)
196 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\AE\src\khan2-glserver\XGBattleDispatch.cpp 81 KB CPP 文件 2013/3/10 11:25:06 2018/9/13 20:31:23 2018/9/13 20:31:23 12
2502 }
2504 /***********************************************************
2505 desc:	跨服战场 XG 服务器消息处理
2506 auth:	rj
2507 date:	2011-2-14
2515 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2516 	{
2517 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2518 		static IntegerHashMap mapMPVP2v2SignupRecord;
2519 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2521 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2522 		}
2524 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2525 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2526 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2543 		case MPVP_BATTLE_RETSTATE:
2544 			{
2545 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名
2546 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2547 				{
2577 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2578 				KCheck(pServePlayer_Target);
2580 				// 转发跨服战场进入通知到报名玩家所在 Map
2581 				GXMPVPBattle msg;
2582 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2686 					}
2687 				}
2689 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2690 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2691 				msg.SetSignupType(pKMessage->GetSignupType());
2700 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2701 				KCheck(pServePlayer_Target);
2703 				// 转发跨服战场状态到报名玩家所在 Map
2704 				GXMPVPBattle msg;
2705 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2718 				if (iServerID)
2719 				{
2720 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2721 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2722 					KCheck(pServePlayer_Target);
2741 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2742 				KCheck(pServePlayer_Target);
2744 				// 转发跨服战场进入响应到报名玩家所在 Map
2745 				GXMPVPBattle msg;
2746 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\AE\src\khan2-mapserver\ChangeMapDelegater.cpp 35 KB CPP 文件 2013/3/10 11:25:49 2018/9/13 20:31:24 2018/9/13 20:31:24 2
1234 		pPlayer->ClearMutexState(MS_Fuben);
1235 	}
1237 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1238 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1239 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\AE\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 11:25:30 2018/9/13 20:31:24 2018/9/13 20:31:24 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\AE\src\khan2-mapserver\CXItemDispatch.cpp 60 KB CPP 文件 2013/3/10 11:25:38 2018/9/13 20:31:24 2018/9/13 20:31:24 1
1956 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
1957 	{
1958 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
1959 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1960 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\AE\src\khan2-mapserver\GXBattleDispatch.cpp 52 KB CPP 文件 2013/3/10 11:26:01 2018/9/13 20:31:24 2018/9/13 20:31:24 6
1452 }
1454 /***********************************************************
1455 desc:	跨服战场 GX 服务器消息处理
1456 auth:	rj
1457 date:	2011-2-14
1474 			case MPVP_BATTLE_SIGNUP:
1475 				{
1476 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1478 					CMPVP2v2Battle *pMPVP2v2Battle = (CMPVP2v2Battle *)g_pMPVPBattleManager->GetMPVPBattleByType(MPVP_BATTLE_TYPE_2V2);
1479 					KCheck(pMPVP2v2Battle);
1524 						return MP_CONTINUE;
1525 					}
1527 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1528 					pMPVP2v2Battle->TellPlayerEnterMap(pKMessage->GetSNID(), pConnector);
1529 				}
1570 			case MPVP_BATTLE_RETSTATE:
1571 				{
1572 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1573 					pMap->GetLuaSystem()->RunScriptFunction
1574 						(
1586 			case MPVP_BATTLE_RES_ENTERSCENE:
1587 				{
1588 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1589 					pMap->GetLuaSystem()->RunScriptFunction
1590 						(
1617 }
1619 /***********************************************************
1620 desc:	跨服战场场景通知消息处理
1621 auth:	rj
1622 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\AE\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 26 KB CPP 文件 2013/3/10 11:26:03 2018/9/13 20:31:24 2018/9/13 20:31:24 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\AE\src\khan2-mapserver\GXMapDispatch.cpp 16 KB CPP 文件 2013/3/10 11:26:07 2018/9/13 20:31:24 2018/9/13 20:31:24 1
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\AE\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 11:26:28 2018/9/13 20:31:25 2018/9/13 20:31:25 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\AE\src\khan2-mapserver\LuaFunction_Map.cpp 182 KB CPP 文件 2013/3/10 11:26:33 2018/9/13 20:31:25 2018/9/13 20:31:25 11
1455 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1457 	KCheck(szName);
1459 	// 2010-11-2 对发送脚本邮件进行跨服支持
1460 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1461 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5360 	return 0;
5361 }
5363 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5364 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5365 {
5386 	LUA_RETURNERROR_1;
5387 }
5389 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5390 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5391 {
5433 	return 0;
5434 }
5436 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5437 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5438 //{
5460 //}
5461 //
5462 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5463 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5464 //{
5530 //}
5531 //
5532 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5533 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5534 //{
5600 //}
5601 //
5602 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5603 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5604 //{
5634 //}
5635 //
5636 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
5637 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5638 //{
5681 //}
5682 //
5683 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
5684 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
5685 //{
5733 //}
5734 //
5735 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
5736 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
5737 //{
5778 //}
5779 //
5780 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
5781 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
5782 //{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\AE\src\khan2-mapserver\LuaSystem_Function.cpp 105 KB CPP 文件 2013/3/10 11:26:40 2018/9/13 20:31:25 2018/9/13 20:31:25 1
891 	m_LuaVM.RegisterFunction("PVP2v2AskBattleSceneEnter", (void *) (LuaFunction_PVP2v2AskBattleMapEnter));
892 	m_LuaVM.RegisterFunction("SetPVP2v2BattleDisable", (void *) (LuaFunction_SetPVP2v2BattleDisable));
893 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));	// 跨服 2v2 战场扩充函数 by rj 2010-9-21 
894 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));
895 	m_LuaVM.RegisterFunction("PVP6v6RegisterScene", (void *) (LuaFunction_PVP6v6RegisterMap));

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\AE\src\khan2-mapserver\MapCore.cpp 36 KB CPP 文件 2013/3/10 11:26:42 2018/9/13 20:31:25 2018/9/13 20:31:25 1
635 				m_bFirstInit = FALSE;
636 			}
637 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
638 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
639 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\AE\src\khan2-mapserver\MapServer.cpp 31 KB CPP 文件 2013/3/10 11:26:44 2018/9/13 20:31:25 2018/9/13 20:31:25 1
556 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
557 	
558 	// 跨服战场管理器 2010-10-13 by rj
559 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
560 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\AE\src\khan2-mapserver\MPVP2v2Battle.cpp 29 KB CPP 文件 2013/3/10 11:26:41 2018/9/13 20:31:25 2018/9/13 20:31:25 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
124 	{
125 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
126 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
127 		if (FindSignup(pSignupPlayers[i].uSNID))
128 		{
470 			nLevelFlag = 0;
471 		}
473 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
474 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
475 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\AE\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 11:26:41 2018/9/13 20:31:25 2018/9/13 20:31:25 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
91 	__UNGUARD__ return FALSE;
92 }
94 // 以类型方式获得跨服战场类
95 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
96 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\AE\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 12 KB CPP 文件 2013/3/10 11:27:05 2018/9/13 20:31:25 2018/9/13 20:31:25 1
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\AE\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/10 14:30:52 2018/9/13 20:31:26 2018/9/13 20:31:26 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\AE\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/10 14:30:52 2018/9/13 20:31:26 2018/9/13 20:31:26 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\AE\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/10 14:30:53 2018/9/13 20:31:26 2018/9/13 20:31:26 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
200 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\AE\src\khan2-share\Core\Setting.cpp 72 KB CPP 文件 2013/3/10 14:30:56 2018/9/13 20:31:26 2018/9/13 20:31:26 3
286 /*
287 =======================================================================================================================
288  加载跨服配置信息
289 =======================================================================================================================
290 */
300 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
301 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
303 	// 跨服战场最大场景数量配置 2010-9-23 by rj
304 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
305 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
319 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
320 		
321 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
323 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
325 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN\Share\Connector\ConnectorManager.cpp 14 KB CPP 文件 2013/3/10 11:29:02 2018/9/13 20:32:34 2018/9/13 20:32:34 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ConnectorID_t pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN\Share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/10 11:29:02 2018/9/13 20:32:34 2018/9/13 20:32:34 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ConnectorID_t ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN\Share\Core\Setting.cpp 67 KB CPP 文件 2013/3/10 11:29:07 2018/9/13 20:32:34 2018/9/13 20:32:34 1
280 /*
281 =======================================================================================================================
282  加载跨服配置信息
283 =======================================================================================================================
284 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_CB\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 13 KB CPP 文件 2013/3/10 11:39:36 2018/9/13 20:33:22 2018/9/13 20:33:22 1
191 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
192 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
194 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
195 		if (pFindPlayer == NULL)
196 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_CB\src\khan2-glserver\XGBattleDispatch.cpp 81 KB CPP 文件 2013/3/10 11:39:56 2018/9/13 20:33:22 2018/9/13 20:33:22 12
2502 }
2504 /***********************************************************
2505 desc:	跨服战场 XG 服务器消息处理
2506 auth:	rj
2507 date:	2011-2-14
2515 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2516 	{
2517 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2518 		static IntegerHashMap mapMPVP2v2SignupRecord;
2519 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2521 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2522 		}
2524 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2525 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2526 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2543 		case MPVP_BATTLE_RETSTATE:
2544 			{
2545 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名
2546 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2547 				{
2577 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2578 				KCheck(pServePlayer_Target);
2580 				// 转发跨服战场进入通知到报名玩家所在 Map
2581 				GXMPVPBattle msg;
2582 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2686 					}
2687 				}
2689 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2690 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2691 				msg.SetSignupType(pKMessage->GetSignupType());
2700 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2701 				KCheck(pServePlayer_Target);
2703 				// 转发跨服战场状态到报名玩家所在 Map
2704 				GXMPVPBattle msg;
2705 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2718 				if (iServerID)
2719 				{
2720 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2721 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2722 					KCheck(pServePlayer_Target);
2741 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2742 				KCheck(pServePlayer_Target);
2744 				// 转发跨服战场进入响应到报名玩家所在 Map
2745 				GXMPVPBattle msg;
2746 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_CB\src\khan2-mapserver\ChangeMapDelegater.cpp 35 KB CPP 文件 2013/3/10 11:40:44 2018/9/13 20:33:23 2018/9/13 20:33:23 2
1216 		pPlayer->ClearMutexState(MS_Fuben);
1217 	}
1219 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1220 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1221 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_CB\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 11:40:26 2018/9/13 20:33:23 2018/9/13 20:33:23 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_CB\src\khan2-mapserver\CXItemDispatch.cpp 60 KB CPP 文件 2013/3/10 11:40:34 2018/9/13 20:33:23 2018/9/13 20:33:23 1
1956 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
1957 	{
1958 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
1959 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1960 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_CB\src\khan2-mapserver\GXBattleDispatch.cpp 52 KB CPP 文件 2013/3/10 11:40:59 2018/9/13 20:33:23 2018/9/13 20:33:23 6
1452 }
1454 /***********************************************************
1455 desc:	跨服战场 GX 服务器消息处理
1456 auth:	rj
1457 date:	2011-2-14
1474 			case MPVP_BATTLE_SIGNUP:
1475 				{
1476 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1478 					CMPVP2v2Battle *pMPVP2v2Battle = (CMPVP2v2Battle *)g_pMPVPBattleManager->GetMPVPBattleByType(MPVP_BATTLE_TYPE_2V2);
1479 					KCheck(pMPVP2v2Battle);
1524 						return MP_CONTINUE;
1525 					}
1527 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1528 					pMPVP2v2Battle->TellPlayerEnterMap(pKMessage->GetSNID(), pConnector);
1529 				}
1570 			case MPVP_BATTLE_RETSTATE:
1571 				{
1572 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1573 					pMap->GetLuaSystem()->RunScriptFunction
1574 						(
1586 			case MPVP_BATTLE_RES_ENTERSCENE:
1587 				{
1588 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1589 					pMap->GetLuaSystem()->RunScriptFunction
1590 						(
1617 }
1619 /***********************************************************
1620 desc:	跨服战场场景通知消息处理
1621 auth:	rj
1622 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_CB\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 26 KB CPP 文件 2013/3/10 11:41:00 2018/9/13 20:33:23 2018/9/13 20:33:23 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_CB\src\khan2-mapserver\GXMapDispatch.cpp 16 KB CPP 文件 2013/3/10 11:41:05 2018/9/13 20:33:23 2018/9/13 20:33:23 1
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_CB\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 11:41:27 2018/9/13 20:33:24 2018/9/13 20:33:24 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_CB\src\khan2-mapserver\LuaFunction_Map.cpp 182 KB CPP 文件 2013/3/10 11:41:32 2018/9/13 20:33:24 2018/9/13 20:33:24 11
1455 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1457 	KCheck(szName);
1459 	// 2010-11-2 对发送脚本邮件进行跨服支持
1460 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1461 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5360 	return 0;
5361 }
5363 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5364 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5365 {
5386 	LUA_RETURNERROR_1;
5387 }
5389 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5390 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5391 {
5433 	return 0;
5434 }
5436 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5437 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5438 //{
5460 //}
5461 //
5462 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5463 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5464 //{
5530 //}
5531 //
5532 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5533 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5534 //{
5600 //}
5601 //
5602 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5603 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5604 //{
5634 //}
5635 //
5636 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
5637 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5638 //{
5681 //}
5682 //
5683 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
5684 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
5685 //{
5733 //}
5734 //
5735 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
5736 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
5737 //{
5778 //}
5779 //
5780 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
5781 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
5782 //{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_CB\src\khan2-mapserver\LuaSystem_Function.cpp 105 KB CPP 文件 2013/3/10 11:41:39 2018/9/13 20:33:24 2018/9/13 20:33:24 1
891 	m_LuaVM.RegisterFunction("PVP2v2AskBattleSceneEnter", (void *) (LuaFunction_PVP2v2AskBattleMapEnter));
892 	m_LuaVM.RegisterFunction("SetPVP2v2BattleDisable", (void *) (LuaFunction_SetPVP2v2BattleDisable));
893 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));	// 跨服 2v2 战场扩充函数 by rj 2010-9-21 
894 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));
895 	m_LuaVM.RegisterFunction("PVP6v6RegisterScene", (void *) (LuaFunction_PVP6v6RegisterMap));

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_CB\src\khan2-mapserver\MapCore.cpp 36 KB CPP 文件 2013/3/10 11:41:42 2018/9/13 20:33:24 2018/9/13 20:33:24 1
635 				m_bFirstInit = FALSE;
636 			}
637 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
638 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
639 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_CB\src\khan2-mapserver\MapServer.cpp 31 KB CPP 文件 2013/3/10 11:41:44 2018/9/13 20:33:24 2018/9/13 20:33:24 1
550 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
551 	
552 	// 跨服战场管理器 2010-10-13 by rj
553 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
554 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_CB\src\khan2-mapserver\MPVP2v2Battle.cpp 29 KB CPP 文件 2013/3/10 11:41:39 2018/9/13 20:33:24 2018/9/13 20:33:24 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
124 	{
125 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
126 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
127 		if (FindSignup(pSignupPlayers[i].uSNID))
128 		{
470 			nLevelFlag = 0;
471 		}
473 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
474 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
475 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_CB\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 11:41:40 2018/9/13 20:33:24 2018/9/13 20:33:24 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
91 	__UNGUARD__ return FALSE;
92 }
94 // 以类型方式获得跨服战场类
95 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
96 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_CB\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 12 KB CPP 文件 2013/3/10 11:42:06 2018/9/13 20:33:24 2018/9/13 20:33:24 1
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_CB\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/10 20:50:53 2018/9/13 20:33:25 2018/9/13 20:33:25 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_CB\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/10 20:50:53 2018/9/13 20:33:25 2018/9/13 20:33:25 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_CB\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/10 20:50:54 2018/9/13 20:33:25 2018/9/13 20:33:25 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
200 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_CB\src\khan2-share\Core\Setting.cpp 73 KB CPP 文件 2013/3/10 20:50:57 2018/9/13 20:33:25 2018/9/13 20:33:25 3
286 /*
287 =======================================================================================================================
288  加载跨服配置信息
289 =======================================================================================================================
290 */
300 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
301 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
303 	// 跨服战场最大场景数量配置 2010-9-23 by rj
304 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
305 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
319 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
320 		
321 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
323 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
325 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-client\GameCommandSystem.cpp 59 KB CPP 文件 2013/3/10 11:43:11 2018/9/13 20:33:32 2018/9/13 20:33:32 1
1402 	{ GCD_ASK_JOIN_FUBEN_WITH_TEAM, "ASK_JOIN_FUBEN_WITH_TEAM" },
1403 	{ GCD_ASK_EXIT_ROOM, "ASK_EXIT_ROOM" },
1405 	//跨服副本报名搜索
1406 	{ GCD_UPDATE_FUBEN_SEARCH_STATE,"UPDATE_FUBEN_SEARCH_STATE" },
1408 	//军团信息更新

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-client\GameStateChangeServer.cpp 6 KB CPP 文件 2013/3/10 11:43:51 2018/9/13 20:33:32 2018/9/13 20:33:32 1
210 			::GetPrivateProfileString( "Debug", "Login.WorldID", "", szReadTemp, MAX_PATH, DEBUG_FILE_NAME );
211 			static ut_id s_nWorldID = atoi(szReadTemp); 
212 			GAME_DATA_PLAYER_PTR->SetWorldID(s_nWorldID); // 支持跨服自架测试
213 																			
214 		}

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-client\GameStateRun.cpp 89 KB CPP 文件 2013/3/10 11:43:53 2018/9/13 20:33:32 2018/9/13 20:33:32 2
649 	
650 	GAME_DATA_PTR->askCountryData();
653 	//跨服关卡的处理 
655 	//清除小地图上的军团信息
656 	GAME_DATA_RELATION_PTR->GetCorps()->ClearCorpsInfo();
668 	//请求军团数据
669 	GAME_DATA_QUEST_PTR->AskRoomBattleGroupData();
670 	/////跨服关卡的处理	
671 }
674 void CGameStateRun::IsMapLoaded( void )

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-client\UIMap.cpp 24 KB CPP 文件 2013/3/10 11:44:28 2018/9/13 20:33:33 2018/9/13 20:33:33 1
455 		case MAP_POINT_TRANSER_NPC:		szChildWinType = MAP_POINT_TYPE_TRANSER_NPC;	break;
456 		case MAP_POINT_MONSTER:			szChildWinType = MAP_POINT_TYPE_MONSTER;		break;
458 		// 跨服6v6的旗子
459 		case MAP_POINT_OneLevelFlag:			szChildWinType = MAP_POINT_TYPE_ONELEVELFLAG; break;
460 		case MAP_POINT_TwoLevelFlag:			szChildWinType = MAP_POINT_TYPE_TWOLEVELFLAG; break;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-client\UIPartyMessageBox.cpp 33 KB CPP 文件 2013/3/10 11:44:29 2018/9/13 20:33:33 2018/9/13 20:33:33 1
404 		}
405 		break;
407 	case MGUILD_BATTLE_TYPE: // 跨服帮会战
408 		{
409 			CXMPVPBattle msg;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-dbshare\MKLogicManager.cpp 111 KB CPP 文件 2013/3/10 11:45:11 2018/9/13 20:33:34 2018/9/13 20:33:34 2
235 			{
236 			ArchiveNodeLogic<PlayerMK>* pLogicNode = (ArchiveNodeLogic<PlayerMK>*)GetNode(_Idx);
238 			// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
239 			uint32 uMaxPoolSize = MAX_POOL_SIZE;
240 			if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
3649 }
3651 /************************************************************************/
3652 /* 跨服战积分相关                                                       */
3653 /************************************************************************/
3654 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-glserver\GL.cpp 43 KB CPP 文件 2013/3/10 11:45:20 2018/9/13 20:33:34 2018/9/13 20:33:34 5
422 	KCheck(g_pGuildBattleManager);
423 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildBattleManager...OK");
425 	//跨服帮战的管理器
426 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new MultiGuildBattleManager ... ");
427 	g_pMGuildBattleManager = new MGuildBattleManager;
505 	KCheck(g_pGuildCenter);
506 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildManager...OK");
508 	//跨服战积分管理器
509 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMPVPPointManager ... ");
510 	g_pMPVPPointManager = new MPVPPointManager;
691 	KCheck(g_pSystemParamsManager);
692 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new g_pSystemParamsManager...OK");
695 	// 跨服管理器
696 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMutiGroupMapServerManager ... ");
697 	g_pMutiGroupMapServerManager = new MutiGroupMapServerManager;
928 	KCheck(ret);
929 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager->Init()...OK");
932 	//跨服管理器
933 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[Init] g_pMutiGroupMapServerManager->Init()...OK");
934 	ret = g_pMutiGroupMapServerManager->Init();
1096 	KSafeDelete(g_pSystemParamsManager);
1097 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager delete...OK");
1099 	//跨服管理器
1100 	KSafeDelete(g_pMutiGroupMapServerManager);
1101 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pMutiGroupMapServerManager delete...OK");

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 14 KB CPP 文件 2013/3/10 11:45:31 2018/9/13 20:33:34 2018/9/13 20:33:34 1
223 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
224 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
226 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
227 		if (pFindPlayer == NULL)
228 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-glserver\MGuildBattleManager.cpp 14 KB CPP 文件 2013/3/10 11:45:34 2018/9/13 20:33:34 2018/9/13 20:33:34 8
94 	// 当前赛季进度
95 	int32 nSeasonWeek = (GET_TIME().GetWeekNumFrom2011() - g_Config.m_ConfigInfo.m_MPVPGuildBeginWeek) % g_Config.m_ConfigInfo.m_MPVPPointPeriodWeeks;
97 	// 取得跨服服务器
98 	int32 nServerNum = 0;
99 	ut_id serverIDs[SERVER_CAPACITY] = {-1};
145 	//	if (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / nServerNum <= 0)
146 	//		return serverIDs[0];
148 	//	// 2011-07-26 by rj 改进原来的等分算法，在所连跨服服务器数量等于 2 时用用 4/6 算法来解决高分帮会人数过多的问题
149 	//	int32 iSeg = iIndex / (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / (nServerNum <= 2 ? 2.5f : nServerNum) );
150 	//	if (iSeg >= nServerNum)
166 	if (uPrevSignupTime)
167 	{
168 		// 超时保护（防止报名完成后跨服服务器宕机导致 GL 无法清理报名）
169 		if (GET_TIME().GetCTime() - uPrevSignupTime > 90*60)
170 		{
258 	if(!pGuild || pGuild->GetGuildID() == INVALID_KHAN_ID)
259 		return FALSE;
261 	// 转发跨服战场进入通知到报名玩家所在 Map
262 	GXMPVPBattle msg;
263 	msg.SetBattleType(MPVP_GUILD_BATTLE_TYPE);
416 				aSignupPlayers[0].GuildPoint = pPoint->m_nCurrentPoint;
417 			}
419 			// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
420 			msg.SetSubType(MPVP_BATTLE_SIGNUP);
421 			msg.SetSignupType(pKMessage->GetSignupType());
470 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
471 				KCheck(pServePlayer_Target);
473 				// 转发跨服战场状态到报名玩家所在 Map
474 				GXMPVPBattle msg;
475 				msg.SetBattleType(pKMessage->GetBattleType());
501 				return MP_CONTINUE;
502 			}
504 			// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
505 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pMatch->nServerID);
506 			KCheck(pServePlayer_Target);
523 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
524 			KCheck(pServePlayer_Target);
526 			// 转发跨服战场进入响应到报名玩家所在 Map
527 			GXMPVPBattle msg;
528 			msg.SetBattleType(pKMessage->GetBattleType());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-glserver\MPVPGuildPoint.cpp 8 KB CPP 文件 2013/3/10 11:45:35 2018/9/13 20:33:34 2018/9/13 20:33:34 3
1 /************************************************************************/
2 /* 帮会跨服战积分信息接口的具体实现                                     */
3 /************************************************************************/
5 #include "stdafx.h"
195 /*
196 =======================================================================================================================
197 处理不同跨服战各自的额外参数填充
198 =======================================================================================================================
199 */
223 /*
224 =======================================================================================================================
225 加载跨服帮战每周的场次信息
226 =======================================================================================================================
227 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-glserver\MPVPPointArithmetic.cpp 2 KB CPP 文件 2013/3/10 11:45:35 2018/9/13 20:33:34 2018/9/13 20:33:34 3
1 /************************************************************************/
2 /* 跨服战积分算法器,负责各种跨服战积分的计算逻辑实现                    */
3 /************************************************************************/
5 #include "stdafx.h"
16 /*
17 ===============================================================================================================
18 根据实力来计算跨服帮会的加权分
19 帮会实力-(错过的场次*放弃损失的分数)
20 ===============================================================================================================

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-glserver\MPVPPointInfo.cpp 14 KB CPP 文件 2013/3/10 11:45:35 2018/9/13 20:33:34 2018/9/13 20:33:34 2
1 /************************************************************************/
2 /* 跨服战积分信息接口的具体实现                                         */
3 /************************************************************************/
5 #include "stdafx.h"
72 /*
73 =======================================================================================================================
74 获取跨服积分的数据信息
75 =======================================================================================================================
76 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-glserver\MPVPPointManager.cpp 11 KB CPP 文件 2013/3/10 11:45:35 2018/9/13 20:33:34 2018/9/13 20:33:34 5
1 /************************************************************************/
2 /* 跨服战积分管理器的实现                                               */
3 /************************************************************************/
5 #include "stdafx.h"
98 /*
99 ===============================================================================================================
100 注册跨服积分的实现
101 ===============================================================================================================
102 */
220 /*
221 ===============================================================================================================
222 获取指定类型跨服战全部积分信息
223 ===============================================================================================================
224 */
243 /*
244 ===============================================================================================================
245 获取指定跨服战当前的赛季开始周
246 ===============================================================================================================
247 */
266 /*
267 ===============================================================================================================
268 获取指定跨服战当前周
269 ===============================================================================================================
270 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-glserver\MPVPToplist.cpp 8 KB CPP 文件 2013/3/10 11:45:36 2018/9/13 20:33:34 2018/9/13 20:33:34 2
1 /************************************************************************/
2 /* 跨服帮会战排行榜的具体实现		                                    */
3 /************************************************************************/
5 #include "stdafx.h"
25 /*
26 =======================================================================================================================
27 积分数据加载,从跨服积分管理器中加载需要的信息
28 =======================================================================================================================
29 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-glserver\MutiGroupMapServerManager.cpp 16 KB CPP 文件 2013/3/10 11:45:38 2018/9/13 20:33:34 2018/9/13 20:33:34 1
4 Author:Michael		
5 Created:Michael
6 Description :跨服MapServer管理器实现
7 Revision :  2011/06/17 Michael create
9 =============================================================================*/

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-glserver\ServerConnectorManager_GL.cpp 11 KB CPP 文件 2013/3/10 11:45:43 2018/9/13 20:33:34 2018/9/13 20:33:34 2
516 			_NET_TRY
517 			{
518 				// 跨服帮战管理器心跳
519 				ret = g_pMGuildBattleManager->HeartBeat(uTime);
520 				KCheck(ret);
526 			_NET_TRY
527 			{
528 				//处理跨服战积分管理器相关的心跳
529 				ret = g_pMPVPPointManager->HeartBeat(uTime);		
530 				KCheck(ret);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-glserver\TopListManager.cpp 18 KB CPP 文件 2013/3/10 11:45:49 2018/9/13 20:33:34 2018/9/13 20:33:34 1
152 	Register(HONOR_CHARIOT_TOP_LIST_BK,			new TopList,					"Chariot_Honor_bk" );
153 	// add by dragon 战车排行榜 }
155 	// 跨服帮会战排行榜
156 	Register(MPVP_GUILD_CURRENT,			new CurrentMPVPGuildTopList,		"MPVP_Guild_Current" );
157 	Register(MPVP_GUILD_CURRENT_BK,			new TopList,				"MPVP_Guild_Current_bk" );

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-glserver\XGBattleDispatch.cpp 92 KB CPP 文件 2013/3/10 11:45:52 2018/9/13 20:33:35 2018/9/13 20:33:35 25
2507 }
2509 /***********************************************************
2510 desc:	跨服战场 XG 服务器消息处理
2511 auth:	rj
2512 date:	2011-2-14
2520 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2521 	{
2522 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2523 		static IntegerHashMap mapMPVP2v2SignupRecord;
2524 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2526 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2527 		}
2529 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2530 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2531 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2548 		case MPVP_BATTLE_RETSTATE:
2549 			{
2550 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名。值是当前报名的时间。
2551 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2552 				{
2582 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2583 				KCheck(pServePlayer_Target);
2585 				// 转发跨服战场进入通知到报名玩家所在 Map
2586 				GXMPVPBattle msg;
2587 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2613 				if (uPrevSignupTime)
2614 				{
2615 					// 6 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2616 					if (GET_TIME().GetCTime() - uPrevSignupTime > 360)
2617 					{
2719 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2720 				}
2722 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2723 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2724 				msg.SetSignupType(pKMessage->GetSignupType());
2733 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2734 				KCheck(pServePlayer_Target);
2736 				// 转发跨服战场状态到报名玩家所在 Map
2737 				GXMPVPBattle msg;
2738 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2751 				if (iServerID)
2752 				{
2753 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2754 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2755 					KCheck(pServePlayer_Target);
2774 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2775 				KCheck(pServePlayer_Target);
2777 				// 转发跨服战场进入响应到报名玩家所在 Map
2778 				GXMPVPBattle msg;
2779 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2790 	else if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_6V6)
2791 	{
2792 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2793 		static IntegerHashMap mapMPVP6v6SignupRecord;
2794 		if (mapMPVP6v6SignupRecord.GetMaxCount() == 0)
2796 			mapMPVP6v6SignupRecord.InitTable(MAX_WORLD_PLAYER);
2797 		}
2799 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2800 		static IntegerHashMap mapMPVP6v6EnterBattleRecord;
2801 		if (mapMPVP6v6EnterBattleRecord.GetMaxCount() == 0)
2818 		case MPVP_BATTLE_RETSTATE:
2819 			{
2820 				// 记录这次跨服 6v6 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 6v6 的报名。值是当前报名的时间。
2821 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2822 				{
2852 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2853 				KCheck(pServePlayer_Target);
2855 				// 转发跨服战场进入通知到报名玩家所在 Map
2856 				GXMPVPBattle msg;
2857 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
2883 				if (uPrevSignupTime)
2884 				{
2885 					// 11 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2886 					if (GET_TIME().GetCTime() - uPrevSignupTime > 660)
2887 					{
2989 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2990 				}
2992 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2993 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2994 				msg.SetSignupType(pKMessage->GetSignupType());
3003 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
3004 				KCheck(pServePlayer_Target);
3006 				// 转发跨服战场状态到报名玩家所在 Map
3007 				GXMPVPBattle msg;
3008 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
3021 				if (iServerID)
3022 				{
3023 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
3024 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
3025 					KCheck(pServePlayer_Target);
3044 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
3045 				KCheck(pServePlayer_Target);
3047 				// 转发跨服战场进入响应到报名玩家所在 Map
3048 				GXMPVPBattle msg;
3049 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-mapserver\Bus.cpp 65 KB CPP 文件 2013/3/10 11:46:15 2018/9/13 20:33:35 2018/9/13 20:33:35 3
803 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
804 		= CaculateMonsterExpRuler::eCALC_TYPE_TEAM;
806 	//如果是跨服副本
807 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
808 	{
808 	{
809 		nValidMemberCount = GetValidOwnerListGroup(MAX_GROUP_MEMBER,apValidMember);
810 		eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
811 	}
812 	else
1083 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1085 	if(Get_OccupantTeamID() != INVALID_KHAN_ID) iFadeoutType = Obj_ItemRuler::FADE_OUT_TEAM;
1087 	//是否是跨服
1088 	BOOL BGroup = FALSE;
1089 	Map* pMap = GetMap();

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-mapserver\ChangeMapDelegater.cpp 43 KB CPP 文件 2013/3/10 11:46:34 2018/9/13 20:33:35 2018/9/13 20:33:35 2
1496 		pPlayer->ClearMutexState(MS_Fuben);
1497 	}
1499 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1500 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1501 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 11:46:17 2018/9/13 20:33:35 2018/9/13 20:33:35 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-mapserver\CXItemDispatch.cpp 64 KB CPP 文件 2013/3/10 11:46:24 2018/9/13 20:33:35 2018/9/13 20:33:35 1
2043 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
2044 	{
2045 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
2046 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2047 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-mapserver\GMCommand.cpp 199 KB CPP 文件 2013/3/10 11:46:48 2018/9/13 20:33:36 2018/9/13 20:33:36 1
542 	REGISTER_HANDLER(addchariothonour);	// \gm addchariothonour =100	增加战车荣誉
543 	REGISTER_HANDLER(unlockhorse);		// \gm unlockhorse =objid =horseindex  强制解锁骑乘
544 	REGISTER_HANDLER(addguildwin);		// \gm addguildwin =num 增加跨服帮战胜利次数
546 	__UNGUARD__
547 }

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-mapserver\GMRoomBattleDispatch.cpp 5 KB CPP 文件 2013/3/10 11:46:49 2018/9/13 20:33:36 2018/9/13 20:33:36 1
53 	else
54 	{
55 		ut_id_map nBackSceneID = g_pFubenManager->GetServerBakSceneID();  //跨服处的副本入口场景
57 		ut_id_map nTarSceneId = pPacket->GetRoomBattle()->u_RoomBattleData.m_SceneID;
58 		

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-mapserver\GXBattleDispatch.cpp 55 KB CPP 文件 2013/3/10 11:46:49 2018/9/13 20:33:36 2018/9/13 20:33:36 6
1452 }
1454 /***********************************************************
1455 desc:	跨服战场 GX 服务器消息处理
1456 auth:	rj
1457 date:	2011-2-14
1474 			case MPVP_BATTLE_SIGNUP:
1475 				{
1476 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1478 					IMPVPBattle *pMPVPBattle = g_pMPVPBattleManager->GetMPVPBattleByType((MPVP_BATTLE_TYPE)pKMessage->GetBattleType());
1479 					//KCheck(pMPVPBattle);
1542 						return MP_CONTINUE;
1543 					}
1545 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1546 					pMPVPBattle->TellPlayerEnterMap(pKMessage, pConnector);
1547 				}
1588 			case MPVP_BATTLE_RETSTATE:
1589 				{
1590 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1591 					pMap->GetLuaSystem()->RunScriptFunction
1592 						(
1604 			case MPVP_BATTLE_RES_ENTERSCENE:
1605 				{
1606 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1607 					pMap->GetLuaSystem()->RunScriptFunction
1608 						(
1635 }
1637 /***********************************************************
1638 desc:	跨服战场场景通知消息处理
1639 auth:	rj
1640 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 28 KB CPP 文件 2013/3/10 11:46:51 2018/9/13 20:33:36 2018/9/13 20:33:36 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-mapserver\GXMapDispatch.cpp 19 KB CPP 文件 2013/3/10 11:46:55 2018/9/13 20:33:36 2018/9/13 20:33:36 2
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{
575 		return MP_CONTINUE;
576 	}
578 	//以下是跨服的副本的处理
580 	//给报名服务器返回创建成功消息			
581 	MGMRoomBattle* Msg = CREATE_MESSAGE_OBJ(MGMRoomBattle,MESSAGE_MGM_ROOMBATTLE);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 11:47:16 2018/9/13 20:33:36 2018/9/13 20:33:36 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-mapserver\LuaFunction_Chat.cpp 61 KB CPP 文件 2013/3/10 11:47:19 2018/9/13 20:33:36 2018/9/13 20:33:36 1
1086 		pMsg->SetCycleCount(nParam);
1087 	g_pServerConnectorMgr->SendMessage_SingleMode(pMsg);
1090 	//世界频道支持跨服
1091 	for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
1092 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-mapserver\LuaFunction_Map.cpp 203 KB CPP 文件 2013/3/10 11:47:22 2018/9/13 20:33:36 2018/9/13 20:33:36 16
256 	SelectMap.m_MapDataType = 0;
257 	SelectMap.m_CopyData = * pFD;
258 	SelectMap.m_CopyData.m_bRoom = false;//非跨服房间类型
260 	if (nRoomType == 1)
261 	{
1710 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1712 	KCheck(szName);
1714 	// 2010-11-2 对发送脚本邮件进行跨服支持
1715 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1716 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5678 	return 0;
5679 }
5681 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5682 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5683 {
5704 	LUA_RETURNERROR_1;
5705 }
5707 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5708 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5709 {
5751 	return 0;
5752 }
5754 // 跨服 6v6 战场场景注册函数
5755 int32 LuaFunction_MPVP6v6RegisterMap(Lua_State *L)
5756 {
5777 	LUA_RETURNERROR_1;
5778 }
5780 // 跨服 6v6 战场场景更新战场 UI 面板
5781 int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5782 {
5824 	return 0;
5825 }
5827 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5828 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5829 //{
5851 //}
5852 //
5853 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5854 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5855 //{
5921 //}
5922 //
5923 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5924 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5925 //{
5991 //}
5992 //
5993 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5994 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5995 //{
6025 //}
6026 //
6027 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
6028 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
6029 //{
6072 //}
6073 //
6074 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
6075 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
6076 //{
6124 //}
6125 //
6126 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
6127 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
6128 //{
6169 //}
6170 //
6171 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
6172 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
6173 //{
7015 	return 0;
7016 }
7018 // 跨服战场场景注册函数
7019 int32 LuaFunction_MPVPRegisterMap(Lua_State *L)
7020 {
7110 	if(pMap)
7111 	{
7112 		// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
7113 		int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
7114 			(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-mapserver\LuaSystem_Function.cpp 121 KB CPP 文件 2013/3/10 11:47:30 2018/9/13 20:33:36 2018/9/13 20:33:36 10
1171 	m_LuaVM.RegisterFunction("AddBattleHonour", (void *) (LuaFunction_AddBattleHonour));							// 增加战功
1172 	m_LuaVM.RegisterFunction("SubBattleHonour", (void *) (LuaFunction_SubBattleHonour));							// 减少战功
1173 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));					// 跨服 2v2 战场注册场景 
1174 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));			// 跨服 2v2 战场名称显示
1175 	m_LuaVM.RegisterFunction("MPVP6v6RegisterScene", (void *) (LuaFunction_MPVP6v6RegisterMap));					// 跨服 6v6 战场注册场景
1176 	m_LuaVM.RegisterFunction("SetMPVP6v6BattleDisable", (void *) (LuaFunction_SetMPVP6v6BattleDisable));			// 跨服 6v6 战场名称显示
1177 	m_LuaVM.RegisterFunction("MPVPRegisterMap", (void *) (LuaFunction_MPVPRegisterMap));							// 跨服战场注册场景
1178 	m_LuaVM.RegisterFunction("CountryIsFortuneTimeEx", (void *) (LuaFunction_CountryIsFortuneTimeEx));				// 获取特定国家的国运是否进行
1179 	m_LuaVM.RegisterFunction("AddCountryResourceWithRecall", (void *) (LuaFunction_AddCountryResourceWithRecall));	// 比较并增加的修改资源,保证同步
1291 	m_LuaVM.RegisterFunction("IsLeague", (void*)(LuaFunction_IsLeague));											// 判断两国是否是弱国联盟
1292 	m_LuaVM.RegisterFunction("CountryLeagueZhaoji", (void*)(LuaFunction_CountryLeagueZhaoji));						// 发送联盟召集令
1293 	m_LuaVM.RegisterFunction("AskEnterMGuildBattleScene",(void*)(LuaFunction_AskEnterMGuildBattleScene)); 			// 请求进入跨服帮会战场
1294 	m_LuaVM.RegisterFunction("MGuildBattleSignup",(void*)(LuaFunction_MGuildBattleSignup)); 						// 跨服帮会战报名
1295 	m_LuaVM.RegisterFunction("MGuildBattleResult",(void*)(LuaFunction_MGuildBattleResult)); 						// 跨服帮会战结果
1296 	m_LuaVM.RegisterFunction("MGuildBattleSeasonWeek",(void*)(LuaFunction_MGuildBattleSeasonWeek)); 				// 跨服帮会战赛季当前周数
1297 	m_LuaVM.RegisterFunction("GetMGuildNumOfBattleCurSeason", (void*)(LuaFunction_GetMGuildNumOfBattleCurSeason));	// 获取跨服帮战当前赛季的场数
1298 	m_LuaVM.RegisterFunction("SetEquipPokerData",(void*)(LuaFunction_SetEquipPokerData));							// 设置装备扑克牌属性
1299 	m_LuaVM.RegisterFunction("SetEquipPokerCount",(void*)(LuaFunction_SetEquipPokerCount));							// 设置装备扑克牌个数

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-mapserver\MapCore.cpp 38 KB CPP 文件 2013/3/10 11:47:34 2018/9/13 20:33:36 2018/9/13 20:33:36 2
614 				pSceneData->m_MapID == 20 ||
615 				pSceneData->m_MapID == 23 || 
616 				pSceneData->m_MapID == g_pFubenManager->GetServerBakSceneID())//  支持跨服副本
617 				
618 			{
673 				m_bFirstInit = FALSE;
674 			}
675 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
676 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
677 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-mapserver\MapManager.cpp 59 KB CPP 文件 2013/3/10 11:47:35 2018/9/13 20:33:36 2018/9/13 20:33:36 3
1698 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1699 		{
1700 			KCheck(FALSE);//跨服服务器上找不到报错
1701 		}
1703 		return INVALID_KHAN_ID;
1975 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1976 	{
1977 		//以下开始通知广播,支持跨服架构
1978 		for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
1979 		{
2007 BOOL FubenManager::BroadcastFubenSceneInfo(void)
2008 {
2009 	//如果不开跨服副本，不广播
2010 	if (g_Config.m_MultiGroupConfig.IsMultMapOpen() == FALSE)
2011 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-mapserver\MapServer.cpp 33 KB CPP 文件 2013/3/10 11:47:36 2018/9/13 20:33:36 2018/9/13 20:33:36 3
581 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
582 	
583 	// 跨服战场管理器 2010-10-13 by rj
584 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
585 	g_pMPVPBattleManager = new CMPVPBattleManager;
648 	if(pCurrentSData->m_EnableDBShare)
649 	{
650 		// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
651 		uint32 uMaxPoolSize = MAX_POOL_SIZE;
652 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
740 	{
741 		QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[Init] Begin g_pConnectorPool->Init() ... ");
743 		// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
744 		uint32 uMaxPoolSize = MAX_POOL_SIZE;
745 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-mapserver\MGuildBattle.cpp 28 KB CPP 文件 2013/3/10 11:47:31 2018/9/13 20:33:36 2018/9/13 20:33:36 3
1 /***********************************************************
2 desc:	跨服帮会战场实现
3 auth:	txp
4 date:	2011-6-10
122 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，
123 		// 为这个很少出现的异常进行处理。
124 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，
125 		// 如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
126 		if (FindSignup(pSignupPlayers[i].iWorldID, pSignupPlayers[i].GuildID))
427 		m_MatchList.m_aMatch[m_MatchList.m_nCount].m_bFinished = FALSE;
429 		int32 nLevelFlag=0, nDisLevel = s1.m_nSignupLevel - s2.m_nSignupLevel;
431 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
432 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
433 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-mapserver\Monster.cpp 65 KB CPP 文件 2013/3/10 11:47:39 2018/9/13 20:33:36 2018/9/13 20:33:36 5
640 		return 0;
641 	}
643 	//如果是跨服副本
644 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
645 	{
877 		return;
878 	}
880 	//跨服副本
881 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
882 	{
953 		nExp = (int32) (m_BaseExp * fExpParam);
954 	}
956 	uint32	auExp[MAX_GROUP_MEMBER];//  for 跨服军团
957 	int32	_Idx;
959 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
968 			if (pMap->m_FubenDataParty.IsRoomType())
969 			{
970 				eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
971 			}
972 		}
2096 		return 0;
2097 	}
2099 	//场景类型必须为跨服副本
2100 	Map* pMap = GetMap();
2101 	if (NULL == pMap)

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-mapserver\MPVP2v2Battle.cpp 35 KB CPP 文件 2013/3/10 11:47:31 2018/9/13 20:33:36 2018/9/13 20:33:36 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
249 		{
250 			// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
251 			// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
252 			if (FindSignup(pSignupPlayers[i].uSNID))
253 			{
649 			nLevelFlag = 0;
650 		}
652 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
653 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
654 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-mapserver\MPVP6v6Battle.cpp 30 KB CPP 文件 2013/3/10 11:47:32 2018/9/13 20:33:36 2018/9/13 20:33:36 3
1 /***********************************************************
2 desc:	跨服 6v6 战场实现
3 auth:	txp
4 date:	2011-3-16
154 	{
155 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
156 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
157 		if (FindSignup(pSignupPlayers[i].uSNID))
158 		{
536 			nLevelFlag = 0;
537 		}
539 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
540 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
541 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 11:47:32 2018/9/13 20:33:36 2018/9/13 20:33:36 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
97 	__UNGUARD__ return FALSE;
98 }
100 // 以类型方式获得跨服战场类
101 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
102 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 20 KB CPP 文件 2013/3/10 11:47:56 2018/9/13 20:33:37 2018/9/13 20:33:37 4
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());
280 	if(g_Config.m_MultiGroupConfig.IsSignUpServer())
281 	{
282 		//只要一组服务器连接正常,跨服房间管理器的心跳仍然执行 
283 		if (GetGLServerActiveCount() > 0)
284 		{
588 				{
589 					AddGroupTmp( connID, g_Config.m_MultiGroupConfig.m_GLServerInfo[i].m_WorldID );
591 					//2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，
592 					//当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
593 					SSHandShake msg;
664 	if(FALSE == IsGLServerActiveTmp())//处理断线重连
665 	{
666 		//跨服重连机制
667 		if (FALSE == m_ConnectTimer.IsSetTimer())
668 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-mapserver\SignUpMgr.cpp 83 KB CPP 文件 2013/3/10 11:47:58 2018/9/13 20:33:37 2018/9/13 20:33:37 1
4 Author:shangy		
5 Created:shangy    
6 Description :跨服报名管理类
7 Revision :  2011/06/20 shangy create
8 			2011/08/05 Michael Lin Modify

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/10 20:55:03 2018/9/13 20:33:37 2018/9/13 20:33:37 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/10 20:55:03 2018/9/13 20:33:37 2018/9/13 20:33:37 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/10 20:55:04 2018/9/13 20:33:37 2018/9/13 20:33:37 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
200 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-share\Core\Setting.cpp 80 KB CPP 文件 2013/3/10 20:55:08 2018/9/13 20:33:38 2018/9/13 20:33:38 6
290 /*
291 =======================================================================================================================
292  加载跨服配置信息
293 =======================================================================================================================
294 */
304 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
305 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
307 	// 跨服战场最大场景数量配置 2010-9-23 by rj
308 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
309 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
310 	
311 	m_MultiGroupConfig.m_nMaxMGuildMapCnt = ini.Get_Property_Int("MGuild", "Max_SceneCount");
312 	KCheckEx(m_MultiGroupConfig.m_nMaxMGuildMapCnt>0 && m_MultiGroupConfig.m_nMaxMGuildMapCnt<=MGUILD_MAX_MAPCOUNT, "跨服帮战场景数量要小于512");
314 // 	m_MultiGroupConfig.m_nMGuildBeginWeek = ini.Get_Property_Int("MGuild", "BeginWeek");
315 // 	KCheckEx(m_MultiGroupConfig.m_nMGuildBeginWeek>0 && m_MultiGroupConfig.m_nMGuildBeginWeek<=52, "起始周只能在1-52之间");
329 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
330 		
331 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
333 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
335 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);
392 		}		
393 	}
395 	//跨服关卡报名服务器开关 
396 	m_MultiGroupConfig.m_SignUpServerToggle = ini.Get_Property_Int( "Room", "SignUpServerToggle" );
397 	m_MultiGroupConfig.m_MapFubenToogle = ini.Get_Property_Int( "Room", "MapFubenToogle" );
1048 	m_ConfigInfo.m_nEmpireOfficerMinLevel = ini.Get_Property_Int("Empire","OfficerMinLevel");
1049 	//[Empire] End
1051 	//added for跨服军团  
1052 	for (int32 _nGIndex = 0; _nGIndex < MAX_GROUP_MEMBER; ++_nGIndex)
1053 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-share\DataBase\ArchiveInterface.cpp 296 KB CPP 文件 2013/3/10 20:55:10 2018/9/13 20:33:38 2018/9/13 20:33:38 1
9802 }
9804 /************************************************************************/
9805 /* 跨服战积分相关                                                       */
9806 /************************************************************************/
9808 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-share\DataBase\SqlStatement.cpp 21 KB CPP 文件 2013/3/10 20:55:11 2018/9/13 20:33:38 2018/9/13 20:33:38 1
251 char	*g_LoadLostItemInfo = "select aid,playerguid,srcplayerguid,srcplayername,guid,world,server,itemclass,creator,dataproperty,data,termendtime,islock,unlocktime,gmoptime from %s where aid>%u order by aid asc" ;
252 char	*g_DelLostItemInfo = "delete from %s where aid=%u";
254 // 跨服战积分相关处理
255 char	*LoadMPVPPointInfo = "select unitid, unitname, world, currentpoint, totalpoint, currentwintimes, currentjointimes, totalwintimes, totaljointimes, mpvptypename, currentweek, startweek, params from %s where valid = 1";
256 char	*SaveMPVPPointInfo = "call proc_save_mpvppoint(%d,\'%s\', %d, %d, %d, %d, %d, %d, %d, \'%s\', %d, %d, %d, 1)";

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-share\Messages\StructRoomBattle.cpp 68 KB CPP 文件 2013/3/10 20:57:13 2018/9/13 20:33:41 2018/9/13 20:33:41 19
4 Author:Michael		
5 Created:Michael    
6 Description :跨服房间相关结构
7 Revision :  2011/06/21 Michael create
9 =============================================================================*/
790 }
793 /************************************************************************/
794 /* 跨服报名候选数据结构定义  		                                    */
795 /************************************************************************/
796 BOOL RoomBattleSignupInfo::IsRoomIDInList(ut_id_room nRoomID) const
930 }
931 /************************************************************************/
932 /* 跨服报名候选数据结构定义 客户端消息结构                              */
933 /************************************************************************/
934 void RoomBattleSignupInfo_CX_Msg::Clear()
971 }
973 /************************************************************************/
974 /* 跨服取消报名结构定义   客户端消息结构	                           */
975 /************************************************************************/
976 void RoomBattleSignupCancel_CX_Msg::Clear()
1001 }
1003 /************************************************************************/
1004 /* 跨服确认进入结构定义    客户端消息结构	                           */
1005 /************************************************************************/
1006 void RoomBattleWaitingEnter_CX_Msg::Clear()
1108 }
1110 /************************************************************************/
1111 /* 跨服玩家确认结构定义    服务器消息结构	                           */
1112 /************************************************************************/
1113 void RoomBattlePlayerEnter_XC_Msg::Clear()
1147 }
1149 /************************************************************************/
1150 /* 跨服军团成员离开    服务器消息结构	                                */
1151 /************************************************************************/
1152 void RoomBattlePlayerLeave_XC_Msg::Clear()
1206 }
1209 /************************************************************************/
1210 /* 跨服确认进入结构定义    服务器消息结构	                           */
1211 /************************************************************************/
1212 void RoomBattleWaitingEnter_XC_Msg::Clear()
1580 }
1581 /************************************************************************/
1582 /* 跨服MapServer信息                  		                            */
1583 /************************************************************************/
1584 bool SMutiGroupMapServerInfo::IsValid( void ) const
1701 }
1703 /************************************************************************/
1704 /* 跨服关卡消息结构定义 MGP-->GL               		                    */
1705 /************************************************************************/
1706 uint32 MsgMGRoomBattle::GetMsgSize() const
1778 }
1780 /************************************************************************/
1781 /* 跨服关卡消息结构定义 GL-->MGP               		                    */
1782 /************************************************************************/
1783 uint32 MsgGMRoomBattle::GetMsgSize() const
1870 }
1871 /************************************************************************/
1872 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消            */
1873 /************************************************************************/
1874 uint32 MsgXGMRoomBattle_ReplyEnter::GetMsgSize()const
1907 }
1909 /************************************************************************/
1910 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消广播            */
1911 /************************************************************************/
1912 uint32 MsgXGMRoomBattle_ReplyEnter_BROADCAST::GetMsgSize()const
1945 }
1947 /************************************************************************/
1948 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  客户端确认离开，重新返回报名状态 */
1949 /************************************************************************/
1950 uint32 MsgXGMRoomBattle_Leave::GetMsgSize()const
1983 }
1985 /************************************************************************/
1986 /* 跨服关卡消息结构定义 MGP-->GL-->MGP        		                    */
1987 /************************************************************************/
1988 uint32 MsgMGMRoomBattle::GetMsgSize() const
2042 }
2044 /************************************************************************/
2045 /* 跨服关卡消息结构定义 MAP-->GL-->MGP        		                    */
2046 /************************************************************************/
2047 uint32 MsgXGMRoomBattle::GetMsgSize() const
2161 }
2163 /************************************************************************/
2164 /* 跨服关卡消息结构定义 MGP-->GL-->MAP        		                    */
2165 /************************************************************************/
2166 uint32 MsgMGXRoomBattle::GetMsgSize() const
2277 }
2279 /************************************************************************/
2280 /* 跨服关卡消息结构定义 Client-->MAP        		                    */
2281 /************************************************************************/
2282 uint32 MsgCXRoomBattle::GetMsgSize() const
2372 }
2374 /************************************************************************/
2375 /* 跨服关卡消息结构定义 MAP-->Client        		                    */
2376 /************************************************************************/
2377 uint32 MsgXCRoomBattle::GetMsgSize() const

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-share\TAB\TabDefine_Map_Misc.cpp 85 KB CPP 文件 2013/3/10 20:59:15 2018/9/13 20:33:44 2018/9/13 20:33:44 2
2376 /*
2377 =======================================================================================================================
2378 跨服关卡 逻辑数据表
2379 =======================================================================================================================
2380 */
2432 /*
2433 =======================================================================================================================
2434 跨服关卡 配置数据表
2435 =======================================================================================================================
2436 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\EN_TEST\src\khan2-share\TAB\TabDefine_Share.cpp 37 KB CPP 文件 2013/3/10 20:59:17 2018/9/13 20:33:44 2018/9/13 20:33:44 2
998 {
999 	__GUARD__
1001 	//如果不开跨服副本，默认不读BackScene
1002 	if (!g_Config.m_MultiGroupConfig.IsMultMapOpen())
1003 	{
1054 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0) 
1055 	{
1056 		//如果是跨服MapServer确保BackScene有配置
1057 		KCheckEx(bFindCurrServerBackScene,"BakSceneInfo.tab表配置错误");
1058 	}

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK\Share\Connector\ConnectorManager.cpp 14 KB CPP 文件 2013/3/10 11:49:50 2018/9/13 20:34:47 2018/9/13 20:34:47 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ConnectorID_t pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK\Share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/10 11:49:50 2018/9/13 20:34:47 2018/9/13 20:34:47 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ConnectorID_t ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK\Share\Core\Setting.cpp 67 KB CPP 文件 2013/3/10 11:49:55 2018/9/13 20:34:47 2018/9/13 20:34:47 1
280 /*
281 =======================================================================================================================
282  加载跨服配置信息
283 =======================================================================================================================
284 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\Client\Game\Network\Message\XCMPVP2v2BattleDispatch.cpp 2 KB CPP 文件 2013/3/11 12:36:01 2018/9/13 20:35:17 2018/9/13 20:35:17 1
1 /***********************************************************
2 desc:	跨服 2v2 战场服务器相应处理
3 auth:	crj
4 date:	2010-9-21

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\Client\Game\ScriptFunction\GameScriptFunction.cpp 242 KB CPP 文件 2013/3/10 21:40:15 2018/9/13 20:35:18 2018/9/13 20:35:18 1
8115 			return 0;
8116 	}
8118 	/* 跨服战场 2010-9-23 by rj */
8119 	if(MPVP2V2_BATTLE_TYPE == nIndex || MPVP6V6_BATTLE_TYPE == nIndex)
8120 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\Client\Game\ScriptFunction\GameScriptFunctionAroundPlayer.cpp 11 KB CPP 文件 2013/3/10 21:40:16 2018/9/13 20:35:18 2018/9/13 20:35:18 1
96 		if(propertyName == "Name")
97 		{
98 			// 2010-10-18 by rj 对组队对话框中的附近玩家，如果聊天者与自身不在一个服（跨服战场）则将这个用户显示名加入其服的名字
99 			if (OBJECT_MANAGER_PTR->GetMySelf() &&
100 			    OBJECT_MANAGER_PTR->GetMySelf()->GetCharacterData()->Get_WorldID() != pData->Get_WorldID())

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\Client\Game\ScriptFunction\GameScriptFunctionTalk.cpp 269 KB CPP 文件 2013/3/10 21:40:29 2018/9/13 20:35:20 2018/9/13 20:35:20 3
5469 			KYLIN_TRY std::vector<STRING>	strParam;
5470 			strParam.push_back(ChannelType2String((eCHAT_TYPE) reN.getChannelType()));
5472 			// 2010-10-18 by rj 如果聊天者与自身不在一个服（跨服战场）则将这个用户显示名加入其服的名字。增加附近聊天限制，否则可能会出现小喇叭显示异服的问题。
5473 			if (chatType == CHAT_TYPE_NEAR && 
5474 				pPacket->GetWorldID() != INVALID_ID &&
7308 void CScriptFunTalk::SetPaoPaoTxt(STRING &strUser, STRING &strTxt, int32 strType, int32 extLength, ID_t nWorldID)
7309 {
7310 	// 2010-10-26 by rj 对跨服聊天泡泡显示不同服的同名玩家进行支持
7311 	KCharacter	*pObj = OBJECT_MANAGER_PTR->FindCharacterByName(strUser, CHARACTER_PLAYER_TYPE, nWorldID);
7312 	if(pObj && pObj->GetTitleBoard()->isShow())
7322 void CScriptFunTalk::SetPaoPaoMoodAnim(STRING &strUser, STRING &strTxt, ID_t nWorldID)
7323 {
7324 	// 2010-10-26 by rj 对跨服聊天泡泡显示不同服的同名玩家进行支持
7325 	KCharacter	*pObj = OBJECT_MANAGER_PTR->FindCharacterByName(strUser, CHARACTER_PLAYER_TYPE, nWorldID);
7326 	if(!pObj || !(pObj->GetTitleBoard()->isShow()))

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\Client\Game\UI\UIPartyMessageBox.cpp 29 KB CPP 文件 2013/3/10 21:40:37 2018/9/13 20:35:20 2018/9/13 20:35:20 2
269 		}
270 		break;
271 	case MPVP2V2_BATTLE_TYPE: 	// 发送进入跨服 2v2 竞技场请求 2010-9-23 by rj
272 		{
273 			CXMPVP2v2Battle	msg;
549 			}
550 			break;
551 		case MPVP2V2_BATTLE_TYPE: // 2010-9-23 by rj 跨服 2v2 战场处理
552 			{
553 				CEGUI::String	strUtf32;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\DBShare\DBShare\Run\ServerConnectorManager_DBShare.cpp 6 KB CPP 文件 2013/3/10 21:40:49 2018/9/13 20:35:20 2018/9/13 20:35:20 1
261 		for( int32 i=0; i<g_Config.m_MultiGroupConfig.m_nGroupCount; i++ )
262 		{
263 			// 2010-9-27 使用跨服方式获取连接实例，跳过 IsEmpty 判定
264 			ServerConnector* pConnector = (ServerConnector*)GetConnectorForGroupMode(i);
265 			KCheck(pConnector);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\GLServer\GL\Messages\LWRequestPlayerLoginDispatch.cpp 13 KB CPP 文件 2013/3/10 21:41:14 2018/9/13 20:35:21 2018/9/13 20:35:21 1
191 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
192 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
194 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
195 		if (pFindPlayer == NULL)
196 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\MapServer\Server\Connector\ServerConnectorManager_MapServer.cpp 12 KB CPP 文件 2013/3/10 21:41:45 2018/9/13 20:35:22 2018/9/13 20:35:22 2
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());
479 		for (int32 i = 0; i < g_Config.m_MultiGroupConfig.m_nGroupCount; ++i)
480 		{
481 			// 使用跨服方式获取连接实例，跳过 IsEmpty 判定
482 			ServerConnector *pConnector = (ServerConnector *)GetConnectorForGroupMode(i);
483 			KCheck(pConnector);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\MapServer\Server\Map\MapCore.cpp 36 KB CPP 文件 2013/3/10 21:42:08 2018/9/13 20:35:22 2018/9/13 20:35:22 1
630 				m_bFirstInit = FALSE;
631 			}
632 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
633 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD || pSceneData->m_Type == MAP_TYPE_MSIGNUP)
634 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\MapServer\Server\Messages\CXMPVP2v2BattleDispatch.cpp 4 KB CPP 文件 2013/3/10 21:42:23 2018/9/13 20:35:23 2018/9/13 20:35:23 1
1 /***********************************************************
2 desc:	跨服 2v2 战场客户端请请求处理
3 auth:	crj
4 date:	2010-9-21

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\MapServer\Server\Messages\CXUseItemDispatch.cpp 8 KB CPP 文件 2013/3/10 21:42:41 2018/9/13 20:35:23 2018/9/13 20:35:23 1
117 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
118 	{
119 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
120 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
121 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\MapServer\Server\Messages\GXRequestGuildConvoyDispatch.cpp 4 KB CPP 文件 2013/3/10 21:42:49 2018/9/13 20:35:24 2018/9/13 20:35:24 1
77 	{
78 		KCheck(KGetCurrentTID() == pMap->m_ThreadID);
80 		// 2010-10-21 by rj 增加跨服报名场景可以接收到拉兽召唤
81 		if(pMap->GetMapType() == MAP_TYPE_GAMELOGIC || pMap->GetMapType() == MAP_TYPE_MSIGNUP)
82 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\MapServer\Server\Messages\GXRetChangeSceneDispatch.cpp 5 KB CPP 文件 2013/3/10 21:42:49 2018/9/13 20:35:24 2018/9/13 20:35:24 1
106 				KCheck(pMapData);
108 				ID_t ServerID = pMapData->m_ServerID;
110 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
111 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
112 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\MapServer\Server\Messages\XXMPVP2v2BattleDispatch.cpp 5 KB CPP 文件 2013/3/10 21:42:55 2018/9/13 20:35:24 2018/9/13 20:35:24 1
1 /***********************************************************
2 desc:	跨服 2v2 战场场景通知消息处理
3 auth:	crj
4 date:	2010-9-23

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\MapServer\Server\Messages\Delegater\ChangeMapDelegater.cpp 35 KB CPP 文件 2013/3/11 12:36:38 2018/9/13 20:35:23 2018/9/13 20:35:23 2
1215 		pPlayer->ClearMutexState(MS_Fuben);
1216 	}
1218 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1219 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1220 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\MapServer\Server\Messages\Delegater\GXCountryDispatchDelegater.cpp 24 KB CPP 文件 2013/3/11 12:36:39 2018/9/13 20:35:24 2018/9/13 20:35:24 2
224 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
225 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
226 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
227 				&&	pMap->GetMapType() != MAP_TYPE_MSIGNUP
228 				) 
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				&&	pMap->GetMapType() != MAP_TYPE_MSIGNUP
280 				)

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\MapServer\Server\Other\MPVP2v2Battle.cpp 31 KB CPP 文件 2013/3/10 21:43:14 2018/9/13 20:35:25 2018/9/13 20:35:25 2
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
548 			nLevelFlag = 0;
549 		}
551 		// 报名场景必须在这个跨服战场服务器上
552 		Map	*pMap = g_pMapManager->GetMap((MapID_t)m_SceneList.m_aScene[i]);
553 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\MapServer\Server\Other\MPVPBattleManager.cpp 7 KB CPP 文件 2013/3/10 21:43:14 2018/9/13 20:35:25 2018/9/13 20:35:25 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
95 	__UNGUARD__ return FALSE;
96 }
98 // 以类型方式获得跨服战场类
99 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVPBattleType nType)
100 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\MapServer\Server\Run\DaemonThread.cpp 8 KB CPP 文件 2013/3/10 21:43:18 2018/9/13 20:35:25 2018/9/13 20:35:25 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\MapServer\Server\Run\Server.cpp 30 KB CPP 文件 2013/3/10 21:43:19 2018/9/13 20:35:25 2018/9/13 20:35:25 1
543 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTopListCacheMgr...OK");
544 	
545 	// 跨服战场管理器 2010-10-13 by rj
546 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
547 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\MapServer\Server\Script\LuaFunction_Scene.cpp 184 KB CPP 文件 2013/3/10 21:43:28 2018/9/13 20:35:25 2018/9/13 20:35:25 14
1456 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1458 	KCheck(szName);
1460 	// 2010-11-2 对发送脚本邮件进行跨服支持
1461 	ObjID_t selfId = Lua_ValueToNumber(L, 7);
1462 	BEGPLAYERDEFINE("LuaFunction_SendScriptMail");
5359 	return 0;
5360 }
5363 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5364 int32 LuaFunction_MPVP2v2RegisterScene(Lua_State *L)
5365 {
5386 	LUA_RETURNERROR_1;
5387 }
5389 // 跨服 2v2 战场场景报名查询函数 by rj 2010-9-21
5390 int32 LuaFunction_MPVP2v2SignupState(Lua_State *L)
5391 {
5448 	return 0;
5449 }
5451 // 跨服 2v2 战场场景报名函数 by rj 2010-9-21
5452 int32 LuaFunction_MPVP2v2Signup(Lua_State *L)
5453 {
5510 	return 0;
5511 }
5513 // 跨服 2v2 战场场景查询是否报名函数 by rj 2010-9-25
5514 int32 LuaFunction_MPVP2v2IsSignup(Lua_State *L)
5515 {
5544 	return 0;
5545 }
5547 // 跨服 2v2 战场场景启用战场 UI 面板 by rj 2010-9-28
5548 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5549 {
5591 	return 0;
5592 }
5594 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5595 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5596 //{
5618 //}
5619 //
5620 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5621 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5622 //{
5688 //}
5689 //
5690 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5691 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5692 //{
5758 //}
5759 //
5760 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5761 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5762 //{
5792 //}
5793 //
5794 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
5795 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5796 //{
5839 //}
5840 //
5841 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
5842 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
5843 //{
5891 //}
5892 //
5893 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
5894 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
5895 //{
5936 //}
5937 //
5938 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
5939 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
5940 //{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\MapServer\Server\Script\LuaSystem_Function.cpp 101 KB CPP 文件 2013/3/10 21:43:31 2018/9/13 20:35:25 2018/9/13 20:35:25 1
888 	m_LuaVM.RegisterFunction("PVP2v2AskBattleSceneEnter", (void *) (LuaFunction_PVP2v2AskBattleSceneEnter));
889 	m_LuaVM.RegisterFunction("SetPVP2v2BattleDisable", (void *) (LuaFunction_SetPVP2v2BattleDisable));
890 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterScene));	// 跨服 2v2 战场扩充函数 by rj 2010-9-21 
891 	m_LuaVM.RegisterFunction("MPVP2v2SignupState", (void *) (LuaFunction_MPVP2v2SignupState));
892 	m_LuaVM.RegisterFunction("MPVP2v2Signup", (void *) (LuaFunction_MPVP2v2Signup));

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\Share\Connector\ConnectorManager.cpp 14 KB CPP 文件 2013/3/10 11:55:42 2018/9/13 20:35:25 2018/9/13 20:35:25 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ConnectorID_t pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\Share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/10 11:55:43 2018/9/13 20:35:25 2018/9/13 20:35:25 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ConnectorID_t ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\Share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/10 11:55:43 2018/9/13 20:35:25 2018/9/13 20:35:25 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ID_t serverid,ConnectorID_t& connID)
200 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB1\Share\Core\Setting.cpp 70 KB CPP 文件 2013/3/10 11:55:47 2018/9/13 20:35:25 2018/9/13 20:35:25 3
279 /*
280 =======================================================================================================================
281  加载跨服配置信息
282 =======================================================================================================================
283 */
288 	Configer	ini(FILE_MULTIGROUPCONFIG);
290 	m_MultiGroupConfig.m_nGroupCount = ini.Get_Property_Int( "System", "GroupCount" );
292 	// 跨服战场最大场景数量配置 2010-9-23 by rj
293 	m_MultiGroupConfig.m_nMax2v2SceneCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
294 	m_MultiGroupConfig.m_nMax6v6SceneCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
308 		m_MultiGroupConfig.m_GLServerInfo[i].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
309 		
310 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
312 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
314 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB3\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 13 KB CPP 文件 2013/3/10 12:01:26 2018/9/13 20:35:33 2018/9/13 20:35:33 1
191 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
192 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
194 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
195 		if (pFindPlayer == NULL)
196 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB3\src\khan2-glserver\XGBattleDispatch.cpp 81 KB CPP 文件 2013/3/10 12:01:42 2018/9/13 20:35:34 2018/9/13 20:35:34 12
2502 }
2504 /***********************************************************
2505 desc:	跨服战场 XG 服务器消息处理
2506 auth:	rj
2507 date:	2011-2-14
2515 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2516 	{
2517 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2518 		static IntegerHashMap mapMPVP2v2SignupRecord;
2519 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2521 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2522 		}
2524 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2525 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2526 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2543 		case MPVP_BATTLE_RETSTATE:
2544 			{
2545 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名
2546 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2547 				{
2577 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2578 				KCheck(pServePlayer_Target);
2580 				// 转发跨服战场进入通知到报名玩家所在 Map
2581 				GXMPVPBattle msg;
2582 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2686 					}
2687 				}
2689 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2690 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2691 				msg.SetSignupType(pKMessage->GetSignupType());
2700 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2701 				KCheck(pServePlayer_Target);
2703 				// 转发跨服战场状态到报名玩家所在 Map
2704 				GXMPVPBattle msg;
2705 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2718 				if (iServerID)
2719 				{
2720 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2721 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2722 					KCheck(pServePlayer_Target);
2741 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2742 				KCheck(pServePlayer_Target);
2744 				// 转发跨服战场进入响应到报名玩家所在 Map
2745 				GXMPVPBattle msg;
2746 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB3\src\khan2-mapserver\ChangeMapDelegater.cpp 35 KB CPP 文件 2013/3/10 12:02:20 2018/9/13 20:35:34 2018/9/13 20:35:34 2
1216 		pPlayer->ClearMutexState(MS_Fuben);
1217 	}
1219 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1220 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1221 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB3\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 12:02:04 2018/9/13 20:35:34 2018/9/13 20:35:34 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB3\src\khan2-mapserver\CXItemDispatch.cpp 60 KB CPP 文件 2013/3/10 12:02:11 2018/9/13 20:35:34 2018/9/13 20:35:34 1
1956 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
1957 	{
1958 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
1959 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1960 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB3\src\khan2-mapserver\GXBattleDispatch.cpp 52 KB CPP 文件 2013/3/10 12:02:31 2018/9/13 20:35:35 2018/9/13 20:35:35 6
1452 }
1454 /***********************************************************
1455 desc:	跨服战场 GX 服务器消息处理
1456 auth:	rj
1457 date:	2011-2-14
1474 			case MPVP_BATTLE_SIGNUP:
1475 				{
1476 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1478 					CMPVP2v2Battle *pMPVP2v2Battle = (CMPVP2v2Battle *)g_pMPVPBattleManager->GetMPVPBattleByType(MPVP_BATTLE_TYPE_2V2);
1479 					KCheck(pMPVP2v2Battle);
1524 						return MP_CONTINUE;
1525 					}
1527 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1528 					pMPVP2v2Battle->TellPlayerEnterMap(pKMessage->GetSNID(), pConnector);
1529 				}
1570 			case MPVP_BATTLE_RETSTATE:
1571 				{
1572 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1573 					pMap->GetLuaSystem()->RunScriptFunction
1574 						(
1586 			case MPVP_BATTLE_RES_ENTERSCENE:
1587 				{
1588 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1589 					pMap->GetLuaSystem()->RunScriptFunction
1590 						(
1617 }
1619 /***********************************************************
1620 desc:	跨服战场场景通知消息处理
1621 auth:	rj
1622 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB3\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 26 KB CPP 文件 2013/3/10 12:02:32 2018/9/13 20:35:35 2018/9/13 20:35:35 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB3\src\khan2-mapserver\GXMapDispatch.cpp 16 KB CPP 文件 2013/3/10 12:02:36 2018/9/13 20:35:35 2018/9/13 20:35:35 1
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB3\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 12:02:54 2018/9/13 20:35:35 2018/9/13 20:35:35 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB3\src\khan2-mapserver\LuaFunction_Map.cpp 182 KB CPP 文件 2013/3/10 12:02:58 2018/9/13 20:35:35 2018/9/13 20:35:35 11
1455 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1457 	KCheck(szName);
1459 	// 2010-11-2 对发送脚本邮件进行跨服支持
1460 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1461 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5360 	return 0;
5361 }
5363 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5364 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5365 {
5386 	LUA_RETURNERROR_1;
5387 }
5389 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5390 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5391 {
5433 	return 0;
5434 }
5436 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5437 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5438 //{
5460 //}
5461 //
5462 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5463 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5464 //{
5530 //}
5531 //
5532 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5533 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5534 //{
5600 //}
5601 //
5602 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5603 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5604 //{
5634 //}
5635 //
5636 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
5637 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5638 //{
5681 //}
5682 //
5683 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
5684 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
5685 //{
5733 //}
5734 //
5735 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
5736 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
5737 //{
5778 //}
5779 //
5780 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
5781 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
5782 //{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB3\src\khan2-mapserver\LuaSystem_Function.cpp 105 KB CPP 文件 2013/3/10 12:03:05 2018/9/13 20:35:35 2018/9/13 20:35:35 1
891 	m_LuaVM.RegisterFunction("PVP2v2AskBattleSceneEnter", (void *) (LuaFunction_PVP2v2AskBattleMapEnter));
892 	m_LuaVM.RegisterFunction("SetPVP2v2BattleDisable", (void *) (LuaFunction_SetPVP2v2BattleDisable));
893 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));	// 跨服 2v2 战场扩充函数 by rj 2010-9-21 
894 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));
895 	m_LuaVM.RegisterFunction("PVP6v6RegisterScene", (void *) (LuaFunction_PVP6v6RegisterMap));

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB3\src\khan2-mapserver\MapCore.cpp 36 KB CPP 文件 2013/3/10 12:03:07 2018/9/13 20:35:35 2018/9/13 20:35:35 1
635 				m_bFirstInit = FALSE;
636 			}
637 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
638 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
639 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB3\src\khan2-mapserver\MapServer.cpp 31 KB CPP 文件 2013/3/10 12:03:09 2018/9/13 20:35:35 2018/9/13 20:35:35 1
550 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
551 	
552 	// 跨服战场管理器 2010-10-13 by rj
553 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
554 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB3\src\khan2-mapserver\MPVP2v2Battle.cpp 29 KB CPP 文件 2013/3/10 12:03:05 2018/9/13 20:35:35 2018/9/13 20:35:35 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
124 	{
125 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
126 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
127 		if (FindSignup(pSignupPlayers[i].uSNID))
128 		{
470 			nLevelFlag = 0;
471 		}
473 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
474 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
475 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB3\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 12:03:05 2018/9/13 20:35:35 2018/9/13 20:35:35 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
91 	__UNGUARD__ return FALSE;
92 }
94 // 以类型方式获得跨服战场类
95 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
96 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB3\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 12 KB CPP 文件 2013/3/10 12:03:27 2018/9/13 20:35:36 2018/9/13 20:35:36 1
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB3\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/10 21:43:38 2018/9/13 20:35:36 2018/9/13 20:35:36 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB3\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/10 21:43:39 2018/9/13 20:35:36 2018/9/13 20:35:36 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB3\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/10 21:43:39 2018/9/13 20:35:36 2018/9/13 20:35:36 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
200 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB3\src\khan2-share\Core\Setting.cpp 72 KB CPP 文件 2013/3/10 21:43:43 2018/9/13 20:35:36 2018/9/13 20:35:36 3
286 /*
287 =======================================================================================================================
288  加载跨服配置信息
289 =======================================================================================================================
290 */
300 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
301 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
303 	// 跨服战场最大场景数量配置 2010-9-23 by rj
304 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
305 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
319 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
320 		
321 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
323 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
325 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-client\UIMap.cpp 23 KB CPP 文件 2013/3/10 12:05:28 2018/9/13 20:35:45 2018/9/13 20:35:45 1
449 		case MAP_POINT_TRANSER_NPC:		szChildWinType = MAP_POINT_TYPE_TRANSER_NPC;	break;
450 		case MAP_POINT_MONSTER:			szChildWinType = MAP_POINT_TYPE_MONSTER;		break;
452 		// 跨服6v6的旗子
453 		case MAP_POINT_OneLevelFlag:			szChildWinType = MAP_POINT_TYPE_ONELEVELFLAG; break;
454 		case MAP_POINT_TwoLevelFlag:			szChildWinType = MAP_POINT_TYPE_TWOLEVELFLAG; break;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-client\UIPartyMessageBox.cpp 33 KB CPP 文件 2013/3/10 12:05:29 2018/9/13 20:35:45 2018/9/13 20:35:45 1
404 		}
405 		break;
407 	case MGUILD_BATTLE_TYPE: // 跨服帮会战
408 		{
409 			CXMPVPBattle msg;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-dbshare\MKLogicManager.cpp 105 KB CPP 文件 2013/3/10 12:06:07 2018/9/13 20:35:45 2018/9/13 20:35:45 1
3613 }
3615 /************************************************************************/
3616 /* 跨服战积分相关                                                       */
3617 /************************************************************************/
3618 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-glserver\GL.cpp 42 KB CPP 文件 2013/3/10 12:06:15 2018/9/13 20:35:46 2018/9/13 20:35:46 2
417 	KCheck(g_pGuildBattleManager);
418 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildBattleManager...OK");
420 	//跨服帮战的管理器
421 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new MultiGuildBattleManager ... ");
422 	g_pMGuildBattleManager = new MGuildBattleManager;
500 	KCheck(g_pGuildCenter);
501 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildManager...OK");
503 	//跨服战积分管理器
504 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMPVPPointManager ... ");
505 	g_pMPVPPointManager = new MPVPPointManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 14 KB CPP 文件 2013/3/10 12:06:24 2018/9/13 20:35:46 2018/9/13 20:35:46 1
208 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
209 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
211 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
212 		if (pFindPlayer == NULL)
213 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-glserver\MGuildBattleManager.cpp 14 KB CPP 文件 2013/3/10 12:06:27 2018/9/13 20:35:46 2018/9/13 20:35:46 8
94 	// 当前赛季进度
95 	int32 nSeasonWeek = (GET_TIME().GetWeekNumOfYear() - g_Config.m_ConfigInfo.m_MPVPGuildBeginWeek) % g_Config.m_ConfigInfo.m_MPVPPointPeriodWeeks;
97 	// 取得跨服服务器
98 	int32 nServerNum = 0;
99 	ut_id serverIDs[SERVER_CAPACITY] = {-1};
145 	//	if (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / nServerNum <= 0)
146 	//		return serverIDs[0];
148 	//	// 2011-07-26 by rj 改进原来的等分算法，在所连跨服服务器数量等于 2 时用用 4/6 算法来解决高分帮会人数过多的问题
149 	//	int32 iSeg = iIndex / (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / (nServerNum <= 2 ? 2.5f : nServerNum) );
150 	//	if (iSeg >= nServerNum)
166 	if (uPrevSignupTime)
167 	{
168 		// 超时保护（防止报名完成后跨服服务器宕机导致 GL 无法清理报名）
169 		if (GET_TIME().GetCTime() - uPrevSignupTime > 90*60)
170 		{
258 	if(!pGuild || pGuild->GetGuildID() == INVALID_KHAN_ID)
259 		return FALSE;
261 	// 转发跨服战场进入通知到报名玩家所在 Map
262 	GXMPVPBattle msg;
263 	msg.SetBattleType(MPVP_GUILD_BATTLE_TYPE);
416 				aSignupPlayers[0].GuildPoint = pPoint->m_nCurrentPoint;
417 			}
419 			// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
420 			msg.SetSubType(MPVP_BATTLE_SIGNUP);
421 			msg.SetSignupType(pKMessage->GetSignupType());
470 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
471 				KCheck(pServePlayer_Target);
473 				// 转发跨服战场状态到报名玩家所在 Map
474 				GXMPVPBattle msg;
475 				msg.SetBattleType(pKMessage->GetBattleType());
501 				return MP_CONTINUE;
502 			}
504 			// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
505 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pMatch->nServerID);
506 			KCheck(pServePlayer_Target);
523 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
524 			KCheck(pServePlayer_Target);
526 			// 转发跨服战场进入响应到报名玩家所在 Map
527 			GXMPVPBattle msg;
528 			msg.SetBattleType(pKMessage->GetBattleType());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-glserver\MPVPGuildPoint.cpp 8 KB CPP 文件 2013/3/10 12:06:27 2018/9/13 20:35:46 2018/9/13 20:35:46 3
1 /************************************************************************/
2 /* 帮会跨服战积分信息接口的具体实现                                     */
3 /************************************************************************/
5 #include "stdafx.h"
195 /*
196 =======================================================================================================================
197 处理不同跨服战各自的额外参数填充
198 =======================================================================================================================
199 */
223 /*
224 =======================================================================================================================
225 加载跨服帮战每周的场次信息
226 =======================================================================================================================
227 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-glserver\MPVPPointArithmetic.cpp 2 KB CPP 文件 2013/3/10 12:06:28 2018/9/13 20:35:46 2018/9/13 20:35:46 3
1 /************************************************************************/
2 /* 跨服战积分算法器,负责各种跨服战积分的计算逻辑实现                    */
3 /************************************************************************/
5 #include "stdafx.h"
16 /*
17 ===============================================================================================================
18 根据实力来计算跨服帮会的加权分
19 帮会实力-(错过的场次*放弃损失的分数)
20 ===============================================================================================================

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-glserver\MPVPPointInfo.cpp 14 KB CPP 文件 2013/3/10 12:06:28 2018/9/13 20:35:46 2018/9/13 20:35:46 2
1 /************************************************************************/
2 /* 跨服战积分信息接口的具体实现                                         */
3 /************************************************************************/
5 #include "stdafx.h"
72 /*
73 =======================================================================================================================
74 获取跨服积分的数据信息
75 =======================================================================================================================
76 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-glserver\MPVPPointManager.cpp 11 KB CPP 文件 2013/3/10 12:06:28 2018/9/13 20:35:46 2018/9/13 20:35:46 5
1 /************************************************************************/
2 /* 跨服战积分管理器的实现                                               */
3 /************************************************************************/
5 #include "stdafx.h"
98 /*
99 ===============================================================================================================
100 注册跨服积分的实现
101 ===============================================================================================================
102 */
220 /*
221 ===============================================================================================================
222 获取指定类型跨服战全部积分信息
223 ===============================================================================================================
224 */
243 /*
244 ===============================================================================================================
245 获取指定跨服战当前的赛季开始周
246 ===============================================================================================================
247 */
266 /*
267 ===============================================================================================================
268 获取指定跨服战当前周
269 ===============================================================================================================
270 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-glserver\MPVPToplist.cpp 8 KB CPP 文件 2013/3/10 12:06:29 2018/9/13 20:35:46 2018/9/13 20:35:46 2
1 /************************************************************************/
2 /* 跨服帮会战排行榜的具体实现		                                    */
3 /************************************************************************/
5 #include "stdafx.h"
25 /*
26 =======================================================================================================================
27 积分数据加载,从跨服积分管理器中加载需要的信息
28 =======================================================================================================================
29 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-glserver\ServerConnectorManager_GL.cpp 11 KB CPP 文件 2013/3/10 12:06:35 2018/9/13 20:35:46 2018/9/13 20:35:46 2
513 			_NET_TRY
514 			{
515 				// 跨服帮战管理器心跳
516 				ret = g_pMGuildBattleManager->HeartBeat(uTime);
517 				KCheck(ret);
523 			_NET_TRY
524 			{
525 				//处理跨服战积分管理器相关的心跳
526 				ret = g_pMPVPPointManager->HeartBeat(uTime);		
527 				KCheck(ret);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-glserver\TopListManager.cpp 17 KB CPP 文件 2013/3/10 12:06:40 2018/9/13 20:35:46 2018/9/13 20:35:46 1
152 	Register(HONOR_CHARIOT_TOP_LIST_BK,			new TopList,					"Chariot_Honor_bk" );
153 	// add by dragon 战车排行榜 }
155 	// 跨服帮会战排行榜
156 	Register(MPVP_GUILD_CURRENT,			new CurrentMPVPGuildTopList,		"MPVP_Guild_Current" );
157 	Register(MPVP_GUILD_CURRENT_BK,			new TopList,				"MPVP_Guild_Current_bk" );

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-glserver\XGBattleDispatch.cpp 92 KB CPP 文件 2013/3/10 12:06:44 2018/9/13 20:35:46 2018/9/13 20:35:46 25
2507 }
2509 /***********************************************************
2510 desc:	跨服战场 XG 服务器消息处理
2511 auth:	rj
2512 date:	2011-2-14
2520 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2521 	{
2522 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2523 		static IntegerHashMap mapMPVP2v2SignupRecord;
2524 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2526 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2527 		}
2529 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2530 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2531 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2548 		case MPVP_BATTLE_RETSTATE:
2549 			{
2550 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名。值是当前报名的时间。
2551 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2552 				{
2582 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2583 				KCheck(pServePlayer_Target);
2585 				// 转发跨服战场进入通知到报名玩家所在 Map
2586 				GXMPVPBattle msg;
2587 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2613 				if (uPrevSignupTime)
2614 				{
2615 					// 6 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2616 					if (GET_TIME().GetCTime() - uPrevSignupTime > 360)
2617 					{
2719 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2720 				}
2722 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2723 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2724 				msg.SetSignupType(pKMessage->GetSignupType());
2733 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2734 				KCheck(pServePlayer_Target);
2736 				// 转发跨服战场状态到报名玩家所在 Map
2737 				GXMPVPBattle msg;
2738 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2751 				if (iServerID)
2752 				{
2753 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2754 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2755 					KCheck(pServePlayer_Target);
2774 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2775 				KCheck(pServePlayer_Target);
2777 				// 转发跨服战场进入响应到报名玩家所在 Map
2778 				GXMPVPBattle msg;
2779 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2790 	else if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_6V6)
2791 	{
2792 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2793 		static IntegerHashMap mapMPVP6v6SignupRecord;
2794 		if (mapMPVP6v6SignupRecord.GetMaxCount() == 0)
2796 			mapMPVP6v6SignupRecord.InitTable(MAX_WORLD_PLAYER);
2797 		}
2799 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2800 		static IntegerHashMap mapMPVP6v6EnterBattleRecord;
2801 		if (mapMPVP6v6EnterBattleRecord.GetMaxCount() == 0)
2818 		case MPVP_BATTLE_RETSTATE:
2819 			{
2820 				// 记录这次跨服 6v6 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 6v6 的报名。值是当前报名的时间。
2821 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2822 				{
2852 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2853 				KCheck(pServePlayer_Target);
2855 				// 转发跨服战场进入通知到报名玩家所在 Map
2856 				GXMPVPBattle msg;
2857 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
2883 				if (uPrevSignupTime)
2884 				{
2885 					// 11 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2886 					if (GET_TIME().GetCTime() - uPrevSignupTime > 660)
2887 					{
2989 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2990 				}
2992 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2993 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2994 				msg.SetSignupType(pKMessage->GetSignupType());
3003 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
3004 				KCheck(pServePlayer_Target);
3006 				// 转发跨服战场状态到报名玩家所在 Map
3007 				GXMPVPBattle msg;
3008 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
3021 				if (iServerID)
3022 				{
3023 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
3024 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
3025 					KCheck(pServePlayer_Target);
3044 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
3045 				KCheck(pServePlayer_Target);
3047 				// 转发跨服战场进入响应到报名玩家所在 Map
3048 				GXMPVPBattle msg;
3049 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-mapserver\ChangeMapDelegater.cpp 36 KB CPP 文件 2013/3/10 12:07:23 2018/9/13 20:35:46 2018/9/13 20:35:46 2
1237 		pPlayer->ClearMutexState(MS_Fuben);
1238 	}
1240 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1241 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1242 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 12:07:07 2018/9/13 20:35:47 2018/9/13 20:35:47 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-mapserver\CXItemDispatch.cpp 62 KB CPP 文件 2013/3/10 12:07:14 2018/9/13 20:35:47 2018/9/13 20:35:47 1
2000 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
2001 	{
2002 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
2003 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2004 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-mapserver\GMCommand.cpp 199 KB CPP 文件 2013/3/10 12:07:35 2018/9/13 20:35:47 2018/9/13 20:35:47 1
543 	REGISTER_HANDLER(addchariothonour);	// \gm addchariothonour =100	增加战车荣誉
544 	REGISTER_HANDLER(unlockhorse);		// \gm unlockhorse =objid =horseindex  强制解锁骑乘
545 	REGISTER_HANDLER(addguildwin);		// \gm addguildwin =num 增加跨服帮战胜利次数
547 	__UNGUARD__
548 }

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-mapserver\GXBattleDispatch.cpp 55 KB CPP 文件 2013/3/10 12:07:35 2018/9/13 20:35:47 2018/9/13 20:35:47 6
1452 }
1454 /***********************************************************
1455 desc:	跨服战场 GX 服务器消息处理
1456 auth:	rj
1457 date:	2011-2-14
1474 			case MPVP_BATTLE_SIGNUP:
1475 				{
1476 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1478 					IMPVPBattle *pMPVPBattle = g_pMPVPBattleManager->GetMPVPBattleByType((MPVP_BATTLE_TYPE)pKMessage->GetBattleType());
1479 					//KCheck(pMPVPBattle);
1542 						return MP_CONTINUE;
1543 					}
1545 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1546 					pMPVPBattle->TellPlayerEnterMap(pKMessage, pConnector);
1547 				}
1588 			case MPVP_BATTLE_RETSTATE:
1589 				{
1590 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1591 					pMap->GetLuaSystem()->RunScriptFunction
1592 						(
1604 			case MPVP_BATTLE_RES_ENTERSCENE:
1605 				{
1606 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1607 					pMap->GetLuaSystem()->RunScriptFunction
1608 						(
1635 }
1637 /***********************************************************
1638 desc:	跨服战场场景通知消息处理
1639 auth:	rj
1640 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 28 KB CPP 文件 2013/3/10 12:07:37 2018/9/13 20:35:47 2018/9/13 20:35:47 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-mapserver\GXMapDispatch.cpp 16 KB CPP 文件 2013/3/10 12:07:41 2018/9/13 20:35:47 2018/9/13 20:35:47 1
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 12:08:01 2018/9/13 20:35:47 2018/9/13 20:35:47 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-mapserver\LuaFunction_Map.cpp 198 KB CPP 文件 2013/3/10 12:08:06 2018/9/13 20:35:48 2018/9/13 20:35:48 15
1523 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1525 	KCheck(szName);
1527 	// 2010-11-2 对发送脚本邮件进行跨服支持
1528 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1529 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5491 	return 0;
5492 }
5494 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5495 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5496 {
5517 	LUA_RETURNERROR_1;
5518 }
5520 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5521 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5522 {
5564 	return 0;
5565 }
5567 // 跨服 6v6 战场场景注册函数
5568 int32 LuaFunction_MPVP6v6RegisterMap(Lua_State *L)
5569 {
5590 	LUA_RETURNERROR_1;
5591 }
5593 // 跨服 6v6 战场场景更新战场 UI 面板
5594 int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5595 {
5637 	return 0;
5638 }
5640 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5641 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5642 //{
5664 //}
5665 //
5666 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5667 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5668 //{
5734 //}
5735 //
5736 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5737 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5738 //{
5804 //}
5805 //
5806 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5807 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5808 //{
5838 //}
5839 //
5840 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
5841 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5842 //{
5885 //}
5886 //
5887 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
5888 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
5889 //{
5937 //}
5938 //
5939 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
5940 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
5941 //{
5982 //}
5983 //
5984 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
5985 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
5986 //{
6828 	return 0;
6829 }
6831 // 跨服战场场景注册函数
6832 int32 LuaFunction_MPVPRegisterMap(Lua_State *L)
6833 {
6923 	if(pMap)
6924 	{
6925 		// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
6926 		int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
6927 			(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-mapserver\LuaSystem_Function.cpp 118 KB CPP 文件 2013/3/10 12:08:12 2018/9/13 20:35:48 2018/9/13 20:35:48 10
1167 	m_LuaVM.RegisterFunction("AddBattleHonour", (void *) (LuaFunction_AddBattleHonour));							// 增加战功
1168 	m_LuaVM.RegisterFunction("SubBattleHonour", (void *) (LuaFunction_SubBattleHonour));							// 减少战功
1169 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));					// 跨服 2v2 战场注册场景 
1170 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));			// 跨服 2v2 战场名称显示
1171 	m_LuaVM.RegisterFunction("MPVP6v6RegisterScene", (void *) (LuaFunction_MPVP6v6RegisterMap));					// 跨服 6v6 战场注册场景
1172 	m_LuaVM.RegisterFunction("SetMPVP6v6BattleDisable", (void *) (LuaFunction_SetMPVP6v6BattleDisable));			// 跨服 6v6 战场名称显示
1173 	m_LuaVM.RegisterFunction("MPVPRegisterMap", (void *) (LuaFunction_MPVPRegisterMap));							// 跨服战场注册场景
1174 	m_LuaVM.RegisterFunction("CountryIsFortuneTimeEx", (void *) (LuaFunction_CountryIsFortuneTimeEx));				// 获取特定国家的国运是否进行
1175 	m_LuaVM.RegisterFunction("AddCountryResourceWithRecall", (void *) (LuaFunction_AddCountryResourceWithRecall));	// 比较并增加的修改资源,保证同步
1283 	m_LuaVM.RegisterFunction("IsLeague", (void*)(LuaFunction_IsLeague));											// 判断两国是否是弱国联盟
1284 	m_LuaVM.RegisterFunction("CountryLeagueZhaoji", (void*)(LuaFunction_CountryLeagueZhaoji));						// 发送联盟召集令
1285 	m_LuaVM.RegisterFunction("AskEnterMGuildBattleScene",(void*)(LuaFunction_AskEnterMGuildBattleScene)); 			// 请求进入跨服帮会战场
1286 	m_LuaVM.RegisterFunction("MGuildBattleSignup",(void*)(LuaFunction_MGuildBattleSignup)); 						// 跨服帮会战报名
1287 	m_LuaVM.RegisterFunction("MGuildBattleResult",(void*)(LuaFunction_MGuildBattleResult)); 						// 跨服帮会战结果
1288 	m_LuaVM.RegisterFunction("MGuildBattleSeasonWeek",(void*)(LuaFunction_MGuildBattleSeasonWeek)); 				// 跨服帮会战赛季当前周数
1289 	m_LuaVM.RegisterFunction("GetMGuildNumOfBattleCurSeason", (void*)(LuaFunction_GetMGuildNumOfBattleCurSeason));	// 获取跨服帮战当前赛季的场数
1290 	m_LuaVM.RegisterFunction("SetEquipPokerData",(void*)(LuaFunction_SetEquipPokerData));							// 设置装备扑克牌属性
1291 	m_LuaVM.RegisterFunction("SetEquipPokerCount",(void*)(LuaFunction_SetEquipPokerCount));							// 设置装备扑克牌个数

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-mapserver\MapCore.cpp 38 KB CPP 文件 2013/3/10 12:08:15 2018/9/13 20:35:48 2018/9/13 20:35:48 1
671 				m_bFirstInit = FALSE;
672 			}
673 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
674 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
675 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-mapserver\MapServer.cpp 33 KB CPP 文件 2013/3/10 12:08:18 2018/9/13 20:35:48 2018/9/13 20:35:48 1
578 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
579 	
580 	// 跨服战场管理器 2010-10-13 by rj
581 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
582 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-mapserver\MGuildBattle.cpp 28 KB CPP 文件 2013/3/10 12:08:13 2018/9/13 20:35:48 2018/9/13 20:35:48 3
1 /***********************************************************
2 desc:	跨服帮会战场实现
3 auth:	txp
4 date:	2011-6-10
122 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，
123 		// 为这个很少出现的异常进行处理。
124 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，
125 		// 如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
126 		if (FindSignup(pSignupPlayers[i].iWorldID, pSignupPlayers[i].GuildID))
427 		m_MatchList.m_aMatch[m_MatchList.m_nCount].m_bFinished = FALSE;
429 		int32 nLevelFlag=0, nDisLevel = s1.m_nSignupLevel - s2.m_nSignupLevel;
431 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
432 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
433 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-mapserver\MPVP2v2Battle.cpp 35 KB CPP 文件 2013/3/10 12:08:13 2018/9/13 20:35:48 2018/9/13 20:35:48 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
249 		{
250 			// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
251 			// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
252 			if (FindSignup(pSignupPlayers[i].uSNID))
253 			{
649 			nLevelFlag = 0;
650 		}
652 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
653 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
654 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-mapserver\MPVP6v6Battle.cpp 30 KB CPP 文件 2013/3/10 12:08:14 2018/9/13 20:35:48 2018/9/13 20:35:48 3
1 /***********************************************************
2 desc:	跨服 6v6 战场实现
3 auth:	txp
4 date:	2011-3-16
154 	{
155 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
156 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
157 		if (FindSignup(pSignupPlayers[i].uSNID))
158 		{
536 			nLevelFlag = 0;
537 		}
539 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
540 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
541 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 12:08:14 2018/9/13 20:35:48 2018/9/13 20:35:48 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
97 	__UNGUARD__ return FALSE;
98 }
100 // 以类型方式获得跨服战场类
101 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
102 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 12 KB CPP 文件 2013/3/10 12:08:36 2018/9/13 20:35:48 2018/9/13 20:35:48 1
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/10 21:47:23 2018/9/13 20:35:48 2018/9/13 20:35:48 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/10 21:47:24 2018/9/13 20:35:48 2018/9/13 20:35:48 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/10 21:47:24 2018/9/13 20:35:48 2018/9/13 20:35:48 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
200 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-share\Core\Setting.cpp 79 KB CPP 文件 2013/3/10 21:47:28 2018/9/13 20:35:49 2018/9/13 20:35:49 4
289 /*
290 =======================================================================================================================
291  加载跨服配置信息
292 =======================================================================================================================
293 */
303 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
304 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
306 	// 跨服战场最大场景数量配置 2010-9-23 by rj
307 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
308 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
309 	
310 	m_MultiGroupConfig.m_nMaxMGuildMapCnt = ini.Get_Property_Int("MGuild", "Max_SceneCount");
311 	KCheckEx(m_MultiGroupConfig.m_nMaxMGuildMapCnt>0 && m_MultiGroupConfig.m_nMaxMGuildMapCnt<=MGUILD_MAX_MAPCOUNT, "跨服帮战场景数量要小于512");
313 // 	m_MultiGroupConfig.m_nMGuildBeginWeek = ini.Get_Property_Int("MGuild", "BeginWeek");
314 // 	KCheckEx(m_MultiGroupConfig.m_nMGuildBeginWeek>0 && m_MultiGroupConfig.m_nMGuildBeginWeek<=52, "起始周只能在1-52之间");
328 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
329 		
330 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
332 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
334 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-share\DataBase\ArchiveInterface.cpp 280 KB CPP 文件 2013/3/10 21:47:30 2018/9/13 20:35:49 2018/9/13 20:35:49 1
9694 }
9696 /************************************************************************/
9697 /* 跨服战积分相关                                                       */
9698 /************************************************************************/
9700 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OB5\src\khan2-share\DataBase\SqlStatement.cpp 20 KB CPP 文件 2013/3/10 21:47:31 2018/9/13 20:35:49 2018/9/13 20:35:49 1
249 char	*g_LoadLostItemInfo = "select aid,playerguid,srcplayerguid,srcplayername,guid,world,server,itemclass,creator,dataproperty,data,termendtime,islock,unlocktime,gmoptime from %s where aid>%u order by aid asc" ;
250 char	*g_DelLostItemInfo = "delete from %s where aid=%u";
252 // 跨服战积分相关处理
253 char	*LoadMPVPPointInfo = "select unitid, unitname, world, currentpoint, totalpoint, currentwintimes, currentjointimes, totalwintimes, totaljointimes, mpvptypename, currentweek, startweek, params from %s where valid = 1";
254 char	*SaveMPVPPointInfo = "call proc_save_mpvppoint(%d,\'%s\', %d, %d, %d, %d, %d, %d, %d, \'%s\', %d, %d, %d, 1)";

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-client\UIMap.cpp 23 KB CPP 文件 2013/3/10 21:52:34 2018/9/13 20:35:58 2018/9/13 20:35:58 1
449 		case MAP_POINT_TRANSER_NPC:		szChildWinType = MAP_POINT_TYPE_TRANSER_NPC;	break;
450 		case MAP_POINT_MONSTER:			szChildWinType = MAP_POINT_TYPE_MONSTER;		break;
452 		// 跨服6v6的旗子
453 		case MAP_POINT_OneLevelFlag:			szChildWinType = MAP_POINT_TYPE_ONELEVELFLAG; break;
454 		case MAP_POINT_TwoLevelFlag:			szChildWinType = MAP_POINT_TYPE_TWOLEVELFLAG; break;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-client\UIPartyMessageBox.cpp 33 KB CPP 文件 2013/3/10 21:52:35 2018/9/13 20:35:58 2018/9/13 20:35:58 1
404 		}
405 		break;
407 	case MGUILD_BATTLE_TYPE: // 跨服帮会战
408 		{
409 			CXMPVPBattle msg;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-dbshare\MKLogicManager.cpp 105 KB CPP 文件 2013/3/10 21:53:11 2018/9/13 20:35:59 2018/9/13 20:35:59 2
228 			{
229 			ArchiveNodeLogic<PlayerMK>* pLogicNode = (ArchiveNodeLogic<PlayerMK>*)GetNode(_Idx);
231 			// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
232 			uint32 uMaxPoolSize = MAX_POOL_SIZE;
233 			if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
3623 }
3625 /************************************************************************/
3626 /* 跨服战积分相关                                                       */
3627 /************************************************************************/
3628 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-glserver\GL.cpp 42 KB CPP 文件 2013/3/10 21:53:19 2018/9/13 20:35:59 2018/9/13 20:35:59 2
417 	KCheck(g_pGuildBattleManager);
418 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildBattleManager...OK");
420 	//跨服帮战的管理器
421 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new MultiGuildBattleManager ... ");
422 	g_pMGuildBattleManager = new MGuildBattleManager;
500 	KCheck(g_pGuildCenter);
501 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildManager...OK");
503 	//跨服战积分管理器
504 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMPVPPointManager ... ");
505 	g_pMPVPPointManager = new MPVPPointManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 14 KB CPP 文件 2013/3/10 21:53:27 2018/9/13 20:35:59 2018/9/13 20:35:59 1
208 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
209 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
211 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
212 		if (pFindPlayer == NULL)
213 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-glserver\MGuildBattleManager.cpp 14 KB CPP 文件 2013/3/10 21:53:30 2018/9/13 20:35:59 2018/9/13 20:35:59 8
94 	// 当前赛季进度
95 	int32 nSeasonWeek = (GET_TIME().GetWeekNumOfYear() - g_Config.m_ConfigInfo.m_MPVPGuildBeginWeek) % g_Config.m_ConfigInfo.m_MPVPPointPeriodWeeks;
97 	// 取得跨服服务器
98 	int32 nServerNum = 0;
99 	ut_id serverIDs[SERVER_CAPACITY] = {-1};
145 	//	if (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / nServerNum <= 0)
146 	//		return serverIDs[0];
148 	//	// 2011-07-26 by rj 改进原来的等分算法，在所连跨服服务器数量等于 2 时用用 4/6 算法来解决高分帮会人数过多的问题
149 	//	int32 iSeg = iIndex / (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / (nServerNum <= 2 ? 2.5f : nServerNum) );
150 	//	if (iSeg >= nServerNum)
166 	if (uPrevSignupTime)
167 	{
168 		// 超时保护（防止报名完成后跨服服务器宕机导致 GL 无法清理报名）
169 		if (GET_TIME().GetCTime() - uPrevSignupTime > 90*60)
170 		{
258 	if(!pGuild || pGuild->GetGuildID() == INVALID_KHAN_ID)
259 		return FALSE;
261 	// 转发跨服战场进入通知到报名玩家所在 Map
262 	GXMPVPBattle msg;
263 	msg.SetBattleType(MPVP_GUILD_BATTLE_TYPE);
416 				aSignupPlayers[0].GuildPoint = pPoint->m_nCurrentPoint;
417 			}
419 			// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
420 			msg.SetSubType(MPVP_BATTLE_SIGNUP);
421 			msg.SetSignupType(pKMessage->GetSignupType());
470 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
471 				KCheck(pServePlayer_Target);
473 				// 转发跨服战场状态到报名玩家所在 Map
474 				GXMPVPBattle msg;
475 				msg.SetBattleType(pKMessage->GetBattleType());
501 				return MP_CONTINUE;
502 			}
504 			// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
505 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pMatch->nServerID);
506 			KCheck(pServePlayer_Target);
523 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
524 			KCheck(pServePlayer_Target);
526 			// 转发跨服战场进入响应到报名玩家所在 Map
527 			GXMPVPBattle msg;
528 			msg.SetBattleType(pKMessage->GetBattleType());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-glserver\MPVPGuildPoint.cpp 8 KB CPP 文件 2013/3/10 21:53:30 2018/9/13 20:35:59 2018/9/13 20:35:59 3
1 /************************************************************************/
2 /* 帮会跨服战积分信息接口的具体实现                                     */
3 /************************************************************************/
5 #include "stdafx.h"
195 /*
196 =======================================================================================================================
197 处理不同跨服战各自的额外参数填充
198 =======================================================================================================================
199 */
223 /*
224 =======================================================================================================================
225 加载跨服帮战每周的场次信息
226 =======================================================================================================================
227 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-glserver\MPVPPointArithmetic.cpp 2 KB CPP 文件 2013/3/10 21:53:30 2018/9/13 20:35:59 2018/9/13 20:35:59 3
1 /************************************************************************/
2 /* 跨服战积分算法器,负责各种跨服战积分的计算逻辑实现                    */
3 /************************************************************************/
5 #include "stdafx.h"
16 /*
17 ===============================================================================================================
18 根据实力来计算跨服帮会的加权分
19 帮会实力-(错过的场次*放弃损失的分数)
20 ===============================================================================================================

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-glserver\MPVPPointInfo.cpp 14 KB CPP 文件 2013/3/10 21:53:31 2018/9/13 20:35:59 2018/9/13 20:35:59 2
1 /************************************************************************/
2 /* 跨服战积分信息接口的具体实现                                         */
3 /************************************************************************/
5 #include "stdafx.h"
72 /*
73 =======================================================================================================================
74 获取跨服积分的数据信息
75 =======================================================================================================================
76 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-glserver\MPVPPointManager.cpp 11 KB CPP 文件 2013/3/10 21:53:31 2018/9/13 20:35:59 2018/9/13 20:35:59 5
1 /************************************************************************/
2 /* 跨服战积分管理器的实现                                               */
3 /************************************************************************/
5 #include "stdafx.h"
98 /*
99 ===============================================================================================================
100 注册跨服积分的实现
101 ===============================================================================================================
102 */
220 /*
221 ===============================================================================================================
222 获取指定类型跨服战全部积分信息
223 ===============================================================================================================
224 */
243 /*
244 ===============================================================================================================
245 获取指定跨服战当前的赛季开始周
246 ===============================================================================================================
247 */
266 /*
267 ===============================================================================================================
268 获取指定跨服战当前周
269 ===============================================================================================================
270 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-glserver\MPVPToplist.cpp 8 KB CPP 文件 2013/3/10 21:53:31 2018/9/13 20:35:59 2018/9/13 20:35:59 2
1 /************************************************************************/
2 /* 跨服帮会战排行榜的具体实现		                                    */
3 /************************************************************************/
5 #include "stdafx.h"
25 /*
26 =======================================================================================================================
27 积分数据加载,从跨服积分管理器中加载需要的信息
28 =======================================================================================================================
29 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-glserver\ServerConnectorManager_GL.cpp 11 KB CPP 文件 2013/3/10 21:53:37 2018/9/13 20:36:00 2018/9/13 20:36:00 2
513 			_NET_TRY
514 			{
515 				// 跨服帮战管理器心跳
516 				ret = g_pMGuildBattleManager->HeartBeat(uTime);
517 				KCheck(ret);
523 			_NET_TRY
524 			{
525 				//处理跨服战积分管理器相关的心跳
526 				ret = g_pMPVPPointManager->HeartBeat(uTime);		
527 				KCheck(ret);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-glserver\TopListManager.cpp 17 KB CPP 文件 2013/3/10 21:53:43 2018/9/13 20:36:00 2018/9/13 20:36:00 1
152 	Register(HONOR_CHARIOT_TOP_LIST_BK,			new TopList,					"Chariot_Honor_bk" );
153 	// add by dragon 战车排行榜 }
155 	// 跨服帮会战排行榜
156 	Register(MPVP_GUILD_CURRENT,			new CurrentMPVPGuildTopList,		"MPVP_Guild_Current" );
157 	Register(MPVP_GUILD_CURRENT_BK,			new TopList,				"MPVP_Guild_Current_bk" );

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-glserver\XGBattleDispatch.cpp 92 KB CPP 文件 2013/3/10 21:53:45 2018/9/13 20:36:00 2018/9/13 20:36:00 25
2507 }
2509 /***********************************************************
2510 desc:	跨服战场 XG 服务器消息处理
2511 auth:	rj
2512 date:	2011-2-14
2520 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2521 	{
2522 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2523 		static IntegerHashMap mapMPVP2v2SignupRecord;
2524 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2526 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2527 		}
2529 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2530 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2531 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2548 		case MPVP_BATTLE_RETSTATE:
2549 			{
2550 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名。值是当前报名的时间。
2551 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2552 				{
2582 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2583 				KCheck(pServePlayer_Target);
2585 				// 转发跨服战场进入通知到报名玩家所在 Map
2586 				GXMPVPBattle msg;
2587 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2613 				if (uPrevSignupTime)
2614 				{
2615 					// 6 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2616 					if (GET_TIME().GetCTime() - uPrevSignupTime > 360)
2617 					{
2719 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2720 				}
2722 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2723 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2724 				msg.SetSignupType(pKMessage->GetSignupType());
2733 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2734 				KCheck(pServePlayer_Target);
2736 				// 转发跨服战场状态到报名玩家所在 Map
2737 				GXMPVPBattle msg;
2738 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2751 				if (iServerID)
2752 				{
2753 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2754 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2755 					KCheck(pServePlayer_Target);
2774 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2775 				KCheck(pServePlayer_Target);
2777 				// 转发跨服战场进入响应到报名玩家所在 Map
2778 				GXMPVPBattle msg;
2779 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2790 	else if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_6V6)
2791 	{
2792 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2793 		static IntegerHashMap mapMPVP6v6SignupRecord;
2794 		if (mapMPVP6v6SignupRecord.GetMaxCount() == 0)
2796 			mapMPVP6v6SignupRecord.InitTable(MAX_WORLD_PLAYER);
2797 		}
2799 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2800 		static IntegerHashMap mapMPVP6v6EnterBattleRecord;
2801 		if (mapMPVP6v6EnterBattleRecord.GetMaxCount() == 0)
2818 		case MPVP_BATTLE_RETSTATE:
2819 			{
2820 				// 记录这次跨服 6v6 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 6v6 的报名。值是当前报名的时间。
2821 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2822 				{
2852 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2853 				KCheck(pServePlayer_Target);
2855 				// 转发跨服战场进入通知到报名玩家所在 Map
2856 				GXMPVPBattle msg;
2857 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
2883 				if (uPrevSignupTime)
2884 				{
2885 					// 11 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2886 					if (GET_TIME().GetCTime() - uPrevSignupTime > 660)
2887 					{
2989 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2990 				}
2992 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2993 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2994 				msg.SetSignupType(pKMessage->GetSignupType());
3003 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
3004 				KCheck(pServePlayer_Target);
3006 				// 转发跨服战场状态到报名玩家所在 Map
3007 				GXMPVPBattle msg;
3008 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
3021 				if (iServerID)
3022 				{
3023 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
3024 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
3025 					KCheck(pServePlayer_Target);
3044 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
3045 				KCheck(pServePlayer_Target);
3047 				// 转发跨服战场进入响应到报名玩家所在 Map
3048 				GXMPVPBattle msg;
3049 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-mapserver\ChangeMapDelegater.cpp 37 KB CPP 文件 2013/3/10 21:54:25 2018/9/13 20:36:00 2018/9/13 20:36:00 2
1267 		pPlayer->ClearMutexState(MS_Fuben);
1268 	}
1270 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1271 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1272 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 21:54:10 2018/9/13 20:36:01 2018/9/13 20:36:01 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-mapserver\CXItemDispatch.cpp 62 KB CPP 文件 2013/3/10 21:54:16 2018/9/13 20:36:01 2018/9/13 20:36:01 1
2000 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
2001 	{
2002 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
2003 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2004 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-mapserver\GMCommand.cpp 199 KB CPP 文件 2013/3/10 21:54:36 2018/9/13 20:36:01 2018/9/13 20:36:01 1
543 	REGISTER_HANDLER(addchariothonour);	// \gm addchariothonour =100	增加战车荣誉
544 	REGISTER_HANDLER(unlockhorse);		// \gm unlockhorse =objid =horseindex  强制解锁骑乘
545 	REGISTER_HANDLER(addguildwin);		// \gm addguildwin =num 增加跨服帮战胜利次数
547 	__UNGUARD__
548 }

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-mapserver\GXBattleDispatch.cpp 55 KB CPP 文件 2013/3/10 21:54:37 2018/9/13 20:36:01 2018/9/13 20:36:01 6
1452 }
1454 /***********************************************************
1455 desc:	跨服战场 GX 服务器消息处理
1456 auth:	rj
1457 date:	2011-2-14
1474 			case MPVP_BATTLE_SIGNUP:
1475 				{
1476 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1478 					IMPVPBattle *pMPVPBattle = g_pMPVPBattleManager->GetMPVPBattleByType((MPVP_BATTLE_TYPE)pKMessage->GetBattleType());
1479 					//KCheck(pMPVPBattle);
1542 						return MP_CONTINUE;
1543 					}
1545 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1546 					pMPVPBattle->TellPlayerEnterMap(pKMessage, pConnector);
1547 				}
1588 			case MPVP_BATTLE_RETSTATE:
1589 				{
1590 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1591 					pMap->GetLuaSystem()->RunScriptFunction
1592 						(
1604 			case MPVP_BATTLE_RES_ENTERSCENE:
1605 				{
1606 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1607 					pMap->GetLuaSystem()->RunScriptFunction
1608 						(
1635 }
1637 /***********************************************************
1638 desc:	跨服战场场景通知消息处理
1639 auth:	rj
1640 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 28 KB CPP 文件 2013/3/10 21:54:39 2018/9/13 20:36:01 2018/9/13 20:36:01 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-mapserver\GXMapDispatch.cpp 16 KB CPP 文件 2013/3/10 21:54:42 2018/9/13 20:36:01 2018/9/13 20:36:01 1
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 21:55:01 2018/9/13 20:36:02 2018/9/13 20:36:02 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-mapserver\LuaFunction_Map.cpp 198 KB CPP 文件 2013/3/10 21:55:05 2018/9/13 20:36:02 2018/9/13 20:36:02 15
1523 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1525 	KCheck(szName);
1527 	// 2010-11-2 对发送脚本邮件进行跨服支持
1528 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1529 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5491 	return 0;
5492 }
5494 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5495 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5496 {
5517 	LUA_RETURNERROR_1;
5518 }
5520 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5521 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5522 {
5564 	return 0;
5565 }
5567 // 跨服 6v6 战场场景注册函数
5568 int32 LuaFunction_MPVP6v6RegisterMap(Lua_State *L)
5569 {
5590 	LUA_RETURNERROR_1;
5591 }
5593 // 跨服 6v6 战场场景更新战场 UI 面板
5594 int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5595 {
5637 	return 0;
5638 }
5640 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5641 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5642 //{
5664 //}
5665 //
5666 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5667 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5668 //{
5734 //}
5735 //
5736 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5737 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5738 //{
5804 //}
5805 //
5806 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5807 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5808 //{
5838 //}
5839 //
5840 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
5841 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5842 //{
5885 //}
5886 //
5887 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
5888 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
5889 //{
5937 //}
5938 //
5939 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
5940 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
5941 //{
5982 //}
5983 //
5984 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
5985 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
5986 //{
6828 	return 0;
6829 }
6831 // 跨服战场场景注册函数
6832 int32 LuaFunction_MPVPRegisterMap(Lua_State *L)
6833 {
6923 	if(pMap)
6924 	{
6925 		// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
6926 		int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
6927 			(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-mapserver\LuaSystem_Function.cpp 118 KB CPP 文件 2013/3/10 21:55:13 2018/9/13 20:36:02 2018/9/13 20:36:02 10
1167 	m_LuaVM.RegisterFunction("AddBattleHonour", (void *) (LuaFunction_AddBattleHonour));							// 增加战功
1168 	m_LuaVM.RegisterFunction("SubBattleHonour", (void *) (LuaFunction_SubBattleHonour));							// 减少战功
1169 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));					// 跨服 2v2 战场注册场景 
1170 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));			// 跨服 2v2 战场名称显示
1171 	m_LuaVM.RegisterFunction("MPVP6v6RegisterScene", (void *) (LuaFunction_MPVP6v6RegisterMap));					// 跨服 6v6 战场注册场景
1172 	m_LuaVM.RegisterFunction("SetMPVP6v6BattleDisable", (void *) (LuaFunction_SetMPVP6v6BattleDisable));			// 跨服 6v6 战场名称显示
1173 	m_LuaVM.RegisterFunction("MPVPRegisterMap", (void *) (LuaFunction_MPVPRegisterMap));							// 跨服战场注册场景
1174 	m_LuaVM.RegisterFunction("CountryIsFortuneTimeEx", (void *) (LuaFunction_CountryIsFortuneTimeEx));				// 获取特定国家的国运是否进行
1175 	m_LuaVM.RegisterFunction("AddCountryResourceWithRecall", (void *) (LuaFunction_AddCountryResourceWithRecall));	// 比较并增加的修改资源,保证同步
1283 	m_LuaVM.RegisterFunction("IsLeague", (void*)(LuaFunction_IsLeague));											// 判断两国是否是弱国联盟
1284 	m_LuaVM.RegisterFunction("CountryLeagueZhaoji", (void*)(LuaFunction_CountryLeagueZhaoji));						// 发送联盟召集令
1285 	m_LuaVM.RegisterFunction("AskEnterMGuildBattleScene",(void*)(LuaFunction_AskEnterMGuildBattleScene)); 			// 请求进入跨服帮会战场
1286 	m_LuaVM.RegisterFunction("MGuildBattleSignup",(void*)(LuaFunction_MGuildBattleSignup)); 						// 跨服帮会战报名
1287 	m_LuaVM.RegisterFunction("MGuildBattleResult",(void*)(LuaFunction_MGuildBattleResult)); 						// 跨服帮会战结果
1288 	m_LuaVM.RegisterFunction("MGuildBattleSeasonWeek",(void*)(LuaFunction_MGuildBattleSeasonWeek)); 				// 跨服帮会战赛季当前周数
1289 	m_LuaVM.RegisterFunction("GetMGuildNumOfBattleCurSeason", (void*)(LuaFunction_GetMGuildNumOfBattleCurSeason));	// 获取跨服帮战当前赛季的场数
1290 	m_LuaVM.RegisterFunction("SetEquipPokerData",(void*)(LuaFunction_SetEquipPokerData));							// 设置装备扑克牌属性
1291 	m_LuaVM.RegisterFunction("SetEquipPokerCount",(void*)(LuaFunction_SetEquipPokerCount));							// 设置装备扑克牌个数

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-mapserver\MapCore.cpp 38 KB CPP 文件 2013/3/10 21:55:16 2018/9/13 20:36:02 2018/9/13 20:36:02 1
671 				m_bFirstInit = FALSE;
672 			}
673 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
674 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
675 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-mapserver\MapServer.cpp 33 KB CPP 文件 2013/3/10 21:55:18 2018/9/13 20:36:02 2018/9/13 20:36:02 3
578 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
579 	
580 	// 跨服战场管理器 2010-10-13 by rj
581 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
582 	g_pMPVPBattleManager = new CMPVPBattleManager;
645 	if(pCurrentSData->m_EnableDBShare)
646 	{
647 		// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
648 		uint32 uMaxPoolSize = MAX_POOL_SIZE;
649 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
737 	{
738 		QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[Init] Begin g_pConnectorPool->Init() ... ");
740 		// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
741 		uint32 uMaxPoolSize = MAX_POOL_SIZE;
742 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-mapserver\MGuildBattle.cpp 28 KB CPP 文件 2013/3/10 21:55:13 2018/9/13 20:36:02 2018/9/13 20:36:02 3
1 /***********************************************************
2 desc:	跨服帮会战场实现
3 auth:	txp
4 date:	2011-6-10
122 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，
123 		// 为这个很少出现的异常进行处理。
124 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，
125 		// 如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
126 		if (FindSignup(pSignupPlayers[i].iWorldID, pSignupPlayers[i].GuildID))
427 		m_MatchList.m_aMatch[m_MatchList.m_nCount].m_bFinished = FALSE;
429 		int32 nLevelFlag=0, nDisLevel = s1.m_nSignupLevel - s2.m_nSignupLevel;
431 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
432 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
433 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-mapserver\MPVP2v2Battle.cpp 35 KB CPP 文件 2013/3/10 21:55:14 2018/9/13 20:36:02 2018/9/13 20:36:02 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
249 		{
250 			// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
251 			// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
252 			if (FindSignup(pSignupPlayers[i].uSNID))
253 			{
649 			nLevelFlag = 0;
650 		}
652 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
653 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
654 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-mapserver\MPVP6v6Battle.cpp 30 KB CPP 文件 2013/3/10 21:55:15 2018/9/13 20:36:02 2018/9/13 20:36:02 3
1 /***********************************************************
2 desc:	跨服 6v6 战场实现
3 auth:	txp
4 date:	2011-3-16
154 	{
155 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
156 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
157 		if (FindSignup(pSignupPlayers[i].uSNID))
158 		{
536 			nLevelFlag = 0;
537 		}
539 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
540 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
541 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 21:55:15 2018/9/13 20:36:02 2018/9/13 20:36:02 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
97 	__UNGUARD__ return FALSE;
98 }
100 // 以类型方式获得跨服战场类
101 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
102 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 13 KB CPP 文件 2013/3/10 21:55:37 2018/9/13 20:36:02 2018/9/13 20:36:02 1
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/11 12:38:25 2018/9/13 20:36:02 2018/9/13 20:36:02 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/11 12:38:26 2018/9/13 20:36:02 2018/9/13 20:36:02 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/11 12:38:27 2018/9/13 20:36:02 2018/9/13 20:36:02 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
200 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-share\Core\Setting.cpp 79 KB CPP 文件 2013/3/11 12:38:30 2018/9/13 20:36:03 2018/9/13 20:36:03 4
289 /*
290 =======================================================================================================================
291  加载跨服配置信息
292 =======================================================================================================================
293 */
303 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
304 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
306 	// 跨服战场最大场景数量配置 2010-9-23 by rj
307 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
308 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
309 	
310 	m_MultiGroupConfig.m_nMaxMGuildMapCnt = ini.Get_Property_Int("MGuild", "Max_SceneCount");
311 	KCheckEx(m_MultiGroupConfig.m_nMaxMGuildMapCnt>0 && m_MultiGroupConfig.m_nMaxMGuildMapCnt<=MGUILD_MAX_MAPCOUNT, "跨服帮战场景数量要小于512");
313 // 	m_MultiGroupConfig.m_nMGuildBeginWeek = ini.Get_Property_Int("MGuild", "BeginWeek");
314 // 	KCheckEx(m_MultiGroupConfig.m_nMGuildBeginWeek>0 && m_MultiGroupConfig.m_nMGuildBeginWeek<=52, "起始周只能在1-52之间");
328 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
329 		
330 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
332 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
334 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-share\DataBase\ArchiveInterface.cpp 281 KB CPP 文件 2013/3/11 12:38:32 2018/9/13 20:36:03 2018/9/13 20:36:03 1
9707 }
9709 /************************************************************************/
9710 /* 跨服战积分相关                                                       */
9711 /************************************************************************/
9713 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\HK_OBT6\HK_OBT6\src\khan2-share\DataBase\SqlStatement.cpp 20 KB CPP 文件 2013/3/11 12:38:33 2018/9/13 20:36:03 2018/9/13 20:36:03 1
249 char	*g_LoadLostItemInfo = "select aid,playerguid,srcplayerguid,srcplayername,guid,world,server,itemclass,creator,dataproperty,data,termendtime,islock,unlocktime,gmoptime from %s where aid>%u order by aid asc" ;
250 char	*g_DelLostItemInfo = "delete from %s where aid=%u";
252 // 跨服战积分相关处理
253 char	*LoadMPVPPointInfo = "select unitid, unitname, world, currentpoint, totalpoint, currentwintimes, currentjointimes, totalwintimes, totaljointimes, mpvptypename, currentweek, startweek, params from %s where valid = 1";
254 char	*SaveMPVPPointInfo = "call proc_save_mpvppoint(%d,\'%s\', %d, %d, %d, %d, %d, %d, %d, \'%s\', %d, %d, %d, 1)";

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 13 KB CPP 文件 2013/3/10 12:11:30 2018/9/13 20:36:12 2018/9/13 20:36:12 1
191 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
192 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
194 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
195 		if (pFindPlayer == NULL)
196 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH\src\khan2-glserver\XGBattleDispatch.cpp 81 KB CPP 文件 2013/3/10 12:11:47 2018/9/13 20:36:13 2018/9/13 20:36:13 12
2502 }
2504 /***********************************************************
2505 desc:	跨服战场 XG 服务器消息处理
2506 auth:	rj
2507 date:	2011-2-14
2515 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2516 	{
2517 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2518 		static IntegerHashMap mapMPVP2v2SignupRecord;
2519 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2521 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2522 		}
2524 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2525 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2526 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2543 		case MPVP_BATTLE_RETSTATE:
2544 			{
2545 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名
2546 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2547 				{
2577 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2578 				KCheck(pServePlayer_Target);
2580 				// 转发跨服战场进入通知到报名玩家所在 Map
2581 				GXMPVPBattle msg;
2582 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2686 					}
2687 				}
2689 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2690 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2691 				msg.SetSignupType(pKMessage->GetSignupType());
2700 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2701 				KCheck(pServePlayer_Target);
2703 				// 转发跨服战场状态到报名玩家所在 Map
2704 				GXMPVPBattle msg;
2705 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2718 				if (iServerID)
2719 				{
2720 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2721 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2722 					KCheck(pServePlayer_Target);
2741 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2742 				KCheck(pServePlayer_Target);
2744 				// 转发跨服战场进入响应到报名玩家所在 Map
2745 				GXMPVPBattle msg;
2746 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH\src\khan2-mapserver\ChangeMapDelegater.cpp 35 KB CPP 文件 2013/3/10 12:12:24 2018/9/13 20:36:13 2018/9/13 20:36:13 2
1216 		pPlayer->ClearMutexState(MS_Fuben);
1217 	}
1219 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1220 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1221 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 12:12:09 2018/9/13 20:36:13 2018/9/13 20:36:13 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH\src\khan2-mapserver\CXItemDispatch.cpp 60 KB CPP 文件 2013/3/10 12:12:15 2018/9/13 20:36:13 2018/9/13 20:36:13 1
1956 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
1957 	{
1958 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
1959 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1960 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH\src\khan2-mapserver\GXBattleDispatch.cpp 52 KB CPP 文件 2013/3/10 12:12:35 2018/9/13 20:36:14 2018/9/13 20:36:14 6
1452 }
1454 /***********************************************************
1455 desc:	跨服战场 GX 服务器消息处理
1456 auth:	rj
1457 date:	2011-2-14
1474 			case MPVP_BATTLE_SIGNUP:
1475 				{
1476 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1478 					CMPVP2v2Battle *pMPVP2v2Battle = (CMPVP2v2Battle *)g_pMPVPBattleManager->GetMPVPBattleByType(MPVP_BATTLE_TYPE_2V2);
1479 					KCheck(pMPVP2v2Battle);
1524 						return MP_CONTINUE;
1525 					}
1527 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1528 					pMPVP2v2Battle->TellPlayerEnterMap(pKMessage->GetSNID(), pConnector);
1529 				}
1570 			case MPVP_BATTLE_RETSTATE:
1571 				{
1572 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1573 					pMap->GetLuaSystem()->RunScriptFunction
1574 						(
1586 			case MPVP_BATTLE_RES_ENTERSCENE:
1587 				{
1588 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1589 					pMap->GetLuaSystem()->RunScriptFunction
1590 						(
1617 }
1619 /***********************************************************
1620 desc:	跨服战场场景通知消息处理
1621 auth:	rj
1622 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 26 KB CPP 文件 2013/3/10 12:12:37 2018/9/13 20:36:14 2018/9/13 20:36:14 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH\src\khan2-mapserver\GXMapDispatch.cpp 16 KB CPP 文件 2013/3/10 12:12:40 2018/9/13 20:36:14 2018/9/13 20:36:14 1
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 12:12:58 2018/9/13 20:36:14 2018/9/13 20:36:14 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH\src\khan2-mapserver\LuaFunction_Map.cpp 182 KB CPP 文件 2013/3/10 12:13:02 2018/9/13 20:36:14 2018/9/13 20:36:14 11
1455 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1457 	KCheck(szName);
1459 	// 2010-11-2 对发送脚本邮件进行跨服支持
1460 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1461 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5360 	return 0;
5361 }
5363 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5364 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5365 {
5386 	LUA_RETURNERROR_1;
5387 }
5389 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5390 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5391 {
5433 	return 0;
5434 }
5436 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5437 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5438 //{
5460 //}
5461 //
5462 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5463 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5464 //{
5530 //}
5531 //
5532 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5533 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5534 //{
5600 //}
5601 //
5602 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5603 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5604 //{
5634 //}
5635 //
5636 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
5637 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5638 //{
5681 //}
5682 //
5683 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
5684 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
5685 //{
5733 //}
5734 //
5735 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
5736 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
5737 //{
5778 //}
5779 //
5780 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
5781 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
5782 //{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH\src\khan2-mapserver\LuaSystem_Function.cpp 105 KB CPP 文件 2013/3/10 12:13:08 2018/9/13 20:36:14 2018/9/13 20:36:14 1
891 	m_LuaVM.RegisterFunction("PVP2v2AskBattleSceneEnter", (void *) (LuaFunction_PVP2v2AskBattleMapEnter));
892 	m_LuaVM.RegisterFunction("SetPVP2v2BattleDisable", (void *) (LuaFunction_SetPVP2v2BattleDisable));
893 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));	// 跨服 2v2 战场扩充函数 by rj 2010-9-21 
894 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));
895 	m_LuaVM.RegisterFunction("PVP6v6RegisterScene", (void *) (LuaFunction_PVP6v6RegisterMap));

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH\src\khan2-mapserver\MapCore.cpp 36 KB CPP 文件 2013/3/10 12:13:10 2018/9/13 20:36:14 2018/9/13 20:36:14 1
635 				m_bFirstInit = FALSE;
636 			}
637 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
638 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
639 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH\src\khan2-mapserver\MapServer.cpp 31 KB CPP 文件 2013/3/10 12:13:12 2018/9/13 20:36:14 2018/9/13 20:36:14 1
550 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
551 	
552 	// 跨服战场管理器 2010-10-13 by rj
553 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
554 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH\src\khan2-mapserver\MPVP2v2Battle.cpp 29 KB CPP 文件 2013/3/10 12:13:09 2018/9/13 20:36:14 2018/9/13 20:36:14 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
124 	{
125 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
126 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
127 		if (FindSignup(pSignupPlayers[i].uSNID))
128 		{
470 			nLevelFlag = 0;
471 		}
473 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
474 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
475 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 12:13:09 2018/9/13 20:36:14 2018/9/13 20:36:14 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
91 	__UNGUARD__ return FALSE;
92 }
94 // 以类型方式获得跨服战场类
95 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
96 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 12 KB CPP 文件 2013/3/10 12:13:29 2018/9/13 20:36:15 2018/9/13 20:36:15 1
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/10 21:56:28 2018/9/13 20:36:15 2018/9/13 20:36:15 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/10 21:56:28 2018/9/13 20:36:15 2018/9/13 20:36:15 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/10 21:56:29 2018/9/13 20:36:15 2018/9/13 20:36:15 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
200 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH\src\khan2-share\Core\Setting.cpp 73 KB CPP 文件 2013/3/10 21:56:32 2018/9/13 20:36:15 2018/9/13 20:36:15 3
286 /*
287 =======================================================================================================================
288  加载跨服配置信息
289 =======================================================================================================================
290 */
300 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
301 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
303 	// 跨服战场最大场景数量配置 2010-9-23 by rj
304 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
305 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
319 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
320 		
321 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
323 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
325 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-client\GameCommandSystem.cpp 59 KB CPP 文件 2013/3/10 12:14:22 2018/9/13 20:39:03 2018/9/13 20:39:03 1
1403 	{ GCD_ASK_JOIN_FUBEN_WITH_TEAM, "ASK_JOIN_FUBEN_WITH_TEAM" },
1404 	{ GCD_ASK_EXIT_ROOM, "ASK_EXIT_ROOM" },
1406 	//跨服副本报名搜索
1407 	{ GCD_UPDATE_FUBEN_SEARCH_STATE,"UPDATE_FUBEN_SEARCH_STATE" },
1409 	//军团信息更新

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-client\GameStateChangeServer.cpp 6 KB CPP 文件 2013/3/10 12:14:54 2018/9/13 20:39:04 2018/9/13 20:39:04 1
210 			::GetPrivateProfileString( "Debug", "Login.WorldID", "", szReadTemp, MAX_PATH, DEBUG_FILE_NAME );
211 			static ut_id s_nWorldID = atoi(szReadTemp); 
212 			GAME_DATA_PLAYER_PTR->SetWorldID(s_nWorldID); // 支持跨服自架测试
213 																			
214 		}

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-client\GameStateRun.cpp 89 KB CPP 文件 2013/3/10 12:14:56 2018/9/13 20:39:04 2018/9/13 20:39:04 2
649 	
650 	GAME_DATA_PTR->askCountryData();
653 	//跨服关卡的处理 
655 	//清除小地图上的军团信息
656 	GAME_DATA_RELATION_PTR->GetCorps()->ClearCorpsInfo();
668 	//请求军团数据
669 	GAME_DATA_QUEST_PTR->AskRoomBattleGroupData();
670 	/////跨服关卡的处理	
671 }
674 void CGameStateRun::IsMapLoaded( void )

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-client\UIMap.cpp 24 KB CPP 文件 2013/3/10 12:15:25 2018/9/13 20:39:04 2018/9/13 20:39:04 1
455 		case MAP_POINT_TRANSER_NPC:		szChildWinType = MAP_POINT_TYPE_TRANSER_NPC;	break;
456 		case MAP_POINT_MONSTER:			szChildWinType = MAP_POINT_TYPE_MONSTER;		break;
458 		// 跨服6v6的旗子
459 		case MAP_POINT_OneLevelFlag:			szChildWinType = MAP_POINT_TYPE_ONELEVELFLAG; break;
460 		case MAP_POINT_TwoLevelFlag:			szChildWinType = MAP_POINT_TYPE_TWOLEVELFLAG; break;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-client\UIPartyMessageBox.cpp 33 KB CPP 文件 2013/3/10 12:15:26 2018/9/13 20:39:05 2018/9/13 20:39:05 1
404 		}
405 		break;
407 	case MGUILD_BATTLE_TYPE: // 跨服帮会战
408 		{
409 			CXMPVPBattle msg;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-dbshare\MKLogicManager.cpp 111 KB CPP 文件 2013/3/10 12:16:01 2018/9/13 20:39:05 2018/9/13 20:39:05 2
235 			{
236 			ArchiveNodeLogic<PlayerMK>* pLogicNode = (ArchiveNodeLogic<PlayerMK>*)GetNode(_Idx);
238 			// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
239 			uint32 uMaxPoolSize = MAX_POOL_SIZE;
240 			if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
3649 }
3651 /************************************************************************/
3652 /* 跨服战积分相关                                                       */
3653 /************************************************************************/
3654 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-glserver\GL.cpp 43 KB CPP 文件 2013/3/10 12:16:09 2018/9/13 20:39:05 2018/9/13 20:39:05 5
422 	KCheck(g_pGuildBattleManager);
423 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildBattleManager...OK");
425 	//跨服帮战的管理器
426 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new MultiGuildBattleManager ... ");
427 	g_pMGuildBattleManager = new MGuildBattleManager;
505 	KCheck(g_pGuildCenter);
506 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildManager...OK");
508 	//跨服战积分管理器
509 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMPVPPointManager ... ");
510 	g_pMPVPPointManager = new MPVPPointManager;
691 	KCheck(g_pSystemParamsManager);
692 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new g_pSystemParamsManager...OK");
695 	// 跨服管理器
696 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMutiGroupMapServerManager ... ");
697 	g_pMutiGroupMapServerManager = new MutiGroupMapServerManager;
928 	KCheck(ret);
929 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager->Init()...OK");
932 	//跨服管理器
933 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[Init] g_pMutiGroupMapServerManager->Init()...OK");
934 	ret = g_pMutiGroupMapServerManager->Init();
1096 	KSafeDelete(g_pSystemParamsManager);
1097 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager delete...OK");
1099 	//跨服管理器
1100 	KSafeDelete(g_pMutiGroupMapServerManager);
1101 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pMutiGroupMapServerManager delete...OK");

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 14 KB CPP 文件 2013/3/10 12:16:18 2018/9/13 20:39:06 2018/9/13 20:39:06 1
223 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
224 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
226 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
227 		if (pFindPlayer == NULL)
228 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-glserver\MGuildBattleManager.cpp 15 KB CPP 文件 2013/3/10 12:16:20 2018/9/13 20:39:06 2018/9/13 20:39:06 8
94 	// 当前赛季进度
95 	int32 nSeasonWeek = (GET_TIME().GetWeekNumFrom2011() - g_Config.m_ConfigInfo.m_MPVPGuildBeginWeek) % g_Config.m_ConfigInfo.m_MPVPPointPeriodWeeks;
97 	// 取得跨服服务器
98 	int32 nServerNum = 0;
99 	ut_id serverIDs[SERVER_CAPACITY] = {-1};
145 	//	if (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / nServerNum <= 0)
146 	//		return serverIDs[0];
148 	//	// 2011-07-26 by rj 改进原来的等分算法，在所连跨服服务器数量等于 2 时用用 4/6 算法来解决高分帮会人数过多的问题
149 	//	int32 iSeg = iIndex / (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / (nServerNum <= 2 ? 2.5f : nServerNum) );
150 	//	if (iSeg >= nServerNum)
166 	if (uPrevSignupTime)
167 	{
168 		// 超时保护（防止报名完成后跨服服务器宕机导致 GL 无法清理报名）
169 		if (GET_TIME().GetCTime() - uPrevSignupTime > 90*60)
170 		{
258 	if(!pGuild || pGuild->GetGuildID() == INVALID_KHAN_ID)
259 		return FALSE;
261 	// 转发跨服战场进入通知到报名玩家所在 Map
262 	GXMPVPBattle msg;
263 	msg.SetBattleType(MPVP_GUILD_BATTLE_TYPE);
416 					aSignupPlayers[0].GuildPoint = pPoint->m_nCurrentPoint;
417 				}
419 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
420 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
421 				msg.SetSignupType(pKMessage->GetSignupType());
472 				if (NULL != pServePlayer_Target)
473 				{
474 					// 转发跨服战场状态到报名玩家所在 Map
475 					GXMPVPBattle msg;
476 					msg.SetBattleType(pKMessage->GetBattleType());
503 				return MP_CONTINUE;
504 			}
506 			// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
507 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pMatch->nServerID);
508 			if (pServePlayer_Target)
524 			if (NULL != pServePlayer_Target)
525 			{
526 				// 转发跨服战场进入响应到报名玩家所在 Map
527 				GXMPVPBattle msg;
528 				msg.SetBattleType(pKMessage->GetBattleType());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-glserver\MPVPGuildPoint.cpp 8 KB CPP 文件 2013/3/10 12:16:21 2018/9/13 20:39:06 2018/9/13 20:39:06 3
1 /************************************************************************/
2 /* 帮会跨服战积分信息接口的具体实现                                     */
3 /************************************************************************/
5 #include "stdafx.h"
195 /*
196 =======================================================================================================================
197 处理不同跨服战各自的额外参数填充
198 =======================================================================================================================
199 */
223 /*
224 =======================================================================================================================
225 加载跨服帮战每周的场次信息
226 =======================================================================================================================
227 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-glserver\MPVPPointArithmetic.cpp 2 KB CPP 文件 2013/3/10 12:16:21 2018/9/13 20:39:06 2018/9/13 20:39:06 3
1 /************************************************************************/
2 /* 跨服战积分算法器,负责各种跨服战积分的计算逻辑实现                    */
3 /************************************************************************/
5 #include "stdafx.h"
16 /*
17 ===============================================================================================================
18 根据实力来计算跨服帮会的加权分
19 帮会实力-(错过的场次*放弃损失的分数)
20 ===============================================================================================================

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-glserver\MPVPPointInfo.cpp 14 KB CPP 文件 2013/3/10 12:16:21 2018/9/13 20:39:06 2018/9/13 20:39:06 2
1 /************************************************************************/
2 /* 跨服战积分信息接口的具体实现                                         */
3 /************************************************************************/
5 #include "stdafx.h"
72 /*
73 =======================================================================================================================
74 获取跨服积分的数据信息
75 =======================================================================================================================
76 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-glserver\MPVPPointManager.cpp 11 KB CPP 文件 2013/3/10 12:16:22 2018/9/13 20:39:06 2018/9/13 20:39:06 5
1 /************************************************************************/
2 /* 跨服战积分管理器的实现                                               */
3 /************************************************************************/
5 #include "stdafx.h"
98 /*
99 ===============================================================================================================
100 注册跨服积分的实现
101 ===============================================================================================================
102 */
220 /*
221 ===============================================================================================================
222 获取指定类型跨服战全部积分信息
223 ===============================================================================================================
224 */
243 /*
244 ===============================================================================================================
245 获取指定跨服战当前的赛季开始周
246 ===============================================================================================================
247 */
266 /*
267 ===============================================================================================================
268 获取指定跨服战当前周
269 ===============================================================================================================
270 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-glserver\MPVPToplist.cpp 8 KB CPP 文件 2013/3/10 12:16:22 2018/9/13 20:39:06 2018/9/13 20:39:06 2
1 /************************************************************************/
2 /* 跨服帮会战排行榜的具体实现		                                    */
3 /************************************************************************/
5 #include "stdafx.h"
25 /*
26 =======================================================================================================================
27 积分数据加载,从跨服积分管理器中加载需要的信息
28 =======================================================================================================================
29 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-glserver\MutiGroupMapServerManager.cpp 16 KB CPP 文件 2013/3/10 12:16:24 2018/9/13 20:39:06 2018/9/13 20:39:06 1
4 Author:Michael		
5 Created:Michael
6 Description :跨服MapServer管理器实现
7 Revision :  2011/06/17 Michael create
9 =============================================================================*/

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-glserver\ServerConnectorManager_GL.cpp 11 KB CPP 文件 2013/3/10 12:16:28 2018/9/13 20:39:06 2018/9/13 20:39:06 2
516 			_NET_TRY
517 			{
518 				// 跨服帮战管理器心跳
519 				ret = g_pMGuildBattleManager->HeartBeat(uTime);
520 				KCheck(ret);
526 			_NET_TRY
527 			{
528 				//处理跨服战积分管理器相关的心跳
529 				ret = g_pMPVPPointManager->HeartBeat(uTime);		
530 				KCheck(ret);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-glserver\TopListManager.cpp 18 KB CPP 文件 2013/3/10 12:16:34 2018/9/13 20:39:06 2018/9/13 20:39:06 1
152 	Register(HONOR_CHARIOT_TOP_LIST_BK,			new TopList,					"Chariot_Honor_bk" );
153 	// add by dragon 战车排行榜 }
155 	// 跨服帮会战排行榜
156 	Register(MPVP_GUILD_CURRENT,			new CurrentMPVPGuildTopList,		"MPVP_Guild_Current" );
157 	Register(MPVP_GUILD_CURRENT_BK,			new TopList,				"MPVP_Guild_Current_bk" );

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-glserver\XGBattleDispatch.cpp 93 KB CPP 文件 2013/3/10 12:16:36 2018/9/13 20:39:06 2018/9/13 20:39:06 25
2507 }
2509 /***********************************************************
2510 desc:	跨服战场 XG 服务器消息处理
2511 auth:	rj
2512 date:	2011-2-14
2520 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2521 	{
2522 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2523 		static IntegerHashMap mapMPVP2v2SignupRecord;
2524 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2526 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2527 		}
2529 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2530 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2531 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2548 		case MPVP_BATTLE_RETSTATE:
2549 			{
2550 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名。值是当前报名的时间。
2551 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2552 				{
2582 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2583 				KCheck(pServePlayer_Target);
2585 				// 转发跨服战场进入通知到报名玩家所在 Map
2586 				GXMPVPBattle msg;
2587 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2613 				if (uPrevSignupTime)
2614 				{
2615 					// 6 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2616 					if (GET_TIME().GetCTime() - uPrevSignupTime > 360)
2617 					{
2719 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2720 				}
2722 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2723 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2724 				msg.SetSignupType(pKMessage->GetSignupType());
2734 				if (NULL != pServePlayer_Target)
2735 				{
2736 					// 转发跨服战场状态到报名玩家所在 Map
2737 					GXMPVPBattle msg;
2738 					msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2752 				if (iServerID)
2753 				{
2754 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2755 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2756 					if (NULL != pServePlayer_Target)
2777 				if (NULL != pServePlayer_Target)
2778 				{
2779 					// 转发跨服战场进入响应到报名玩家所在 Map
2780 					GXMPVPBattle msg;
2781 					msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2793 	else if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_6V6)
2794 	{
2795 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2796 		static IntegerHashMap mapMPVP6v6SignupRecord;
2797 		if (mapMPVP6v6SignupRecord.GetMaxCount() == 0)
2799 			mapMPVP6v6SignupRecord.InitTable(MAX_WORLD_PLAYER);
2800 		}
2802 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2803 		static IntegerHashMap mapMPVP6v6EnterBattleRecord;
2804 		if (mapMPVP6v6EnterBattleRecord.GetMaxCount() == 0)
2821 		case MPVP_BATTLE_RETSTATE:
2822 			{
2823 				// 记录这次跨服 6v6 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 6v6 的报名。值是当前报名的时间。
2824 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2825 				{
2856 				if (NULL != pServePlayer_Target)
2857 				{
2858 					// 转发跨服战场进入通知到报名玩家所在 Map
2859 					GXMPVPBattle msg;
2860 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
2890 				if (uPrevSignupTime)
2891 				{
2892 					// 11 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2893 					if (GET_TIME().GetCTime() - uPrevSignupTime > 660)
2894 					{
2996 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2997 				}
2999 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
3000 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
3001 				msg.SetSignupType(pKMessage->GetSignupType());
3011 				if (NULL != pServePlayer_Target)
3012 				{
3013 					// 转发跨服战场状态到报名玩家所在 Map
3014 					GXMPVPBattle msg;
3015 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
3029 				if (iServerID)
3030 				{
3031 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
3032 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
3033 					if (NULL != pServePlayer_Target)
3054 				if (NULL != pServePlayer_Target)
3055 				{
3056 					// 转发跨服战场进入响应到报名玩家所在 Map
3057 					GXMPVPBattle msg;
3058 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-mapserver\Bus.cpp 65 KB CPP 文件 2013/3/10 12:16:56 2018/9/13 20:39:07 2018/9/13 20:39:07 3
803 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
804 		= CaculateMonsterExpRuler::eCALC_TYPE_TEAM;
806 	//如果是跨服副本
807 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
808 	{
808 	{
809 		nValidMemberCount = GetValidOwnerListGroup(MAX_GROUP_MEMBER,apValidMember);
810 		eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
811 	}
812 	else
1083 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1085 	if(Get_OccupantTeamID() != INVALID_KHAN_ID) iFadeoutType = Obj_ItemRuler::FADE_OUT_TEAM;
1087 	//是否是跨服
1088 	BOOL BGroup = FALSE;
1089 	Map* pMap = GetMap();

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-mapserver\ChangeMapDelegater.cpp 43 KB CPP 文件 2013/3/10 12:17:15 2018/9/13 20:39:07 2018/9/13 20:39:07 2
1503 		pPlayer->ClearMutexState(MS_Fuben);
1504 	}
1506 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1507 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1508 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 12:16:59 2018/9/13 20:39:07 2018/9/13 20:39:07 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-mapserver\CXItemDispatch.cpp 64 KB CPP 文件 2013/3/10 12:17:06 2018/9/13 20:39:07 2018/9/13 20:39:07 1
2048 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
2049 	{
2050 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
2051 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2052 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-mapserver\GMCommand.cpp 205 KB CPP 文件 2013/3/10 12:17:26 2018/9/13 20:39:07 2018/9/13 20:39:07 1
543 	REGISTER_HANDLER(addchariothonour);	// \gm addchariothonour =100	增加战车荣誉
544 	REGISTER_HANDLER(unlockhorse);		// \gm unlockhorse =objid =horseindex  强制解锁骑乘
545 	REGISTER_HANDLER(addguildwin);		// \gm addguildwin =num 增加跨服帮战胜利次数
547 	REGISTER_HANDLER(getviewgroup);		// \gm getviewgroup	//获取当前的可视组
548 	REGISTER_HANDLER(setviewgroup);		// \gm setviewgroup	=groupnum //设置当前的可视组

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-mapserver\GMRoomBattleDispatch.cpp 5 KB CPP 文件 2013/3/10 12:17:27 2018/9/13 20:39:07 2018/9/13 20:39:07 1
53 	else
54 	{
55 		ut_id_map nBackSceneID = g_pFubenManager->GetServerBakSceneID();  //跨服处的副本入口场景
57 		ut_id_map nTarSceneId = pPacket->GetRoomBattle()->u_RoomBattleData.m_SceneID;
58 		

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-mapserver\GXBattleDispatch.cpp 55 KB CPP 文件 2013/3/10 12:17:27 2018/9/13 20:39:07 2018/9/13 20:39:07 6
1452 }
1454 /***********************************************************
1455 desc:	跨服战场 GX 服务器消息处理
1456 auth:	rj
1457 date:	2011-2-14
1474 			case MPVP_BATTLE_SIGNUP:
1475 				{
1476 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1478 					IMPVPBattle *pMPVPBattle = g_pMPVPBattleManager->GetMPVPBattleByType((MPVP_BATTLE_TYPE)pKMessage->GetBattleType());
1479 					//KCheck(pMPVPBattle);
1542 						return MP_CONTINUE;
1543 					}
1545 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1546 					pMPVPBattle->TellPlayerEnterMap(pKMessage, pConnector);
1547 				}
1588 			case MPVP_BATTLE_RETSTATE:
1589 				{
1590 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1591 					pMap->GetLuaSystem()->RunScriptFunction
1592 						(
1604 			case MPVP_BATTLE_RES_ENTERSCENE:
1605 				{
1606 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1607 					pMap->GetLuaSystem()->RunScriptFunction
1608 						(
1635 }
1637 /***********************************************************
1638 desc:	跨服战场场景通知消息处理
1639 auth:	rj
1640 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 28 KB CPP 文件 2013/3/10 12:17:29 2018/9/13 20:39:07 2018/9/13 20:39:07 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-mapserver\GXMapDispatch.cpp 20 KB CPP 文件 2013/3/10 12:17:32 2018/9/13 20:39:08 2018/9/13 20:39:08 2
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{
588 		return MP_CONTINUE;
589 	}
591 	//以下是跨服的副本的处理
593 	//给报名服务器返回创建成功消息			
594 	MGMRoomBattle* Msg = CREATE_MESSAGE_OBJ(MGMRoomBattle,MESSAGE_MGM_ROOMBATTLE);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 12:17:51 2018/9/13 20:39:08 2018/9/13 20:39:08 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-mapserver\LuaFunction_Chat.cpp 61 KB CPP 文件 2013/3/10 12:17:54 2018/9/13 20:39:08 2018/9/13 20:39:08 1
1086 		pMsg->SetCycleCount(nParam);
1087 	g_pServerConnectorMgr->SendMessage_SingleMode(pMsg);
1090 	//世界频道支持跨服
1091 	for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
1092 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-mapserver\LuaFunction_Map.cpp 203 KB CPP 文件 2013/3/10 12:17:56 2018/9/13 20:39:08 2018/9/13 20:39:08 16
256 	SelectMap.m_MapDataType = 0;
257 	SelectMap.m_CopyData = * pFD;
258 	SelectMap.m_CopyData.m_bRoom = false;//非跨服房间类型
260 	if (nRoomType == 1)
261 	{
1710 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1712 	KCheck(szName);
1714 	// 2010-11-2 对发送脚本邮件进行跨服支持
1715 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1716 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5678 	return 0;
5679 }
5681 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5682 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5683 {
5704 	LUA_RETURNERROR_1;
5705 }
5707 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5708 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5709 {
5751 	return 0;
5752 }
5754 // 跨服 6v6 战场场景注册函数
5755 int32 LuaFunction_MPVP6v6RegisterMap(Lua_State *L)
5756 {
5777 	LUA_RETURNERROR_1;
5778 }
5780 // 跨服 6v6 战场场景更新战场 UI 面板
5781 int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5782 {
5824 	return 0;
5825 }
5827 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5828 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5829 //{
5851 //}
5852 //
5853 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5854 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5855 //{
5921 //}
5922 //
5923 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5924 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5925 //{
5991 //}
5992 //
5993 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5994 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5995 //{
6025 //}
6026 //
6027 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
6028 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
6029 //{
6072 //}
6073 //
6074 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
6075 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
6076 //{
6124 //}
6125 //
6126 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
6127 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
6128 //{
6169 //}
6170 //
6171 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
6172 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
6173 //{
7015 	return 0;
7016 }
7018 // 跨服战场场景注册函数
7019 int32 LuaFunction_MPVPRegisterMap(Lua_State *L)
7020 {
7110 	if(pMap)
7111 	{
7112 		// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
7113 		int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
7114 			(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-mapserver\LuaSystem_Function.cpp 121 KB CPP 文件 2013/3/10 12:18:03 2018/9/13 20:39:08 2018/9/13 20:39:08 10
1171 	m_LuaVM.RegisterFunction("AddBattleHonour", (void *) (LuaFunction_AddBattleHonour));							// 增加战功
1172 	m_LuaVM.RegisterFunction("SubBattleHonour", (void *) (LuaFunction_SubBattleHonour));							// 减少战功
1173 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));					// 跨服 2v2 战场注册场景 
1174 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));			// 跨服 2v2 战场名称显示
1175 	m_LuaVM.RegisterFunction("MPVP6v6RegisterScene", (void *) (LuaFunction_MPVP6v6RegisterMap));					// 跨服 6v6 战场注册场景
1176 	m_LuaVM.RegisterFunction("SetMPVP6v6BattleDisable", (void *) (LuaFunction_SetMPVP6v6BattleDisable));			// 跨服 6v6 战场名称显示
1177 	m_LuaVM.RegisterFunction("MPVPRegisterMap", (void *) (LuaFunction_MPVPRegisterMap));							// 跨服战场注册场景
1178 	m_LuaVM.RegisterFunction("CountryIsFortuneTimeEx", (void *) (LuaFunction_CountryIsFortuneTimeEx));				// 获取特定国家的国运是否进行
1179 	m_LuaVM.RegisterFunction("AddCountryResourceWithRecall", (void *) (LuaFunction_AddCountryResourceWithRecall));	// 比较并增加的修改资源,保证同步
1291 	m_LuaVM.RegisterFunction("IsLeague", (void*)(LuaFunction_IsLeague));											// 判断两国是否是弱国联盟
1292 	m_LuaVM.RegisterFunction("CountryLeagueZhaoji", (void*)(LuaFunction_CountryLeagueZhaoji));						// 发送联盟召集令
1293 	m_LuaVM.RegisterFunction("AskEnterMGuildBattleScene",(void*)(LuaFunction_AskEnterMGuildBattleScene)); 			// 请求进入跨服帮会战场
1294 	m_LuaVM.RegisterFunction("MGuildBattleSignup",(void*)(LuaFunction_MGuildBattleSignup)); 						// 跨服帮会战报名
1295 	m_LuaVM.RegisterFunction("MGuildBattleResult",(void*)(LuaFunction_MGuildBattleResult)); 						// 跨服帮会战结果
1296 	m_LuaVM.RegisterFunction("MGuildBattleSeasonWeek",(void*)(LuaFunction_MGuildBattleSeasonWeek)); 				// 跨服帮会战赛季当前周数
1297 	m_LuaVM.RegisterFunction("GetMGuildNumOfBattleCurSeason", (void*)(LuaFunction_GetMGuildNumOfBattleCurSeason));	// 获取跨服帮战当前赛季的场数
1298 	m_LuaVM.RegisterFunction("SetEquipPokerData",(void*)(LuaFunction_SetEquipPokerData));							// 设置装备扑克牌属性
1299 	m_LuaVM.RegisterFunction("SetEquipPokerCount",(void*)(LuaFunction_SetEquipPokerCount));							// 设置装备扑克牌个数

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-mapserver\MapCore.cpp 38 KB CPP 文件 2013/3/10 12:18:06 2018/9/13 20:39:08 2018/9/13 20:39:08 2
614 				pSceneData->m_MapID == 20 ||
615 				pSceneData->m_MapID == 23 || 
616 				pSceneData->m_MapID == g_pFubenManager->GetServerBakSceneID())//  支持跨服副本
617 				
618 			{
673 				m_bFirstInit = FALSE;
674 			}
675 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
676 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
677 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-mapserver\MapManager.cpp 59 KB CPP 文件 2013/3/10 12:18:07 2018/9/13 20:39:08 2018/9/13 20:39:08 3
1698 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1699 		{
1700 			KCheck(FALSE);//跨服服务器上找不到报错
1701 		}
1703 		return INVALID_KHAN_ID;
1975 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1976 	{
1977 		//以下开始通知广播,支持跨服架构
1978 		for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
1979 		{
2007 BOOL FubenManager::BroadcastFubenSceneInfo(void)
2008 {
2009 	//如果不开跨服副本，不广播
2010 	if (g_Config.m_MultiGroupConfig.IsMultMapOpen() == FALSE)
2011 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-mapserver\MapServer.cpp 33 KB CPP 文件 2013/3/10 12:18:08 2018/9/13 20:39:08 2018/9/13 20:39:08 3
581 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
582 	
583 	// 跨服战场管理器 2010-10-13 by rj
584 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
585 	g_pMPVPBattleManager = new CMPVPBattleManager;
648 	if(pCurrentSData->m_EnableDBShare)
649 	{
650 		// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
651 		uint32 uMaxPoolSize = MAX_POOL_SIZE;
652 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
740 	{
741 		QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[Init] Begin g_pConnectorPool->Init() ... ");
743 		// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
744 		uint32 uMaxPoolSize = MAX_POOL_SIZE;
745 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-mapserver\MGuildBattle.cpp 28 KB CPP 文件 2013/3/10 12:18:03 2018/9/13 20:39:08 2018/9/13 20:39:08 3
1 /***********************************************************
2 desc:	跨服帮会战场实现
3 auth:	txp
4 date:	2011-6-10
122 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，
123 		// 为这个很少出现的异常进行处理。
124 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，
125 		// 如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
126 		if (FindSignup(pSignupPlayers[i].iWorldID, pSignupPlayers[i].GuildID))
427 		m_MatchList.m_aMatch[m_MatchList.m_nCount].m_bFinished = FALSE;
429 		int32 nLevelFlag=0, nDisLevel = s1.m_nSignupLevel - s2.m_nSignupLevel;
431 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
432 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
433 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-mapserver\Monster.cpp 65 KB CPP 文件 2013/3/10 12:18:10 2018/9/13 20:39:08 2018/9/13 20:39:08 5
640 		return 0;
641 	}
643 	//如果是跨服副本
644 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
645 	{
877 		return;
878 	}
880 	//跨服副本
881 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
882 	{
953 		nExp = (int32) (m_BaseExp * fExpParam);
954 	}
956 	uint32	auExp[MAX_GROUP_MEMBER];//  for 跨服军团
957 	int32	_Idx;
959 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
968 			if (pMap->m_FubenDataParty.IsRoomType())
969 			{
970 				eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
971 			}
972 		}
2097 		return 0;
2098 	}
2100 	//场景类型必须为跨服副本
2101 	Map* pMap = GetMap();
2102 	if (NULL == pMap)

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-mapserver\MPVP2v2Battle.cpp 35 KB CPP 文件 2013/3/10 12:18:04 2018/9/13 20:39:08 2018/9/13 20:39:08 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
249 		{
250 			// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
251 			// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
252 			if (FindSignup(pSignupPlayers[i].uSNID))
253 			{
649 			nLevelFlag = 0;
650 		}
652 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
653 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
654 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-mapserver\MPVP6v6Battle.cpp 30 KB CPP 文件 2013/3/10 12:18:04 2018/9/13 20:39:08 2018/9/13 20:39:08 3
1 /***********************************************************
2 desc:	跨服 6v6 战场实现
3 auth:	txp
4 date:	2011-3-16
154 	{
155 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
156 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
157 		if (FindSignup(pSignupPlayers[i].uSNID))
158 		{
536 			nLevelFlag = 0;
537 		}
539 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
540 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
541 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 12:18:04 2018/9/13 20:39:08 2018/9/13 20:39:08 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
97 	__UNGUARD__ return FALSE;
98 }
100 // 以类型方式获得跨服战场类
101 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
102 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 20 KB CPP 文件 2013/3/10 12:18:26 2018/9/13 20:39:08 2018/9/13 20:39:08 4
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());
280 	if(g_Config.m_MultiGroupConfig.IsSignUpServer())
281 	{
282 		//只要一组服务器连接正常,跨服房间管理器的心跳仍然执行 
283 		if (GetGLServerActiveCount() > 0)
284 		{
598 				{
599 					AddGroupTmp( connID, g_Config.m_MultiGroupConfig.m_GLServerInfo[i].m_WorldID );
601 					//2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，
602 					//当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
603 					SSHandShake msg;
674 	if(FALSE == IsGLServerActiveTmp())//处理断线重连
675 	{
676 		//跨服重连机制
677 		if (FALSE == m_ConnectTimer.IsSetTimer())
678 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-mapserver\SignUpMgr.cpp 83 KB CPP 文件 2013/3/10 12:18:28 2018/9/13 20:39:08 2018/9/13 20:39:08 1
4 Author:shangy		
5 Created:shangy    
6 Description :跨服报名管理类
7 Revision :  2011/06/20 shangy create
8 			2011/08/05 Michael Lin Modify

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/10 22:00:18 2018/9/13 20:39:09 2018/9/13 20:39:09 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/10 22:00:19 2018/9/13 20:39:09 2018/9/13 20:39:09 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/10 22:00:19 2018/9/13 20:39:09 2018/9/13 20:39:09 1
199 }
200 	
201 // 2010-10-9 by rj 跨服线程连接方式
202 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
203 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-share\Core\Setting.cpp 80 KB CPP 文件 2013/3/10 22:00:23 2018/9/13 20:39:09 2018/9/13 20:39:09 6
290 /*
291 =======================================================================================================================
292  加载跨服配置信息
293 =======================================================================================================================
294 */
304 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
305 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
307 	// 跨服战场最大场景数量配置 2010-9-23 by rj
308 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
309 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
310 	
311 	m_MultiGroupConfig.m_nMaxMGuildMapCnt = ini.Get_Property_Int("MGuild", "Max_SceneCount");
312 	KCheckEx(m_MultiGroupConfig.m_nMaxMGuildMapCnt>0 && m_MultiGroupConfig.m_nMaxMGuildMapCnt<=MGUILD_MAX_MAPCOUNT, "跨服帮战场景数量要小于512");
314 // 	m_MultiGroupConfig.m_nMGuildBeginWeek = ini.Get_Property_Int("MGuild", "BeginWeek");
315 // 	KCheckEx(m_MultiGroupConfig.m_nMGuildBeginWeek>0 && m_MultiGroupConfig.m_nMGuildBeginWeek<=52, "起始周只能在1-52之间");
329 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
330 		
331 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
333 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
335 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);
392 		}		
393 	}
395 	//跨服关卡报名服务器开关 
396 	m_MultiGroupConfig.m_SignUpServerToggle = ini.Get_Property_Int( "Room", "SignUpServerToggle" );
397 	m_MultiGroupConfig.m_MapFubenToogle = ini.Get_Property_Int( "Room", "MapFubenToogle" );
1052 	m_ConfigInfo.m_nEmpireOfficerMinLevel = ini.Get_Property_Int("Empire","OfficerMinLevel");
1053 	//[Empire] End
1055 	//added for跨服军团  
1056 	for (int32 _nGIndex = 0; _nGIndex < MAX_GROUP_MEMBER; ++_nGIndex)
1057 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-share\DataBase\ArchiveInterface.cpp 296 KB CPP 文件 2013/3/10 22:00:24 2018/9/13 20:39:09 2018/9/13 20:39:09 1
9805 }
9807 /************************************************************************/
9808 /* 跨服战积分相关                                                       */
9809 /************************************************************************/
9811 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-share\DataBase\SqlStatement.cpp 21 KB CPP 文件 2013/3/10 22:00:26 2018/9/13 20:39:09 2018/9/13 20:39:09 1
251 char	*g_LoadLostItemInfo = "select aid,playerguid,srcplayerguid,srcplayername,guid,world,server,itemclass,creator,dataproperty,data,termendtime,islock,unlocktime,gmoptime from %s where aid>%u order by aid asc" ;
252 char	*g_DelLostItemInfo = "delete from %s where aid=%u";
254 // 跨服战积分相关处理
255 char	*LoadMPVPPointInfo = "select unitid, unitname, world, currentpoint, totalpoint, currentwintimes, currentjointimes, totalwintimes, totaljointimes, mpvptypename, currentweek, startweek, params from %s where valid = 1";
256 char	*SaveMPVPPointInfo = "call proc_save_mpvppoint(%d,\'%s\', %d, %d, %d, %d, %d, %d, %d, \'%s\', %d, %d, %d, 1)";

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-share\Messages\StructRoomBattle.cpp 68 KB CPP 文件 2013/3/10 22:02:15 2018/9/13 20:39:12 2018/9/13 20:39:12 19
4 Author:Michael		
5 Created:Michael    
6 Description :跨服房间相关结构
7 Revision :  2011/06/21 Michael create
9 =============================================================================*/
790 }
793 /************************************************************************/
794 /* 跨服报名候选数据结构定义  		                                    */
795 /************************************************************************/
796 BOOL RoomBattleSignupInfo::IsRoomIDInList(ut_id_room nRoomID) const
930 }
931 /************************************************************************/
932 /* 跨服报名候选数据结构定义 客户端消息结构                              */
933 /************************************************************************/
934 void RoomBattleSignupInfo_CX_Msg::Clear()
971 }
973 /************************************************************************/
974 /* 跨服取消报名结构定义   客户端消息结构	                           */
975 /************************************************************************/
976 void RoomBattleSignupCancel_CX_Msg::Clear()
1001 }
1003 /************************************************************************/
1004 /* 跨服确认进入结构定义    客户端消息结构	                           */
1005 /************************************************************************/
1006 void RoomBattleWaitingEnter_CX_Msg::Clear()
1108 }
1110 /************************************************************************/
1111 /* 跨服玩家确认结构定义    服务器消息结构	                           */
1112 /************************************************************************/
1113 void RoomBattlePlayerEnter_XC_Msg::Clear()
1147 }
1149 /************************************************************************/
1150 /* 跨服军团成员离开    服务器消息结构	                                */
1151 /************************************************************************/
1152 void RoomBattlePlayerLeave_XC_Msg::Clear()
1206 }
1209 /************************************************************************/
1210 /* 跨服确认进入结构定义    服务器消息结构	                           */
1211 /************************************************************************/
1212 void RoomBattleWaitingEnter_XC_Msg::Clear()
1580 }
1581 /************************************************************************/
1582 /* 跨服MapServer信息                  		                            */
1583 /************************************************************************/
1584 bool SMutiGroupMapServerInfo::IsValid( void ) const
1701 }
1703 /************************************************************************/
1704 /* 跨服关卡消息结构定义 MGP-->GL               		                    */
1705 /************************************************************************/
1706 uint32 MsgMGRoomBattle::GetMsgSize() const
1778 }
1780 /************************************************************************/
1781 /* 跨服关卡消息结构定义 GL-->MGP               		                    */
1782 /************************************************************************/
1783 uint32 MsgGMRoomBattle::GetMsgSize() const
1870 }
1871 /************************************************************************/
1872 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消            */
1873 /************************************************************************/
1874 uint32 MsgXGMRoomBattle_ReplyEnter::GetMsgSize()const
1907 }
1909 /************************************************************************/
1910 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消广播            */
1911 /************************************************************************/
1912 uint32 MsgXGMRoomBattle_ReplyEnter_BROADCAST::GetMsgSize()const
1945 }
1947 /************************************************************************/
1948 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  客户端确认离开，重新返回报名状态 */
1949 /************************************************************************/
1950 uint32 MsgXGMRoomBattle_Leave::GetMsgSize()const
1983 }
1985 /************************************************************************/
1986 /* 跨服关卡消息结构定义 MGP-->GL-->MGP        		                    */
1987 /************************************************************************/
1988 uint32 MsgMGMRoomBattle::GetMsgSize() const
2042 }
2044 /************************************************************************/
2045 /* 跨服关卡消息结构定义 MAP-->GL-->MGP        		                    */
2046 /************************************************************************/
2047 uint32 MsgXGMRoomBattle::GetMsgSize() const
2161 }
2163 /************************************************************************/
2164 /* 跨服关卡消息结构定义 MGP-->GL-->MAP        		                    */
2165 /************************************************************************/
2166 uint32 MsgMGXRoomBattle::GetMsgSize() const
2277 }
2279 /************************************************************************/
2280 /* 跨服关卡消息结构定义 Client-->MAP        		                    */
2281 /************************************************************************/
2282 uint32 MsgCXRoomBattle::GetMsgSize() const
2372 }
2374 /************************************************************************/
2375 /* 跨服关卡消息结构定义 MAP-->Client        		                    */
2376 /************************************************************************/
2377 uint32 MsgXCRoomBattle::GetMsgSize() const

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-share\TAB\TabDefine_Map_Misc.cpp 85 KB CPP 文件 2013/3/10 22:04:07 2018/9/13 20:39:15 2018/9/13 20:39:15 2
2378 /*
2379 =======================================================================================================================
2380 跨服关卡 逻辑数据表
2381 =======================================================================================================================
2382 */
2434 /*
2435 =======================================================================================================================
2436 跨服关卡 配置数据表
2437 =======================================================================================================================
2438 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KH_OB5\src\khan2-share\TAB\TabDefine_Share.cpp 37 KB CPP 文件 2013/3/10 22:04:09 2018/9/13 20:39:15 2018/9/13 20:39:15 2
998 {
999 	__GUARD__
1001 	//如果不开跨服副本，默认不读BackScene
1002 	if (!g_Config.m_MultiGroupConfig.IsMultMapOpen())
1003 	{
1054 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0) 
1055 	{
1056 		//如果是跨服MapServer确保BackScene有配置
1057 		KCheckEx(bFindCurrServerBackScene,"BakSceneInfo.tab表配置错误");
1058 	}

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\Client\Game\Network\Message\XCMPVP2v2BattleDispatch.cpp 2 KB CPP 文件 2013/3/11 12:48:37 2018/9/13 20:36:23 2018/9/13 20:36:23 1
1 /***********************************************************
2 desc:	跨服 2v2 战场服务器相应处理
3 auth:	crj
4 date:	2010-9-21

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\Client\Game\ScriptFunction\GameScriptFunction.cpp 244 KB CPP 文件 2013/3/10 22:20:07 2018/9/13 20:36:25 2018/9/13 20:36:25 1
8197 			return 0;
8198 	}
8200 	/* 跨服战场 2010-9-23 by rj */
8201 	if(MPVP2V2_BATTLE_TYPE == nIndex || MPVP6V6_BATTLE_TYPE == nIndex)
8202 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\Client\Game\ScriptFunction\GameScriptFunctionAroundPlayer.cpp 11 KB CPP 文件 2013/3/10 22:20:08 2018/9/13 20:36:25 2018/9/13 20:36:25 1
96 		if(propertyName == "Name")
97 		{
98 			// 2010-10-18 by rj 对组队对话框中的附近玩家，如果聊天者与自身不在一个服（跨服战场）则将这个用户显示名加入其服的名字
99 			if (OBJECT_MANAGER_PTR->GetMySelf() &&
100 			    OBJECT_MANAGER_PTR->GetMySelf()->GetCharacterData()->Get_WorldID() != pData->Get_WorldID())

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\Client\Game\ScriptFunction\GameScriptFunctionTalk.cpp 270 KB CPP 文件 2013/3/10 22:20:20 2018/9/13 20:36:25 2018/9/13 20:36:25 3
5469 			KYLIN_TRY std::vector<STRING>	strParam;
5470 			strParam.push_back(ChannelType2String((eCHAT_TYPE) reN.getChannelType()));
5472 			// 2010-10-18 by rj 如果聊天者与自身不在一个服（跨服战场）则将这个用户显示名加入其服的名字。增加附近聊天限制，否则可能会出现小喇叭显示异服的问题。
5473 			if (chatType == CHAT_TYPE_NEAR && 
5474 				pPacket->GetWorldID() != INVALID_ID &&
7316 void CScriptFunTalk::SetPaoPaoTxt(STRING &strUser, STRING &strTxt, int32 strType, int32 extLength, ID_t nWorldID)
7317 {
7318 	// 2010-10-26 by rj 对跨服聊天泡泡显示不同服的同名玩家进行支持
7319 	KCharacter	*pObj = OBJECT_MANAGER_PTR->FindCharacterByName(strUser, CHARACTER_PLAYER_TYPE, nWorldID);
7320 	if(pObj && pObj->GetTitleBoard()->isShow())
7330 void CScriptFunTalk::SetPaoPaoMoodAnim(STRING &strUser, STRING &strTxt, ID_t nWorldID)
7331 {
7332 	// 2010-10-26 by rj 对跨服聊天泡泡显示不同服的同名玩家进行支持
7333 	KCharacter	*pObj = OBJECT_MANAGER_PTR->FindCharacterByName(strUser, CHARACTER_PLAYER_TYPE, nWorldID);
7334 	if(!pObj || !(pObj->GetTitleBoard()->isShow()))

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\Client\Game\UI\UIPartyMessageBox.cpp 29 KB CPP 文件 2013/3/10 22:20:28 2018/9/13 20:36:26 2018/9/13 20:36:26 2
269 		}
270 		break;
271 	case MPVP2V2_BATTLE_TYPE: 	// 发送进入跨服 2v2 竞技场请求 2010-9-23 by rj
272 		{
273 			CXMPVP2v2Battle	msg;
549 			}
550 			break;
551 		case MPVP2V2_BATTLE_TYPE: // 2010-9-23 by rj 跨服 2v2 战场处理
552 			{
553 				CEGUI::String	strUtf32;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\GLServer\GL\Messages\LWRequestPlayerLoginDispatch.cpp 13 KB CPP 文件 2013/3/10 22:39:07 2018/9/13 20:37:25 2018/9/13 20:37:25 1
191 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
192 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
194 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
195 		if (pFindPlayer == NULL)
196 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\MapServer\Server\Connector\ServerConnectorManager_MapServer.cpp 12 KB CPP 文件 2013/3/10 22:40:15 2018/9/13 20:37:25 2018/9/13 20:37:25 1
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\MapServer\Server\Map\MapCore.cpp 37 KB CPP 文件 2013/3/10 22:41:08 2018/9/13 20:37:26 2018/9/13 20:37:26 1
630 				m_bFirstInit = FALSE;
631 			}
632 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
633 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD || pSceneData->m_Type == MAP_TYPE_MSIGNUP)
634 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\MapServer\Server\Messages\CXMPVP2v2BattleDispatch.cpp 4 KB CPP 文件 2013/3/10 22:41:43 2018/9/13 20:37:26 2018/9/13 20:37:26 1
1 /***********************************************************
2 desc:	跨服 2v2 战场客户端请请求处理
3 auth:	crj
4 date:	2010-9-21

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\MapServer\Server\Messages\CXUseItemDispatch.cpp 8 KB CPP 文件 2013/3/10 22:42:30 2018/9/13 20:37:27 2018/9/13 20:37:27 1
117 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
118 	{
119 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
120 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
121 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\MapServer\Server\Messages\GXRequestGuildConvoyDispatch.cpp 4 KB CPP 文件 2013/3/10 22:42:52 2018/9/13 20:37:27 2018/9/13 20:37:27 1
77 	{
78 		KCheck(KGetCurrentTID() == pMap->m_ThreadID);
80 		// 2010-10-21 by rj 增加跨服报名场景可以接收到拉兽召唤
81 		if(pMap->GetMapType() == MAP_TYPE_GAMELOGIC || pMap->GetMapType() == MAP_TYPE_MSIGNUP)
82 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\MapServer\Server\Messages\GXRetChangeSceneDispatch.cpp 5 KB CPP 文件 2013/3/10 22:42:54 2018/9/13 20:37:27 2018/9/13 20:37:27 1
106 				KCheck(pMapData);
108 				ID_t ServerID = pMapData->m_ServerID;
110 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
111 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
112 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\MapServer\Server\Messages\XXMPVP2v2BattleDispatch.cpp 5 KB CPP 文件 2013/3/10 22:43:05 2018/9/13 20:37:27 2018/9/13 20:37:27 1
1 /***********************************************************
2 desc:	跨服 2v2 战场场景通知消息处理
3 auth:	crj
4 date:	2010-9-23

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\MapServer\Server\Messages\Delegater\ChangeMapDelegater.cpp 35 KB CPP 文件 2013/3/11 13:03:45 2018/9/13 20:37:27 2018/9/13 20:37:27 2
1216 		pPlayer->ClearMutexState(MS_Fuben);
1217 	}
1219 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1220 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1221 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\MapServer\Server\Messages\Delegater\GXCountryDispatchDelegater.cpp 26 KB CPP 文件 2013/3/11 13:03:46 2018/9/13 20:37:27 2018/9/13 20:37:27 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				&&	pMap->GetMapType() != MAP_TYPE_MSIGNUP
229 				) 
277 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
278 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
279 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
280 				&&	pMap->GetMapType() != MAP_TYPE_MSIGNUP
281 				)

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\MapServer\Server\Other\MPVP2v2Battle.cpp 31 KB CPP 文件 2013/3/10 22:43:46 2018/9/13 20:37:30 2018/9/13 20:37:30 2
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
548 			nLevelFlag = 0;
549 		}
551 		// 报名场景必须在这个跨服战场服务器上
552 		Map	*pMap = g_pMapManager->GetMap((MapID_t)m_SceneList.m_aScene[i]);
553 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\MapServer\Server\Other\MPVPBattleManager.cpp 8 KB CPP 文件 2013/3/10 22:43:48 2018/9/13 20:37:30 2018/9/13 20:37:30 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
95 	__UNGUARD__ return FALSE;
96 }
98 // 以类型方式获得跨服战场类
99 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVPBattleType nType)
100 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\MapServer\Server\Run\DaemonThread.cpp 8 KB CPP 文件 2013/3/10 22:43:56 2018/9/13 20:37:30 2018/9/13 20:37:30 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\MapServer\Server\Run\Server.cpp 30 KB CPP 文件 2013/3/10 22:43:58 2018/9/13 20:37:30 2018/9/13 20:37:30 1
537 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTopListCacheMgr...OK");
538 	
539 	// 跨服战场管理器 2010-10-13 by rj
540 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
541 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\MapServer\Server\Script\LuaFunction_Scene.cpp 184 KB CPP 文件 2013/3/10 22:44:19 2018/9/13 20:37:30 2018/9/13 20:37:30 14
1456 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1458 	KCheck(szName);
1460 	// 2010-11-2 对发送脚本邮件进行跨服支持
1461 	ObjID_t selfId = Lua_ValueToNumber(L, 7);
1462 	BEGPLAYERDEFINE("LuaFunction_SendScriptMail");
5359 	return 0;
5360 }
5363 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5364 int32 LuaFunction_MPVP2v2RegisterScene(Lua_State *L)
5365 {
5386 	LUA_RETURNERROR_1;
5387 }
5389 // 跨服 2v2 战场场景报名查询函数 by rj 2010-9-21
5390 int32 LuaFunction_MPVP2v2SignupState(Lua_State *L)
5391 {
5448 	return 0;
5449 }
5451 // 跨服 2v2 战场场景报名函数 by rj 2010-9-21
5452 int32 LuaFunction_MPVP2v2Signup(Lua_State *L)
5453 {
5510 	return 0;
5511 }
5513 // 跨服 2v2 战场场景查询是否报名函数 by rj 2010-9-25
5514 int32 LuaFunction_MPVP2v2IsSignup(Lua_State *L)
5515 {
5544 	return 0;
5545 }
5547 // 跨服 2v2 战场场景启用战场 UI 面板 by rj 2010-9-28
5548 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5549 {
5591 	return 0;
5592 }
5594 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5595 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5596 //{
5618 //}
5619 //
5620 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5621 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5622 //{
5688 //}
5689 //
5690 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5691 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5692 //{
5758 //}
5759 //
5760 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5761 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5762 //{
5792 //}
5793 //
5794 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
5795 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5796 //{
5839 //}
5840 //
5841 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
5842 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
5843 //{
5891 //}
5892 //
5893 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
5894 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
5895 //{
5936 //}
5937 //
5938 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
5939 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
5940 //{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\MapServer\Server\Script\LuaSystem_Function.cpp 102 KB CPP 文件 2013/3/10 22:44:24 2018/9/13 20:37:30 2018/9/13 20:37:30 1
888 	m_LuaVM.RegisterFunction("PVP2v2AskBattleSceneEnter", (void *) (LuaFunction_PVP2v2AskBattleSceneEnter));
889 	m_LuaVM.RegisterFunction("SetPVP2v2BattleDisable", (void *) (LuaFunction_SetPVP2v2BattleDisable));
890 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterScene));	// 跨服 2v2 战场扩充函数 by rj 2010-9-21 
891 	m_LuaVM.RegisterFunction("MPVP2v2SignupState", (void *) (LuaFunction_MPVP2v2SignupState));
892 	m_LuaVM.RegisterFunction("MPVP2v2Signup", (void *) (LuaFunction_MPVP2v2Signup));

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\Share\Connector\ConnectorManager.cpp 14 KB CPP 文件 2013/3/10 12:39:51 2018/9/13 20:37:30 2018/9/13 20:37:30 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ConnectorID_t pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\Share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/10 12:39:52 2018/9/13 20:37:30 2018/9/13 20:37:30 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ConnectorID_t ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\Share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/10 12:39:53 2018/9/13 20:37:30 2018/9/13 20:37:30 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ID_t serverid,ConnectorID_t& connID)
200 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\Khan2Unicode\Share\Core\Setting.cpp 71 KB CPP 文件 2013/3/10 12:39:56 2018/9/13 20:37:30 2018/9/13 20:37:30 3
286 /*
287 =======================================================================================================================
288  加载跨服配置信息
289 =======================================================================================================================
290 */
300 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
301 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
303 	// 跨服战场最大场景数量配置 2010-9-23 by rj
304 	m_MultiGroupConfig.m_nMax2v2SceneCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
305 	m_MultiGroupConfig.m_nMax6v6SceneCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
319 		m_MultiGroupConfig.m_GLServerInfo[i].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
320 		
321 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
323 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
325 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-client\GameCommandSystem.cpp 63 KB CPP 文件 2013/3/10 13:48:48 2018/9/13 20:38:02 2018/9/13 20:38:02 1
1417 	{ GCD_ASK_JOIN_FUBEN_WITH_TEAM, "ASK_JOIN_FUBEN_WITH_TEAM" },
1418 	{ GCD_ASK_EXIT_ROOM, "ASK_EXIT_ROOM" },
1420 	//跨服副本报名搜索
1421 	{ GCD_UPDATE_FUBEN_SEARCH_STATE,"UPDATE_FUBEN_SEARCH_STATE" },
1423 	//军团信息更新

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-client\GameStateChangeServer.cpp 6 KB CPP 文件 2013/3/10 13:49:22 2018/9/13 20:38:03 2018/9/13 20:38:03 1
210 			::GetPrivateProfileString( "Debug", "Login.WorldID", "", szReadTemp, MAX_PATH, DEBUG_FILE_NAME );
211 			static ut_id s_nWorldID = atoi(szReadTemp); 
212 			GAME_DATA_PLAYER_PTR->SetWorldID(s_nWorldID); // 支持跨服自架测试
213 																			
214 		}

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-client\GameStateRun.cpp 90 KB CPP 文件 2013/3/10 13:49:24 2018/9/13 20:38:03 2018/9/13 20:38:03 2
660 	
661 	GAME_DATA_PTR->askCountryData();
664 	//跨服关卡的处理 
666 	//清除小地图上的军团信息
667 	GAME_DATA_RELATION_PTR->GetCorps()->ClearCorpsInfo();
679 	//请求军团数据
680 	GAME_DATA_QUEST_PTR->AskRoomBattleGroupData();
681 	/////跨服关卡的处理	
682 }
685 void CGameStateRun::IsMapLoaded( void )

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-client\UIMap.cpp 24 KB CPP 文件 2013/3/10 13:49:56 2018/9/13 20:38:04 2018/9/13 20:38:04 1
482 		case MAP_POINT_TRANSER_NPC:		szChildWinType = MAP_POINT_TYPE_TRANSER_NPC;	break;
483 		case MAP_POINT_MONSTER:			szChildWinType = MAP_POINT_TYPE_MONSTER;		break;
485 		// 跨服6v6的旗子
486 		case MAP_POINT_OneLevelFlag:			szChildWinType = MAP_POINT_TYPE_ONELEVELFLAG; break;
487 		case MAP_POINT_TwoLevelFlag:			szChildWinType = MAP_POINT_TYPE_TWOLEVELFLAG; break;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-client\UIPartyMessageBox.cpp 33 KB CPP 文件 2013/3/10 13:49:57 2018/9/13 20:38:04 2018/9/13 20:38:04 1
404 		}
405 		break;
407 	case MGUILD_BATTLE_TYPE: // 跨服帮会战
408 		{
409 			CXMPVPBattle msg;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-dbshare\MKLogicManager.cpp 111 KB CPP 文件 2013/3/10 13:50:35 2018/9/13 20:38:04 2018/9/13 20:38:04 1
3646 }
3648 /************************************************************************/
3649 /* 跨服战积分相关                                                       */
3650 /************************************************************************/
3651 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-glserver\GL.cpp 44 KB CPP 文件 2013/3/10 13:50:43 2018/9/13 20:38:05 2018/9/13 20:38:05 5
425 	KCheck(g_pGuildBattleManager);
426 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildBattleManager...OK");
428 	//跨服帮战的管理器
429 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new MultiGuildBattleManager ... ");
430 	g_pMGuildBattleManager = new MGuildBattleManager;
508 	KCheck(g_pGuildCenter);
509 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildManager...OK");
511 	//跨服战积分管理器
512 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMPVPPointManager ... ");
513 	g_pMPVPPointManager = new MPVPPointManager;
694 	KCheck(g_pSystemParamsManager);
695 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new g_pSystemParamsManager...OK");
698 	// 跨服管理器
699 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMutiGroupMapServerManager ... ");
700 	g_pMutiGroupMapServerManager = new MutiGroupMapServerManager;
945 	KCheck(ret);
946 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager->Init()...OK");
949 	//跨服管理器
950 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[Init] g_pMutiGroupMapServerManager->Init()...OK");
951 	ret = g_pMutiGroupMapServerManager->Init();
1127 	KSafeDelete(g_pSystemParamsManager);
1128 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager delete...OK");
1130 	//跨服管理器
1131 	KSafeDelete(g_pMutiGroupMapServerManager);
1132 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pMutiGroupMapServerManager delete...OK");

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 14 KB CPP 文件 2013/3/10 13:50:52 2018/9/13 20:38:05 2018/9/13 20:38:05 1
223 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
224 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
226 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
227 		if (pFindPlayer == NULL)
228 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-glserver\MGuildBattleManager.cpp 15 KB CPP 文件 2013/3/10 13:50:55 2018/9/13 20:38:05 2018/9/13 20:38:05 8
94 	// 当前赛季进度
95 	int32 nSeasonWeek = (GET_TIME().GetWeekNumFrom2011() - g_Config.m_ConfigInfo.m_MPVPGuildBeginWeek) % g_Config.m_ConfigInfo.m_MPVPPointPeriodWeeks;
97 	// 取得跨服服务器
98 	int32 nServerNum = 0;
99 	ut_id serverIDs[SERVER_CAPACITY] = {-1};
145 	//	if (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / nServerNum <= 0)
146 	//		return serverIDs[0];
148 	//	// 2011-07-26 by rj 改进原来的等分算法，在所连跨服服务器数量等于 2 时用用 4/6 算法来解决高分帮会人数过多的问题
149 	//	int32 iSeg = iIndex / (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / (nServerNum <= 2 ? 2.5f : nServerNum) );
150 	//	if (iSeg >= nServerNum)
166 	if (uPrevSignupTime)
167 	{
168 		// 超时保护（防止报名完成后跨服服务器宕机导致 GL 无法清理报名）
169 		if (GET_TIME().GetCTime() - uPrevSignupTime > 90*60)
170 		{
258 	if(!pGuild || pGuild->GetGuildID() == INVALID_KHAN_ID)
259 		return FALSE;
261 	// 转发跨服战场进入通知到报名玩家所在 Map
262 	GXMPVPBattle msg;
263 	msg.SetBattleType(MPVP_GUILD_BATTLE_TYPE);
416 					aSignupPlayers[0].GuildPoint = pPoint->m_nCurrentPoint;
417 				}
419 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
420 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
421 				msg.SetSignupType(pKMessage->GetSignupType());
472 				if (NULL != pServePlayer_Target)
473 				{
474 					// 转发跨服战场状态到报名玩家所在 Map
475 					GXMPVPBattle msg;
476 					msg.SetBattleType(pKMessage->GetBattleType());
503 				return MP_CONTINUE;
504 			}
506 			// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
507 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pMatch->nServerID);
508 			if (pServePlayer_Target)
524 			if (NULL != pServePlayer_Target)
525 			{
526 				// 转发跨服战场进入响应到报名玩家所在 Map
527 				GXMPVPBattle msg;
528 				msg.SetBattleType(pKMessage->GetBattleType());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-glserver\MPVPGuildPoint.cpp 8 KB CPP 文件 2013/3/10 13:50:55 2018/9/13 20:38:05 2018/9/13 20:38:05 3
1 /************************************************************************/
2 /* 帮会跨服战积分信息接口的具体实现                                     */
3 /************************************************************************/
5 #include "stdafx.h"
195 /*
196 =======================================================================================================================
197 处理不同跨服战各自的额外参数填充
198 =======================================================================================================================
199 */
223 /*
224 =======================================================================================================================
225 加载跨服帮战每周的场次信息
226 =======================================================================================================================
227 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-glserver\MPVPPointArithmetic.cpp 2 KB CPP 文件 2013/3/10 13:50:55 2018/9/13 20:38:05 2018/9/13 20:38:05 3
1 /************************************************************************/
2 /* 跨服战积分算法器,负责各种跨服战积分的计算逻辑实现                    */
3 /************************************************************************/
5 #include "stdafx.h"
16 /*
17 ===============================================================================================================
18 根据实力来计算跨服帮会的加权分
19 帮会实力-(错过的场次*放弃损失的分数)
20 ===============================================================================================================

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-glserver\MPVPPointInfo.cpp 14 KB CPP 文件 2013/3/10 13:50:56 2018/9/13 20:38:05 2018/9/13 20:38:05 2
1 /************************************************************************/
2 /* 跨服战积分信息接口的具体实现                                         */
3 /************************************************************************/
5 #include "stdafx.h"
72 /*
73 =======================================================================================================================
74 获取跨服积分的数据信息
75 =======================================================================================================================
76 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-glserver\MPVPPointManager.cpp 11 KB CPP 文件 2013/3/10 13:50:56 2018/9/13 20:38:05 2018/9/13 20:38:05 5
1 /************************************************************************/
2 /* 跨服战积分管理器的实现                                               */
3 /************************************************************************/
5 #include "stdafx.h"
98 /*
99 ===============================================================================================================
100 注册跨服积分的实现
101 ===============================================================================================================
102 */
220 /*
221 ===============================================================================================================
222 获取指定类型跨服战全部积分信息
223 ===============================================================================================================
224 */
243 /*
244 ===============================================================================================================
245 获取指定跨服战当前的赛季开始周
246 ===============================================================================================================
247 */
266 /*
267 ===============================================================================================================
268 获取指定跨服战当前周
269 ===============================================================================================================
270 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-glserver\MPVPToplist.cpp 8 KB CPP 文件 2013/3/10 13:50:56 2018/9/13 20:38:05 2018/9/13 20:38:05 2
1 /************************************************************************/
2 /* 跨服帮会战排行榜的具体实现		                                    */
3 /************************************************************************/
5 #include "stdafx.h"
25 /*
26 =======================================================================================================================
27 积分数据加载,从跨服积分管理器中加载需要的信息
28 =======================================================================================================================
29 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-glserver\MutiGroupMapServerManager.cpp 18 KB CPP 文件 2013/3/10 13:50:58 2018/9/13 20:38:05 2018/9/13 20:38:05 1
4 Author:Michael		
5 Created:Michael
6 Description :跨服MapServer管理器实现
7 Revision :  2011/06/17 Michael create
9 =============================================================================*/

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-glserver\ServerConnectorManager_GL.cpp 11 KB CPP 文件 2013/3/10 13:51:02 2018/9/13 20:38:05 2018/9/13 20:38:05 2
518 			_NET_TRY
519 			{
520 				// 跨服帮战管理器心跳
521 				ret = g_pMGuildBattleManager->HeartBeat(uTime);
522 				KCheck(ret);
528 			_NET_TRY
529 			{
530 				//处理跨服战积分管理器相关的心跳
531 				ret = g_pMPVPPointManager->HeartBeat(uTime);		
532 				KCheck(ret);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-glserver\TopListManager.cpp 18 KB CPP 文件 2013/3/10 13:51:08 2018/9/13 20:38:05 2018/9/13 20:38:05 1
152 	Register(HONOR_CHARIOT_TOP_LIST_BK,			new TopList,					"Chariot_Honor_bk" );
153 	// add by dragon 战车排行榜 }
155 	// 跨服帮会战排行榜
156 	Register(MPVP_GUILD_CURRENT,			new CurrentMPVPGuildTopList,		"MPVP_Guild_Current" );
157 	Register(MPVP_GUILD_CURRENT_BK,			new TopList,				"MPVP_Guild_Current_bk" );

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-glserver\XGBattleDispatch.cpp 93 KB CPP 文件 2013/3/10 13:51:11 2018/9/13 20:38:05 2018/9/13 20:38:05 25
2507 }
2509 /***********************************************************
2510 desc:	跨服战场 XG 服务器消息处理
2511 auth:	rj
2512 date:	2011-2-14
2520 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2521 	{
2522 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2523 		static IntegerHashMap mapMPVP2v2SignupRecord;
2524 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2526 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2527 		}
2529 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2530 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2531 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2548 		case MPVP_BATTLE_RETSTATE:
2549 			{
2550 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名。值是当前报名的时间。
2551 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2552 				{
2582 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2583 				KCheck(pServePlayer_Target);
2585 				// 转发跨服战场进入通知到报名玩家所在 Map
2586 				GXMPVPBattle msg;
2587 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2613 				if (uPrevSignupTime)
2614 				{
2615 					// 6 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2616 					if (GET_TIME().GetCTime() - uPrevSignupTime > 360)
2617 					{
2719 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2720 				}
2722 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2723 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2724 				msg.SetSignupType(pKMessage->GetSignupType());
2734 				if (NULL != pServePlayer_Target)
2735 				{
2736 					// 转发跨服战场状态到报名玩家所在 Map
2737 					GXMPVPBattle msg;
2738 					msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2752 				if (iServerID)
2753 				{
2754 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2755 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2756 					if (NULL != pServePlayer_Target)
2777 				if (NULL != pServePlayer_Target)
2778 				{
2779 					// 转发跨服战场进入响应到报名玩家所在 Map
2780 					GXMPVPBattle msg;
2781 					msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2793 	else if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_6V6)
2794 	{
2795 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2796 		static IntegerHashMap mapMPVP6v6SignupRecord;
2797 		if (mapMPVP6v6SignupRecord.GetMaxCount() == 0)
2799 			mapMPVP6v6SignupRecord.InitTable(MAX_WORLD_PLAYER);
2800 		}
2802 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2803 		static IntegerHashMap mapMPVP6v6EnterBattleRecord;
2804 		if (mapMPVP6v6EnterBattleRecord.GetMaxCount() == 0)
2821 		case MPVP_BATTLE_RETSTATE:
2822 			{
2823 				// 记录这次跨服 6v6 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 6v6 的报名。值是当前报名的时间。
2824 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2825 				{
2856 				if (NULL != pServePlayer_Target)
2857 				{
2858 					// 转发跨服战场进入通知到报名玩家所在 Map
2859 					GXMPVPBattle msg;
2860 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
2890 				if (uPrevSignupTime)
2891 				{
2892 					// 11 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2893 					if (GET_TIME().GetCTime() - uPrevSignupTime > 660)
2894 					{
2996 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2997 				}
2999 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
3000 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
3001 				msg.SetSignupType(pKMessage->GetSignupType());
3011 				if (NULL != pServePlayer_Target)
3012 				{
3013 					// 转发跨服战场状态到报名玩家所在 Map
3014 					GXMPVPBattle msg;
3015 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
3029 				if (iServerID)
3030 				{
3031 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
3032 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
3033 					if (NULL != pServePlayer_Target)
3054 				if (NULL != pServePlayer_Target)
3055 				{
3056 					// 转发跨服战场进入响应到报名玩家所在 Map
3057 					GXMPVPBattle msg;
3058 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-mapserver\Bus.cpp 66 KB CPP 文件 2013/3/10 13:51:32 2018/9/13 20:38:06 2018/9/13 20:38:06 3
804 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
805 		= CaculateMonsterExpRuler::eCALC_TYPE_TEAM;
807 	//如果是跨服副本
808 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
809 	{
809 	{
810 		nValidMemberCount = GetValidOwnerListGroup(MAX_GROUP_MEMBER,apValidMember);
811 		eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
812 	}
813 	else
1090 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1092 	if(Get_OccupantTeamID() != INVALID_KHAN_ID) iFadeoutType = Obj_ItemRuler::FADE_OUT_TEAM;
1094 	//是否是跨服
1095 	BOOL BGroup = FALSE;
1096 	Map* pMap = GetMap();

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-mapserver\ChangeMapDelegater.cpp 43 KB CPP 文件 2013/3/10 13:51:52 2018/9/13 20:38:06 2018/9/13 20:38:06 2
1506 		pPlayer->ClearMutexState(MS_Fuben);
1507 	}
1509 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1510 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1511 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 13:51:34 2018/9/13 20:38:06 2018/9/13 20:38:06 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-mapserver\CXItemDispatch.cpp 69 KB CPP 文件 2013/3/10 13:51:42 2018/9/13 20:38:06 2018/9/13 20:38:06 1
2233 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
2234 	{
2235 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
2236 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2237 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-mapserver\GMCommand.cpp 208 KB CPP 文件 2013/3/10 13:52:03 2018/9/13 20:38:06 2018/9/13 20:38:06 1
543 	REGISTER_HANDLER(addchariothonour);	// \gm addchariothonour =100	增加战车荣誉
544 	REGISTER_HANDLER(unlockhorse);		// \gm unlockhorse =objid =horseindex  强制解锁骑乘
545 	REGISTER_HANDLER(addguildwin);		// \gm addguildwin =num 增加跨服帮战胜利次数
547 	REGISTER_HANDLER(getviewgroup);		// \gm getviewgroup	//获取当前的可视组
548 	REGISTER_HANDLER(setviewgroup);		// \gm setviewgroup	=groupnum //设置当前的可视组

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-mapserver\GMRoomBattleDispatch.cpp 5 KB CPP 文件 2013/3/10 13:52:03 2018/9/13 20:38:06 2018/9/13 20:38:06 1
53 	else
54 	{
55 		ut_id_map nBackSceneID = g_pFubenManager->GetServerBakSceneID();  //跨服处的副本入口场景
57 		ut_id_map nTarSceneId = pPacket->GetRoomBattle()->u_RoomBattleData.m_SceneID;
58 		

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-mapserver\GXBattleDispatch.cpp 56 KB CPP 文件 2013/3/10 13:52:04 2018/9/13 20:38:06 2018/9/13 20:38:06 6
1482 }
1484 /***********************************************************
1485 desc:	跨服战场 GX 服务器消息处理
1486 auth:	rj
1487 date:	2011-2-14
1504 			case MPVP_BATTLE_SIGNUP:
1505 				{
1506 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1508 					IMPVPBattle *pMPVPBattle = g_pMPVPBattleManager->GetMPVPBattleByType((MPVP_BATTLE_TYPE)pKMessage->GetBattleType());
1509 					//KCheck(pMPVPBattle);
1572 						return MP_CONTINUE;
1573 					}
1575 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1576 					pMPVPBattle->TellPlayerEnterMap(pKMessage, pConnector);
1577 				}
1618 			case MPVP_BATTLE_RETSTATE:
1619 				{
1620 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1621 					pMap->GetLuaSystem()->RunScriptFunction
1622 						(
1634 			case MPVP_BATTLE_RES_ENTERSCENE:
1635 				{
1636 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1637 					pMap->GetLuaSystem()->RunScriptFunction
1638 						(
1665 }
1667 /***********************************************************
1668 desc:	跨服战场场景通知消息处理
1669 auth:	rj
1670 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 28 KB CPP 文件 2013/3/10 13:52:06 2018/9/13 20:38:06 2018/9/13 20:38:06 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-mapserver\GXMapDispatch.cpp 20 KB CPP 文件 2013/3/10 13:52:10 2018/9/13 20:38:07 2018/9/13 20:38:07 2
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{
588 		return MP_CONTINUE;
589 	}
591 	//以下是跨服的副本的处理
593 	//给报名服务器返回创建成功消息			
594 	MGMRoomBattle* Msg = CREATE_MESSAGE_OBJ(MGMRoomBattle,MESSAGE_MGM_ROOMBATTLE);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 13:52:29 2018/9/13 20:38:07 2018/9/13 20:38:07 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-mapserver\LuaFunction_Chat.cpp 61 KB CPP 文件 2013/3/10 13:52:32 2018/9/13 20:38:07 2018/9/13 20:38:07 1
1086 		pMsg->SetCycleCount(nParam);
1087 	g_pServerConnectorMgr->SendMessage_SingleMode(pMsg);
1090 	//世界频道支持跨服
1091 	for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
1092 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-mapserver\LuaFunction_Map.cpp 207 KB CPP 文件 2013/3/10 13:52:34 2018/9/13 20:38:07 2018/9/13 20:38:07 16
257 	SelectMap.m_MapDataType = 0;
258 	SelectMap.m_CopyData = * pFD;
259 	SelectMap.m_CopyData.m_bRoom = false;//非跨服房间类型
261 	if (nRoomType == 1)
262 	{
1711 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1713 	KCheck(szName);
1715 	// 2010-11-2 对发送脚本邮件进行跨服支持
1716 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1717 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5832 	return 0;
5833 }
5835 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5836 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5837 {
5858 	LUA_RETURNERROR_1;
5859 }
5861 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5862 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5863 {
5905 	return 0;
5906 }
5908 // 跨服 6v6 战场场景注册函数
5909 int32 LuaFunction_MPVP6v6RegisterMap(Lua_State *L)
5910 {
5931 	LUA_RETURNERROR_1;
5932 }
5934 // 跨服 6v6 战场场景更新战场 UI 面板
5935 int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5936 {
5978 	return 0;
5979 }
5981 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5982 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5983 //{
6005 //}
6006 //
6007 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
6008 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
6009 //{
6075 //}
6076 //
6077 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
6078 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
6079 //{
6145 //}
6146 //
6147 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
6148 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
6149 //{
6179 //}
6180 //
6181 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
6182 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
6183 //{
6226 //}
6227 //
6228 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
6229 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
6230 //{
6278 //}
6279 //
6280 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
6281 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
6282 //{
6323 //}
6324 //
6325 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
6326 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
6327 //{
7169 	return 0;
7170 }
7172 // 跨服战场场景注册函数
7173 int32 LuaFunction_MPVPRegisterMap(Lua_State *L)
7174 {
7264 	if(pMap)
7265 	{
7266 		// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
7267 		int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
7268 			(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-mapserver\LuaSystem_Function.cpp 127 KB CPP 文件 2013/3/10 13:52:41 2018/9/13 20:38:07 2018/9/13 20:38:07 10
1176 	m_LuaVM.RegisterFunction("AddBattleHonour", (void *) (LuaFunction_AddBattleHonour));							// 增加战功
1177 	m_LuaVM.RegisterFunction("SubBattleHonour", (void *) (LuaFunction_SubBattleHonour));							// 减少战功
1178 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));					// 跨服 2v2 战场注册场景 
1179 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));			// 跨服 2v2 战场名称显示
1180 	m_LuaVM.RegisterFunction("MPVP6v6RegisterScene", (void *) (LuaFunction_MPVP6v6RegisterMap));					// 跨服 6v6 战场注册场景
1181 	m_LuaVM.RegisterFunction("SetMPVP6v6BattleDisable", (void *) (LuaFunction_SetMPVP6v6BattleDisable));			// 跨服 6v6 战场名称显示
1182 	m_LuaVM.RegisterFunction("MPVPRegisterMap", (void *) (LuaFunction_MPVPRegisterMap));							// 跨服战场注册场景
1183 	m_LuaVM.RegisterFunction("CountryIsFortuneTimeEx", (void *) (LuaFunction_CountryIsFortuneTimeEx));				// 获取特定国家的国运是否进行
1184 	m_LuaVM.RegisterFunction("AddCountryResourceWithRecall", (void *) (LuaFunction_AddCountryResourceWithRecall));	// 比较并增加的修改资源,保证同步
1296 	m_LuaVM.RegisterFunction("IsLeague", (void*)(LuaFunction_IsLeague));											// 判断两国是否是弱国联盟
1297 	m_LuaVM.RegisterFunction("CountryLeagueZhaoji", (void*)(LuaFunction_CountryLeagueZhaoji));						// 发送联盟召集令
1298 	m_LuaVM.RegisterFunction("AskEnterMGuildBattleScene",(void*)(LuaFunction_AskEnterMGuildBattleScene)); 			// 请求进入跨服帮会战场
1299 	m_LuaVM.RegisterFunction("MGuildBattleSignup",(void*)(LuaFunction_MGuildBattleSignup)); 						// 跨服帮会战报名
1300 	m_LuaVM.RegisterFunction("MGuildBattleResult",(void*)(LuaFunction_MGuildBattleResult)); 						// 跨服帮会战结果
1301 	m_LuaVM.RegisterFunction("MGuildBattleSeasonWeek",(void*)(LuaFunction_MGuildBattleSeasonWeek)); 				// 跨服帮会战赛季当前周数
1302 	m_LuaVM.RegisterFunction("GetMGuildNumOfBattleCurSeason", (void*)(LuaFunction_GetMGuildNumOfBattleCurSeason));	// 获取跨服帮战当前赛季的场数
1303 	m_LuaVM.RegisterFunction("SetEquipPokerData",(void*)(LuaFunction_SetEquipPokerData));							// 设置装备扑克牌属性
1304 	m_LuaVM.RegisterFunction("SetEquipPokerCount",(void*)(LuaFunction_SetEquipPokerCount));							// 设置装备扑克牌个数

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-mapserver\MapCore.cpp 38 KB CPP 文件 2013/3/10 13:52:44 2018/9/13 20:38:07 2018/9/13 20:38:07 2
614 				pSceneData->m_MapID == 20 ||
615 				pSceneData->m_MapID == 23 || 
616 				pSceneData->m_MapID == g_pFubenManager->GetServerBakSceneID())//  支持跨服副本
617 				
618 			{
673 				m_bFirstInit = FALSE;
674 			}
675 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
676 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
677 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-mapserver\MapManager.cpp 59 KB CPP 文件 2013/3/10 13:52:46 2018/9/13 20:38:07 2018/9/13 20:38:07 3
1720 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1721 		{
1722 			KCheck(FALSE);//跨服服务器上找不到报错
1723 		}
1725 		return INVALID_KHAN_ID;
2003 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2004 	{
2005 		//以下开始通知广播,支持跨服架构
2006 		for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
2007 		{
2035 BOOL FubenManager::BroadcastFubenSceneInfo(void)
2036 {
2037 	//如果不开跨服副本，不广播
2038 	if (g_Config.m_MultiGroupConfig.IsMultMapOpen() == FALSE)
2039 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-mapserver\MapServer.cpp 34 KB CPP 文件 2013/3/10 13:52:46 2018/9/13 20:38:07 2018/9/13 20:38:07 1
593 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
594 	
595 	// 跨服战场管理器 2010-10-13 by rj
596 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
597 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-mapserver\MGuildBattle.cpp 28 KB CPP 文件 2013/3/10 13:52:41 2018/9/13 20:38:07 2018/9/13 20:38:07 3
1 /***********************************************************
2 desc:	跨服帮会战场实现
3 auth:	txp
4 date:	2011-6-10
122 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，
123 		// 为这个很少出现的异常进行处理。
124 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，
125 		// 如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
126 		if (FindSignup(pSignupPlayers[i].iWorldID, pSignupPlayers[i].GuildID))
427 		m_MatchList.m_aMatch[m_MatchList.m_nCount].m_bFinished = FALSE;
429 		int32 nLevelFlag=0, nDisLevel = s1.m_nSignupLevel - s2.m_nSignupLevel;
431 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
432 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
433 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-mapserver\Monster.cpp 67 KB CPP 文件 2013/3/10 13:52:49 2018/9/13 20:38:07 2018/9/13 20:38:07 6
641 		return 0;
642 	}
644 	//如果是跨服副本
645 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
646 	{
880 		return;
881 	}
883 	//跨服副本
884 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
885 	{
916 	Player *apValidMember[MAX_GROUP_MEMBER];
917 	uint32 nValidMemberCount = 0;
919 	// 跨服副本
920 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
921 	{
996 		nExp = (int32) (m_BaseExp * fExpParam);
997 	}
999 	uint32	auExp[MAX_GROUP_MEMBER];//  for 跨服军团
1000 	int32	_Idx;
1002 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
1011 			if (pMap->m_FubenDataParty.IsRoomType())
1012 			{
1013 				eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
1014 			}
1015 		}
2170 		return 0;
2171 	}
2173 	//场景类型必须为跨服副本
2174 	Map* pMap = GetMap();
2175 	if (NULL == pMap)

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-mapserver\MPVP2v2Battle.cpp 35 KB CPP 文件 2013/3/10 13:52:42 2018/9/13 20:38:07 2018/9/13 20:38:07 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
249 		{
250 			// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
251 			// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
252 			if (FindSignup(pSignupPlayers[i].uSNID))
253 			{
649 			nLevelFlag = 0;
650 		}
652 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
653 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
654 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-mapserver\MPVP6v6Battle.cpp 30 KB CPP 文件 2013/3/10 13:52:42 2018/9/13 20:38:07 2018/9/13 20:38:07 3
1 /***********************************************************
2 desc:	跨服 6v6 战场实现
3 auth:	txp
4 date:	2011-3-16
154 	{
155 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
156 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
157 		if (FindSignup(pSignupPlayers[i].uSNID))
158 		{
536 			nLevelFlag = 0;
537 		}
539 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
540 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
541 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 13:52:43 2018/9/13 20:38:07 2018/9/13 20:38:07 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
97 	__UNGUARD__ return FALSE;
98 }
100 // 以类型方式获得跨服战场类
101 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
102 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 21 KB CPP 文件 2013/3/10 13:53:05 2018/9/13 20:38:08 2018/9/13 20:38:08 4
34 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
35 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
37 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
38 		SSHandShake msg;
39 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());
281 	if(g_Config.m_MultiGroupConfig.IsSignUpServer())
282 	{
283 		//只要一组服务器连接正常,跨服房间管理器的心跳仍然执行 
284 		if (GetGLServerActiveCount() > 0)
285 		{
610 				{
611 					AddGroupTmp( connID, g_Config.m_MultiGroupConfig.m_GLServerInfo[i].m_WorldID );
613 					//2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，
614 					//当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
615 					SSHandShake msg;
686 	if(FALSE == IsGLServerActiveTmp())//处理断线重连
687 	{
688 		//跨服重连机制
689 		if (FALSE == m_ConnectTimer.IsSetTimer())
690 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-mapserver\SignUpMgr.cpp 83 KB CPP 文件 2013/3/10 13:53:07 2018/9/13 20:38:08 2018/9/13 20:38:08 1
4 Author:shangy		
5 Created:shangy    
6 Description :跨服报名管理类
7 Revision :  2011/06/20 shangy create
8 			2011/08/05 Michael Lin Modify

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/11 11:03:15 2018/9/13 20:38:08 2018/9/13 20:38:08 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/11 11:03:16 2018/9/13 20:38:08 2018/9/13 20:38:08 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/11 11:03:16 2018/9/13 20:38:08 2018/9/13 20:38:08 1
199 }
200 	
201 // 2010-10-9 by rj 跨服线程连接方式
202 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
203 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-share\Core\Setting.cpp 87 KB CPP 文件 2013/3/11 11:03:20 2018/9/13 20:38:08 2018/9/13 20:38:08 6
291 /*
292 =======================================================================================================================
293  加载跨服配置信息
294 =======================================================================================================================
295 */
305 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
306 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
308 	// 跨服战场最大场景数量配置 2010-9-23 by rj
309 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
310 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
311 	
312 	m_MultiGroupConfig.m_nMaxMGuildMapCnt = ini.Get_Property_Int("MGuild", "Max_SceneCount");
313 	KCheckEx(m_MultiGroupConfig.m_nMaxMGuildMapCnt>0 && m_MultiGroupConfig.m_nMaxMGuildMapCnt<=MGUILD_MAX_MAPCOUNT, "跨服帮战场景数量要小于512");
315 // 	m_MultiGroupConfig.m_nMGuildBeginWeek = ini.Get_Property_Int("MGuild", "BeginWeek");
316 // 	KCheckEx(m_MultiGroupConfig.m_nMGuildBeginWeek>0 && m_MultiGroupConfig.m_nMGuildBeginWeek<=52, "起始周只能在1-52之间");
330 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
331 		
332 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
334 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
336 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);
393 		}		
394 	}
396 	//跨服关卡报名服务器开关 
397 	m_MultiGroupConfig.m_SignUpServerToggle = ini.Get_Property_Int( "Room", "SignUpServerToggle" );
398 	m_MultiGroupConfig.m_MapFubenToogle = ini.Get_Property_Int( "Room", "MapFubenToogle" );
1054 	m_ConfigInfo.m_nEmpireOfficerMinLevel = ini.Get_Property_Int("Empire","OfficerMinLevel");
1055 	//[Empire] End
1057 	//added for跨服军团  
1058 	for (int32 _nGIndex = 0; _nGIndex < MAX_GROUP_MEMBER; ++_nGIndex)
1059 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-share\DataBase\ArchiveInterface.cpp 299 KB CPP 文件 2013/3/11 11:03:22 2018/9/13 20:38:08 2018/9/13 20:38:08 1
9916 }
9918 /************************************************************************/
9919 /* 跨服战积分相关                                                       */
9920 /************************************************************************/
9922 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-share\DataBase\SqlStatement.cpp 22 KB CPP 文件 2013/3/11 11:03:23 2018/9/13 20:38:08 2018/9/13 20:38:08 1
251 char	*g_LoadLostItemInfo = "select aid,playerguid,srcplayerguid,srcplayername,guid,world,server,itemclass,creator,dataproperty,data,termendtime,islock,unlocktime,gmoptime from %s where aid>%u order by aid asc" ;
252 char	*g_DelLostItemInfo = "delete from %s where aid=%u";
254 // 跨服战积分相关处理
255 char	*LoadMPVPPointInfo = "select unitid, unitname, world, currentpoint, totalpoint, currentwintimes, currentjointimes, totalwintimes, totaljointimes, mpvptypename, currentweek, startweek, params from %s where valid = 1";
256 char	*SaveMPVPPointInfo = "call proc_save_mpvppoint(%d,\'%s\', %d, %d, %d, %d, %d, %d, %d, \'%s\', %d, %d, %d, 1)";

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-share\Messages\StructRoomBattle.cpp 68 KB CPP 文件 2013/3/11 11:05:25 2018/9/13 20:38:12 2018/9/13 20:38:12 19
4 Author:Michael		
5 Created:Michael    
6 Description :跨服房间相关结构
7 Revision :  2011/06/21 Michael create
9 =============================================================================*/
791 }
794 /************************************************************************/
795 /* 跨服报名候选数据结构定义  		                                    */
796 /************************************************************************/
797 BOOL RoomBattleSignupInfo::IsRoomIDInList(ut_id_room nRoomID) const
931 }
932 /************************************************************************/
933 /* 跨服报名候选数据结构定义 客户端消息结构                              */
934 /************************************************************************/
935 void RoomBattleSignupInfo_CX_Msg::Clear()
972 }
974 /************************************************************************/
975 /* 跨服取消报名结构定义   客户端消息结构	                           */
976 /************************************************************************/
977 void RoomBattleSignupCancel_CX_Msg::Clear()
1002 }
1004 /************************************************************************/
1005 /* 跨服确认进入结构定义    客户端消息结构	                           */
1006 /************************************************************************/
1007 void RoomBattleWaitingEnter_CX_Msg::Clear()
1109 }
1111 /************************************************************************/
1112 /* 跨服玩家确认结构定义    服务器消息结构	                           */
1113 /************************************************************************/
1114 void RoomBattlePlayerEnter_XC_Msg::Clear()
1148 }
1150 /************************************************************************/
1151 /* 跨服军团成员离开    服务器消息结构	                                */
1152 /************************************************************************/
1153 void RoomBattlePlayerLeave_XC_Msg::Clear()
1207 }
1210 /************************************************************************/
1211 /* 跨服确认进入结构定义    服务器消息结构	                           */
1212 /************************************************************************/
1213 void RoomBattleWaitingEnter_XC_Msg::Clear()
1581 }
1582 /************************************************************************/
1583 /* 跨服MapServer信息                  		                            */
1584 /************************************************************************/
1585 float SMutiGroupMapServerInfo::GetUseRate() const
1725 }
1727 /************************************************************************/
1728 /* 跨服关卡消息结构定义 MGP-->GL               		                    */
1729 /************************************************************************/
1730 uint32 MsgMGRoomBattle::GetMsgSize() const
1802 }
1804 /************************************************************************/
1805 /* 跨服关卡消息结构定义 GL-->MGP               		                    */
1806 /************************************************************************/
1807 uint32 MsgGMRoomBattle::GetMsgSize() const
1894 }
1895 /************************************************************************/
1896 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消            */
1897 /************************************************************************/
1898 uint32 MsgXGMRoomBattle_ReplyEnter::GetMsgSize()const
1931 }
1933 /************************************************************************/
1934 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消广播            */
1935 /************************************************************************/
1936 uint32 MsgXGMRoomBattle_ReplyEnter_BROADCAST::GetMsgSize()const
1969 }
1971 /************************************************************************/
1972 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  客户端确认离开，重新返回报名状态 */
1973 /************************************************************************/
1974 uint32 MsgXGMRoomBattle_Leave::GetMsgSize()const
2007 }
2009 /************************************************************************/
2010 /* 跨服关卡消息结构定义 MGP-->GL-->MGP        		                    */
2011 /************************************************************************/
2012 uint32 MsgMGMRoomBattle::GetMsgSize() const
2066 }
2068 /************************************************************************/
2069 /* 跨服关卡消息结构定义 MAP-->GL-->MGP        		                    */
2070 /************************************************************************/
2071 uint32 MsgXGMRoomBattle::GetMsgSize() const
2185 }
2187 /************************************************************************/
2188 /* 跨服关卡消息结构定义 MGP-->GL-->MAP        		                    */
2189 /************************************************************************/
2190 uint32 MsgMGXRoomBattle::GetMsgSize() const
2301 }
2303 /************************************************************************/
2304 /* 跨服关卡消息结构定义 Client-->MAP        		                    */
2305 /************************************************************************/
2306 uint32 MsgCXRoomBattle::GetMsgSize() const
2396 }
2398 /************************************************************************/
2399 /* 跨服关卡消息结构定义 MAP-->Client        		                    */
2400 /************************************************************************/
2401 uint32 MsgXCRoomBattle::GetMsgSize() const

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-share\TAB\TabDefine_Map_Misc.cpp 91 KB CPP 文件 2013/3/11 11:07:32 2018/9/13 20:38:16 2018/9/13 20:38:16 2
2382 /*
2383 =======================================================================================================================
2384 跨服关卡 逻辑数据表
2385 =======================================================================================================================
2386 */
2438 /*
2439 =======================================================================================================================
2440 跨服关卡 配置数据表
2441 =======================================================================================================================
2442 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_hk_cb\src\khan2-share\TAB\TabDefine_Share.cpp 42 KB CPP 文件 2013/3/11 11:07:35 2018/9/13 20:38:16 2018/9/13 20:38:16 2
1009 {
1010 	__GUARD__
1012 	//如果不开跨服副本，默认不读BackScene
1013 	if (g_Config.m_MultiGroupConfig.m_nGroupCount <= 0)
1014 	{
1065 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0) 
1066 	{
1067 		//如果是跨服MapServer确保BackScene有配置
1068 		KCheckEx(bFindCurrServerBackScene,"BakSceneInfo.tab表配置错误");
1069 	}

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-client\GameCommandSystem.cpp 68 KB CPP 文件 2013/3/10 13:54:09 2018/9/13 20:38:18 2018/9/13 20:38:18 1
1433 	{ GCD_ASK_JOIN_FUBEN_WITH_TEAM, "ASK_JOIN_FUBEN_WITH_TEAM" },
1434 	{ GCD_ASK_EXIT_ROOM, "ASK_EXIT_ROOM" },
1436 	//跨服副本报名搜索
1437 	{ GCD_UPDATE_FUBEN_SEARCH_STATE,"UPDATE_FUBEN_SEARCH_STATE" },
1439 	//军团信息更新

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-client\GameMapManager.cpp 32 KB CPP 文件 2013/3/10 13:54:23 2018/9/13 20:38:19 2018/9/13 20:38:19 1
1420 BOOL CMapManager::IsMutiServerMap()const
1421 {
1422 	//跨服后花园场景
1423 	if (   GetCurrMapMapId() == 539
1424 		|| GetCurrMapMapId() == 540

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-client\GameStateChangeServer.cpp 6 KB CPP 文件 2013/3/10 13:54:44 2018/9/13 20:38:19 2018/9/13 20:38:19 1
211 			::GetPrivateProfileString( "Debug", "Login.WorldID", "", szReadTemp, MAX_PATH, DEBUG_FILE_NAME );
212 			static ut_id s_nWorldID = atoi(szReadTemp); 
213 			GAME_DATA_PLAYER_PTR->SetWorldID(s_nWorldID); // 支持跨服自架测试
214 																			
215 		}

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-client\GameStateRun.cpp 90 KB CPP 文件 2013/3/10 13:54:47 2018/9/13 20:38:19 2018/9/13 20:38:19 2
653 	
654 	GAME_DATA_PTR->askCountryData();
657 	//跨服关卡的处理 
659 	//清除小地图上的军团信息
660 	GAME_DATA_RELATION_PTR->GetCorps()->ClearCorpsInfo();
672 	//请求军团数据
673 	GAME_DATA_QUEST_PTR->AskRoomBattleGroupData();
674 	/////跨服关卡的处理	
675 }
678 void CGameStateRun::IsMapLoaded( void )

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-client\KCharacterEvent.cpp 66 KB CPP 文件 2013/3/10 13:54:53 2018/9/13 20:38:19 2018/9/13 20:38:19 1
1088 							if (eCountryRelation == COUNTRY_HAS_COLLEAGUE)
1089 							{
1090 								if (!MAP_MANAGER_PTR->IsMutiServerMap())//如果是跨服，不检查弱国联盟
1091 								{
1092 									nSceneNameColor = 2;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-client\KGameOperate.cpp 69 KB CPP 文件 2013/3/10 13:55:00 2018/9/13 20:38:19 2018/9/13 20:38:19 1
2532 	if (eCountryRelation == COUNTRY_HAS_COLLEAGUE)
2533 	{
2534 		if (!MAP_MANAGER_PTR->IsMutiServerMap())//如果跨服则不计算弱国联盟
2535 		{
2536 			return COUNTRY_HAS_COLLEAGUE;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-client\UIMap.cpp 24 KB CPP 文件 2013/3/10 13:55:19 2018/9/13 20:38:20 2018/9/13 20:38:20 1
482 		case MAP_POINT_TRANSER_NPC:		szChildWinType = MAP_POINT_TYPE_TRANSER_NPC;	break;
483 		case MAP_POINT_MONSTER:			szChildWinType = MAP_POINT_TYPE_MONSTER;		break;
485 		// 跨服6v6的旗子
486 		case MAP_POINT_OneLevelFlag:			szChildWinType = MAP_POINT_TYPE_ONELEVELFLAG; break;
487 		case MAP_POINT_TwoLevelFlag:			szChildWinType = MAP_POINT_TYPE_TWOLEVELFLAG; break;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-client\UIPartyMessageBox.cpp 33 KB CPP 文件 2013/3/10 13:55:20 2018/9/13 20:38:20 2018/9/13 20:38:20 1
404 		}
405 		break;
407 	case MGUILD_BATTLE_TYPE: // 跨服帮会战
408 		{
409 			CXMPVPBattle msg;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-dbshare\MKLogicManager.cpp 116 KB CPP 文件 2013/3/10 13:55:59 2018/9/13 20:38:21 2018/9/13 20:38:21 1
3672 }
3674 /************************************************************************/
3675 /* 跨服战积分相关                                                       */
3676 /************************************************************************/
3677 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-glserver\GL.cpp 44 KB CPP 文件 2013/3/10 13:56:07 2018/9/13 20:38:21 2018/9/13 20:38:21 5
429 	KCheck(g_pGuildBattleManager);
430 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildBattleManager...OK");
432 	//跨服帮战的管理器
433 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new MultiGuildBattleManager ... ");
434 	g_pMGuildBattleManager = new MGuildBattleManager;
512 	KCheck(g_pGuildCenter);
513 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildManager...OK");
515 	//跨服战积分管理器
516 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMPVPPointManager ... ");
517 	g_pMPVPPointManager = new MPVPPointManager;
698 	KCheck(g_pSystemParamsManager);
699 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new g_pSystemParamsManager...OK");
702 	// 跨服管理器
703 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMutiGroupMapServerManager ... ");
704 	g_pMutiGroupMapServerManager = new MutiGroupMapServerManager;
947 	KCheck(ret);
948 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager->Init()...OK");
951 	//跨服管理器
952 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[Init] g_pMutiGroupMapServerManager->Init()...OK");
953 	ret = g_pMutiGroupMapServerManager->Init();
1127 	KSafeDelete(g_pSystemParamsManager);
1128 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager delete...OK");
1130 	//跨服管理器
1131 	KSafeDelete(g_pMutiGroupMapServerManager);
1132 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pMutiGroupMapServerManager delete...OK");

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 14 KB CPP 文件 2013/3/10 13:56:19 2018/9/13 20:38:21 2018/9/13 20:38:21 1
227 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
228 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
230 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
231 		if (pFindPlayer == NULL)
232 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-glserver\MGuildBattleManager.cpp 15 KB CPP 文件 2013/3/10 13:56:22 2018/9/13 20:38:21 2018/9/13 20:38:21 8
94 	// 当前赛季进度
95 	int32 nSeasonWeek = (GET_TIME().GetWeekNumFrom2011() - g_Config.m_ConfigInfo.m_MPVPGuildBeginWeek) % g_Config.m_ConfigInfo.m_MPVPPointPeriodWeeks;
97 	// 取得跨服服务器
98 	int32 nServerNum = 0;
99 	ut_id serverIDs[SERVER_CAPACITY] = {-1};
145 	//	if (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / nServerNum <= 0)
146 	//		return serverIDs[0];
148 	//	// 2011-07-26 by rj 改进原来的等分算法，在所连跨服服务器数量等于 2 时用用 4/6 算法来解决高分帮会人数过多的问题
149 	//	int32 iSeg = iIndex / (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / (nServerNum <= 2 ? 2.5f : nServerNum) );
150 	//	if (iSeg >= nServerNum)
166 	if (uPrevSignupTime)
167 	{
168 		// 超时保护（防止报名完成后跨服服务器宕机导致 GL 无法清理报名）
169 		if (GET_TIME().GetCTime() - uPrevSignupTime > 90*60)
170 		{
258 	if(!pGuild || pGuild->GetGuildID() == INVALID_KHAN_ID)
259 		return FALSE;
261 	// 转发跨服战场进入通知到报名玩家所在 Map
262 	GXMPVPBattle msg;
263 	msg.SetBattleType(MPVP_GUILD_BATTLE_TYPE);
416 					aSignupPlayers[0].GuildPoint = pPoint->m_nCurrentPoint;
417 				}
419 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
420 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
421 				msg.SetSignupType(pKMessage->GetSignupType());
472 				if (NULL != pServePlayer_Target)
473 				{
474 					// 转发跨服战场状态到报名玩家所在 Map
475 					GXMPVPBattle msg;
476 					msg.SetBattleType(pKMessage->GetBattleType());
503 				return MP_CONTINUE;
504 			}
506 			// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
507 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pMatch->nServerID);
508 			if (pServePlayer_Target)
524 			if (NULL != pServePlayer_Target)
525 			{
526 				// 转发跨服战场进入响应到报名玩家所在 Map
527 				GXMPVPBattle msg;
528 				msg.SetBattleType(pKMessage->GetBattleType());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-glserver\MPVPGuildPoint.cpp 8 KB CPP 文件 2013/3/10 13:56:23 2018/9/13 20:38:21 2018/9/13 20:38:21 3
1 /************************************************************************/
2 /* 帮会跨服战积分信息接口的具体实现                                     */
3 /************************************************************************/
5 #include "stdafx.h"
195 /*
196 =======================================================================================================================
197 处理不同跨服战各自的额外参数填充
198 =======================================================================================================================
199 */
223 /*
224 =======================================================================================================================
225 加载跨服帮战每周的场次信息
226 =======================================================================================================================
227 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-glserver\MPVPPointArithmetic.cpp 2 KB CPP 文件 2013/3/10 13:56:23 2018/9/13 20:38:21 2018/9/13 20:38:21 3
1 /************************************************************************/
2 /* 跨服战积分算法器,负责各种跨服战积分的计算逻辑实现                    */
3 /************************************************************************/
5 #include "stdafx.h"
16 /*
17 ===============================================================================================================
18 根据实力来计算跨服帮会的加权分
19 帮会实力-(错过的场次*放弃损失的分数)
20 ===============================================================================================================

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-glserver\MPVPPointInfo.cpp 14 KB CPP 文件 2013/3/10 13:56:23 2018/9/13 20:38:21 2018/9/13 20:38:21 2
1 /************************************************************************/
2 /* 跨服战积分信息接口的具体实现                                         */
3 /************************************************************************/
5 #include "stdafx.h"
72 /*
73 =======================================================================================================================
74 获取跨服积分的数据信息
75 =======================================================================================================================
76 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-glserver\MPVPPointManager.cpp 11 KB CPP 文件 2013/3/10 13:56:24 2018/9/13 20:38:21 2018/9/13 20:38:21 5
1 /************************************************************************/
2 /* 跨服战积分管理器的实现                                               */
3 /************************************************************************/
5 #include "stdafx.h"
98 /*
99 ===============================================================================================================
100 注册跨服积分的实现
101 ===============================================================================================================
102 */
220 /*
221 ===============================================================================================================
222 获取指定类型跨服战全部积分信息
223 ===============================================================================================================
224 */
243 /*
244 ===============================================================================================================
245 获取指定跨服战当前的赛季开始周
246 ===============================================================================================================
247 */
266 /*
267 ===============================================================================================================
268 获取指定跨服战当前周
269 ===============================================================================================================
270 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-glserver\MPVPToplist.cpp 8 KB CPP 文件 2013/3/10 13:56:24 2018/9/13 20:38:21 2018/9/13 20:38:21 2
1 /************************************************************************/
2 /* 跨服帮会战排行榜的具体实现		                                    */
3 /************************************************************************/
5 #include "stdafx.h"
25 /*
26 =======================================================================================================================
27 积分数据加载,从跨服积分管理器中加载需要的信息
28 =======================================================================================================================
29 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-glserver\MutiGroupMapServerManager.cpp 18 KB CPP 文件 2013/3/10 13:56:27 2018/9/13 20:38:21 2018/9/13 20:38:21 1
4 Author:Michael		
5 Created:Michael
6 Description :跨服MapServer管理器实现
7 Revision :  2011/06/17 Michael create
9 =============================================================================*/

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-glserver\ServerConnectorManager_GL.cpp 12 KB CPP 文件 2013/3/10 13:56:31 2018/9/13 20:38:21 2018/9/13 20:38:21 2
528 			_NET_TRY
529 			{
530 				// 跨服帮战管理器心跳
531 				ret = g_pMGuildBattleManager->HeartBeat(uTime);
532 				KCheck(ret);
538 			_NET_TRY
539 			{
540 				//处理跨服战积分管理器相关的心跳
541 				ret = g_pMPVPPointManager->HeartBeat(uTime);		
542 				KCheck(ret);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-glserver\TopListManager.cpp 18 KB CPP 文件 2013/3/10 13:56:38 2018/9/13 20:38:21 2018/9/13 20:38:21 1
152 	Register(HONOR_CHARIOT_TOP_LIST_BK,			new TopList,					"Chariot_Honor_bk" );
153 	// add by dragon 战车排行榜 }
155 	// 跨服帮会战排行榜
156 	Register(MPVP_GUILD_CURRENT,			new CurrentMPVPGuildTopList,		"MPVP_Guild_Current" );
157 	Register(MPVP_GUILD_CURRENT_BK,			new TopList,				"MPVP_Guild_Current_bk" );

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-glserver\XGBattleDispatch.cpp 93 KB CPP 文件 2013/3/10 13:56:41 2018/9/13 20:38:21 2018/9/13 20:38:21 25
2507 }
2509 /***********************************************************
2510 desc:	跨服战场 XG 服务器消息处理
2511 auth:	rj
2512 date:	2011-2-14
2520 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2521 	{
2522 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2523 		static IntegerHashMap mapMPVP2v2SignupRecord;
2524 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2526 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2527 		}
2529 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2530 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2531 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2548 		case MPVP_BATTLE_RETSTATE:
2549 			{
2550 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名。值是当前报名的时间。
2551 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2552 				{
2582 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2583 				KCheck(pServePlayer_Target);
2585 				// 转发跨服战场进入通知到报名玩家所在 Map
2586 				GXMPVPBattle msg;
2587 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2613 				if (uPrevSignupTime)
2614 				{
2615 					// 6 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2616 					if (GET_TIME().GetCTime() - uPrevSignupTime > 360)
2617 					{
2719 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2720 				}
2722 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2723 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2724 				msg.SetSignupType(pKMessage->GetSignupType());
2734 				if (NULL != pServePlayer_Target)
2735 				{
2736 					// 转发跨服战场状态到报名玩家所在 Map
2737 					GXMPVPBattle msg;
2738 					msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2752 				if (iServerID)
2753 				{
2754 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2755 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2756 					if (NULL != pServePlayer_Target)
2777 				if (NULL != pServePlayer_Target)
2778 				{
2779 					// 转发跨服战场进入响应到报名玩家所在 Map
2780 					GXMPVPBattle msg;
2781 					msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2793 	else if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_6V6)
2794 	{
2795 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2796 		static IntegerHashMap mapMPVP6v6SignupRecord;
2797 		if (mapMPVP6v6SignupRecord.GetMaxCount() == 0)
2799 			mapMPVP6v6SignupRecord.InitTable(MAX_WORLD_PLAYER);
2800 		}
2802 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2803 		static IntegerHashMap mapMPVP6v6EnterBattleRecord;
2804 		if (mapMPVP6v6EnterBattleRecord.GetMaxCount() == 0)
2821 		case MPVP_BATTLE_RETSTATE:
2822 			{
2823 				// 记录这次跨服 6v6 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 6v6 的报名。值是当前报名的时间。
2824 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2825 				{
2856 				if (NULL != pServePlayer_Target)
2857 				{
2858 					// 转发跨服战场进入通知到报名玩家所在 Map
2859 					GXMPVPBattle msg;
2860 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
2890 				if (uPrevSignupTime)
2891 				{
2892 					// 11 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2893 					if (GET_TIME().GetCTime() - uPrevSignupTime > 660)
2894 					{
2996 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2997 				}
2999 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
3000 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
3001 				msg.SetSignupType(pKMessage->GetSignupType());
3011 				if (NULL != pServePlayer_Target)
3012 				{
3013 					// 转发跨服战场状态到报名玩家所在 Map
3014 					GXMPVPBattle msg;
3015 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
3029 				if (iServerID)
3030 				{
3031 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
3032 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
3033 					if (NULL != pServePlayer_Target)
3054 				if (NULL != pServePlayer_Target)
3055 				{
3056 					// 转发跨服战场进入响应到报名玩家所在 Map
3057 					GXMPVPBattle msg;
3058 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\Bus.cpp 66 KB CPP 文件 2013/3/10 13:57:05 2018/9/13 20:38:22 2018/9/13 20:38:22 3
805 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
806 		= CaculateMonsterExpRuler::eCALC_TYPE_TEAM;
808 	//如果是跨服副本
809 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
810 	{
810 	{
811 		nValidMemberCount = GetValidOwnerListGroup(MAX_GROUP_MEMBER,apValidMember);
812 		eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
813 	}
814 	else
1091 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1093 	if(Get_OccupantTeamID() != INVALID_KHAN_ID) iFadeoutType = Obj_ItemRuler::FADE_OUT_TEAM;
1095 	//是否是跨服
1096 	BOOL BGroup = FALSE;
1097 	Map* pMap = GetMap();

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\ChangeMapDelegater.cpp 44 KB CPP 文件 2013/3/10 13:57:28 2018/9/13 20:38:22 2018/9/13 20:38:22 2
1538 		pPlayer->ClearMutexState(MS_Fuben);
1539 	}
1541 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1542 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1543 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\CountryCacheManager.cpp 49 KB CPP 文件 2013/3/10 13:57:37 2018/9/13 20:38:22 2018/9/13 20:38:22 1
525 		
526 	/************************************弱国联盟判断 begin***********************************************************/
528 	//只要跨服map，不判断弱国联盟
529 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
530 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 13:57:07 2018/9/13 20:38:22 2018/9/13 20:38:22 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\CXItemDispatch.cpp 69 KB CPP 文件 2013/3/10 13:57:17 2018/9/13 20:38:22 2018/9/13 20:38:22 1
2233 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
2234 	{
2235 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
2236 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2237 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\GMCommand.cpp 213 KB CPP 文件 2013/3/10 13:57:42 2018/9/13 20:38:22 2018/9/13 20:38:22 1
540 	REGISTER_HANDLER(addchariothonour);	// \gm addchariothonour =100	增加战车荣誉
541 	REGISTER_HANDLER(unlockhorse);		// \gm unlockhorse =objid =horseindex  强制解锁骑乘
542 	REGISTER_HANDLER(addguildwin);		// \gm addguildwin =num 增加跨服帮战胜利次数
544 	REGISTER_HANDLER(getviewgroup);		// \gm getviewgroup	//获取当前的可视组
545 	REGISTER_HANDLER(setviewgroup);		// \gm setviewgroup	=groupnum //设置当前的可视组

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\GMRoomBattleDispatch.cpp 5 KB CPP 文件 2013/3/10 13:57:42 2018/9/13 20:38:22 2018/9/13 20:38:22 1
53 	else
54 	{
55 		ut_id_map nBackSceneID = g_pFubenManager->GetServerBakSceneID();  //跨服处的副本入口场景
57 		ut_id_map nTarSceneId = pPacket->GetRoomBattle()->u_RoomBattleData.m_SceneID;
58 		

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\GXBattleDispatch.cpp 56 KB CPP 文件 2013/3/10 13:57:42 2018/9/13 20:38:22 2018/9/13 20:38:22 6
1482 }
1484 /***********************************************************
1485 desc:	跨服战场 GX 服务器消息处理
1486 auth:	rj
1487 date:	2011-2-14
1504 			case MPVP_BATTLE_SIGNUP:
1505 				{
1506 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1508 					IMPVPBattle *pMPVPBattle = g_pMPVPBattleManager->GetMPVPBattleByType((MPVP_BATTLE_TYPE)pKMessage->GetBattleType());
1509 					//KCheck(pMPVPBattle);
1572 						return MP_CONTINUE;
1573 					}
1575 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1576 					pMPVPBattle->TellPlayerEnterMap(pKMessage, pConnector);
1577 				}
1618 			case MPVP_BATTLE_RETSTATE:
1619 				{
1620 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1621 					pMap->GetLuaSystem()->RunScriptFunction
1622 						(
1634 			case MPVP_BATTLE_RES_ENTERSCENE:
1635 				{
1636 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1637 					pMap->GetLuaSystem()->RunScriptFunction
1638 						(
1665 }
1667 /***********************************************************
1668 desc:	跨服战场场景通知消息处理
1669 auth:	rj
1670 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 28 KB CPP 文件 2013/3/10 13:57:45 2018/9/13 20:38:22 2018/9/13 20:38:22 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\GXMapDispatch.cpp 20 KB CPP 文件 2013/3/10 13:57:50 2018/9/13 20:38:23 2018/9/13 20:38:23 2
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{
588 		return MP_CONTINUE;
589 	}
591 	//以下是跨服的副本的处理
593 	//给报名服务器返回创建成功消息			
594 	MGMRoomBattle* Msg = CREATE_MESSAGE_OBJ(MGMRoomBattle,MESSAGE_MGM_ROOMBATTLE);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\KLDaemonThread.cpp 9 KB CPP 文件 2013/3/10 13:58:12 2018/9/13 20:38:23 2018/9/13 20:38:23 3
160 		}
162 		m_OPSteps = 7;
164 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
165 		_NET_TRY
166 		{
165 		_NET_TRY
166 		{
167 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
168 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
169 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\LuaFunction_Chat.cpp 63 KB CPP 文件 2013/3/10 13:58:15 2018/9/13 20:38:23 2018/9/13 20:38:23 1
1086 		pMsg->SetCycleCount(nParam);
1087 	g_pServerConnectorMgr->SendMessage_SingleMode(pMsg);
1090 	//世界频道支持跨服
1091 	for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
1092 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\LuaFunction_Map.cpp 213 KB CPP 文件 2013/3/10 13:58:19 2018/9/13 20:38:23 2018/9/13 20:38:23 16
257 	SelectMap.m_MapDataType = 0;
258 	SelectMap.m_CopyData = * pFD;
259 	SelectMap.m_CopyData.m_bRoom = false;//非跨服房间类型
261 	if (nRoomType == 1)
262 	{
1711 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1713 	KCheck(szName);
1715 	// 2010-11-2 对发送脚本邮件进行跨服支持
1716 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1717 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5968 	return 0;
5969 }
5971 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5972 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5973 {
5994 	LUA_RETURNERROR_1;
5995 }
5997 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5998 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5999 {
6041 	return 0;
6042 }
6044 // 跨服 6v6 战场场景注册函数
6045 int32 LuaFunction_MPVP6v6RegisterMap(Lua_State *L)
6046 {
6067 	LUA_RETURNERROR_1;
6068 }
6070 // 跨服 6v6 战场场景更新战场 UI 面板
6071 int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
6072 {
6114 	return 0;
6115 }
6117 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
6118 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
6119 //{
6141 //}
6142 //
6143 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
6144 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
6145 //{
6211 //}
6212 //
6213 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
6214 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
6215 //{
6281 //}
6282 //
6283 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
6284 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
6285 //{
6315 //}
6316 //
6317 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
6318 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
6319 //{
6362 //}
6363 //
6364 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
6365 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
6366 //{
6414 //}
6415 //
6416 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
6417 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
6418 //{
6459 //}
6460 //
6461 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
6462 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
6463 //{
7305 	return 0;
7306 }
7308 // 跨服战场场景注册函数
7309 int32 LuaFunction_MPVPRegisterMap(Lua_State *L)
7310 {
7400 	if(pMap)
7401 	{
7402 		// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
7403 		int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
7404 			(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\LuaSystem_Function.cpp 134 KB CPP 文件 2013/3/10 13:58:28 2018/9/13 20:38:23 2018/9/13 20:38:23 10
1185 	m_LuaVM.RegisterFunction("AddBattleHonour", (void *) (LuaFunction_AddBattleHonour));							// 增加战功
1186 	m_LuaVM.RegisterFunction("SubBattleHonour", (void *) (LuaFunction_SubBattleHonour));							// 减少战功
1187 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));					// 跨服 2v2 战场注册场景 
1188 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));			// 跨服 2v2 战场名称显示
1189 	m_LuaVM.RegisterFunction("MPVP6v6RegisterScene", (void *) (LuaFunction_MPVP6v6RegisterMap));					// 跨服 6v6 战场注册场景
1190 	m_LuaVM.RegisterFunction("SetMPVP6v6BattleDisable", (void *) (LuaFunction_SetMPVP6v6BattleDisable));			// 跨服 6v6 战场名称显示
1191 	m_LuaVM.RegisterFunction("MPVPRegisterMap", (void *) (LuaFunction_MPVPRegisterMap));							// 跨服战场注册场景
1192 	m_LuaVM.RegisterFunction("CountryIsFortuneTimeEx", (void *) (LuaFunction_CountryIsFortuneTimeEx));				// 获取特定国家的国运是否进行
1193 	m_LuaVM.RegisterFunction("AddCountryResourceWithRecall", (void *) (LuaFunction_AddCountryResourceWithRecall));	// 比较并增加的修改资源,保证同步
1305 	m_LuaVM.RegisterFunction("IsLeague", (void*)(LuaFunction_IsLeague));											// 判断两国是否是弱国联盟
1306 	m_LuaVM.RegisterFunction("CountryLeagueZhaoji", (void*)(LuaFunction_CountryLeagueZhaoji));						// 发送联盟召集令
1307 	m_LuaVM.RegisterFunction("AskEnterMGuildBattleScene",(void*)(LuaFunction_AskEnterMGuildBattleScene)); 			// 请求进入跨服帮会战场
1308 	m_LuaVM.RegisterFunction("MGuildBattleSignup",(void*)(LuaFunction_MGuildBattleSignup)); 						// 跨服帮会战报名
1309 	m_LuaVM.RegisterFunction("MGuildBattleResult",(void*)(LuaFunction_MGuildBattleResult)); 						// 跨服帮会战结果
1310 	m_LuaVM.RegisterFunction("MGuildBattleSeasonWeek",(void*)(LuaFunction_MGuildBattleSeasonWeek)); 				// 跨服帮会战赛季当前周数
1311 	m_LuaVM.RegisterFunction("GetMGuildNumOfBattleCurSeason", (void*)(LuaFunction_GetMGuildNumOfBattleCurSeason));	// 获取跨服帮战当前赛季的场数
1312 	m_LuaVM.RegisterFunction("SetEquipPokerData",(void*)(LuaFunction_SetEquipPokerData));							// 设置装备扑克牌属性
1313 	m_LuaVM.RegisterFunction("SetEquipPokerCount",(void*)(LuaFunction_SetEquipPokerCount));							// 设置装备扑克牌个数

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\MapCore.cpp 40 KB CPP 文件 2013/3/10 13:58:31 2018/9/13 20:38:23 2018/9/13 20:38:23 2
626 				pSceneData->m_MapID == 23 || 
627 				g_Config.m_ConfigInfo.IsGardenMap(pSceneData->m_MapID) || //家园场景副本入口
628 				pSceneData->m_MapID == g_pFubenManager->GetServerBakSceneID())//  支持跨服副本				
629 			{
630 				//以上场景是副本入口场景 创建副本数据
684 				m_bFirstInit = FALSE;
685 			}
686 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
687 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
688 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\MapManager.cpp 64 KB CPP 文件 2013/3/10 13:58:34 2018/9/13 20:38:23 2018/9/13 20:38:23 3
1741 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1742 		{
1743 			KCheck(FALSE);//跨服服务器上找不到报错
1744 		}
1746 		return INVALID_KHAN_ID;
2024 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2025 	{
2026 		//以下开始通知广播,支持跨服架构
2027 		for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
2028 		{
2056 BOOL FubenManager::BroadcastFubenSceneInfo(void)
2057 {
2058 	//如果不开跨服副本，不广播
2059 	if (g_Config.m_MultiGroupConfig.IsMultMapOpen() == FALSE)
2060 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\MapServer.cpp 34 KB CPP 文件 2013/3/10 13:58:34 2018/9/13 20:38:23 2018/9/13 20:38:23 1
598 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
599 	
600 	// 跨服战场管理器 2010-10-13 by rj
601 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
602 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\MGuildBattle.cpp 28 KB CPP 文件 2013/3/10 13:58:28 2018/9/13 20:38:23 2018/9/13 20:38:23 3
1 /***********************************************************
2 desc:	跨服帮会战场实现
3 auth:	txp
4 date:	2011-6-10
122 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，
123 		// 为这个很少出现的异常进行处理。
124 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，
125 		// 如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
126 		if (FindSignup(pSignupPlayers[i].iWorldID, pSignupPlayers[i].GuildID))
427 		m_MatchList.m_aMatch[m_MatchList.m_nCount].m_bFinished = FALSE;
429 		int32 nLevelFlag=0, nDisLevel = s1.m_nSignupLevel - s2.m_nSignupLevel;
431 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
432 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
433 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\Monster.cpp 67 KB CPP 文件 2013/3/10 13:58:37 2018/9/13 20:38:23 2018/9/13 20:38:23 6
641 		return 0;
642 	}
644 	//如果是跨服副本
645 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
646 	{
880 		return;
881 	}
883 	//跨服副本
884 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
885 	{
916 	Player *apValidMember[MAX_GROUP_MEMBER];
917 	uint32 nValidMemberCount = 0;
919 	// 跨服副本
920 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
921 	{
996 		nExp = (int32) (m_BaseExp * fExpParam);
997 	}
999 	uint32	auExp[MAX_GROUP_MEMBER];//  for 跨服军团
1000 	int32	_Idx;
1002 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
1011 			if (pMap->m_FubenDataParty.IsRoomType())
1012 			{
1013 				eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
1014 			}
1015 		}
2170 		return 0;
2171 	}
2173 	//场景类型必须为跨服副本
2174 	Map* pMap = GetMap();
2175 	if (NULL == pMap)

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\MPVP2v2Battle.cpp 35 KB CPP 文件 2013/3/10 13:58:29 2018/9/13 20:38:23 2018/9/13 20:38:23 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
249 		{
250 			// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
251 			// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
252 			if (FindSignup(pSignupPlayers[i].uSNID))
253 			{
649 			nLevelFlag = 0;
650 		}
652 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
653 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
654 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\MPVP6v6Battle.cpp 30 KB CPP 文件 2013/3/10 13:58:30 2018/9/13 20:38:23 2018/9/13 20:38:23 3
1 /***********************************************************
2 desc:	跨服 6v6 战场实现
3 auth:	txp
4 date:	2011-3-16
154 	{
155 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
156 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
157 		if (FindSignup(pSignupPlayers[i].uSNID))
158 		{
536 			nLevelFlag = 0;
537 		}
539 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
540 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
541 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 13:58:30 2018/9/13 20:38:23 2018/9/13 20:38:23 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
97 	__UNGUARD__ return FALSE;
98 }
100 // 以类型方式获得跨服战场类
101 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
102 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 20 KB CPP 文件 2013/3/10 13:58:57 2018/9/13 20:38:23 2018/9/13 20:38:23 4
34 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
35 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
37 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
38 		SSHandShake msg;
39 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());
281 	if(g_Config.m_MultiGroupConfig.IsSignUpServer())
282 	{
283 		//只要一组服务器连接正常,跨服房间管理器的心跳仍然执行 
284 		if (GetGLServerActiveCount() > 0)
285 		{
602 				{
603 					AddGroupTmp( connID, g_Config.m_MultiGroupConfig.m_GLServerInfo[i].m_WorldID );
605 					//2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，
606 					//当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
607 					SSHandShake msg;
678 	if(FALSE == IsGLServerActiveTmp())//处理断线重连
679 	{
680 		//跨服重连机制
681 		if (FALSE == m_ConnectTimer.IsSetTimer())
682 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-mapserver\SignUpMgr.cpp 83 KB CPP 文件 2013/3/10 13:58:59 2018/9/13 20:38:23 2018/9/13 20:38:23 1
4 Author:shangy		
5 Created:shangy    
6 Description :跨服报名管理类
7 Revision :  2011/06/20 shangy create
8 			2011/08/05 Michael Lin Modify

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/11 11:07:45 2018/9/13 20:38:24 2018/9/13 20:38:24 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/11 11:07:46 2018/9/13 20:38:24 2018/9/13 20:38:24 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/11 11:07:47 2018/9/13 20:38:24 2018/9/13 20:38:24 1
199 }
200 	
201 // 2010-10-9 by rj 跨服线程连接方式
202 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
203 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-share\Core\Setting.cpp 89 KB CPP 文件 2013/3/11 11:07:51 2018/9/13 20:38:24 2018/9/13 20:38:24 6
339 /*
340 =======================================================================================================================
341  加载跨服配置信息
342 =======================================================================================================================
343 */
353 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
354 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
356 	// 跨服战场最大场景数量配置 2010-9-23 by rj
357 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
358 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
359 	
360 	m_MultiGroupConfig.m_nMaxMGuildMapCnt = ini.Get_Property_Int("MGuild", "Max_SceneCount");
361 	KCheckEx(m_MultiGroupConfig.m_nMaxMGuildMapCnt>0 && m_MultiGroupConfig.m_nMaxMGuildMapCnt<=MGUILD_MAX_MAPCOUNT, "跨服帮战场景数量要小于512");
363 // 	m_MultiGroupConfig.m_nMGuildBeginWeek = ini.Get_Property_Int("MGuild", "BeginWeek");
364 // 	KCheckEx(m_MultiGroupConfig.m_nMGuildBeginWeek>0 && m_MultiGroupConfig.m_nMGuildBeginWeek<=52, "起始周只能在1-52之间");
378 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
379 		
380 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
382 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
384 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);
441 		}		
442 	}
444 	//跨服关卡报名服务器开关 
445 	m_MultiGroupConfig.m_SignUpServerToggle = ini.Get_Property_Int( "Room", "SignUpServerToggle" );
446 	m_MultiGroupConfig.m_MapFubenToogle = ini.Get_Property_Int( "Room", "MapFubenToogle" );
1102 	m_ConfigInfo.m_nEmpireOfficerMinLevel = ini.Get_Property_Int("Empire","OfficerMinLevel");
1103 	//[Empire] End
1105 	//added for跨服军团  
1106 	for (int32 _nGIndex = 0; _nGIndex < MAX_GROUP_MEMBER; ++_nGIndex)
1107 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-share\DataBase\ArchiveInterface.cpp 329 KB CPP 文件 2013/3/11 11:07:53 2018/9/13 20:38:24 2018/9/13 20:38:24 1
10122 }
10124 /************************************************************************/
10125 /* 跨服战积分相关                                                       */
10126 /************************************************************************/
10128 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-share\DataBase\SqlStatement.cpp 23 KB CPP 文件 2013/3/11 11:07:54 2018/9/13 20:38:24 2018/9/13 20:38:24 1
251 char	*g_LoadLostItemInfo = "select aid,playerguid,srcplayerguid,srcplayername,guid,world,server,itemclass,creator,dataproperty,data,termendtime,islock,unlocktime,gmoptime from %s where aid>%u order by aid asc" ;
252 char	*g_DelLostItemInfo = "delete from %s where aid=%u";
254 // 跨服战积分相关处理
255 char	*LoadMPVPPointInfo = "select unitid, unitname, world, currentpoint, totalpoint, currentwintimes, currentjointimes, totalwintimes, totaljointimes, mpvptypename, currentweek, startweek, params from %s where valid = 1";
256 char	*SaveMPVPPointInfo = "call proc_save_mpvppoint(%d,\'%s\', %d, %d, %d, %d, %d, %d, %d, \'%s\', %d, %d, %d, 1)";

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-share\Messages\StructRoomBattle.cpp 68 KB CPP 文件 2013/3/11 11:10:14 2018/9/13 20:38:29 2018/9/13 20:38:29 19
4 Author:Michael		
5 Created:Michael    
6 Description :跨服房间相关结构
7 Revision :  2011/06/21 Michael create
9 =============================================================================*/
791 }
794 /************************************************************************/
795 /* 跨服报名候选数据结构定义  		                                    */
796 /************************************************************************/
797 BOOL RoomBattleSignupInfo::IsRoomIDInList(ut_id_room nRoomID) const
931 }
932 /************************************************************************/
933 /* 跨服报名候选数据结构定义 客户端消息结构                              */
934 /************************************************************************/
935 void RoomBattleSignupInfo_CX_Msg::Clear()
972 }
974 /************************************************************************/
975 /* 跨服取消报名结构定义   客户端消息结构	                           */
976 /************************************************************************/
977 void RoomBattleSignupCancel_CX_Msg::Clear()
1002 }
1004 /************************************************************************/
1005 /* 跨服确认进入结构定义    客户端消息结构	                           */
1006 /************************************************************************/
1007 void RoomBattleWaitingEnter_CX_Msg::Clear()
1109 }
1111 /************************************************************************/
1112 /* 跨服玩家确认结构定义    服务器消息结构	                           */
1113 /************************************************************************/
1114 void RoomBattlePlayerEnter_XC_Msg::Clear()
1148 }
1150 /************************************************************************/
1151 /* 跨服军团成员离开    服务器消息结构	                                */
1152 /************************************************************************/
1153 void RoomBattlePlayerLeave_XC_Msg::Clear()
1207 }
1210 /************************************************************************/
1211 /* 跨服确认进入结构定义    服务器消息结构	                           */
1212 /************************************************************************/
1213 void RoomBattleWaitingEnter_XC_Msg::Clear()
1581 }
1582 /************************************************************************/
1583 /* 跨服MapServer信息                  		                            */
1584 /************************************************************************/
1585 float SMutiGroupMapServerInfo::GetUseRate() const
1725 }
1727 /************************************************************************/
1728 /* 跨服关卡消息结构定义 MGP-->GL               		                    */
1729 /************************************************************************/
1730 uint32 MsgMGRoomBattle::GetMsgSize() const
1802 }
1804 /************************************************************************/
1805 /* 跨服关卡消息结构定义 GL-->MGP               		                    */
1806 /************************************************************************/
1807 uint32 MsgGMRoomBattle::GetMsgSize() const
1894 }
1895 /************************************************************************/
1896 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消            */
1897 /************************************************************************/
1898 uint32 MsgXGMRoomBattle_ReplyEnter::GetMsgSize()const
1931 }
1933 /************************************************************************/
1934 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消广播            */
1935 /************************************************************************/
1936 uint32 MsgXGMRoomBattle_ReplyEnter_BROADCAST::GetMsgSize()const
1969 }
1971 /************************************************************************/
1972 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  客户端确认离开，重新返回报名状态 */
1973 /************************************************************************/
1974 uint32 MsgXGMRoomBattle_Leave::GetMsgSize()const
2007 }
2009 /************************************************************************/
2010 /* 跨服关卡消息结构定义 MGP-->GL-->MGP        		                    */
2011 /************************************************************************/
2012 uint32 MsgMGMRoomBattle::GetMsgSize() const
2066 }
2068 /************************************************************************/
2069 /* 跨服关卡消息结构定义 MAP-->GL-->MGP        		                    */
2070 /************************************************************************/
2071 uint32 MsgXGMRoomBattle::GetMsgSize() const
2185 }
2187 /************************************************************************/
2188 /* 跨服关卡消息结构定义 MGP-->GL-->MAP        		                    */
2189 /************************************************************************/
2190 uint32 MsgMGXRoomBattle::GetMsgSize() const
2301 }
2303 /************************************************************************/
2304 /* 跨服关卡消息结构定义 Client-->MAP        		                    */
2305 /************************************************************************/
2306 uint32 MsgCXRoomBattle::GetMsgSize() const
2396 }
2398 /************************************************************************/
2399 /* 跨服关卡消息结构定义 MAP-->Client        		                    */
2400 /************************************************************************/
2401 uint32 MsgXCRoomBattle::GetMsgSize() const

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-share\TAB\TabDefine_Map_Misc.cpp 88 KB CPP 文件 2013/3/11 11:12:27 2018/9/13 20:38:33 2018/9/13 20:38:33 2
2202 /*
2203 =======================================================================================================================
2204 跨服关卡 逻辑数据表
2205 =======================================================================================================================
2206 */
2258 /*
2259 =======================================================================================================================
2260 跨服关卡 配置数据表
2261 =======================================================================================================================
2262 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_kr_cb\src\khan2-share\TAB\TabDefine_Share.cpp 46 KB CPP 文件 2013/3/11 11:12:30 2018/9/13 20:38:33 2018/9/13 20:38:33 2
1011 {
1012 	__GUARD__
1014 	//如果不开跨服副本，默认不读BackScene
1015 	if (g_Config.m_MultiGroupConfig.m_nGroupCount <= 0)
1016 	{
1067 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0) 
1068 	{
1069 		//如果是跨服MapServer确保BackScene有配置
1070 		KCheckEx(bFindCurrServerBackScene,"BakSceneInfo.tab表配置错误");
1071 	}

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-client\GameCommandSystem.cpp 63 KB CPP 文件 2013/3/10 14:00:13 2018/9/13 20:38:35 2018/9/13 20:38:35 1
1417 	{ GCD_ASK_JOIN_FUBEN_WITH_TEAM, "ASK_JOIN_FUBEN_WITH_TEAM" },
1418 	{ GCD_ASK_EXIT_ROOM, "ASK_EXIT_ROOM" },
1420 	//跨服副本报名搜索
1421 	{ GCD_UPDATE_FUBEN_SEARCH_STATE,"UPDATE_FUBEN_SEARCH_STATE" },
1423 	//军团信息更新

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-client\GameStateChangeServer.cpp 6 KB CPP 文件 2013/3/10 14:00:54 2018/9/13 20:38:35 2018/9/13 20:38:35 1
210 			::GetPrivateProfileString( "Debug", "Login.WorldID", "", szReadTemp, MAX_PATH, DEBUG_FILE_NAME );
211 			static ut_id s_nWorldID = atoi(szReadTemp); 
212 			GAME_DATA_PLAYER_PTR->SetWorldID(s_nWorldID); // 支持跨服自架测试
213 																			
214 		}

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-client\GameStateRun.cpp 90 KB CPP 文件 2013/3/10 14:00:56 2018/9/13 20:38:35 2018/9/13 20:38:35 2
660 	
661 	GAME_DATA_PTR->askCountryData();
664 	//跨服关卡的处理 
666 	//清除小地图上的军团信息
667 	GAME_DATA_RELATION_PTR->GetCorps()->ClearCorpsInfo();
679 	//请求军团数据
680 	GAME_DATA_QUEST_PTR->AskRoomBattleGroupData();
681 	/////跨服关卡的处理	
682 }
685 void CGameStateRun::IsMapLoaded( void )

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-client\UIMap.cpp 24 KB CPP 文件 2013/3/10 14:01:33 2018/9/13 20:38:37 2018/9/13 20:38:37 1
482 		case MAP_POINT_TRANSER_NPC:		szChildWinType = MAP_POINT_TYPE_TRANSER_NPC;	break;
483 		case MAP_POINT_MONSTER:			szChildWinType = MAP_POINT_TYPE_MONSTER;		break;
485 		// 跨服6v6的旗子
486 		case MAP_POINT_OneLevelFlag:			szChildWinType = MAP_POINT_TYPE_ONELEVELFLAG; break;
487 		case MAP_POINT_TwoLevelFlag:			szChildWinType = MAP_POINT_TYPE_TWOLEVELFLAG; break;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-client\UIPartyMessageBox.cpp 33 KB CPP 文件 2013/3/10 14:01:34 2018/9/13 20:38:37 2018/9/13 20:38:37 1
404 		}
405 		break;
407 	case MGUILD_BATTLE_TYPE: // 跨服帮会战
408 		{
409 			CXMPVPBattle msg;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-dbshare\MKLogicManager.cpp 111 KB CPP 文件 2013/3/10 14:02:20 2018/9/13 20:38:37 2018/9/13 20:38:37 1
3646 }
3648 /************************************************************************/
3649 /* 跨服战积分相关                                                       */
3650 /************************************************************************/
3651 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-glserver\GL.cpp 44 KB CPP 文件 2013/3/10 14:02:29 2018/9/13 20:38:38 2018/9/13 20:38:38 5
425 	KCheck(g_pGuildBattleManager);
426 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildBattleManager...OK");
428 	//跨服帮战的管理器
429 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new MultiGuildBattleManager ... ");
430 	g_pMGuildBattleManager = new MGuildBattleManager;
508 	KCheck(g_pGuildCenter);
509 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildManager...OK");
511 	//跨服战积分管理器
512 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMPVPPointManager ... ");
513 	g_pMPVPPointManager = new MPVPPointManager;
694 	KCheck(g_pSystemParamsManager);
695 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new g_pSystemParamsManager...OK");
698 	// 跨服管理器
699 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMutiGroupMapServerManager ... ");
700 	g_pMutiGroupMapServerManager = new MutiGroupMapServerManager;
945 	KCheck(ret);
946 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager->Init()...OK");
949 	//跨服管理器
950 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[Init] g_pMutiGroupMapServerManager->Init()...OK");
951 	ret = g_pMutiGroupMapServerManager->Init();
1127 	KSafeDelete(g_pSystemParamsManager);
1128 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager delete...OK");
1130 	//跨服管理器
1131 	KSafeDelete(g_pMutiGroupMapServerManager);
1132 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pMutiGroupMapServerManager delete...OK");

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 14 KB CPP 文件 2013/3/10 14:02:40 2018/9/13 20:38:38 2018/9/13 20:38:38 1
223 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
224 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
226 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
227 		if (pFindPlayer == NULL)
228 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-glserver\MGuildBattleManager.cpp 15 KB CPP 文件 2013/3/10 14:02:43 2018/9/13 20:38:38 2018/9/13 20:38:38 8
94 	// 当前赛季进度
95 	int32 nSeasonWeek = (GET_TIME().GetWeekNumFrom2011() - g_Config.m_ConfigInfo.m_MPVPGuildBeginWeek) % g_Config.m_ConfigInfo.m_MPVPPointPeriodWeeks;
97 	// 取得跨服服务器
98 	int32 nServerNum = 0;
99 	ut_id serverIDs[SERVER_CAPACITY] = {-1};
145 	//	if (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / nServerNum <= 0)
146 	//		return serverIDs[0];
148 	//	// 2011-07-26 by rj 改进原来的等分算法，在所连跨服服务器数量等于 2 时用用 4/6 算法来解决高分帮会人数过多的问题
149 	//	int32 iSeg = iIndex / (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / (nServerNum <= 2 ? 2.5f : nServerNum) );
150 	//	if (iSeg >= nServerNum)
166 	if (uPrevSignupTime)
167 	{
168 		// 超时保护（防止报名完成后跨服服务器宕机导致 GL 无法清理报名）
169 		if (GET_TIME().GetCTime() - uPrevSignupTime > 90*60)
170 		{
258 	if(!pGuild || pGuild->GetGuildID() == INVALID_KHAN_ID)
259 		return FALSE;
261 	// 转发跨服战场进入通知到报名玩家所在 Map
262 	GXMPVPBattle msg;
263 	msg.SetBattleType(MPVP_GUILD_BATTLE_TYPE);
416 					aSignupPlayers[0].GuildPoint = pPoint->m_nCurrentPoint;
417 				}
419 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
420 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
421 				msg.SetSignupType(pKMessage->GetSignupType());
472 				if (NULL != pServePlayer_Target)
473 				{
474 					// 转发跨服战场状态到报名玩家所在 Map
475 					GXMPVPBattle msg;
476 					msg.SetBattleType(pKMessage->GetBattleType());
503 				return MP_CONTINUE;
504 			}
506 			// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
507 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pMatch->nServerID);
508 			if (pServePlayer_Target)
524 			if (NULL != pServePlayer_Target)
525 			{
526 				// 转发跨服战场进入响应到报名玩家所在 Map
527 				GXMPVPBattle msg;
528 				msg.SetBattleType(pKMessage->GetBattleType());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-glserver\MPVPGuildPoint.cpp 8 KB CPP 文件 2013/3/10 14:02:44 2018/9/13 20:38:38 2018/9/13 20:38:38 3
1 /************************************************************************/
2 /* 帮会跨服战积分信息接口的具体实现                                     */
3 /************************************************************************/
5 #include "stdafx.h"
195 /*
196 =======================================================================================================================
197 处理不同跨服战各自的额外参数填充
198 =======================================================================================================================
199 */
223 /*
224 =======================================================================================================================
225 加载跨服帮战每周的场次信息
226 =======================================================================================================================
227 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-glserver\MPVPPointArithmetic.cpp 2 KB CPP 文件 2013/3/10 14:02:44 2018/9/13 20:38:38 2018/9/13 20:38:38 3
1 /************************************************************************/
2 /* 跨服战积分算法器,负责各种跨服战积分的计算逻辑实现                    */
3 /************************************************************************/
5 #include "stdafx.h"
16 /*
17 ===============================================================================================================
18 根据实力来计算跨服帮会的加权分
19 帮会实力-(错过的场次*放弃损失的分数)
20 ===============================================================================================================

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-glserver\MPVPPointInfo.cpp 14 KB CPP 文件 2013/3/10 14:02:44 2018/9/13 20:38:38 2018/9/13 20:38:38 2
1 /************************************************************************/
2 /* 跨服战积分信息接口的具体实现                                         */
3 /************************************************************************/
5 #include "stdafx.h"
72 /*
73 =======================================================================================================================
74 获取跨服积分的数据信息
75 =======================================================================================================================
76 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-glserver\MPVPPointManager.cpp 11 KB CPP 文件 2013/3/10 14:02:45 2018/9/13 20:38:38 2018/9/13 20:38:38 5
1 /************************************************************************/
2 /* 跨服战积分管理器的实现                                               */
3 /************************************************************************/
5 #include "stdafx.h"
98 /*
99 ===============================================================================================================
100 注册跨服积分的实现
101 ===============================================================================================================
102 */
220 /*
221 ===============================================================================================================
222 获取指定类型跨服战全部积分信息
223 ===============================================================================================================
224 */
243 /*
244 ===============================================================================================================
245 获取指定跨服战当前的赛季开始周
246 ===============================================================================================================
247 */
266 /*
267 ===============================================================================================================
268 获取指定跨服战当前周
269 ===============================================================================================================
270 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-glserver\MPVPToplist.cpp 8 KB CPP 文件 2013/3/10 14:02:45 2018/9/13 20:38:38 2018/9/13 20:38:38 2
1 /************************************************************************/
2 /* 跨服帮会战排行榜的具体实现		                                    */
3 /************************************************************************/
5 #include "stdafx.h"
25 /*
26 =======================================================================================================================
27 积分数据加载,从跨服积分管理器中加载需要的信息
28 =======================================================================================================================
29 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-glserver\MutiGroupMapServerManager.cpp 18 KB CPP 文件 2013/3/10 14:02:47 2018/9/13 20:38:38 2018/9/13 20:38:38 1
4 Author:Michael		
5 Created:Michael
6 Description :跨服MapServer管理器实现
7 Revision :  2011/06/17 Michael create
9 =============================================================================*/

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-glserver\ServerConnectorManager_GL.cpp 11 KB CPP 文件 2013/3/10 14:02:51 2018/9/13 20:38:38 2018/9/13 20:38:38 2
518 			_NET_TRY
519 			{
520 				// 跨服帮战管理器心跳
521 				ret = g_pMGuildBattleManager->HeartBeat(uTime);
522 				KCheck(ret);
528 			_NET_TRY
529 			{
530 				//处理跨服战积分管理器相关的心跳
531 				ret = g_pMPVPPointManager->HeartBeat(uTime);		
532 				KCheck(ret);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-glserver\TopListManager.cpp 18 KB CPP 文件 2013/3/10 14:02:57 2018/9/13 20:38:38 2018/9/13 20:38:38 1
152 	Register(HONOR_CHARIOT_TOP_LIST_BK,			new TopList,					"Chariot_Honor_bk" );
153 	// add by dragon 战车排行榜 }
155 	// 跨服帮会战排行榜
156 	Register(MPVP_GUILD_CURRENT,			new CurrentMPVPGuildTopList,		"MPVP_Guild_Current" );
157 	Register(MPVP_GUILD_CURRENT_BK,			new TopList,				"MPVP_Guild_Current_bk" );

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-glserver\XGBattleDispatch.cpp 93 KB CPP 文件 2013/3/10 14:03:00 2018/9/13 20:38:38 2018/9/13 20:38:38 25
2507 }
2509 /***********************************************************
2510 desc:	跨服战场 XG 服务器消息处理
2511 auth:	rj
2512 date:	2011-2-14
2520 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2521 	{
2522 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2523 		static IntegerHashMap mapMPVP2v2SignupRecord;
2524 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2526 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2527 		}
2529 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2530 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2531 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2548 		case MPVP_BATTLE_RETSTATE:
2549 			{
2550 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名。值是当前报名的时间。
2551 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2552 				{
2582 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2583 				KCheck(pServePlayer_Target);
2585 				// 转发跨服战场进入通知到报名玩家所在 Map
2586 				GXMPVPBattle msg;
2587 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2613 				if (uPrevSignupTime)
2614 				{
2615 					// 6 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2616 					if (GET_TIME().GetCTime() - uPrevSignupTime > 360)
2617 					{
2719 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2720 				}
2722 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2723 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2724 				msg.SetSignupType(pKMessage->GetSignupType());
2734 				if (NULL != pServePlayer_Target)
2735 				{
2736 					// 转发跨服战场状态到报名玩家所在 Map
2737 					GXMPVPBattle msg;
2738 					msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2752 				if (iServerID)
2753 				{
2754 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2755 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2756 					if (NULL != pServePlayer_Target)
2777 				if (NULL != pServePlayer_Target)
2778 				{
2779 					// 转发跨服战场进入响应到报名玩家所在 Map
2780 					GXMPVPBattle msg;
2781 					msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2793 	else if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_6V6)
2794 	{
2795 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2796 		static IntegerHashMap mapMPVP6v6SignupRecord;
2797 		if (mapMPVP6v6SignupRecord.GetMaxCount() == 0)
2799 			mapMPVP6v6SignupRecord.InitTable(MAX_WORLD_PLAYER);
2800 		}
2802 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2803 		static IntegerHashMap mapMPVP6v6EnterBattleRecord;
2804 		if (mapMPVP6v6EnterBattleRecord.GetMaxCount() == 0)
2821 		case MPVP_BATTLE_RETSTATE:
2822 			{
2823 				// 记录这次跨服 6v6 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 6v6 的报名。值是当前报名的时间。
2824 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2825 				{
2856 				if (NULL != pServePlayer_Target)
2857 				{
2858 					// 转发跨服战场进入通知到报名玩家所在 Map
2859 					GXMPVPBattle msg;
2860 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
2890 				if (uPrevSignupTime)
2891 				{
2892 					// 11 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2893 					if (GET_TIME().GetCTime() - uPrevSignupTime > 660)
2894 					{
2996 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2997 				}
2999 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
3000 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
3001 				msg.SetSignupType(pKMessage->GetSignupType());
3011 				if (NULL != pServePlayer_Target)
3012 				{
3013 					// 转发跨服战场状态到报名玩家所在 Map
3014 					GXMPVPBattle msg;
3015 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
3029 				if (iServerID)
3030 				{
3031 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
3032 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
3033 					if (NULL != pServePlayer_Target)
3054 				if (NULL != pServePlayer_Target)
3055 				{
3056 					// 转发跨服战场进入响应到报名玩家所在 Map
3057 					GXMPVPBattle msg;
3058 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-mapserver\Bus.cpp 66 KB CPP 文件 2013/3/10 14:03:21 2018/9/13 20:38:39 2018/9/13 20:38:39 3
804 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
805 		= CaculateMonsterExpRuler::eCALC_TYPE_TEAM;
807 	//如果是跨服副本
808 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
809 	{
809 	{
810 		nValidMemberCount = GetValidOwnerListGroup(MAX_GROUP_MEMBER,apValidMember);
811 		eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
812 	}
813 	else
1090 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1092 	if(Get_OccupantTeamID() != INVALID_KHAN_ID) iFadeoutType = Obj_ItemRuler::FADE_OUT_TEAM;
1094 	//是否是跨服
1095 	BOOL BGroup = FALSE;
1096 	Map* pMap = GetMap();

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-mapserver\ChangeMapDelegater.cpp 43 KB CPP 文件 2013/3/10 14:03:40 2018/9/13 20:38:39 2018/9/13 20:38:39 2
1506 		pPlayer->ClearMutexState(MS_Fuben);
1507 	}
1509 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1510 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1511 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 14:03:23 2018/9/13 20:38:39 2018/9/13 20:38:39 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-mapserver\CXItemDispatch.cpp 69 KB CPP 文件 2013/3/10 14:03:31 2018/9/13 20:38:39 2018/9/13 20:38:39 1
2233 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
2234 	{
2235 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
2236 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2237 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-mapserver\GMCommand.cpp 208 KB CPP 文件 2013/3/10 14:03:52 2018/9/13 20:38:40 2018/9/13 20:38:40 1
544 	REGISTER_HANDLER(addchariothonour);	// \gm addchariothonour =100	增加战车荣誉
545 	REGISTER_HANDLER(unlockhorse);		// \gm unlockhorse =objid =horseindex  强制解锁骑乘
546 	REGISTER_HANDLER(addguildwin);		// \gm addguildwin =num 增加跨服帮战胜利次数
548 	REGISTER_HANDLER(getviewgroup);		// \gm getviewgroup	//获取当前的可视组
549 	REGISTER_HANDLER(setviewgroup);		// \gm setviewgroup	=groupnum //设置当前的可视组

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-mapserver\GMRoomBattleDispatch.cpp 5 KB CPP 文件 2013/3/10 14:03:52 2018/9/13 20:38:40 2018/9/13 20:38:40 1
53 	else
54 	{
55 		ut_id_map nBackSceneID = g_pFubenManager->GetServerBakSceneID();  //跨服处的副本入口场景
57 		ut_id_map nTarSceneId = pPacket->GetRoomBattle()->u_RoomBattleData.m_SceneID;
58 		

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-mapserver\GXBattleDispatch.cpp 56 KB CPP 文件 2013/3/10 14:03:53 2018/9/13 20:38:40 2018/9/13 20:38:40 6
1482 }
1484 /***********************************************************
1485 desc:	跨服战场 GX 服务器消息处理
1486 auth:	rj
1487 date:	2011-2-14
1504 			case MPVP_BATTLE_SIGNUP:
1505 				{
1506 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1508 					IMPVPBattle *pMPVPBattle = g_pMPVPBattleManager->GetMPVPBattleByType((MPVP_BATTLE_TYPE)pKMessage->GetBattleType());
1509 					//KCheck(pMPVPBattle);
1572 						return MP_CONTINUE;
1573 					}
1575 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1576 					pMPVPBattle->TellPlayerEnterMap(pKMessage, pConnector);
1577 				}
1618 			case MPVP_BATTLE_RETSTATE:
1619 				{
1620 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1621 					pMap->GetLuaSystem()->RunScriptFunction
1622 						(
1634 			case MPVP_BATTLE_RES_ENTERSCENE:
1635 				{
1636 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1637 					pMap->GetLuaSystem()->RunScriptFunction
1638 						(
1665 }
1667 /***********************************************************
1668 desc:	跨服战场场景通知消息处理
1669 auth:	rj
1670 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 28 KB CPP 文件 2013/3/10 14:03:54 2018/9/13 20:38:40 2018/9/13 20:38:40 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-mapserver\GXMapDispatch.cpp 20 KB CPP 文件 2013/3/10 14:03:58 2018/9/13 20:38:40 2018/9/13 20:38:40 2
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{
588 		return MP_CONTINUE;
589 	}
591 	//以下是跨服的副本的处理
593 	//给报名服务器返回创建成功消息			
594 	MGMRoomBattle* Msg = CREATE_MESSAGE_OBJ(MGMRoomBattle,MESSAGE_MGM_ROOMBATTLE);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 14:04:18 2018/9/13 20:38:40 2018/9/13 20:38:40 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-mapserver\LuaFunction_Chat.cpp 61 KB CPP 文件 2013/3/10 14:04:20 2018/9/13 20:38:40 2018/9/13 20:38:40 1
1086 		pMsg->SetCycleCount(nParam);
1087 	g_pServerConnectorMgr->SendMessage_SingleMode(pMsg);
1090 	//世界频道支持跨服
1091 	for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
1092 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-mapserver\LuaFunction_Map.cpp 207 KB CPP 文件 2013/3/10 14:04:23 2018/9/13 20:38:40 2018/9/13 20:38:40 16
257 	SelectMap.m_MapDataType = 0;
258 	SelectMap.m_CopyData = * pFD;
259 	SelectMap.m_CopyData.m_bRoom = false;//非跨服房间类型
261 	if (nRoomType == 1)
262 	{
1711 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1713 	KCheck(szName);
1715 	// 2010-11-2 对发送脚本邮件进行跨服支持
1716 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1717 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5832 	return 0;
5833 }
5835 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5836 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5837 {
5858 	LUA_RETURNERROR_1;
5859 }
5861 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5862 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5863 {
5905 	return 0;
5906 }
5908 // 跨服 6v6 战场场景注册函数
5909 int32 LuaFunction_MPVP6v6RegisterMap(Lua_State *L)
5910 {
5931 	LUA_RETURNERROR_1;
5932 }
5934 // 跨服 6v6 战场场景更新战场 UI 面板
5935 int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5936 {
5978 	return 0;
5979 }
5981 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5982 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5983 //{
6005 //}
6006 //
6007 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
6008 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
6009 //{
6075 //}
6076 //
6077 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
6078 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
6079 //{
6145 //}
6146 //
6147 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
6148 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
6149 //{
6179 //}
6180 //
6181 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
6182 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
6183 //{
6226 //}
6227 //
6228 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
6229 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
6230 //{
6278 //}
6279 //
6280 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
6281 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
6282 //{
6323 //}
6324 //
6325 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
6326 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
6327 //{
7169 	return 0;
7170 }
7172 // 跨服战场场景注册函数
7173 int32 LuaFunction_MPVPRegisterMap(Lua_State *L)
7174 {
7264 	if(pMap)
7265 	{
7266 		// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
7267 		int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
7268 			(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-mapserver\LuaSystem_Function.cpp 127 KB CPP 文件 2013/3/10 14:04:29 2018/9/13 20:38:40 2018/9/13 20:38:40 10
1176 	m_LuaVM.RegisterFunction("AddBattleHonour", (void *) (LuaFunction_AddBattleHonour));							// 增加战功
1177 	m_LuaVM.RegisterFunction("SubBattleHonour", (void *) (LuaFunction_SubBattleHonour));							// 减少战功
1178 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));					// 跨服 2v2 战场注册场景 
1179 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));			// 跨服 2v2 战场名称显示
1180 	m_LuaVM.RegisterFunction("MPVP6v6RegisterScene", (void *) (LuaFunction_MPVP6v6RegisterMap));					// 跨服 6v6 战场注册场景
1181 	m_LuaVM.RegisterFunction("SetMPVP6v6BattleDisable", (void *) (LuaFunction_SetMPVP6v6BattleDisable));			// 跨服 6v6 战场名称显示
1182 	m_LuaVM.RegisterFunction("MPVPRegisterMap", (void *) (LuaFunction_MPVPRegisterMap));							// 跨服战场注册场景
1183 	m_LuaVM.RegisterFunction("CountryIsFortuneTimeEx", (void *) (LuaFunction_CountryIsFortuneTimeEx));				// 获取特定国家的国运是否进行
1184 	m_LuaVM.RegisterFunction("AddCountryResourceWithRecall", (void *) (LuaFunction_AddCountryResourceWithRecall));	// 比较并增加的修改资源,保证同步
1296 	m_LuaVM.RegisterFunction("IsLeague", (void*)(LuaFunction_IsLeague));											// 判断两国是否是弱国联盟
1297 	m_LuaVM.RegisterFunction("CountryLeagueZhaoji", (void*)(LuaFunction_CountryLeagueZhaoji));						// 发送联盟召集令
1298 	m_LuaVM.RegisterFunction("AskEnterMGuildBattleScene",(void*)(LuaFunction_AskEnterMGuildBattleScene)); 			// 请求进入跨服帮会战场
1299 	m_LuaVM.RegisterFunction("MGuildBattleSignup",(void*)(LuaFunction_MGuildBattleSignup)); 						// 跨服帮会战报名
1300 	m_LuaVM.RegisterFunction("MGuildBattleResult",(void*)(LuaFunction_MGuildBattleResult)); 						// 跨服帮会战结果
1301 	m_LuaVM.RegisterFunction("MGuildBattleSeasonWeek",(void*)(LuaFunction_MGuildBattleSeasonWeek)); 				// 跨服帮会战赛季当前周数
1302 	m_LuaVM.RegisterFunction("GetMGuildNumOfBattleCurSeason", (void*)(LuaFunction_GetMGuildNumOfBattleCurSeason));	// 获取跨服帮战当前赛季的场数
1303 	m_LuaVM.RegisterFunction("SetEquipPokerData",(void*)(LuaFunction_SetEquipPokerData));							// 设置装备扑克牌属性
1304 	m_LuaVM.RegisterFunction("SetEquipPokerCount",(void*)(LuaFunction_SetEquipPokerCount));							// 设置装备扑克牌个数

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-mapserver\MapCore.cpp 38 KB CPP 文件 2013/3/10 14:04:33 2018/9/13 20:38:40 2018/9/13 20:38:40 2
614 				pSceneData->m_MapID == 20 ||
615 				pSceneData->m_MapID == 23 || 
616 				pSceneData->m_MapID == g_pFubenManager->GetServerBakSceneID())//  支持跨服副本
617 				
618 			{
673 				m_bFirstInit = FALSE;
674 			}
675 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
676 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
677 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-mapserver\MapManager.cpp 59 KB CPP 文件 2013/3/10 14:04:34 2018/9/13 20:38:40 2018/9/13 20:38:40 3
1720 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1721 		{
1722 			KCheck(FALSE);//跨服服务器上找不到报错
1723 		}
1725 		return INVALID_KHAN_ID;
2003 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2004 	{
2005 		//以下开始通知广播,支持跨服架构
2006 		for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
2007 		{
2035 BOOL FubenManager::BroadcastFubenSceneInfo(void)
2036 {
2037 	//如果不开跨服副本，不广播
2038 	if (g_Config.m_MultiGroupConfig.IsMultMapOpen() == FALSE)
2039 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-mapserver\MapServer.cpp 34 KB CPP 文件 2013/3/10 14:04:35 2018/9/13 20:38:40 2018/9/13 20:38:40 1
593 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
594 	
595 	// 跨服战场管理器 2010-10-13 by rj
596 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
597 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-mapserver\MGuildBattle.cpp 28 KB CPP 文件 2013/3/10 14:04:30 2018/9/13 20:38:40 2018/9/13 20:38:40 3
1 /***********************************************************
2 desc:	跨服帮会战场实现
3 auth:	txp
4 date:	2011-6-10
122 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，
123 		// 为这个很少出现的异常进行处理。
124 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，
125 		// 如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
126 		if (FindSignup(pSignupPlayers[i].iWorldID, pSignupPlayers[i].GuildID))
427 		m_MatchList.m_aMatch[m_MatchList.m_nCount].m_bFinished = FALSE;
429 		int32 nLevelFlag=0, nDisLevel = s1.m_nSignupLevel - s2.m_nSignupLevel;
431 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
432 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
433 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-mapserver\Monster.cpp 67 KB CPP 文件 2013/3/10 14:04:37 2018/9/13 20:38:41 2018/9/13 20:38:41 6
641 		return 0;
642 	}
644 	//如果是跨服副本
645 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
646 	{
880 		return;
881 	}
883 	//跨服副本
884 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
885 	{
916 	Player *apValidMember[MAX_GROUP_MEMBER];
917 	uint32 nValidMemberCount = 0;
919 	// 跨服副本
920 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
921 	{
996 		nExp = (int32) (m_BaseExp * fExpParam);
997 	}
999 	uint32	auExp[MAX_GROUP_MEMBER];//  for 跨服军团
1000 	int32	_Idx;
1002 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
1011 			if (pMap->m_FubenDataParty.IsRoomType())
1012 			{
1013 				eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
1014 			}
1015 		}
2170 		return 0;
2171 	}
2173 	//场景类型必须为跨服副本
2174 	Map* pMap = GetMap();
2175 	if (NULL == pMap)

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-mapserver\MPVP2v2Battle.cpp 35 KB CPP 文件 2013/3/10 14:04:31 2018/9/13 20:38:41 2018/9/13 20:38:41 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
249 		{
250 			// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
251 			// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
252 			if (FindSignup(pSignupPlayers[i].uSNID))
253 			{
649 			nLevelFlag = 0;
650 		}
652 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
653 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
654 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-mapserver\MPVP6v6Battle.cpp 30 KB CPP 文件 2013/3/10 14:04:31 2018/9/13 20:38:41 2018/9/13 20:38:41 3
1 /***********************************************************
2 desc:	跨服 6v6 战场实现
3 auth:	txp
4 date:	2011-3-16
154 	{
155 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
156 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
157 		if (FindSignup(pSignupPlayers[i].uSNID))
158 		{
536 			nLevelFlag = 0;
537 		}
539 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
540 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
541 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 14:04:31 2018/9/13 20:38:41 2018/9/13 20:38:41 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
97 	__UNGUARD__ return FALSE;
98 }
100 // 以类型方式获得跨服战场类
101 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
102 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 21 KB CPP 文件 2013/3/10 14:04:53 2018/9/13 20:38:41 2018/9/13 20:38:41 4
34 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
35 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
37 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
38 		SSHandShake msg;
39 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());
281 	if(g_Config.m_MultiGroupConfig.IsSignUpServer())
282 	{
283 		//只要一组服务器连接正常,跨服房间管理器的心跳仍然执行 
284 		if (GetGLServerActiveCount() > 0)
285 		{
610 				{
611 					AddGroupTmp( connID, g_Config.m_MultiGroupConfig.m_GLServerInfo[i].m_WorldID );
613 					//2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，
614 					//当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
615 					SSHandShake msg;
686 	if(FALSE == IsGLServerActiveTmp())//处理断线重连
687 	{
688 		//跨服重连机制
689 		if (FALSE == m_ConnectTimer.IsSetTimer())
690 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-mapserver\SignUpMgr.cpp 83 KB CPP 文件 2013/3/10 14:04:55 2018/9/13 20:38:41 2018/9/13 20:38:41 1
4 Author:shangy		
5 Created:shangy    
6 Description :跨服报名管理类
7 Revision :  2011/06/20 shangy create
8 			2011/08/05 Michael Lin Modify

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/11 11:12:42 2018/9/13 20:38:41 2018/9/13 20:38:41 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/11 11:12:42 2018/9/13 20:38:41 2018/9/13 20:38:41 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/11 11:12:43 2018/9/13 20:38:41 2018/9/13 20:38:41 1
199 }
200 	
201 // 2010-10-9 by rj 跨服线程连接方式
202 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
203 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-share\Core\Setting.cpp 87 KB CPP 文件 2013/3/11 11:12:47 2018/9/13 20:38:42 2018/9/13 20:38:42 6
291 /*
292 =======================================================================================================================
293  加载跨服配置信息
294 =======================================================================================================================
295 */
305 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
306 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
308 	// 跨服战场最大场景数量配置 2010-9-23 by rj
309 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
310 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
311 	
312 	m_MultiGroupConfig.m_nMaxMGuildMapCnt = ini.Get_Property_Int("MGuild", "Max_SceneCount");
313 	KCheckEx(m_MultiGroupConfig.m_nMaxMGuildMapCnt>0 && m_MultiGroupConfig.m_nMaxMGuildMapCnt<=MGUILD_MAX_MAPCOUNT, "跨服帮战场景数量要小于512");
315 // 	m_MultiGroupConfig.m_nMGuildBeginWeek = ini.Get_Property_Int("MGuild", "BeginWeek");
316 // 	KCheckEx(m_MultiGroupConfig.m_nMGuildBeginWeek>0 && m_MultiGroupConfig.m_nMGuildBeginWeek<=52, "起始周只能在1-52之间");
330 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
331 		
332 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
334 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
336 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);
393 		}		
394 	}
396 	//跨服关卡报名服务器开关 
397 	m_MultiGroupConfig.m_SignUpServerToggle = ini.Get_Property_Int( "Room", "SignUpServerToggle" );
398 	m_MultiGroupConfig.m_MapFubenToogle = ini.Get_Property_Int( "Room", "MapFubenToogle" );
1054 	m_ConfigInfo.m_nEmpireOfficerMinLevel = ini.Get_Property_Int("Empire","OfficerMinLevel");
1055 	//[Empire] End
1057 	//added for跨服军团  
1058 	for (int32 _nGIndex = 0; _nGIndex < MAX_GROUP_MEMBER; ++_nGIndex)
1059 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-share\DataBase\ArchiveInterface.cpp 299 KB CPP 文件 2013/3/11 11:12:48 2018/9/13 20:38:42 2018/9/13 20:38:42 1
9916 }
9918 /************************************************************************/
9919 /* 跨服战积分相关                                                       */
9920 /************************************************************************/
9922 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-share\DataBase\SqlStatement.cpp 22 KB CPP 文件 2013/3/11 11:12:50 2018/9/13 20:38:42 2018/9/13 20:38:42 1
251 char	*g_LoadLostItemInfo = "select aid,playerguid,srcplayerguid,srcplayername,guid,world,server,itemclass,creator,dataproperty,data,termendtime,islock,unlocktime,gmoptime from %s where aid>%u order by aid asc" ;
252 char	*g_DelLostItemInfo = "delete from %s where aid=%u";
254 // 跨服战积分相关处理
255 char	*LoadMPVPPointInfo = "select unitid, unitname, world, currentpoint, totalpoint, currentwintimes, currentjointimes, totalwintimes, totaljointimes, mpvptypename, currentweek, startweek, params from %s where valid = 1";
256 char	*SaveMPVPPointInfo = "call proc_save_mpvppoint(%d,\'%s\', %d, %d, %d, %d, %d, %d, %d, \'%s\', %d, %d, %d, 1)";

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-share\Messages\StructRoomBattle.cpp 68 KB CPP 文件 2013/3/11 11:14:57 2018/9/13 20:38:45 2018/9/13 20:38:45 19
4 Author:Michael		
5 Created:Michael    
6 Description :跨服房间相关结构
7 Revision :  2011/06/21 Michael create
9 =============================================================================*/
791 }
794 /************************************************************************/
795 /* 跨服报名候选数据结构定义  		                                    */
796 /************************************************************************/
797 BOOL RoomBattleSignupInfo::IsRoomIDInList(ut_id_room nRoomID) const
931 }
932 /************************************************************************/
933 /* 跨服报名候选数据结构定义 客户端消息结构                              */
934 /************************************************************************/
935 void RoomBattleSignupInfo_CX_Msg::Clear()
972 }
974 /************************************************************************/
975 /* 跨服取消报名结构定义   客户端消息结构	                           */
976 /************************************************************************/
977 void RoomBattleSignupCancel_CX_Msg::Clear()
1002 }
1004 /************************************************************************/
1005 /* 跨服确认进入结构定义    客户端消息结构	                           */
1006 /************************************************************************/
1007 void RoomBattleWaitingEnter_CX_Msg::Clear()
1109 }
1111 /************************************************************************/
1112 /* 跨服玩家确认结构定义    服务器消息结构	                           */
1113 /************************************************************************/
1114 void RoomBattlePlayerEnter_XC_Msg::Clear()
1148 }
1150 /************************************************************************/
1151 /* 跨服军团成员离开    服务器消息结构	                                */
1152 /************************************************************************/
1153 void RoomBattlePlayerLeave_XC_Msg::Clear()
1207 }
1210 /************************************************************************/
1211 /* 跨服确认进入结构定义    服务器消息结构	                           */
1212 /************************************************************************/
1213 void RoomBattleWaitingEnter_XC_Msg::Clear()
1581 }
1582 /************************************************************************/
1583 /* 跨服MapServer信息                  		                            */
1584 /************************************************************************/
1585 float SMutiGroupMapServerInfo::GetUseRate() const
1725 }
1727 /************************************************************************/
1728 /* 跨服关卡消息结构定义 MGP-->GL               		                    */
1729 /************************************************************************/
1730 uint32 MsgMGRoomBattle::GetMsgSize() const
1802 }
1804 /************************************************************************/
1805 /* 跨服关卡消息结构定义 GL-->MGP               		                    */
1806 /************************************************************************/
1807 uint32 MsgGMRoomBattle::GetMsgSize() const
1894 }
1895 /************************************************************************/
1896 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消            */
1897 /************************************************************************/
1898 uint32 MsgXGMRoomBattle_ReplyEnter::GetMsgSize()const
1931 }
1933 /************************************************************************/
1934 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消广播            */
1935 /************************************************************************/
1936 uint32 MsgXGMRoomBattle_ReplyEnter_BROADCAST::GetMsgSize()const
1969 }
1971 /************************************************************************/
1972 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  客户端确认离开，重新返回报名状态 */
1973 /************************************************************************/
1974 uint32 MsgXGMRoomBattle_Leave::GetMsgSize()const
2007 }
2009 /************************************************************************/
2010 /* 跨服关卡消息结构定义 MGP-->GL-->MGP        		                    */
2011 /************************************************************************/
2012 uint32 MsgMGMRoomBattle::GetMsgSize() const
2066 }
2068 /************************************************************************/
2069 /* 跨服关卡消息结构定义 MAP-->GL-->MGP        		                    */
2070 /************************************************************************/
2071 uint32 MsgXGMRoomBattle::GetMsgSize() const
2185 }
2187 /************************************************************************/
2188 /* 跨服关卡消息结构定义 MGP-->GL-->MAP        		                    */
2189 /************************************************************************/
2190 uint32 MsgMGXRoomBattle::GetMsgSize() const
2301 }
2303 /************************************************************************/
2304 /* 跨服关卡消息结构定义 Client-->MAP        		                    */
2305 /************************************************************************/
2306 uint32 MsgCXRoomBattle::GetMsgSize() const
2396 }
2398 /************************************************************************/
2399 /* 跨服关卡消息结构定义 MAP-->Client        		                    */
2400 /************************************************************************/
2401 uint32 MsgXCRoomBattle::GetMsgSize() const

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-share\TAB\TabDefine_Map_Misc.cpp 91 KB CPP 文件 2013/3/11 11:17:07 2018/9/13 20:38:48 2018/9/13 20:38:48 2
2382 /*
2383 =======================================================================================================================
2384 跨服关卡 逻辑数据表
2385 =======================================================================================================================
2386 */
2438 /*
2439 =======================================================================================================================
2440 跨服关卡 配置数据表
2441 =======================================================================================================================
2442 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_cb\src\khan2-share\TAB\TabDefine_Share.cpp 42 KB CPP 文件 2013/3/11 11:17:09 2018/9/13 20:38:48 2018/9/13 20:38:48 2
1009 {
1010 	__GUARD__
1012 	//如果不开跨服副本，默认不读BackScene
1013 	if (g_Config.m_MultiGroupConfig.m_nGroupCount <= 0)
1014 	{
1065 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0) 
1066 	{
1067 		//如果是跨服MapServer确保BackScene有配置
1068 		KCheckEx(bFindCurrServerBackScene,"BakSceneInfo.tab表配置错误");
1069 	}

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-client\GameCommandSystem.cpp 68 KB CPP 文件 2013/3/10 14:05:56 2018/9/13 20:38:50 2018/9/13 20:38:50 1
1433 	{ GCD_ASK_JOIN_FUBEN_WITH_TEAM, "ASK_JOIN_FUBEN_WITH_TEAM" },
1434 	{ GCD_ASK_EXIT_ROOM, "ASK_EXIT_ROOM" },
1436 	//跨服副本报名搜索
1437 	{ GCD_UPDATE_FUBEN_SEARCH_STATE,"UPDATE_FUBEN_SEARCH_STATE" },
1439 	//军团信息更新

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-client\GameMapManager.cpp 32 KB CPP 文件 2013/3/10 14:06:11 2018/9/13 20:38:50 2018/9/13 20:38:50 1
1420 BOOL CMapManager::IsMutiServerMap()const
1421 {
1422 	//跨服后花园场景
1423 	if (   GetCurrMapMapId() == 539
1424 		|| GetCurrMapMapId() == 540

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-client\GameStateChangeServer.cpp 6 KB CPP 文件 2013/3/10 14:06:30 2018/9/13 20:38:50 2018/9/13 20:38:50 1
211 			::GetPrivateProfileString( "Debug", "Login.WorldID", "", szReadTemp, MAX_PATH, DEBUG_FILE_NAME );
212 			static ut_id s_nWorldID = atoi(szReadTemp); 
213 			GAME_DATA_PLAYER_PTR->SetWorldID(s_nWorldID); // 支持跨服自架测试
214 																			
215 		}

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-client\GameStateRun.cpp 90 KB CPP 文件 2013/3/10 14:06:32 2018/9/13 20:38:50 2018/9/13 20:38:50 2
653 	
654 	GAME_DATA_PTR->askCountryData();
657 	//跨服关卡的处理 
659 	//清除小地图上的军团信息
660 	GAME_DATA_RELATION_PTR->GetCorps()->ClearCorpsInfo();
672 	//请求军团数据
673 	GAME_DATA_QUEST_PTR->AskRoomBattleGroupData();
674 	/////跨服关卡的处理	
675 }
678 void CGameStateRun::IsMapLoaded( void )

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-client\KCharacterEvent.cpp 66 KB CPP 文件 2013/3/10 14:06:39 2018/9/13 20:38:50 2018/9/13 20:38:50 1
1088 							if (eCountryRelation == COUNTRY_HAS_COLLEAGUE)
1089 							{
1090 								if (!MAP_MANAGER_PTR->IsMutiServerMap())//如果是跨服，不检查弱国联盟
1091 								{
1092 									nSceneNameColor = 2;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-client\KGameOperate.cpp 69 KB CPP 文件 2013/3/10 14:06:46 2018/9/13 20:38:51 2018/9/13 20:38:51 1
2532 	if (eCountryRelation == COUNTRY_HAS_COLLEAGUE)
2533 	{
2534 		if (!MAP_MANAGER_PTR->IsMutiServerMap())//如果跨服则不计算弱国联盟
2535 		{
2536 			return COUNTRY_HAS_COLLEAGUE;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-client\UIMap.cpp 24 KB CPP 文件 2013/3/10 14:07:05 2018/9/13 20:38:51 2018/9/13 20:38:51 1
482 		case MAP_POINT_TRANSER_NPC:		szChildWinType = MAP_POINT_TYPE_TRANSER_NPC;	break;
483 		case MAP_POINT_MONSTER:			szChildWinType = MAP_POINT_TYPE_MONSTER;		break;
485 		// 跨服6v6的旗子
486 		case MAP_POINT_OneLevelFlag:			szChildWinType = MAP_POINT_TYPE_ONELEVELFLAG; break;
487 		case MAP_POINT_TwoLevelFlag:			szChildWinType = MAP_POINT_TYPE_TWOLEVELFLAG; break;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-client\UIPartyMessageBox.cpp 33 KB CPP 文件 2013/3/10 14:07:06 2018/9/13 20:38:51 2018/9/13 20:38:51 1
404 		}
405 		break;
407 	case MGUILD_BATTLE_TYPE: // 跨服帮会战
408 		{
409 			CXMPVPBattle msg;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-dbshare\MKLogicManager.cpp 116 KB CPP 文件 2013/3/10 14:07:44 2018/9/13 20:38:52 2018/9/13 20:38:52 1
3672 }
3674 /************************************************************************/
3675 /* 跨服战积分相关                                                       */
3676 /************************************************************************/
3677 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-glserver\GL.cpp 44 KB CPP 文件 2013/3/10 14:07:52 2018/9/13 20:38:52 2018/9/13 20:38:52 5
429 	KCheck(g_pGuildBattleManager);
430 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildBattleManager...OK");
432 	//跨服帮战的管理器
433 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new MultiGuildBattleManager ... ");
434 	g_pMGuildBattleManager = new MGuildBattleManager;
512 	KCheck(g_pGuildCenter);
513 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildManager...OK");
515 	//跨服战积分管理器
516 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMPVPPointManager ... ");
517 	g_pMPVPPointManager = new MPVPPointManager;
698 	KCheck(g_pSystemParamsManager);
699 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new g_pSystemParamsManager...OK");
702 	// 跨服管理器
703 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMutiGroupMapServerManager ... ");
704 	g_pMutiGroupMapServerManager = new MutiGroupMapServerManager;
947 	KCheck(ret);
948 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager->Init()...OK");
951 	//跨服管理器
952 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[Init] g_pMutiGroupMapServerManager->Init()...OK");
953 	ret = g_pMutiGroupMapServerManager->Init();
1127 	KSafeDelete(g_pSystemParamsManager);
1128 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager delete...OK");
1130 	//跨服管理器
1131 	KSafeDelete(g_pMutiGroupMapServerManager);
1132 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pMutiGroupMapServerManager delete...OK");

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 14 KB CPP 文件 2013/3/10 14:08:02 2018/9/13 20:38:52 2018/9/13 20:38:52 1
227 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
228 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
230 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
231 		if (pFindPlayer == NULL)
232 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-glserver\MGuildBattleManager.cpp 15 KB CPP 文件 2013/3/10 14:08:04 2018/9/13 20:38:52 2018/9/13 20:38:52 8
94 	// 当前赛季进度
95 	int32 nSeasonWeek = (GET_TIME().GetWeekNumFrom2011() - g_Config.m_ConfigInfo.m_MPVPGuildBeginWeek) % g_Config.m_ConfigInfo.m_MPVPPointPeriodWeeks;
97 	// 取得跨服服务器
98 	int32 nServerNum = 0;
99 	ut_id serverIDs[SERVER_CAPACITY] = {-1};
145 	//	if (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / nServerNum <= 0)
146 	//		return serverIDs[0];
148 	//	// 2011-07-26 by rj 改进原来的等分算法，在所连跨服服务器数量等于 2 时用用 4/6 算法来解决高分帮会人数过多的问题
149 	//	int32 iSeg = iIndex / (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / (nServerNum <= 2 ? 2.5f : nServerNum) );
150 	//	if (iSeg >= nServerNum)
166 	if (uPrevSignupTime)
167 	{
168 		// 超时保护（防止报名完成后跨服服务器宕机导致 GL 无法清理报名）
169 		if (GET_TIME().GetCTime() - uPrevSignupTime > 90*60)
170 		{
258 	if(!pGuild || pGuild->GetGuildID() == INVALID_KHAN_ID)
259 		return FALSE;
261 	// 转发跨服战场进入通知到报名玩家所在 Map
262 	GXMPVPBattle msg;
263 	msg.SetBattleType(MPVP_GUILD_BATTLE_TYPE);
416 					aSignupPlayers[0].GuildPoint = pPoint->m_nCurrentPoint;
417 				}
419 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
420 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
421 				msg.SetSignupType(pKMessage->GetSignupType());
472 				if (NULL != pServePlayer_Target)
473 				{
474 					// 转发跨服战场状态到报名玩家所在 Map
475 					GXMPVPBattle msg;
476 					msg.SetBattleType(pKMessage->GetBattleType());
503 				return MP_CONTINUE;
504 			}
506 			// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
507 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pMatch->nServerID);
508 			if (pServePlayer_Target)
524 			if (NULL != pServePlayer_Target)
525 			{
526 				// 转发跨服战场进入响应到报名玩家所在 Map
527 				GXMPVPBattle msg;
528 				msg.SetBattleType(pKMessage->GetBattleType());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-glserver\MPVPGuildPoint.cpp 8 KB CPP 文件 2013/3/10 14:08:05 2018/9/13 20:38:52 2018/9/13 20:38:52 3
1 /************************************************************************/
2 /* 帮会跨服战积分信息接口的具体实现                                     */
3 /************************************************************************/
5 #include "stdafx.h"
195 /*
196 =======================================================================================================================
197 处理不同跨服战各自的额外参数填充
198 =======================================================================================================================
199 */
223 /*
224 =======================================================================================================================
225 加载跨服帮战每周的场次信息
226 =======================================================================================================================
227 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-glserver\MPVPPointArithmetic.cpp 2 KB CPP 文件 2013/3/10 14:08:05 2018/9/13 20:38:52 2018/9/13 20:38:52 3
1 /************************************************************************/
2 /* 跨服战积分算法器,负责各种跨服战积分的计算逻辑实现                    */
3 /************************************************************************/
5 #include "stdafx.h"
16 /*
17 ===============================================================================================================
18 根据实力来计算跨服帮会的加权分
19 帮会实力-(错过的场次*放弃损失的分数)
20 ===============================================================================================================

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-glserver\MPVPPointInfo.cpp 14 KB CPP 文件 2013/3/10 14:08:05 2018/9/13 20:38:52 2018/9/13 20:38:52 2
1 /************************************************************************/
2 /* 跨服战积分信息接口的具体实现                                         */
3 /************************************************************************/
5 #include "stdafx.h"
72 /*
73 =======================================================================================================================
74 获取跨服积分的数据信息
75 =======================================================================================================================
76 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-glserver\MPVPPointManager.cpp 11 KB CPP 文件 2013/3/10 14:08:06 2018/9/13 20:38:52 2018/9/13 20:38:52 5
1 /************************************************************************/
2 /* 跨服战积分管理器的实现                                               */
3 /************************************************************************/
5 #include "stdafx.h"
98 /*
99 ===============================================================================================================
100 注册跨服积分的实现
101 ===============================================================================================================
102 */
220 /*
221 ===============================================================================================================
222 获取指定类型跨服战全部积分信息
223 ===============================================================================================================
224 */
243 /*
244 ===============================================================================================================
245 获取指定跨服战当前的赛季开始周
246 ===============================================================================================================
247 */
266 /*
267 ===============================================================================================================
268 获取指定跨服战当前周
269 ===============================================================================================================
270 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-glserver\MPVPToplist.cpp 8 KB CPP 文件 2013/3/10 14:08:06 2018/9/13 20:38:52 2018/9/13 20:38:52 2
1 /************************************************************************/
2 /* 跨服帮会战排行榜的具体实现		                                    */
3 /************************************************************************/
5 #include "stdafx.h"
25 /*
26 =======================================================================================================================
27 积分数据加载,从跨服积分管理器中加载需要的信息
28 =======================================================================================================================
29 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-glserver\MutiGroupMapServerManager.cpp 18 KB CPP 文件 2013/3/10 14:08:08 2018/9/13 20:38:52 2018/9/13 20:38:52 1
4 Author:Michael		
5 Created:Michael
6 Description :跨服MapServer管理器实现
7 Revision :  2011/06/17 Michael create
9 =============================================================================*/

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-glserver\ServerConnectorManager_GL.cpp 12 KB CPP 文件 2013/3/10 14:08:12 2018/9/13 20:38:52 2018/9/13 20:38:52 2
528 			_NET_TRY
529 			{
530 				// 跨服帮战管理器心跳
531 				ret = g_pMGuildBattleManager->HeartBeat(uTime);
532 				KCheck(ret);
538 			_NET_TRY
539 			{
540 				//处理跨服战积分管理器相关的心跳
541 				ret = g_pMPVPPointManager->HeartBeat(uTime);		
542 				KCheck(ret);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-glserver\TopListManager.cpp 18 KB CPP 文件 2013/3/10 14:08:18 2018/9/13 20:38:53 2018/9/13 20:38:53 1
152 	Register(HONOR_CHARIOT_TOP_LIST_BK,			new TopList,					"Chariot_Honor_bk" );
153 	// add by dragon 战车排行榜 }
155 	// 跨服帮会战排行榜
156 	Register(MPVP_GUILD_CURRENT,			new CurrentMPVPGuildTopList,		"MPVP_Guild_Current" );
157 	Register(MPVP_GUILD_CURRENT_BK,			new TopList,				"MPVP_Guild_Current_bk" );

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-glserver\XGBattleDispatch.cpp 93 KB CPP 文件 2013/3/10 14:08:21 2018/9/13 20:38:53 2018/9/13 20:38:53 25
2507 }
2509 /***********************************************************
2510 desc:	跨服战场 XG 服务器消息处理
2511 auth:	rj
2512 date:	2011-2-14
2520 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2521 	{
2522 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2523 		static IntegerHashMap mapMPVP2v2SignupRecord;
2524 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2526 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2527 		}
2529 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2530 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2531 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2548 		case MPVP_BATTLE_RETSTATE:
2549 			{
2550 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名。值是当前报名的时间。
2551 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2552 				{
2582 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2583 				KCheck(pServePlayer_Target);
2585 				// 转发跨服战场进入通知到报名玩家所在 Map
2586 				GXMPVPBattle msg;
2587 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2613 				if (uPrevSignupTime)
2614 				{
2615 					// 6 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2616 					if (GET_TIME().GetCTime() - uPrevSignupTime > 360)
2617 					{
2719 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2720 				}
2722 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2723 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2724 				msg.SetSignupType(pKMessage->GetSignupType());
2734 				if (NULL != pServePlayer_Target)
2735 				{
2736 					// 转发跨服战场状态到报名玩家所在 Map
2737 					GXMPVPBattle msg;
2738 					msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2752 				if (iServerID)
2753 				{
2754 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2755 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2756 					if (NULL != pServePlayer_Target)
2777 				if (NULL != pServePlayer_Target)
2778 				{
2779 					// 转发跨服战场进入响应到报名玩家所在 Map
2780 					GXMPVPBattle msg;
2781 					msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2793 	else if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_6V6)
2794 	{
2795 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2796 		static IntegerHashMap mapMPVP6v6SignupRecord;
2797 		if (mapMPVP6v6SignupRecord.GetMaxCount() == 0)
2799 			mapMPVP6v6SignupRecord.InitTable(MAX_WORLD_PLAYER);
2800 		}
2802 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2803 		static IntegerHashMap mapMPVP6v6EnterBattleRecord;
2804 		if (mapMPVP6v6EnterBattleRecord.GetMaxCount() == 0)
2821 		case MPVP_BATTLE_RETSTATE:
2822 			{
2823 				// 记录这次跨服 6v6 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 6v6 的报名。值是当前报名的时间。
2824 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2825 				{
2856 				if (NULL != pServePlayer_Target)
2857 				{
2858 					// 转发跨服战场进入通知到报名玩家所在 Map
2859 					GXMPVPBattle msg;
2860 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
2890 				if (uPrevSignupTime)
2891 				{
2892 					// 11 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2893 					if (GET_TIME().GetCTime() - uPrevSignupTime > 660)
2894 					{
2996 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2997 				}
2999 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
3000 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
3001 				msg.SetSignupType(pKMessage->GetSignupType());
3011 				if (NULL != pServePlayer_Target)
3012 				{
3013 					// 转发跨服战场状态到报名玩家所在 Map
3014 					GXMPVPBattle msg;
3015 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
3029 				if (iServerID)
3030 				{
3031 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
3032 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
3033 					if (NULL != pServePlayer_Target)
3054 				if (NULL != pServePlayer_Target)
3055 				{
3056 					// 转发跨服战场进入响应到报名玩家所在 Map
3057 					GXMPVPBattle msg;
3058 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\Bus.cpp 66 KB CPP 文件 2013/3/10 14:08:43 2018/9/13 20:38:53 2018/9/13 20:38:53 3
805 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
806 		= CaculateMonsterExpRuler::eCALC_TYPE_TEAM;
808 	//如果是跨服副本
809 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
810 	{
810 	{
811 		nValidMemberCount = GetValidOwnerListGroup(MAX_GROUP_MEMBER,apValidMember);
812 		eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
813 	}
814 	else
1091 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1093 	if(Get_OccupantTeamID() != INVALID_KHAN_ID) iFadeoutType = Obj_ItemRuler::FADE_OUT_TEAM;
1095 	//是否是跨服
1096 	BOOL BGroup = FALSE;
1097 	Map* pMap = GetMap();

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\ChangeMapDelegater.cpp 44 KB CPP 文件 2013/3/10 14:09:05 2018/9/13 20:38:53 2018/9/13 20:38:53 2
1538 		pPlayer->ClearMutexState(MS_Fuben);
1539 	}
1541 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1542 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1543 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\CountryCacheManager.cpp 49 KB CPP 文件 2013/3/10 14:09:14 2018/9/13 20:38:54 2018/9/13 20:38:54 1
525 		
526 	/************************************弱国联盟判断 begin***********************************************************/
528 	//只要跨服map，不判断弱国联盟
529 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
530 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 14:08:45 2018/9/13 20:38:54 2018/9/13 20:38:54 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\CXItemDispatch.cpp 69 KB CPP 文件 2013/3/10 14:08:54 2018/9/13 20:38:54 2018/9/13 20:38:54 1
2233 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
2234 	{
2235 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
2236 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2237 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\GMCommand.cpp 213 KB CPP 文件 2013/3/10 14:09:19 2018/9/13 20:38:54 2018/9/13 20:38:54 1
545 	REGISTER_HANDLER(addchariothonour);	// \gm addchariothonour =100	增加战车荣誉
546 	REGISTER_HANDLER(unlockhorse);		// \gm unlockhorse =objid =horseindex  强制解锁骑乘
547 	REGISTER_HANDLER(addguildwin);		// \gm addguildwin =num 增加跨服帮战胜利次数
549 	REGISTER_HANDLER(getviewgroup);		// \gm getviewgroup	//获取当前的可视组
550 	REGISTER_HANDLER(setviewgroup);		// \gm setviewgroup	=groupnum //设置当前的可视组

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\GMRoomBattleDispatch.cpp 5 KB CPP 文件 2013/3/10 14:09:19 2018/9/13 20:38:54 2018/9/13 20:38:54 1
53 	else
54 	{
55 		ut_id_map nBackSceneID = g_pFubenManager->GetServerBakSceneID();  //跨服处的副本入口场景
57 		ut_id_map nTarSceneId = pPacket->GetRoomBattle()->u_RoomBattleData.m_SceneID;
58 		

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\GXBattleDispatch.cpp 56 KB CPP 文件 2013/3/10 14:09:20 2018/9/13 20:38:54 2018/9/13 20:38:54 6
1482 }
1484 /***********************************************************
1485 desc:	跨服战场 GX 服务器消息处理
1486 auth:	rj
1487 date:	2011-2-14
1504 			case MPVP_BATTLE_SIGNUP:
1505 				{
1506 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1508 					IMPVPBattle *pMPVPBattle = g_pMPVPBattleManager->GetMPVPBattleByType((MPVP_BATTLE_TYPE)pKMessage->GetBattleType());
1509 					//KCheck(pMPVPBattle);
1572 						return MP_CONTINUE;
1573 					}
1575 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1576 					pMPVPBattle->TellPlayerEnterMap(pKMessage, pConnector);
1577 				}
1618 			case MPVP_BATTLE_RETSTATE:
1619 				{
1620 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1621 					pMap->GetLuaSystem()->RunScriptFunction
1622 						(
1634 			case MPVP_BATTLE_RES_ENTERSCENE:
1635 				{
1636 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1637 					pMap->GetLuaSystem()->RunScriptFunction
1638 						(
1665 }
1667 /***********************************************************
1668 desc:	跨服战场场景通知消息处理
1669 auth:	rj
1670 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 28 KB CPP 文件 2013/3/10 14:09:22 2018/9/13 20:38:54 2018/9/13 20:38:54 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\GXMapDispatch.cpp 20 KB CPP 文件 2013/3/10 14:09:28 2018/9/13 20:38:54 2018/9/13 20:38:54 2
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{
588 		return MP_CONTINUE;
589 	}
591 	//以下是跨服的副本的处理
593 	//给报名服务器返回创建成功消息			
594 	MGMRoomBattle* Msg = CREATE_MESSAGE_OBJ(MGMRoomBattle,MESSAGE_MGM_ROOMBATTLE);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\KLDaemonThread.cpp 9 KB CPP 文件 2013/3/10 14:09:51 2018/9/13 20:38:55 2018/9/13 20:38:55 3
160 		}
162 		m_OPSteps = 7;
164 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
165 		_NET_TRY
166 		{
165 		_NET_TRY
166 		{
167 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
168 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
169 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\LuaFunction_Chat.cpp 63 KB CPP 文件 2013/3/10 14:09:54 2018/9/13 20:38:55 2018/9/13 20:38:55 1
1086 		pMsg->SetCycleCount(nParam);
1087 	g_pServerConnectorMgr->SendMessage_SingleMode(pMsg);
1090 	//世界频道支持跨服
1091 	for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
1092 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\LuaFunction_Map.cpp 213 KB CPP 文件 2013/3/10 14:09:57 2018/9/13 20:38:55 2018/9/13 20:38:55 16
257 	SelectMap.m_MapDataType = 0;
258 	SelectMap.m_CopyData = * pFD;
259 	SelectMap.m_CopyData.m_bRoom = false;//非跨服房间类型
261 	if (nRoomType == 1)
262 	{
1711 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1713 	KCheck(szName);
1715 	// 2010-11-2 对发送脚本邮件进行跨服支持
1716 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1717 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5968 	return 0;
5969 }
5971 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5972 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5973 {
5994 	LUA_RETURNERROR_1;
5995 }
5997 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5998 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5999 {
6041 	return 0;
6042 }
6044 // 跨服 6v6 战场场景注册函数
6045 int32 LuaFunction_MPVP6v6RegisterMap(Lua_State *L)
6046 {
6067 	LUA_RETURNERROR_1;
6068 }
6070 // 跨服 6v6 战场场景更新战场 UI 面板
6071 int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
6072 {
6114 	return 0;
6115 }
6117 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
6118 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
6119 //{
6141 //}
6142 //
6143 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
6144 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
6145 //{
6211 //}
6212 //
6213 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
6214 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
6215 //{
6281 //}
6282 //
6283 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
6284 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
6285 //{
6315 //}
6316 //
6317 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
6318 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
6319 //{
6362 //}
6363 //
6364 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
6365 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
6366 //{
6414 //}
6415 //
6416 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
6417 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
6418 //{
6459 //}
6460 //
6461 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
6462 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
6463 //{
7305 	return 0;
7306 }
7308 // 跨服战场场景注册函数
7309 int32 LuaFunction_MPVPRegisterMap(Lua_State *L)
7310 {
7400 	if(pMap)
7401 	{
7402 		// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
7403 		int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
7404 			(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\LuaSystem_Function.cpp 134 KB CPP 文件 2013/3/10 14:10:04 2018/9/13 20:38:55 2018/9/13 20:38:55 10
1185 	m_LuaVM.RegisterFunction("AddBattleHonour", (void *) (LuaFunction_AddBattleHonour));							// 增加战功
1186 	m_LuaVM.RegisterFunction("SubBattleHonour", (void *) (LuaFunction_SubBattleHonour));							// 减少战功
1187 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));					// 跨服 2v2 战场注册场景 
1188 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));			// 跨服 2v2 战场名称显示
1189 	m_LuaVM.RegisterFunction("MPVP6v6RegisterScene", (void *) (LuaFunction_MPVP6v6RegisterMap));					// 跨服 6v6 战场注册场景
1190 	m_LuaVM.RegisterFunction("SetMPVP6v6BattleDisable", (void *) (LuaFunction_SetMPVP6v6BattleDisable));			// 跨服 6v6 战场名称显示
1191 	m_LuaVM.RegisterFunction("MPVPRegisterMap", (void *) (LuaFunction_MPVPRegisterMap));							// 跨服战场注册场景
1192 	m_LuaVM.RegisterFunction("CountryIsFortuneTimeEx", (void *) (LuaFunction_CountryIsFortuneTimeEx));				// 获取特定国家的国运是否进行
1193 	m_LuaVM.RegisterFunction("AddCountryResourceWithRecall", (void *) (LuaFunction_AddCountryResourceWithRecall));	// 比较并增加的修改资源,保证同步
1305 	m_LuaVM.RegisterFunction("IsLeague", (void*)(LuaFunction_IsLeague));											// 判断两国是否是弱国联盟
1306 	m_LuaVM.RegisterFunction("CountryLeagueZhaoji", (void*)(LuaFunction_CountryLeagueZhaoji));						// 发送联盟召集令
1307 	m_LuaVM.RegisterFunction("AskEnterMGuildBattleScene",(void*)(LuaFunction_AskEnterMGuildBattleScene)); 			// 请求进入跨服帮会战场
1308 	m_LuaVM.RegisterFunction("MGuildBattleSignup",(void*)(LuaFunction_MGuildBattleSignup)); 						// 跨服帮会战报名
1309 	m_LuaVM.RegisterFunction("MGuildBattleResult",(void*)(LuaFunction_MGuildBattleResult)); 						// 跨服帮会战结果
1310 	m_LuaVM.RegisterFunction("MGuildBattleSeasonWeek",(void*)(LuaFunction_MGuildBattleSeasonWeek)); 				// 跨服帮会战赛季当前周数
1311 	m_LuaVM.RegisterFunction("GetMGuildNumOfBattleCurSeason", (void*)(LuaFunction_GetMGuildNumOfBattleCurSeason));	// 获取跨服帮战当前赛季的场数
1312 	m_LuaVM.RegisterFunction("SetEquipPokerData",(void*)(LuaFunction_SetEquipPokerData));							// 设置装备扑克牌属性
1313 	m_LuaVM.RegisterFunction("SetEquipPokerCount",(void*)(LuaFunction_SetEquipPokerCount));							// 设置装备扑克牌个数

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\MapCore.cpp 40 KB CPP 文件 2013/3/10 14:10:07 2018/9/13 20:38:55 2018/9/13 20:38:55 2
626 				pSceneData->m_MapID == 23 || 
627 				g_Config.m_ConfigInfo.IsGardenMap(pSceneData->m_MapID) || //家园场景副本入口
628 				pSceneData->m_MapID == g_pFubenManager->GetServerBakSceneID())//  支持跨服副本				
629 			{
630 				//以上场景是副本入口场景 创建副本数据
684 				m_bFirstInit = FALSE;
685 			}
686 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
687 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
688 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\MapManager.cpp 64 KB CPP 文件 2013/3/10 14:10:09 2018/9/13 20:38:55 2018/9/13 20:38:55 3
1741 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1742 		{
1743 			KCheck(FALSE);//跨服服务器上找不到报错
1744 		}
1746 		return INVALID_KHAN_ID;
2024 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2025 	{
2026 		//以下开始通知广播,支持跨服架构
2027 		for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
2028 		{
2056 BOOL FubenManager::BroadcastFubenSceneInfo(void)
2057 {
2058 	//如果不开跨服副本，不广播
2059 	if (g_Config.m_MultiGroupConfig.IsMultMapOpen() == FALSE)
2060 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\MapServer.cpp 35 KB CPP 文件 2013/3/10 14:10:10 2018/9/13 20:38:55 2018/9/13 20:38:55 1
603 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
604 	
605 	// 跨服战场管理器 2010-10-13 by rj
606 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
607 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\MGuildBattle.cpp 28 KB CPP 文件 2013/3/10 14:10:05 2018/9/13 20:38:55 2018/9/13 20:38:55 3
1 /***********************************************************
2 desc:	跨服帮会战场实现
3 auth:	txp
4 date:	2011-6-10
122 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，
123 		// 为这个很少出现的异常进行处理。
124 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，
125 		// 如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
126 		if (FindSignup(pSignupPlayers[i].iWorldID, pSignupPlayers[i].GuildID))
427 		m_MatchList.m_aMatch[m_MatchList.m_nCount].m_bFinished = FALSE;
429 		int32 nLevelFlag=0, nDisLevel = s1.m_nSignupLevel - s2.m_nSignupLevel;
431 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
432 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
433 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\Monster.cpp 67 KB CPP 文件 2013/3/10 14:10:12 2018/9/13 20:38:55 2018/9/13 20:38:55 6
641 		return 0;
642 	}
644 	//如果是跨服副本
645 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
646 	{
880 		return;
881 	}
883 	//跨服副本
884 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
885 	{
916 	Player *apValidMember[MAX_GROUP_MEMBER];
917 	uint32 nValidMemberCount = 0;
919 	// 跨服副本
920 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
921 	{
996 		nExp = (int32) (m_BaseExp * fExpParam);
997 	}
999 	uint32	auExp[MAX_GROUP_MEMBER];//  for 跨服军团
1000 	int32	_Idx;
1002 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
1011 			if (pMap->m_FubenDataParty.IsRoomType())
1012 			{
1013 				eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
1014 			}
1015 		}
2170 		return 0;
2171 	}
2173 	//场景类型必须为跨服副本
2174 	Map* pMap = GetMap();
2175 	if (NULL == pMap)

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\MPVP2v2Battle.cpp 35 KB CPP 文件 2013/3/10 14:10:05 2018/9/13 20:38:55 2018/9/13 20:38:55 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
249 		{
250 			// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
251 			// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
252 			if (FindSignup(pSignupPlayers[i].uSNID))
253 			{
649 			nLevelFlag = 0;
650 		}
652 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
653 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
654 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\MPVP6v6Battle.cpp 30 KB CPP 文件 2013/3/10 14:10:06 2018/9/13 20:38:55 2018/9/13 20:38:55 3
1 /***********************************************************
2 desc:	跨服 6v6 战场实现
3 auth:	txp
4 date:	2011-3-16
154 	{
155 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
156 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
157 		if (FindSignup(pSignupPlayers[i].uSNID))
158 		{
536 			nLevelFlag = 0;
537 		}
539 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
540 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
541 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 14:10:06 2018/9/13 20:38:55 2018/9/13 20:38:55 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
97 	__UNGUARD__ return FALSE;
98 }
100 // 以类型方式获得跨服战场类
101 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
102 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 20 KB CPP 文件 2013/3/10 14:10:31 2018/9/13 20:38:55 2018/9/13 20:38:55 4
34 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
35 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
37 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
38 		SSHandShake msg;
39 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());
281 	if(g_Config.m_MultiGroupConfig.IsSignUpServer())
282 	{
283 		//只要一组服务器连接正常,跨服房间管理器的心跳仍然执行 
284 		if (GetGLServerActiveCount() > 0)
285 		{
602 				{
603 					AddGroupTmp( connID, g_Config.m_MultiGroupConfig.m_GLServerInfo[i].m_WorldID );
605 					//2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，
606 					//当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
607 					SSHandShake msg;
678 	if(FALSE == IsGLServerActiveTmp())//处理断线重连
679 	{
680 		//跨服重连机制
681 		if (FALSE == m_ConnectTimer.IsSetTimer())
682 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-mapserver\SignUpMgr.cpp 83 KB CPP 文件 2013/3/10 14:10:32 2018/9/13 20:38:55 2018/9/13 20:38:55 1
4 Author:shangy		
5 Created:shangy    
6 Description :跨服报名管理类
7 Revision :  2011/06/20 shangy create
8 			2011/08/05 Michael Lin Modify

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/11 11:17:20 2018/9/13 20:38:56 2018/9/13 20:38:56 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/11 11:17:20 2018/9/13 20:38:56 2018/9/13 20:38:56 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/11 11:17:21 2018/9/13 20:38:56 2018/9/13 20:38:56 1
199 }
200 	
201 // 2010-10-9 by rj 跨服线程连接方式
202 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
203 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-share\Core\Setting.cpp 89 KB CPP 文件 2013/3/11 11:17:25 2018/9/13 20:38:56 2018/9/13 20:38:56 6
339 /*
340 =======================================================================================================================
341  加载跨服配置信息
342 =======================================================================================================================
343 */
353 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
354 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
356 	// 跨服战场最大场景数量配置 2010-9-23 by rj
357 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
358 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
359 	
360 	m_MultiGroupConfig.m_nMaxMGuildMapCnt = ini.Get_Property_Int("MGuild", "Max_SceneCount");
361 	KCheckEx(m_MultiGroupConfig.m_nMaxMGuildMapCnt>0 && m_MultiGroupConfig.m_nMaxMGuildMapCnt<=MGUILD_MAX_MAPCOUNT, "跨服帮战场景数量要小于512");
363 // 	m_MultiGroupConfig.m_nMGuildBeginWeek = ini.Get_Property_Int("MGuild", "BeginWeek");
364 // 	KCheckEx(m_MultiGroupConfig.m_nMGuildBeginWeek>0 && m_MultiGroupConfig.m_nMGuildBeginWeek<=52, "起始周只能在1-52之间");
378 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
379 		
380 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
382 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
384 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);
441 		}		
442 	}
444 	//跨服关卡报名服务器开关 
445 	m_MultiGroupConfig.m_SignUpServerToggle = ini.Get_Property_Int( "Room", "SignUpServerToggle" );
446 	m_MultiGroupConfig.m_MapFubenToogle = ini.Get_Property_Int( "Room", "MapFubenToogle" );
1102 	m_ConfigInfo.m_nEmpireOfficerMinLevel = ini.Get_Property_Int("Empire","OfficerMinLevel");
1103 	//[Empire] End
1105 	//added for跨服军团  
1106 	for (int32 _nGIndex = 0; _nGIndex < MAX_GROUP_MEMBER; ++_nGIndex)
1107 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-share\DataBase\ArchiveInterface.cpp 329 KB CPP 文件 2013/3/11 11:17:27 2018/9/13 20:38:56 2018/9/13 20:38:56 1
10122 }
10124 /************************************************************************/
10125 /* 跨服战积分相关                                                       */
10126 /************************************************************************/
10128 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-share\DataBase\SqlStatement.cpp 23 KB CPP 文件 2013/3/11 11:17:28 2018/9/13 20:38:56 2018/9/13 20:38:56 1
251 char	*g_LoadLostItemInfo = "select aid,playerguid,srcplayerguid,srcplayername,guid,world,server,itemclass,creator,dataproperty,data,termendtime,islock,unlocktime,gmoptime from %s where aid>%u order by aid asc" ;
252 char	*g_DelLostItemInfo = "delete from %s where aid=%u";
254 // 跨服战积分相关处理
255 char	*LoadMPVPPointInfo = "select unitid, unitname, world, currentpoint, totalpoint, currentwintimes, currentjointimes, totalwintimes, totaljointimes, mpvptypename, currentweek, startweek, params from %s where valid = 1";
256 char	*SaveMPVPPointInfo = "call proc_save_mpvppoint(%d,\'%s\', %d, %d, %d, %d, %d, %d, %d, \'%s\', %d, %d, %d, 1)";

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-share\Messages\StructRoomBattle.cpp 68 KB CPP 文件 2013/3/11 11:19:33 2018/9/13 20:38:59 2018/9/13 20:38:59 19
4 Author:Michael		
5 Created:Michael    
6 Description :跨服房间相关结构
7 Revision :  2011/06/21 Michael create
9 =============================================================================*/
791 }
794 /************************************************************************/
795 /* 跨服报名候选数据结构定义  		                                    */
796 /************************************************************************/
797 BOOL RoomBattleSignupInfo::IsRoomIDInList(ut_id_room nRoomID) const
931 }
932 /************************************************************************/
933 /* 跨服报名候选数据结构定义 客户端消息结构                              */
934 /************************************************************************/
935 void RoomBattleSignupInfo_CX_Msg::Clear()
972 }
974 /************************************************************************/
975 /* 跨服取消报名结构定义   客户端消息结构	                           */
976 /************************************************************************/
977 void RoomBattleSignupCancel_CX_Msg::Clear()
1002 }
1004 /************************************************************************/
1005 /* 跨服确认进入结构定义    客户端消息结构	                           */
1006 /************************************************************************/
1007 void RoomBattleWaitingEnter_CX_Msg::Clear()
1109 }
1111 /************************************************************************/
1112 /* 跨服玩家确认结构定义    服务器消息结构	                           */
1113 /************************************************************************/
1114 void RoomBattlePlayerEnter_XC_Msg::Clear()
1148 }
1150 /************************************************************************/
1151 /* 跨服军团成员离开    服务器消息结构	                                */
1152 /************************************************************************/
1153 void RoomBattlePlayerLeave_XC_Msg::Clear()
1207 }
1210 /************************************************************************/
1211 /* 跨服确认进入结构定义    服务器消息结构	                           */
1212 /************************************************************************/
1213 void RoomBattleWaitingEnter_XC_Msg::Clear()
1581 }
1582 /************************************************************************/
1583 /* 跨服MapServer信息                  		                            */
1584 /************************************************************************/
1585 float SMutiGroupMapServerInfo::GetUseRate() const
1725 }
1727 /************************************************************************/
1728 /* 跨服关卡消息结构定义 MGP-->GL               		                    */
1729 /************************************************************************/
1730 uint32 MsgMGRoomBattle::GetMsgSize() const
1802 }
1804 /************************************************************************/
1805 /* 跨服关卡消息结构定义 GL-->MGP               		                    */
1806 /************************************************************************/
1807 uint32 MsgGMRoomBattle::GetMsgSize() const
1894 }
1895 /************************************************************************/
1896 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消            */
1897 /************************************************************************/
1898 uint32 MsgXGMRoomBattle_ReplyEnter::GetMsgSize()const
1931 }
1933 /************************************************************************/
1934 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消广播            */
1935 /************************************************************************/
1936 uint32 MsgXGMRoomBattle_ReplyEnter_BROADCAST::GetMsgSize()const
1969 }
1971 /************************************************************************/
1972 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  客户端确认离开，重新返回报名状态 */
1973 /************************************************************************/
1974 uint32 MsgXGMRoomBattle_Leave::GetMsgSize()const
2007 }
2009 /************************************************************************/
2010 /* 跨服关卡消息结构定义 MGP-->GL-->MGP        		                    */
2011 /************************************************************************/
2012 uint32 MsgMGMRoomBattle::GetMsgSize() const
2066 }
2068 /************************************************************************/
2069 /* 跨服关卡消息结构定义 MAP-->GL-->MGP        		                    */
2070 /************************************************************************/
2071 uint32 MsgXGMRoomBattle::GetMsgSize() const
2185 }
2187 /************************************************************************/
2188 /* 跨服关卡消息结构定义 MGP-->GL-->MAP        		                    */
2189 /************************************************************************/
2190 uint32 MsgMGXRoomBattle::GetMsgSize() const
2301 }
2303 /************************************************************************/
2304 /* 跨服关卡消息结构定义 Client-->MAP        		                    */
2305 /************************************************************************/
2306 uint32 MsgCXRoomBattle::GetMsgSize() const
2396 }
2398 /************************************************************************/
2399 /* 跨服关卡消息结构定义 MAP-->Client        		                    */
2400 /************************************************************************/
2401 uint32 MsgXCRoomBattle::GetMsgSize() const

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-share\TAB\TabDefine_Map_Misc.cpp 89 KB CPP 文件 2013/3/11 11:21:31 2018/9/13 20:39:02 2018/9/13 20:39:02 2
2230 /*
2231 =======================================================================================================================
2232 跨服关卡 逻辑数据表
2233 =======================================================================================================================
2234 */
2286 /*
2287 =======================================================================================================================
2288 跨服关卡 配置数据表
2289 =======================================================================================================================
2290 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\khan3_tw_ob\src\khan2-share\TAB\TabDefine_Share.cpp 46 KB CPP 文件 2013/3/11 11:21:33 2018/9/13 20:39:02 2018/9/13 20:39:02 2
1011 {
1012 	__GUARD__
1014 	//如果不开跨服副本，默认不读BackScene
1015 	if (g_Config.m_MultiGroupConfig.m_nGroupCount <= 0)
1016 	{
1067 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0) 
1068 	{
1069 		//如果是跨服MapServer确保BackScene有配置
1070 		KCheckEx(bFindCurrServerBackScene,"BakSceneInfo.tab表配置错误");
1071 	}

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 14 KB CPP 文件 2013/3/10 12:21:25 2018/9/13 20:39:20 2018/9/13 20:39:20 1
191 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
192 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
194 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
195 		if (pFindPlayer == NULL)
196 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR\src\khan2-glserver\XGBattleDispatch.cpp 81 KB CPP 文件 2013/3/10 12:21:42 2018/9/13 20:39:20 2018/9/13 20:39:20 12
2502 }
2504 /***********************************************************
2505 desc:	跨服战场 XG 服务器消息处理
2506 auth:	rj
2507 date:	2011-2-14
2515 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2516 	{
2517 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2518 		static IntegerHashMap mapMPVP2v2SignupRecord;
2519 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2521 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2522 		}
2524 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2525 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2526 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2543 		case MPVP_BATTLE_RETSTATE:
2544 			{
2545 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名
2546 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2547 				{
2577 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2578 				KCheck(pServePlayer_Target);
2580 				// 转发跨服战场进入通知到报名玩家所在 Map
2581 				GXMPVPBattle msg;
2582 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2686 					}
2687 				}
2689 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2690 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2691 				msg.SetSignupType(pKMessage->GetSignupType());
2700 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2701 				KCheck(pServePlayer_Target);
2703 				// 转发跨服战场状态到报名玩家所在 Map
2704 				GXMPVPBattle msg;
2705 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2718 				if (iServerID)
2719 				{
2720 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2721 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2722 					KCheck(pServePlayer_Target);
2741 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2742 				KCheck(pServePlayer_Target);
2744 				// 转发跨服战场进入响应到报名玩家所在 Map
2745 				GXMPVPBattle msg;
2746 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR\src\khan2-mapserver\ChangeMapDelegater.cpp 35 KB CPP 文件 2013/3/10 12:22:17 2018/9/13 20:39:21 2018/9/13 20:39:21 2
1219 		pPlayer->ClearMutexState(MS_Fuben);
1220 	}
1222 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1223 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1224 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 12:22:03 2018/9/13 20:39:21 2018/9/13 20:39:21 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR\src\khan2-mapserver\CXItemDispatch.cpp 60 KB CPP 文件 2013/3/10 12:22:09 2018/9/13 20:39:21 2018/9/13 20:39:21 1
1956 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
1957 	{
1958 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
1959 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1960 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR\src\khan2-mapserver\GXBattleDispatch.cpp 52 KB CPP 文件 2013/3/10 12:22:27 2018/9/13 20:39:21 2018/9/13 20:39:21 6
1452 }
1454 /***********************************************************
1455 desc:	跨服战场 GX 服务器消息处理
1456 auth:	rj
1457 date:	2011-2-14
1474 			case MPVP_BATTLE_SIGNUP:
1475 				{
1476 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1478 					CMPVP2v2Battle *pMPVP2v2Battle = (CMPVP2v2Battle *)g_pMPVPBattleManager->GetMPVPBattleByType(MPVP_BATTLE_TYPE_2V2);
1479 					KCheck(pMPVP2v2Battle);
1524 						return MP_CONTINUE;
1525 					}
1527 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1528 					pMPVP2v2Battle->TellPlayerEnterMap(pKMessage->GetSNID(), pConnector);
1529 				}
1570 			case MPVP_BATTLE_RETSTATE:
1571 				{
1572 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1573 					pMap->GetLuaSystem()->RunScriptFunction
1574 						(
1586 			case MPVP_BATTLE_RES_ENTERSCENE:
1587 				{
1588 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1589 					pMap->GetLuaSystem()->RunScriptFunction
1590 						(
1617 }
1619 /***********************************************************
1620 desc:	跨服战场场景通知消息处理
1621 auth:	rj
1622 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 26 KB CPP 文件 2013/3/10 12:22:28 2018/9/13 20:39:21 2018/9/13 20:39:21 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR\src\khan2-mapserver\GXMapDispatch.cpp 16 KB CPP 文件 2013/3/10 12:22:31 2018/9/13 20:39:21 2018/9/13 20:39:21 1
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 12:22:49 2018/9/13 20:39:22 2018/9/13 20:39:22 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR\src\khan2-mapserver\LuaFunction_Map.cpp 182 KB CPP 文件 2013/3/10 12:22:53 2018/9/13 20:39:22 2018/9/13 20:39:22 11
1455 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1457 	KCheck(szName);
1459 	// 2010-11-2 对发送脚本邮件进行跨服支持
1460 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1461 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5360 	return 0;
5361 }
5363 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5364 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5365 {
5386 	LUA_RETURNERROR_1;
5387 }
5389 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5390 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5391 {
5433 	return 0;
5434 }
5436 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5437 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5438 //{
5460 //}
5461 //
5462 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5463 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5464 //{
5530 //}
5531 //
5532 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5533 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5534 //{
5600 //}
5601 //
5602 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5603 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5604 //{
5634 //}
5635 //
5636 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
5637 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5638 //{
5681 //}
5682 //
5683 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
5684 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
5685 //{
5733 //}
5734 //
5735 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
5736 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
5737 //{
5778 //}
5779 //
5780 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
5781 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
5782 //{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR\src\khan2-mapserver\LuaSystem_Function.cpp 105 KB CPP 文件 2013/3/10 12:22:59 2018/9/13 20:39:22 2018/9/13 20:39:22 1
891 	m_LuaVM.RegisterFunction("PVP2v2AskBattleSceneEnter", (void *) (LuaFunction_PVP2v2AskBattleMapEnter));
892 	m_LuaVM.RegisterFunction("SetPVP2v2BattleDisable", (void *) (LuaFunction_SetPVP2v2BattleDisable));
893 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));	// 跨服 2v2 战场扩充函数 by rj 2010-9-21 
894 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));
895 	m_LuaVM.RegisterFunction("PVP6v6RegisterScene", (void *) (LuaFunction_PVP6v6RegisterMap));

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR\src\khan2-mapserver\MapCore.cpp 36 KB CPP 文件 2013/3/10 12:23:01 2018/9/13 20:39:22 2018/9/13 20:39:22 1
635 				m_bFirstInit = FALSE;
636 			}
637 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
638 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
639 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR\src\khan2-mapserver\MapServer.cpp 31 KB CPP 文件 2013/3/10 12:23:03 2018/9/13 20:39:22 2018/9/13 20:39:22 1
567 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
568 	
569 	// 跨服战场管理器 2010-10-13 by rj
570 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
571 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR\src\khan2-mapserver\MPVP2v2Battle.cpp 29 KB CPP 文件 2013/3/10 12:23:00 2018/9/13 20:39:22 2018/9/13 20:39:22 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
124 	{
125 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
126 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
127 		if (FindSignup(pSignupPlayers[i].uSNID))
128 		{
470 			nLevelFlag = 0;
471 		}
473 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
474 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
475 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 12:23:00 2018/9/13 20:39:22 2018/9/13 20:39:22 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
91 	__UNGUARD__ return FALSE;
92 }
94 // 以类型方式获得跨服战场类
95 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
96 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 12 KB CPP 文件 2013/3/10 12:23:20 2018/9/13 20:39:22 2018/9/13 20:39:22 1
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/10 22:04:23 2018/9/13 20:39:22 2018/9/13 20:39:22 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/10 22:04:23 2018/9/13 20:39:22 2018/9/13 20:39:22 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR\src\khan2-share\Connector\ServerConnectorManager.cpp 9 KB CPP 文件 2013/3/10 22:04:24 2018/9/13 20:39:22 2018/9/13 20:39:22 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
200 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR\src\khan2-share\Core\Setting.cpp 73 KB CPP 文件 2013/3/10 22:04:27 2018/9/13 20:39:23 2018/9/13 20:39:23 3
286 /*
287 =======================================================================================================================
288  加载跨服配置信息
289 =======================================================================================================================
290 */
300 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
301 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
303 	// 跨服战场最大场景数量配置 2010-9-23 by rj
304 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
305 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
319 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
320 		
321 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
323 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
325 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB1\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 14 KB CPP 文件 2013/3/10 12:26:11 2018/9/13 20:39:33 2018/9/13 20:39:33 1
191 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
192 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
194 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
195 		if (pFindPlayer == NULL)
196 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB1\src\khan2-glserver\XGBattleDispatch.cpp 81 KB CPP 文件 2013/3/10 12:26:27 2018/9/13 20:39:33 2018/9/13 20:39:33 12
2502 }
2504 /***********************************************************
2505 desc:	跨服战场 XG 服务器消息处理
2506 auth:	rj
2507 date:	2011-2-14
2515 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2516 	{
2517 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2518 		static IntegerHashMap mapMPVP2v2SignupRecord;
2519 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2521 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2522 		}
2524 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2525 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2526 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2543 		case MPVP_BATTLE_RETSTATE:
2544 			{
2545 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名
2546 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2547 				{
2577 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2578 				KCheck(pServePlayer_Target);
2580 				// 转发跨服战场进入通知到报名玩家所在 Map
2581 				GXMPVPBattle msg;
2582 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2686 					}
2687 				}
2689 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2690 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2691 				msg.SetSignupType(pKMessage->GetSignupType());
2700 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2701 				KCheck(pServePlayer_Target);
2703 				// 转发跨服战场状态到报名玩家所在 Map
2704 				GXMPVPBattle msg;
2705 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2718 				if (iServerID)
2719 				{
2720 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2721 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2722 					KCheck(pServePlayer_Target);
2741 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2742 				KCheck(pServePlayer_Target);
2744 				// 转发跨服战场进入响应到报名玩家所在 Map
2745 				GXMPVPBattle msg;
2746 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB1\src\khan2-mapserver\ChangeMapDelegater.cpp 35 KB CPP 文件 2013/3/10 12:27:02 2018/9/13 20:39:33 2018/9/13 20:39:33 2
1219 		pPlayer->ClearMutexState(MS_Fuben);
1220 	}
1222 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1223 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1224 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB1\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 12:26:48 2018/9/13 20:39:34 2018/9/13 20:39:34 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB1\src\khan2-mapserver\CXItemDispatch.cpp 60 KB CPP 文件 2013/3/10 12:26:54 2018/9/13 20:39:34 2018/9/13 20:39:34 1
1956 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
1957 	{
1958 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
1959 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1960 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB1\src\khan2-mapserver\GXBattleDispatch.cpp 52 KB CPP 文件 2013/3/10 12:27:12 2018/9/13 20:39:34 2018/9/13 20:39:34 6
1452 }
1454 /***********************************************************
1455 desc:	跨服战场 GX 服务器消息处理
1456 auth:	rj
1457 date:	2011-2-14
1474 			case MPVP_BATTLE_SIGNUP:
1475 				{
1476 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1478 					CMPVP2v2Battle *pMPVP2v2Battle = (CMPVP2v2Battle *)g_pMPVPBattleManager->GetMPVPBattleByType(MPVP_BATTLE_TYPE_2V2);
1479 					KCheck(pMPVP2v2Battle);
1524 						return MP_CONTINUE;
1525 					}
1527 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1528 					pMPVP2v2Battle->TellPlayerEnterMap(pKMessage->GetSNID(), pConnector);
1529 				}
1570 			case MPVP_BATTLE_RETSTATE:
1571 				{
1572 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1573 					pMap->GetLuaSystem()->RunScriptFunction
1574 						(
1586 			case MPVP_BATTLE_RES_ENTERSCENE:
1587 				{
1588 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1589 					pMap->GetLuaSystem()->RunScriptFunction
1590 						(
1617 }
1619 /***********************************************************
1620 desc:	跨服战场场景通知消息处理
1621 auth:	rj
1622 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB1\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 26 KB CPP 文件 2013/3/10 12:27:14 2018/9/13 20:39:34 2018/9/13 20:39:34 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB1\src\khan2-mapserver\GXMapDispatch.cpp 16 KB CPP 文件 2013/3/10 12:27:17 2018/9/13 20:39:34 2018/9/13 20:39:34 1
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB1\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 12:27:34 2018/9/13 20:39:34 2018/9/13 20:39:34 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB1\src\khan2-mapserver\LuaFunction_Map.cpp 182 KB CPP 文件 2013/3/10 12:27:38 2018/9/13 20:39:34 2018/9/13 20:39:34 11
1455 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1457 	KCheck(szName);
1459 	// 2010-11-2 对发送脚本邮件进行跨服支持
1460 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1461 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5360 	return 0;
5361 }
5363 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5364 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5365 {
5386 	LUA_RETURNERROR_1;
5387 }
5389 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5390 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5391 {
5433 	return 0;
5434 }
5436 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5437 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5438 //{
5460 //}
5461 //
5462 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5463 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5464 //{
5530 //}
5531 //
5532 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5533 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5534 //{
5600 //}
5601 //
5602 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5603 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5604 //{
5634 //}
5635 //
5636 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
5637 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5638 //{
5681 //}
5682 //
5683 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
5684 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
5685 //{
5733 //}
5734 //
5735 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
5736 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
5737 //{
5778 //}
5779 //
5780 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
5781 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
5782 //{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB1\src\khan2-mapserver\LuaSystem_Function.cpp 105 KB CPP 文件 2013/3/10 12:27:44 2018/9/13 20:39:35 2018/9/13 20:39:35 1
891 	m_LuaVM.RegisterFunction("PVP2v2AskBattleSceneEnter", (void *) (LuaFunction_PVP2v2AskBattleMapEnter));
892 	m_LuaVM.RegisterFunction("SetPVP2v2BattleDisable", (void *) (LuaFunction_SetPVP2v2BattleDisable));
893 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));	// 跨服 2v2 战场扩充函数 by rj 2010-9-21 
894 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));
895 	m_LuaVM.RegisterFunction("PVP6v6RegisterScene", (void *) (LuaFunction_PVP6v6RegisterMap));

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB1\src\khan2-mapserver\MapCore.cpp 36 KB CPP 文件 2013/3/10 12:27:46 2018/9/13 20:39:35 2018/9/13 20:39:35 1
635 				m_bFirstInit = FALSE;
636 			}
637 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
638 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
639 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB1\src\khan2-mapserver\MapServer.cpp 31 KB CPP 文件 2013/3/10 12:27:48 2018/9/13 20:39:35 2018/9/13 20:39:35 1
567 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
568 	
569 	// 跨服战场管理器 2010-10-13 by rj
570 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
571 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB1\src\khan2-mapserver\MPVP2v2Battle.cpp 29 KB CPP 文件 2013/3/10 12:27:45 2018/9/13 20:39:35 2018/9/13 20:39:35 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
124 	{
125 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
126 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
127 		if (FindSignup(pSignupPlayers[i].uSNID))
128 		{
470 			nLevelFlag = 0;
471 		}
473 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
474 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
475 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB1\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 12:27:45 2018/9/13 20:39:35 2018/9/13 20:39:35 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
91 	__UNGUARD__ return FALSE;
92 }
94 // 以类型方式获得跨服战场类
95 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
96 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB1\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 12 KB CPP 文件 2013/3/10 12:28:05 2018/9/13 20:39:35 2018/9/13 20:39:35 1
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB1\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/10 22:08:14 2018/9/13 20:39:35 2018/9/13 20:39:35 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB1\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/10 22:08:15 2018/9/13 20:39:35 2018/9/13 20:39:35 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB1\src\khan2-share\Connector\ServerConnectorManager.cpp 9 KB CPP 文件 2013/3/10 22:08:15 2018/9/13 20:39:35 2018/9/13 20:39:35 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
200 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB1\src\khan2-share\Core\Setting.cpp 72 KB CPP 文件 2013/3/10 22:08:18 2018/9/13 20:39:35 2018/9/13 20:39:35 3
286 /*
287 =======================================================================================================================
288  加载跨服配置信息
289 =======================================================================================================================
290 */
300 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
301 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
303 	// 跨服战场最大场景数量配置 2010-9-23 by rj
304 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
305 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
319 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
320 		
321 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
323 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
325 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-client\UIMap.cpp 23 KB CPP 文件 2013/3/10 12:30:03 2018/9/13 20:39:44 2018/9/13 20:39:44 1
449 		case MAP_POINT_TRANSER_NPC:		szChildWinType = MAP_POINT_TYPE_TRANSER_NPC;	break;
450 		case MAP_POINT_MONSTER:			szChildWinType = MAP_POINT_TYPE_MONSTER;		break;
452 		// 跨服6v6的旗子
453 		case MAP_POINT_OneLevelFlag:			szChildWinType = MAP_POINT_TYPE_ONELEVELFLAG; break;
454 		case MAP_POINT_TwoLevelFlag:			szChildWinType = MAP_POINT_TYPE_TWOLEVELFLAG; break;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-client\UIPartyMessageBox.cpp 33 KB CPP 文件 2013/3/10 12:30:04 2018/9/13 20:39:45 2018/9/13 20:39:45 1
404 		}
405 		break;
407 	case MGUILD_BATTLE_TYPE: // 跨服帮会战
408 		{
409 			CXMPVPBattle msg;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-dbshare\MKLogicManager.cpp 105 KB CPP 文件 2013/3/10 12:30:42 2018/9/13 20:39:45 2018/9/13 20:39:45 2
228 			{
229 			ArchiveNodeLogic<PlayerMK>* pLogicNode = (ArchiveNodeLogic<PlayerMK>*)GetNode(_Idx);
231 			// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
232 			uint32 uMaxPoolSize = MAX_POOL_SIZE;
233 			if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
3623 }
3625 /************************************************************************/
3626 /* 跨服战积分相关                                                       */
3627 /************************************************************************/
3628 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-glserver\GL.cpp 42 KB CPP 文件 2013/3/10 12:30:50 2018/9/13 20:39:45 2018/9/13 20:39:45 2
417 	KCheck(g_pGuildBattleManager);
418 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildBattleManager...OK");
420 	//跨服帮战的管理器
421 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new MultiGuildBattleManager ... ");
422 	g_pMGuildBattleManager = new MGuildBattleManager;
500 	KCheck(g_pGuildCenter);
501 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildManager...OK");
503 	//跨服战积分管理器
504 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMPVPPointManager ... ");
505 	g_pMPVPPointManager = new MPVPPointManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 14 KB CPP 文件 2013/3/10 12:30:58 2018/9/13 20:39:46 2018/9/13 20:39:46 1
208 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
209 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
211 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
212 		if (pFindPlayer == NULL)
213 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-glserver\MGuildBattleManager.cpp 14 KB CPP 文件 2013/3/10 12:31:01 2018/9/13 20:39:46 2018/9/13 20:39:46 8
94 	// 当前赛季进度
95 	int32 nSeasonWeek = (GET_TIME().GetWeekNumOfYear() - g_Config.m_ConfigInfo.m_MPVPGuildBeginWeek) % g_Config.m_ConfigInfo.m_MPVPPointPeriodWeeks;
97 	// 取得跨服服务器
98 	int32 nServerNum = 0;
99 	ut_id serverIDs[SERVER_CAPACITY] = {-1};
145 	//	if (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / nServerNum <= 0)
146 	//		return serverIDs[0];
148 	//	// 2011-07-26 by rj 改进原来的等分算法，在所连跨服服务器数量等于 2 时用用 4/6 算法来解决高分帮会人数过多的问题
149 	//	int32 iSeg = iIndex / (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / (nServerNum <= 2 ? 2.5f : nServerNum) );
150 	//	if (iSeg >= nServerNum)
166 	if (uPrevSignupTime)
167 	{
168 		// 超时保护（防止报名完成后跨服服务器宕机导致 GL 无法清理报名）
169 		if (GET_TIME().GetCTime() - uPrevSignupTime > 90*60)
170 		{
258 	if(!pGuild || pGuild->GetGuildID() == INVALID_KHAN_ID)
259 		return FALSE;
261 	// 转发跨服战场进入通知到报名玩家所在 Map
262 	GXMPVPBattle msg;
263 	msg.SetBattleType(MPVP_GUILD_BATTLE_TYPE);
416 				aSignupPlayers[0].GuildPoint = pPoint->m_nCurrentPoint;
417 			}
419 			// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
420 			msg.SetSubType(MPVP_BATTLE_SIGNUP);
421 			msg.SetSignupType(pKMessage->GetSignupType());
470 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
471 				KCheck(pServePlayer_Target);
473 				// 转发跨服战场状态到报名玩家所在 Map
474 				GXMPVPBattle msg;
475 				msg.SetBattleType(pKMessage->GetBattleType());
501 				return MP_CONTINUE;
502 			}
504 			// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
505 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pMatch->nServerID);
506 			KCheck(pServePlayer_Target);
523 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
524 			KCheck(pServePlayer_Target);
526 			// 转发跨服战场进入响应到报名玩家所在 Map
527 			GXMPVPBattle msg;
528 			msg.SetBattleType(pKMessage->GetBattleType());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-glserver\MPVPGuildPoint.cpp 8 KB CPP 文件 2013/3/10 12:31:02 2018/9/13 20:39:46 2018/9/13 20:39:46 3
1 /************************************************************************/
2 /* 帮会跨服战积分信息接口的具体实现                                     */
3 /************************************************************************/
5 #include "stdafx.h"
195 /*
196 =======================================================================================================================
197 处理不同跨服战各自的额外参数填充
198 =======================================================================================================================
199 */
223 /*
224 =======================================================================================================================
225 加载跨服帮战每周的场次信息
226 =======================================================================================================================
227 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-glserver\MPVPPointArithmetic.cpp 2 KB CPP 文件 2013/3/10 12:31:02 2018/9/13 20:39:46 2018/9/13 20:39:46 3
1 /************************************************************************/
2 /* 跨服战积分算法器,负责各种跨服战积分的计算逻辑实现                    */
3 /************************************************************************/
5 #include "stdafx.h"
16 /*
17 ===============================================================================================================
18 根据实力来计算跨服帮会的加权分
19 帮会实力-(错过的场次*放弃损失的分数)
20 ===============================================================================================================

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-glserver\MPVPPointInfo.cpp 14 KB CPP 文件 2013/3/10 12:31:02 2018/9/13 20:39:46 2018/9/13 20:39:46 2
1 /************************************************************************/
2 /* 跨服战积分信息接口的具体实现                                         */
3 /************************************************************************/
5 #include "stdafx.h"
72 /*
73 =======================================================================================================================
74 获取跨服积分的数据信息
75 =======================================================================================================================
76 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-glserver\MPVPPointManager.cpp 11 KB CPP 文件 2013/3/10 12:31:02 2018/9/13 20:39:46 2018/9/13 20:39:46 5
1 /************************************************************************/
2 /* 跨服战积分管理器的实现                                               */
3 /************************************************************************/
5 #include "stdafx.h"
98 /*
99 ===============================================================================================================
100 注册跨服积分的实现
101 ===============================================================================================================
102 */
220 /*
221 ===============================================================================================================
222 获取指定类型跨服战全部积分信息
223 ===============================================================================================================
224 */
243 /*
244 ===============================================================================================================
245 获取指定跨服战当前的赛季开始周
246 ===============================================================================================================
247 */
266 /*
267 ===============================================================================================================
268 获取指定跨服战当前周
269 ===============================================================================================================
270 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-glserver\MPVPToplist.cpp 8 KB CPP 文件 2013/3/10 12:31:03 2018/9/13 20:39:46 2018/9/13 20:39:46 2
1 /************************************************************************/
2 /* 跨服帮会战排行榜的具体实现		                                    */
3 /************************************************************************/
5 #include "stdafx.h"
25 /*
26 =======================================================================================================================
27 积分数据加载,从跨服积分管理器中加载需要的信息
28 =======================================================================================================================
29 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-glserver\ServerConnectorManager_GL.cpp 11 KB CPP 文件 2013/3/10 12:31:08 2018/9/13 20:39:46 2018/9/13 20:39:46 2
513 			_NET_TRY
514 			{
515 				// 跨服帮战管理器心跳
516 				ret = g_pMGuildBattleManager->HeartBeat(uTime);
517 				KCheck(ret);
523 			_NET_TRY
524 			{
525 				//处理跨服战积分管理器相关的心跳
526 				ret = g_pMPVPPointManager->HeartBeat(uTime);		
527 				KCheck(ret);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-glserver\TopListManager.cpp 17 KB CPP 文件 2013/3/10 12:31:14 2018/9/13 20:39:46 2018/9/13 20:39:46 1
152 	Register(HONOR_CHARIOT_TOP_LIST_BK,			new TopList,					"Chariot_Honor_bk" );
153 	// add by dragon 战车排行榜 }
155 	// 跨服帮会战排行榜
156 	Register(MPVP_GUILD_CURRENT,			new CurrentMPVPGuildTopList,		"MPVP_Guild_Current" );
157 	Register(MPVP_GUILD_CURRENT_BK,			new TopList,				"MPVP_Guild_Current_bk" );

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-glserver\XGBattleDispatch.cpp 92 KB CPP 文件 2013/3/10 12:31:16 2018/9/13 20:39:46 2018/9/13 20:39:46 25
2507 }
2509 /***********************************************************
2510 desc:	跨服战场 XG 服务器消息处理
2511 auth:	rj
2512 date:	2011-2-14
2520 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2521 	{
2522 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2523 		static IntegerHashMap mapMPVP2v2SignupRecord;
2524 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2526 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2527 		}
2529 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2530 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2531 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2548 		case MPVP_BATTLE_RETSTATE:
2549 			{
2550 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名。值是当前报名的时间。
2551 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2552 				{
2582 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2583 				KCheck(pServePlayer_Target);
2585 				// 转发跨服战场进入通知到报名玩家所在 Map
2586 				GXMPVPBattle msg;
2587 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2613 				if (uPrevSignupTime)
2614 				{
2615 					// 6 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2616 					if (GET_TIME().GetCTime() - uPrevSignupTime > 360)
2617 					{
2719 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2720 				}
2722 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2723 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2724 				msg.SetSignupType(pKMessage->GetSignupType());
2733 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2734 				KCheck(pServePlayer_Target);
2736 				// 转发跨服战场状态到报名玩家所在 Map
2737 				GXMPVPBattle msg;
2738 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2751 				if (iServerID)
2752 				{
2753 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2754 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2755 					KCheck(pServePlayer_Target);
2774 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2775 				KCheck(pServePlayer_Target);
2777 				// 转发跨服战场进入响应到报名玩家所在 Map
2778 				GXMPVPBattle msg;
2779 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2790 	else if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_6V6)
2791 	{
2792 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2793 		static IntegerHashMap mapMPVP6v6SignupRecord;
2794 		if (mapMPVP6v6SignupRecord.GetMaxCount() == 0)
2796 			mapMPVP6v6SignupRecord.InitTable(MAX_WORLD_PLAYER);
2797 		}
2799 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2800 		static IntegerHashMap mapMPVP6v6EnterBattleRecord;
2801 		if (mapMPVP6v6EnterBattleRecord.GetMaxCount() == 0)
2818 		case MPVP_BATTLE_RETSTATE:
2819 			{
2820 				// 记录这次跨服 6v6 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 6v6 的报名。值是当前报名的时间。
2821 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2822 				{
2852 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2853 				KCheck(pServePlayer_Target);
2855 				// 转发跨服战场进入通知到报名玩家所在 Map
2856 				GXMPVPBattle msg;
2857 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
2883 				if (uPrevSignupTime)
2884 				{
2885 					// 11 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2886 					if (GET_TIME().GetCTime() - uPrevSignupTime > 660)
2887 					{
2989 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2990 				}
2992 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2993 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2994 				msg.SetSignupType(pKMessage->GetSignupType());
3003 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
3004 				KCheck(pServePlayer_Target);
3006 				// 转发跨服战场状态到报名玩家所在 Map
3007 				GXMPVPBattle msg;
3008 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
3021 				if (iServerID)
3022 				{
3023 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
3024 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
3025 					KCheck(pServePlayer_Target);
3044 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
3045 				KCheck(pServePlayer_Target);
3047 				// 转发跨服战场进入响应到报名玩家所在 Map
3048 				GXMPVPBattle msg;
3049 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-mapserver\ChangeMapDelegater.cpp 37 KB CPP 文件 2013/3/10 12:31:54 2018/9/13 20:39:46 2018/9/13 20:39:46 2
1270 		pPlayer->ClearMutexState(MS_Fuben);
1271 	}
1273 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1274 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1275 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 12:31:39 2018/9/13 20:39:46 2018/9/13 20:39:46 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-mapserver\CXItemDispatch.cpp 62 KB CPP 文件 2013/3/10 12:31:45 2018/9/13 20:39:47 2018/9/13 20:39:47 1
2000 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
2001 	{
2002 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
2003 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2004 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-mapserver\GMCommand.cpp 199 KB CPP 文件 2013/3/10 12:32:05 2018/9/13 20:39:47 2018/9/13 20:39:47 1
543 	REGISTER_HANDLER(addchariothonour);	// \gm addchariothonour =100	增加战车荣誉
544 	REGISTER_HANDLER(unlockhorse);		// \gm unlockhorse =objid =horseindex  强制解锁骑乘
545 	REGISTER_HANDLER(addguildwin);		// \gm addguildwin =num 增加跨服帮战胜利次数
547 	__UNGUARD__
548 }

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-mapserver\GXBattleDispatch.cpp 55 KB CPP 文件 2013/3/10 12:32:05 2018/9/13 20:39:47 2018/9/13 20:39:47 6
1452 }
1454 /***********************************************************
1455 desc:	跨服战场 GX 服务器消息处理
1456 auth:	rj
1457 date:	2011-2-14
1474 			case MPVP_BATTLE_SIGNUP:
1475 				{
1476 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1478 					IMPVPBattle *pMPVPBattle = g_pMPVPBattleManager->GetMPVPBattleByType((MPVP_BATTLE_TYPE)pKMessage->GetBattleType());
1479 					//KCheck(pMPVPBattle);
1542 						return MP_CONTINUE;
1543 					}
1545 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1546 					pMPVPBattle->TellPlayerEnterMap(pKMessage, pConnector);
1547 				}
1588 			case MPVP_BATTLE_RETSTATE:
1589 				{
1590 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1591 					pMap->GetLuaSystem()->RunScriptFunction
1592 						(
1604 			case MPVP_BATTLE_RES_ENTERSCENE:
1605 				{
1606 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1607 					pMap->GetLuaSystem()->RunScriptFunction
1608 						(
1635 }
1637 /***********************************************************
1638 desc:	跨服战场场景通知消息处理
1639 auth:	rj
1640 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 28 KB CPP 文件 2013/3/10 12:32:07 2018/9/13 20:39:47 2018/9/13 20:39:47 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-mapserver\GXMapDispatch.cpp 16 KB CPP 文件 2013/3/10 12:32:10 2018/9/13 20:39:47 2018/9/13 20:39:47 1
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 12:32:29 2018/9/13 20:39:47 2018/9/13 20:39:47 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-mapserver\LuaFunction_Map.cpp 198 KB CPP 文件 2013/3/10 12:32:34 2018/9/13 20:39:47 2018/9/13 20:39:47 15
1523 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1525 	KCheck(szName);
1527 	// 2010-11-2 对发送脚本邮件进行跨服支持
1528 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1529 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5491 	return 0;
5492 }
5494 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5495 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5496 {
5517 	LUA_RETURNERROR_1;
5518 }
5520 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5521 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5522 {
5564 	return 0;
5565 }
5567 // 跨服 6v6 战场场景注册函数
5568 int32 LuaFunction_MPVP6v6RegisterMap(Lua_State *L)
5569 {
5590 	LUA_RETURNERROR_1;
5591 }
5593 // 跨服 6v6 战场场景更新战场 UI 面板
5594 int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5595 {
5637 	return 0;
5638 }
5640 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5641 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5642 //{
5664 //}
5665 //
5666 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5667 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5668 //{
5734 //}
5735 //
5736 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5737 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5738 //{
5804 //}
5805 //
5806 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5807 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5808 //{
5838 //}
5839 //
5840 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
5841 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5842 //{
5885 //}
5886 //
5887 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
5888 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
5889 //{
5937 //}
5938 //
5939 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
5940 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
5941 //{
5982 //}
5983 //
5984 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
5985 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
5986 //{
6828 	return 0;
6829 }
6831 // 跨服战场场景注册函数
6832 int32 LuaFunction_MPVPRegisterMap(Lua_State *L)
6833 {
6923 	if(pMap)
6924 	{
6925 		// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
6926 		int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
6927 			(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-mapserver\LuaSystem_Function.cpp 118 KB CPP 文件 2013/3/10 12:32:40 2018/9/13 20:39:47 2018/9/13 20:39:47 10
1167 	m_LuaVM.RegisterFunction("AddBattleHonour", (void *) (LuaFunction_AddBattleHonour));							// 增加战功
1168 	m_LuaVM.RegisterFunction("SubBattleHonour", (void *) (LuaFunction_SubBattleHonour));							// 减少战功
1169 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));					// 跨服 2v2 战场注册场景 
1170 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));			// 跨服 2v2 战场名称显示
1171 	m_LuaVM.RegisterFunction("MPVP6v6RegisterScene", (void *) (LuaFunction_MPVP6v6RegisterMap));					// 跨服 6v6 战场注册场景
1172 	m_LuaVM.RegisterFunction("SetMPVP6v6BattleDisable", (void *) (LuaFunction_SetMPVP6v6BattleDisable));			// 跨服 6v6 战场名称显示
1173 	m_LuaVM.RegisterFunction("MPVPRegisterMap", (void *) (LuaFunction_MPVPRegisterMap));							// 跨服战场注册场景
1174 	m_LuaVM.RegisterFunction("CountryIsFortuneTimeEx", (void *) (LuaFunction_CountryIsFortuneTimeEx));				// 获取特定国家的国运是否进行
1175 	m_LuaVM.RegisterFunction("AddCountryResourceWithRecall", (void *) (LuaFunction_AddCountryResourceWithRecall));	// 比较并增加的修改资源,保证同步
1283 	m_LuaVM.RegisterFunction("IsLeague", (void*)(LuaFunction_IsLeague));											// 判断两国是否是弱国联盟
1284 	m_LuaVM.RegisterFunction("CountryLeagueZhaoji", (void*)(LuaFunction_CountryLeagueZhaoji));						// 发送联盟召集令
1285 	m_LuaVM.RegisterFunction("AskEnterMGuildBattleScene",(void*)(LuaFunction_AskEnterMGuildBattleScene)); 			// 请求进入跨服帮会战场
1286 	m_LuaVM.RegisterFunction("MGuildBattleSignup",(void*)(LuaFunction_MGuildBattleSignup)); 						// 跨服帮会战报名
1287 	m_LuaVM.RegisterFunction("MGuildBattleResult",(void*)(LuaFunction_MGuildBattleResult)); 						// 跨服帮会战结果
1288 	m_LuaVM.RegisterFunction("MGuildBattleSeasonWeek",(void*)(LuaFunction_MGuildBattleSeasonWeek)); 				// 跨服帮会战赛季当前周数
1289 	m_LuaVM.RegisterFunction("GetMGuildNumOfBattleCurSeason", (void*)(LuaFunction_GetMGuildNumOfBattleCurSeason));	// 获取跨服帮战当前赛季的场数
1290 	m_LuaVM.RegisterFunction("SetEquipPokerData",(void*)(LuaFunction_SetEquipPokerData));							// 设置装备扑克牌属性
1291 	m_LuaVM.RegisterFunction("SetEquipPokerCount",(void*)(LuaFunction_SetEquipPokerCount));							// 设置装备扑克牌个数

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-mapserver\MapCore.cpp 38 KB CPP 文件 2013/3/10 12:32:43 2018/9/13 20:39:48 2018/9/13 20:39:48 1
671 				m_bFirstInit = FALSE;
672 			}
673 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
674 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
675 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-mapserver\MapServer.cpp 33 KB CPP 文件 2013/3/10 12:32:45 2018/9/13 20:39:48 2018/9/13 20:39:48 3
595 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
596 	
597 	// 跨服战场管理器 2010-10-13 by rj
598 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
599 	g_pMPVPBattleManager = new CMPVPBattleManager;
662 	if(pCurrentSData->m_EnableDBShare)
663 	{
664 		// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
665 		uint32 uMaxPoolSize = MAX_POOL_SIZE;
666 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
754 	{
755 		QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[Init] Begin g_pConnectorPool->Init() ... ");
757 		// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
758 		uint32 uMaxPoolSize = MAX_POOL_SIZE;
759 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-mapserver\MGuildBattle.cpp 28 KB CPP 文件 2013/3/10 12:32:41 2018/9/13 20:39:48 2018/9/13 20:39:48 3
1 /***********************************************************
2 desc:	跨服帮会战场实现
3 auth:	txp
4 date:	2011-6-10
122 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，
123 		// 为这个很少出现的异常进行处理。
124 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，
125 		// 如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
126 		if (FindSignup(pSignupPlayers[i].iWorldID, pSignupPlayers[i].GuildID))
427 		m_MatchList.m_aMatch[m_MatchList.m_nCount].m_bFinished = FALSE;
429 		int32 nLevelFlag=0, nDisLevel = s1.m_nSignupLevel - s2.m_nSignupLevel;
431 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
432 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
433 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-mapserver\MPVP2v2Battle.cpp 35 KB CPP 文件 2013/3/10 12:32:41 2018/9/13 20:39:48 2018/9/13 20:39:48 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
249 		{
250 			// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
251 			// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
252 			if (FindSignup(pSignupPlayers[i].uSNID))
253 			{
649 			nLevelFlag = 0;
650 		}
652 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
653 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
654 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-mapserver\MPVP6v6Battle.cpp 30 KB CPP 文件 2013/3/10 12:32:41 2018/9/13 20:39:48 2018/9/13 20:39:48 3
1 /***********************************************************
2 desc:	跨服 6v6 战场实现
3 auth:	txp
4 date:	2011-3-16
154 	{
155 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
156 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
157 		if (FindSignup(pSignupPlayers[i].uSNID))
158 		{
536 			nLevelFlag = 0;
537 		}
539 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
540 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
541 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 12:32:42 2018/9/13 20:39:48 2018/9/13 20:39:48 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
97 	__UNGUARD__ return FALSE;
98 }
100 // 以类型方式获得跨服战场类
101 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
102 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 13 KB CPP 文件 2013/3/10 12:33:02 2018/9/13 20:39:48 2018/9/13 20:39:48 1
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/10 22:11:56 2018/9/13 20:39:48 2018/9/13 20:39:48 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/10 22:11:57 2018/9/13 20:39:48 2018/9/13 20:39:48 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/10 22:11:57 2018/9/13 20:39:48 2018/9/13 20:39:48 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
200 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-share\Core\Setting.cpp 79 KB CPP 文件 2013/3/10 22:12:01 2018/9/13 20:39:48 2018/9/13 20:39:48 4
289 /*
290 =======================================================================================================================
291  加载跨服配置信息
292 =======================================================================================================================
293 */
303 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
304 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
306 	// 跨服战场最大场景数量配置 2010-9-23 by rj
307 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
308 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
309 	
310 	m_MultiGroupConfig.m_nMaxMGuildMapCnt = ini.Get_Property_Int("MGuild", "Max_SceneCount");
311 	KCheckEx(m_MultiGroupConfig.m_nMaxMGuildMapCnt>0 && m_MultiGroupConfig.m_nMaxMGuildMapCnt<=MGUILD_MAX_MAPCOUNT, "跨服帮战场景数量要小于512");
313 // 	m_MultiGroupConfig.m_nMGuildBeginWeek = ini.Get_Property_Int("MGuild", "BeginWeek");
314 // 	KCheckEx(m_MultiGroupConfig.m_nMGuildBeginWeek>0 && m_MultiGroupConfig.m_nMGuildBeginWeek<=52, "起始周只能在1-52之间");
328 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
329 		
330 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
332 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
334 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-share\DataBase\ArchiveInterface.cpp 280 KB CPP 文件 2013/3/10 22:12:02 2018/9/13 20:39:48 2018/9/13 20:39:48 1
9705 }
9707 /************************************************************************/
9708 /* 跨服战积分相关                                                       */
9709 /************************************************************************/
9711 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB2\src\khan2-share\DataBase\SqlStatement.cpp 20 KB CPP 文件 2013/3/10 22:12:04 2018/9/13 20:39:48 2018/9/13 20:39:48 1
249 char	*g_LoadLostItemInfo = "select aid,playerguid,srcplayerguid,srcplayername,guid,world,server,itemclass,creator,dataproperty,data,termendtime,islock,unlocktime,gmoptime from %s where aid>%u order by aid asc" ;
250 char	*g_DelLostItemInfo = "delete from %s where aid=%u";
252 // 跨服战积分相关处理
253 char	*LoadMPVPPointInfo = "select unitid, unitname, world, currentpoint, totalpoint, currentwintimes, currentjointimes, totalwintimes, totaljointimes, mpvptypename, currentweek, startweek, params from %s where valid = 1";
254 char	*SaveMPVPPointInfo = "call proc_save_mpvppoint(%d,\'%s\', %d, %d, %d, %d, %d, %d, %d, \'%s\', %d, %d, %d, 1)";

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-client\GameCommandSystem.cpp 59 KB CPP 文件 2013/3/10 12:33:58 2018/9/13 20:39:55 2018/9/13 20:39:55 1
1399 	{ GCD_ASK_JOIN_FUBEN_WITH_TEAM, "ASK_JOIN_FUBEN_WITH_TEAM" },
1400 	{ GCD_ASK_EXIT_ROOM, "ASK_EXIT_ROOM" },
1402 	//跨服副本报名搜索
1403 	{ GCD_UPDATE_FUBEN_SEARCH_STATE,"UPDATE_FUBEN_SEARCH_STATE" },
1405 	//军团信息更新

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-client\GameStateChangeServer.cpp 6 KB CPP 文件 2013/3/10 12:34:36 2018/9/13 20:39:56 2018/9/13 20:39:56 1
210 			::GetPrivateProfileString( "Debug", "Login.WorldID", "", szReadTemp, MAX_PATH, DEBUG_FILE_NAME );
211 			static ut_id s_nWorldID = atoi(szReadTemp); 
212 			GAME_DATA_PLAYER_PTR->SetWorldID(s_nWorldID); // 支持跨服自架测试
213 																			
214 		}

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-client\GameStateRun.cpp 90 KB CPP 文件 2013/3/10 12:34:38 2018/9/13 20:39:56 2018/9/13 20:39:56 2
665 	
666 	GAME_DATA_PTR->askCountryData();
669 	//跨服关卡的处理 
671 	//清除小地图上的军团信息
672 	GAME_DATA_RELATION_PTR->GetCorps()->ClearCorpsInfo();
684 	//请求军团数据
685 	GAME_DATA_QUEST_PTR->AskRoomBattleGroupData();
686 	/////跨服关卡的处理	
687 }
690 void CGameStateRun::IsMapLoaded( void )

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-client\UIMap.cpp 24 KB CPP 文件 2013/3/10 12:35:08 2018/9/13 20:39:57 2018/9/13 20:39:57 1
455 		case MAP_POINT_TRANSER_NPC:		szChildWinType = MAP_POINT_TYPE_TRANSER_NPC;	break;
456 		case MAP_POINT_MONSTER:			szChildWinType = MAP_POINT_TYPE_MONSTER;		break;
458 		// 跨服6v6的旗子
459 		case MAP_POINT_OneLevelFlag:			szChildWinType = MAP_POINT_TYPE_ONELEVELFLAG; break;
460 		case MAP_POINT_TwoLevelFlag:			szChildWinType = MAP_POINT_TYPE_TWOLEVELFLAG; break;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-client\UIPartyMessageBox.cpp 33 KB CPP 文件 2013/3/10 12:35:09 2018/9/13 20:39:57 2018/9/13 20:39:57 1
404 		}
405 		break;
407 	case MGUILD_BATTLE_TYPE: // 跨服帮会战
408 		{
409 			CXMPVPBattle msg;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-dbshare\MKLogicManager.cpp 111 KB CPP 文件 2013/3/10 12:35:48 2018/9/13 20:39:57 2018/9/13 20:39:57 2
235 			{
236 			ArchiveNodeLogic<PlayerMK>* pLogicNode = (ArchiveNodeLogic<PlayerMK>*)GetNode(_Idx);
238 			// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
239 			uint32 uMaxPoolSize = MAX_POOL_SIZE;
240 			if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
3649 }
3651 /************************************************************************/
3652 /* 跨服战积分相关                                                       */
3653 /************************************************************************/
3654 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-glserver\GL.cpp 43 KB CPP 文件 2013/3/10 12:35:56 2018/9/13 20:39:58 2018/9/13 20:39:58 5
422 	KCheck(g_pGuildBattleManager);
423 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildBattleManager...OK");
425 	//跨服帮战的管理器
426 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new MultiGuildBattleManager ... ");
427 	g_pMGuildBattleManager = new MGuildBattleManager;
505 	KCheck(g_pGuildCenter);
506 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildManager...OK");
508 	//跨服战积分管理器
509 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMPVPPointManager ... ");
510 	g_pMPVPPointManager = new MPVPPointManager;
691 	KCheck(g_pSystemParamsManager);
692 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new g_pSystemParamsManager...OK");
695 	// 跨服管理器
696 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMutiGroupMapServerManager ... ");
697 	g_pMutiGroupMapServerManager = new MutiGroupMapServerManager;
928 	KCheck(ret);
929 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager->Init()...OK");
932 	//跨服管理器
933 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[Init] g_pMutiGroupMapServerManager->Init()...OK");
934 	ret = g_pMutiGroupMapServerManager->Init();
1096 	KSafeDelete(g_pSystemParamsManager);
1097 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager delete...OK");
1099 	//跨服管理器
1100 	KSafeDelete(g_pMutiGroupMapServerManager);
1101 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pMutiGroupMapServerManager delete...OK");

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 14 KB CPP 文件 2013/3/10 12:36:04 2018/9/13 20:39:58 2018/9/13 20:39:58 1
223 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
224 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
226 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
227 		if (pFindPlayer == NULL)
228 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-glserver\MGuildBattleManager.cpp 15 KB CPP 文件 2013/3/10 12:36:07 2018/9/13 20:39:58 2018/9/13 20:39:58 8
94 	// 当前赛季进度
95 	int32 nSeasonWeek = (GET_TIME().GetWeekNumFrom2011() - g_Config.m_ConfigInfo.m_MPVPGuildBeginWeek) % g_Config.m_ConfigInfo.m_MPVPPointPeriodWeeks;
97 	// 取得跨服服务器
98 	int32 nServerNum = 0;
99 	ut_id serverIDs[SERVER_CAPACITY] = {-1};
145 	//	if (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / nServerNum <= 0)
146 	//		return serverIDs[0];
148 	//	// 2011-07-26 by rj 改进原来的等分算法，在所连跨服服务器数量等于 2 时用用 4/6 算法来解决高分帮会人数过多的问题
149 	//	int32 iSeg = iIndex / (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / (nServerNum <= 2 ? 2.5f : nServerNum) );
150 	//	if (iSeg >= nServerNum)
166 	if (uPrevSignupTime)
167 	{
168 		// 超时保护（防止报名完成后跨服服务器宕机导致 GL 无法清理报名）
169 		if (GET_TIME().GetCTime() - uPrevSignupTime > 90*60)
170 		{
258 	if(!pGuild || pGuild->GetGuildID() == INVALID_KHAN_ID)
259 		return FALSE;
261 	// 转发跨服战场进入通知到报名玩家所在 Map
262 	GXMPVPBattle msg;
263 	msg.SetBattleType(MPVP_GUILD_BATTLE_TYPE);
416 					aSignupPlayers[0].GuildPoint = pPoint->m_nCurrentPoint;
417 				}
419 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
420 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
421 				msg.SetSignupType(pKMessage->GetSignupType());
472 				if (NULL != pServePlayer_Target)
473 				{
474 					// 转发跨服战场状态到报名玩家所在 Map
475 					GXMPVPBattle msg;
476 					msg.SetBattleType(pKMessage->GetBattleType());
503 				return MP_CONTINUE;
504 			}
506 			// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
507 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pMatch->nServerID);
508 			if (pServePlayer_Target)
524 			if (NULL != pServePlayer_Target)
525 			{
526 				// 转发跨服战场进入响应到报名玩家所在 Map
527 				GXMPVPBattle msg;
528 				msg.SetBattleType(pKMessage->GetBattleType());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-glserver\MPVPGuildPoint.cpp 8 KB CPP 文件 2013/3/10 12:36:08 2018/9/13 20:39:58 2018/9/13 20:39:58 3
1 /************************************************************************/
2 /* 帮会跨服战积分信息接口的具体实现                                     */
3 /************************************************************************/
5 #include "stdafx.h"
195 /*
196 =======================================================================================================================
197 处理不同跨服战各自的额外参数填充
198 =======================================================================================================================
199 */
223 /*
224 =======================================================================================================================
225 加载跨服帮战每周的场次信息
226 =======================================================================================================================
227 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-glserver\MPVPPointArithmetic.cpp 2 KB CPP 文件 2013/3/10 12:36:08 2018/9/13 20:39:58 2018/9/13 20:39:58 3
1 /************************************************************************/
2 /* 跨服战积分算法器,负责各种跨服战积分的计算逻辑实现                    */
3 /************************************************************************/
5 #include "stdafx.h"
16 /*
17 ===============================================================================================================
18 根据实力来计算跨服帮会的加权分
19 帮会实力-(错过的场次*放弃损失的分数)
20 ===============================================================================================================

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-glserver\MPVPPointInfo.cpp 14 KB CPP 文件 2013/3/10 12:36:08 2018/9/13 20:39:58 2018/9/13 20:39:58 2
1 /************************************************************************/
2 /* 跨服战积分信息接口的具体实现                                         */
3 /************************************************************************/
5 #include "stdafx.h"
72 /*
73 =======================================================================================================================
74 获取跨服积分的数据信息
75 =======================================================================================================================
76 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-glserver\MPVPPointManager.cpp 11 KB CPP 文件 2013/3/10 12:36:08 2018/9/13 20:39:58 2018/9/13 20:39:58 5
1 /************************************************************************/
2 /* 跨服战积分管理器的实现                                               */
3 /************************************************************************/
5 #include "stdafx.h"
98 /*
99 ===============================================================================================================
100 注册跨服积分的实现
101 ===============================================================================================================
102 */
220 /*
221 ===============================================================================================================
222 获取指定类型跨服战全部积分信息
223 ===============================================================================================================
224 */
243 /*
244 ===============================================================================================================
245 获取指定跨服战当前的赛季开始周
246 ===============================================================================================================
247 */
266 /*
267 ===============================================================================================================
268 获取指定跨服战当前周
269 ===============================================================================================================
270 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-glserver\MPVPToplist.cpp 8 KB CPP 文件 2013/3/10 12:36:09 2018/9/13 20:39:58 2018/9/13 20:39:58 2
1 /************************************************************************/
2 /* 跨服帮会战排行榜的具体实现		                                    */
3 /************************************************************************/
5 #include "stdafx.h"
25 /*
26 =======================================================================================================================
27 积分数据加载,从跨服积分管理器中加载需要的信息
28 =======================================================================================================================
29 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-glserver\MutiGroupMapServerManager.cpp 16 KB CPP 文件 2013/3/10 12:36:11 2018/9/13 20:39:58 2018/9/13 20:39:58 1
4 Author:Michael		
5 Created:Michael
6 Description :跨服MapServer管理器实现
7 Revision :  2011/06/17 Michael create
9 =============================================================================*/

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-glserver\ServerConnectorManager_GL.cpp 11 KB CPP 文件 2013/3/10 12:36:15 2018/9/13 20:39:58 2018/9/13 20:39:58 2
516 			_NET_TRY
517 			{
518 				// 跨服帮战管理器心跳
519 				ret = g_pMGuildBattleManager->HeartBeat(uTime);
520 				KCheck(ret);
526 			_NET_TRY
527 			{
528 				//处理跨服战积分管理器相关的心跳
529 				ret = g_pMPVPPointManager->HeartBeat(uTime);		
530 				KCheck(ret);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-glserver\TopListManager.cpp 18 KB CPP 文件 2013/3/10 12:36:21 2018/9/13 20:39:58 2018/9/13 20:39:58 1
152 	Register(HONOR_CHARIOT_TOP_LIST_BK,			new TopList,					"Chariot_Honor_bk" );
153 	// add by dragon 战车排行榜 }
155 	// 跨服帮会战排行榜
156 	Register(MPVP_GUILD_CURRENT,			new CurrentMPVPGuildTopList,		"MPVP_Guild_Current" );
157 	Register(MPVP_GUILD_CURRENT_BK,			new TopList,				"MPVP_Guild_Current_bk" );

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-glserver\XGBattleDispatch.cpp 93 KB CPP 文件 2013/3/10 12:36:23 2018/9/13 20:39:58 2018/9/13 20:39:58 25
2507 }
2509 /***********************************************************
2510 desc:	跨服战场 XG 服务器消息处理
2511 auth:	rj
2512 date:	2011-2-14
2520 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2521 	{
2522 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2523 		static IntegerHashMap mapMPVP2v2SignupRecord;
2524 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2526 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2527 		}
2529 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2530 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2531 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2548 		case MPVP_BATTLE_RETSTATE:
2549 			{
2550 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名。值是当前报名的时间。
2551 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2552 				{
2582 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2583 				KCheck(pServePlayer_Target);
2585 				// 转发跨服战场进入通知到报名玩家所在 Map
2586 				GXMPVPBattle msg;
2587 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2613 				if (uPrevSignupTime)
2614 				{
2615 					// 6 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2616 					if (GET_TIME().GetCTime() - uPrevSignupTime > 360)
2617 					{
2719 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2720 				}
2722 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2723 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2724 				msg.SetSignupType(pKMessage->GetSignupType());
2734 				if (NULL != pServePlayer_Target)
2735 				{
2736 					// 转发跨服战场状态到报名玩家所在 Map
2737 					GXMPVPBattle msg;
2738 					msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2752 				if (iServerID)
2753 				{
2754 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2755 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2756 					if (NULL != pServePlayer_Target)
2777 				if (NULL != pServePlayer_Target)
2778 				{
2779 					// 转发跨服战场进入响应到报名玩家所在 Map
2780 					GXMPVPBattle msg;
2781 					msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2793 	else if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_6V6)
2794 	{
2795 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2796 		static IntegerHashMap mapMPVP6v6SignupRecord;
2797 		if (mapMPVP6v6SignupRecord.GetMaxCount() == 0)
2799 			mapMPVP6v6SignupRecord.InitTable(MAX_WORLD_PLAYER);
2800 		}
2802 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2803 		static IntegerHashMap mapMPVP6v6EnterBattleRecord;
2804 		if (mapMPVP6v6EnterBattleRecord.GetMaxCount() == 0)
2821 		case MPVP_BATTLE_RETSTATE:
2822 			{
2823 				// 记录这次跨服 6v6 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 6v6 的报名。值是当前报名的时间。
2824 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2825 				{
2856 				if (NULL != pServePlayer_Target)
2857 				{
2858 					// 转发跨服战场进入通知到报名玩家所在 Map
2859 					GXMPVPBattle msg;
2860 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
2890 				if (uPrevSignupTime)
2891 				{
2892 					// 11 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2893 					if (GET_TIME().GetCTime() - uPrevSignupTime > 660)
2894 					{
2996 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2997 				}
2999 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
3000 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
3001 				msg.SetSignupType(pKMessage->GetSignupType());
3011 				if (NULL != pServePlayer_Target)
3012 				{
3013 					// 转发跨服战场状态到报名玩家所在 Map
3014 					GXMPVPBattle msg;
3015 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
3029 				if (iServerID)
3030 				{
3031 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
3032 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
3033 					if (NULL != pServePlayer_Target)
3054 				if (NULL != pServePlayer_Target)
3055 				{
3056 					// 转发跨服战场进入响应到报名玩家所在 Map
3057 					GXMPVPBattle msg;
3058 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-mapserver\Bus.cpp 65 KB CPP 文件 2013/3/10 12:36:44 2018/9/13 20:39:59 2018/9/13 20:39:59 3
803 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
804 		= CaculateMonsterExpRuler::eCALC_TYPE_TEAM;
806 	//如果是跨服副本
807 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
808 	{
808 	{
809 		nValidMemberCount = GetValidOwnerListGroup(MAX_GROUP_MEMBER,apValidMember);
810 		eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
811 	}
812 	else
1083 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1085 	if(Get_OccupantTeamID() != INVALID_KHAN_ID) iFadeoutType = Obj_ItemRuler::FADE_OUT_TEAM;
1087 	//是否是跨服
1088 	BOOL BGroup = FALSE;
1089 	Map* pMap = GetMap();

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-mapserver\ChangeMapDelegater.cpp 43 KB CPP 文件 2013/3/10 12:37:03 2018/9/13 20:39:59 2018/9/13 20:39:59 2
1503 		pPlayer->ClearMutexState(MS_Fuben);
1504 	}
1506 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1507 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1508 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 12:36:47 2018/9/13 20:39:59 2018/9/13 20:39:59 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-mapserver\CXItemDispatch.cpp 64 KB CPP 文件 2013/3/10 12:36:54 2018/9/13 20:39:59 2018/9/13 20:39:59 1
2048 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
2049 	{
2050 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
2051 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2052 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-mapserver\GMCommand.cpp 204 KB CPP 文件 2013/3/10 12:37:15 2018/9/13 20:39:59 2018/9/13 20:39:59 1
542 	REGISTER_HANDLER(addchariothonour);	// \gm addchariothonour =100	增加战车荣誉
543 	REGISTER_HANDLER(unlockhorse);		// \gm unlockhorse =objid =horseindex  强制解锁骑乘
544 	REGISTER_HANDLER(addguildwin);		// \gm addguildwin =num 增加跨服帮战胜利次数
546 	REGISTER_HANDLER(getviewgroup);		// \gm getviewgroup	//获取当前的可视组
547 	REGISTER_HANDLER(setviewgroup);		// \gm setviewgroup	=groupnum //设置当前的可视组

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-mapserver\GMRoomBattleDispatch.cpp 5 KB CPP 文件 2013/3/10 12:37:15 2018/9/13 20:39:59 2018/9/13 20:39:59 1
53 	else
54 	{
55 		ut_id_map nBackSceneID = g_pFubenManager->GetServerBakSceneID();  //跨服处的副本入口场景
57 		ut_id_map nTarSceneId = pPacket->GetRoomBattle()->u_RoomBattleData.m_SceneID;
58 		

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-mapserver\GXBattleDispatch.cpp 55 KB CPP 文件 2013/3/10 12:37:15 2018/9/13 20:39:59 2018/9/13 20:39:59 6
1452 }
1454 /***********************************************************
1455 desc:	跨服战场 GX 服务器消息处理
1456 auth:	rj
1457 date:	2011-2-14
1474 			case MPVP_BATTLE_SIGNUP:
1475 				{
1476 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1478 					IMPVPBattle *pMPVPBattle = g_pMPVPBattleManager->GetMPVPBattleByType((MPVP_BATTLE_TYPE)pKMessage->GetBattleType());
1479 					//KCheck(pMPVPBattle);
1542 						return MP_CONTINUE;
1543 					}
1545 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1546 					pMPVPBattle->TellPlayerEnterMap(pKMessage, pConnector);
1547 				}
1588 			case MPVP_BATTLE_RETSTATE:
1589 				{
1590 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1591 					pMap->GetLuaSystem()->RunScriptFunction
1592 						(
1604 			case MPVP_BATTLE_RES_ENTERSCENE:
1605 				{
1606 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1607 					pMap->GetLuaSystem()->RunScriptFunction
1608 						(
1635 }
1637 /***********************************************************
1638 desc:	跨服战场场景通知消息处理
1639 auth:	rj
1640 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 28 KB CPP 文件 2013/3/10 12:37:17 2018/9/13 20:39:59 2018/9/13 20:39:59 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-mapserver\GXMapDispatch.cpp 20 KB CPP 文件 2013/3/10 12:37:21 2018/9/13 20:39:59 2018/9/13 20:39:59 2
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{
588 		return MP_CONTINUE;
589 	}
591 	//以下是跨服的副本的处理
593 	//给报名服务器返回创建成功消息			
594 	MGMRoomBattle* Msg = CREATE_MESSAGE_OBJ(MGMRoomBattle,MESSAGE_MGM_ROOMBATTLE);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 12:37:40 2018/9/13 20:40:00 2018/9/13 20:40:00 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-mapserver\LuaFunction_Chat.cpp 61 KB CPP 文件 2013/3/10 12:37:43 2018/9/13 20:40:00 2018/9/13 20:40:00 1
1086 		pMsg->SetCycleCount(nParam);
1087 	g_pServerConnectorMgr->SendMessage_SingleMode(pMsg);
1090 	//世界频道支持跨服
1091 	for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
1092 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-mapserver\LuaFunction_Map.cpp 203 KB CPP 文件 2013/3/10 12:37:46 2018/9/13 20:40:00 2018/9/13 20:40:00 16
256 	SelectMap.m_MapDataType = 0;
257 	SelectMap.m_CopyData = * pFD;
258 	SelectMap.m_CopyData.m_bRoom = false;//非跨服房间类型
260 	if (nRoomType == 1)
261 	{
1710 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1712 	KCheck(szName);
1714 	// 2010-11-2 对发送脚本邮件进行跨服支持
1715 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1716 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5678 	return 0;
5679 }
5681 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5682 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5683 {
5704 	LUA_RETURNERROR_1;
5705 }
5707 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5708 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5709 {
5751 	return 0;
5752 }
5754 // 跨服 6v6 战场场景注册函数
5755 int32 LuaFunction_MPVP6v6RegisterMap(Lua_State *L)
5756 {
5777 	LUA_RETURNERROR_1;
5778 }
5780 // 跨服 6v6 战场场景更新战场 UI 面板
5781 int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5782 {
5824 	return 0;
5825 }
5827 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5828 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5829 //{
5851 //}
5852 //
5853 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5854 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5855 //{
5921 //}
5922 //
5923 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5924 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5925 //{
5991 //}
5992 //
5993 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5994 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5995 //{
6025 //}
6026 //
6027 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
6028 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
6029 //{
6072 //}
6073 //
6074 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
6075 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
6076 //{
6124 //}
6125 //
6126 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
6127 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
6128 //{
6169 //}
6170 //
6171 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
6172 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
6173 //{
7015 	return 0;
7016 }
7018 // 跨服战场场景注册函数
7019 int32 LuaFunction_MPVPRegisterMap(Lua_State *L)
7020 {
7110 	if(pMap)
7111 	{
7112 		// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
7113 		int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
7114 			(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-mapserver\LuaSystem_Function.cpp 121 KB CPP 文件 2013/3/10 12:37:53 2018/9/13 20:40:00 2018/9/13 20:40:00 10
1171 	m_LuaVM.RegisterFunction("AddBattleHonour", (void *) (LuaFunction_AddBattleHonour));							// 增加战功
1172 	m_LuaVM.RegisterFunction("SubBattleHonour", (void *) (LuaFunction_SubBattleHonour));							// 减少战功
1173 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));					// 跨服 2v2 战场注册场景 
1174 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));			// 跨服 2v2 战场名称显示
1175 	m_LuaVM.RegisterFunction("MPVP6v6RegisterScene", (void *) (LuaFunction_MPVP6v6RegisterMap));					// 跨服 6v6 战场注册场景
1176 	m_LuaVM.RegisterFunction("SetMPVP6v6BattleDisable", (void *) (LuaFunction_SetMPVP6v6BattleDisable));			// 跨服 6v6 战场名称显示
1177 	m_LuaVM.RegisterFunction("MPVPRegisterMap", (void *) (LuaFunction_MPVPRegisterMap));							// 跨服战场注册场景
1178 	m_LuaVM.RegisterFunction("CountryIsFortuneTimeEx", (void *) (LuaFunction_CountryIsFortuneTimeEx));				// 获取特定国家的国运是否进行
1179 	m_LuaVM.RegisterFunction("AddCountryResourceWithRecall", (void *) (LuaFunction_AddCountryResourceWithRecall));	// 比较并增加的修改资源,保证同步
1291 	m_LuaVM.RegisterFunction("IsLeague", (void*)(LuaFunction_IsLeague));											// 判断两国是否是弱国联盟
1292 	m_LuaVM.RegisterFunction("CountryLeagueZhaoji", (void*)(LuaFunction_CountryLeagueZhaoji));						// 发送联盟召集令
1293 	m_LuaVM.RegisterFunction("AskEnterMGuildBattleScene",(void*)(LuaFunction_AskEnterMGuildBattleScene)); 			// 请求进入跨服帮会战场
1294 	m_LuaVM.RegisterFunction("MGuildBattleSignup",(void*)(LuaFunction_MGuildBattleSignup)); 						// 跨服帮会战报名
1295 	m_LuaVM.RegisterFunction("MGuildBattleResult",(void*)(LuaFunction_MGuildBattleResult)); 						// 跨服帮会战结果
1296 	m_LuaVM.RegisterFunction("MGuildBattleSeasonWeek",(void*)(LuaFunction_MGuildBattleSeasonWeek)); 				// 跨服帮会战赛季当前周数
1297 	m_LuaVM.RegisterFunction("GetMGuildNumOfBattleCurSeason", (void*)(LuaFunction_GetMGuildNumOfBattleCurSeason));	// 获取跨服帮战当前赛季的场数
1298 	m_LuaVM.RegisterFunction("SetEquipPokerData",(void*)(LuaFunction_SetEquipPokerData));							// 设置装备扑克牌属性
1299 	m_LuaVM.RegisterFunction("SetEquipPokerCount",(void*)(LuaFunction_SetEquipPokerCount));							// 设置装备扑克牌个数

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-mapserver\MapCore.cpp 38 KB CPP 文件 2013/3/10 12:37:56 2018/9/13 20:40:00 2018/9/13 20:40:00 2
614 				pSceneData->m_MapID == 20 ||
615 				pSceneData->m_MapID == 23 || 
616 				pSceneData->m_MapID == g_pFubenManager->GetServerBakSceneID())//  支持跨服副本
617 				
618 			{
673 				m_bFirstInit = FALSE;
674 			}
675 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
676 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
677 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-mapserver\MapManager.cpp 59 KB CPP 文件 2013/3/10 12:37:58 2018/9/13 20:40:00 2018/9/13 20:40:00 3
1698 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1699 		{
1700 			KCheck(FALSE);//跨服服务器上找不到报错
1701 		}
1703 		return INVALID_KHAN_ID;
1975 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1976 	{
1977 		//以下开始通知广播,支持跨服架构
1978 		for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
1979 		{
2007 BOOL FubenManager::BroadcastFubenSceneInfo(void)
2008 {
2009 	//如果不开跨服副本，不广播
2010 	if (g_Config.m_MultiGroupConfig.IsMultMapOpen() == FALSE)
2011 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-mapserver\MapServer.cpp 33 KB CPP 文件 2013/3/10 12:37:58 2018/9/13 20:40:00 2018/9/13 20:40:00 3
598 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
599 	
600 	// 跨服战场管理器 2010-10-13 by rj
601 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
602 	g_pMPVPBattleManager = new CMPVPBattleManager;
665 	if(pCurrentSData->m_EnableDBShare)
666 	{
667 		// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
668 		uint32 uMaxPoolSize = MAX_POOL_SIZE;
669 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
757 	{
758 		QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[Init] Begin g_pConnectorPool->Init() ... ");
760 		// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
761 		uint32 uMaxPoolSize = MAX_POOL_SIZE;
762 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-mapserver\MGuildBattle.cpp 28 KB CPP 文件 2013/3/10 12:37:53 2018/9/13 20:40:00 2018/9/13 20:40:00 3
1 /***********************************************************
2 desc:	跨服帮会战场实现
3 auth:	txp
4 date:	2011-6-10
122 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，
123 		// 为这个很少出现的异常进行处理。
124 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，
125 		// 如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
126 		if (FindSignup(pSignupPlayers[i].iWorldID, pSignupPlayers[i].GuildID))
427 		m_MatchList.m_aMatch[m_MatchList.m_nCount].m_bFinished = FALSE;
429 		int32 nLevelFlag=0, nDisLevel = s1.m_nSignupLevel - s2.m_nSignupLevel;
431 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
432 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
433 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-mapserver\Monster.cpp 65 KB CPP 文件 2013/3/10 12:38:01 2018/9/13 20:40:00 2018/9/13 20:40:00 5
640 		return 0;
641 	}
643 	//如果是跨服副本
644 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
645 	{
877 		return;
878 	}
880 	//跨服副本
881 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
882 	{
953 		nExp = (int32) (m_BaseExp * fExpParam);
954 	}
956 	uint32	auExp[MAX_GROUP_MEMBER];//  for 跨服军团
957 	int32	_Idx;
959 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
968 			if (pMap->m_FubenDataParty.IsRoomType())
969 			{
970 				eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
971 			}
972 		}
2097 		return 0;
2098 	}
2100 	//场景类型必须为跨服副本
2101 	Map* pMap = GetMap();
2102 	if (NULL == pMap)

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-mapserver\MPVP2v2Battle.cpp 35 KB CPP 文件 2013/3/10 12:37:54 2018/9/13 20:40:00 2018/9/13 20:40:00 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
249 		{
250 			// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
251 			// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
252 			if (FindSignup(pSignupPlayers[i].uSNID))
253 			{
649 			nLevelFlag = 0;
650 		}
652 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
653 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
654 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-mapserver\MPVP6v6Battle.cpp 30 KB CPP 文件 2013/3/10 12:37:54 2018/9/13 20:40:00 2018/9/13 20:40:00 3
1 /***********************************************************
2 desc:	跨服 6v6 战场实现
3 auth:	txp
4 date:	2011-3-16
154 	{
155 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
156 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
157 		if (FindSignup(pSignupPlayers[i].uSNID))
158 		{
536 			nLevelFlag = 0;
537 		}
539 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
540 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
541 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 12:37:55 2018/9/13 20:40:00 2018/9/13 20:40:00 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
97 	__UNGUARD__ return FALSE;
98 }
100 // 以类型方式获得跨服战场类
101 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
102 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 20 KB CPP 文件 2013/3/10 12:38:17 2018/9/13 20:40:00 2018/9/13 20:40:00 4
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());
280 	if(g_Config.m_MultiGroupConfig.IsSignUpServer())
281 	{
282 		//只要一组服务器连接正常,跨服房间管理器的心跳仍然执行 
283 		if (GetGLServerActiveCount() > 0)
284 		{
598 				{
599 					AddGroupTmp( connID, g_Config.m_MultiGroupConfig.m_GLServerInfo[i].m_WorldID );
601 					//2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，
602 					//当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
603 					SSHandShake msg;
674 	if(FALSE == IsGLServerActiveTmp())//处理断线重连
675 	{
676 		//跨服重连机制
677 		if (FALSE == m_ConnectTimer.IsSetTimer())
678 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-mapserver\SignUpMgr.cpp 83 KB CPP 文件 2013/3/10 12:38:18 2018/9/13 20:40:00 2018/9/13 20:40:00 1
4 Author:shangy		
5 Created:shangy    
6 Description :跨服报名管理类
7 Revision :  2011/06/20 shangy create
8 			2011/08/05 Michael Lin Modify

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/10 22:15:48 2018/9/13 20:40:01 2018/9/13 20:40:01 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/10 22:15:48 2018/9/13 20:40:01 2018/9/13 20:40:01 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/10 22:15:49 2018/9/13 20:40:01 2018/9/13 20:40:01 1
199 }
200 	
201 // 2010-10-9 by rj 跨服线程连接方式
202 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
203 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-share\Core\Setting.cpp 80 KB CPP 文件 2013/3/10 22:15:52 2018/9/13 20:40:01 2018/9/13 20:40:01 6
290 /*
291 =======================================================================================================================
292  加载跨服配置信息
293 =======================================================================================================================
294 */
304 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
305 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
307 	// 跨服战场最大场景数量配置 2010-9-23 by rj
308 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
309 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
310 	
311 	m_MultiGroupConfig.m_nMaxMGuildMapCnt = ini.Get_Property_Int("MGuild", "Max_SceneCount");
312 	KCheckEx(m_MultiGroupConfig.m_nMaxMGuildMapCnt>0 && m_MultiGroupConfig.m_nMaxMGuildMapCnt<=MGUILD_MAX_MAPCOUNT, "跨服帮战场景数量要小于512");
314 // 	m_MultiGroupConfig.m_nMGuildBeginWeek = ini.Get_Property_Int("MGuild", "BeginWeek");
315 // 	KCheckEx(m_MultiGroupConfig.m_nMGuildBeginWeek>0 && m_MultiGroupConfig.m_nMGuildBeginWeek<=52, "起始周只能在1-52之间");
329 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
330 		
331 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
333 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
335 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);
392 		}		
393 	}
395 	//跨服关卡报名服务器开关 
396 	m_MultiGroupConfig.m_SignUpServerToggle = ini.Get_Property_Int( "Room", "SignUpServerToggle" );
397 	m_MultiGroupConfig.m_MapFubenToogle = ini.Get_Property_Int( "Room", "MapFubenToogle" );
1049 	m_ConfigInfo.m_nEmpireOfficerMinLevel = ini.Get_Property_Int("Empire","OfficerMinLevel");
1050 	//[Empire] End
1052 	//added for跨服军团  
1053 	for (int32 _nGIndex = 0; _nGIndex < MAX_GROUP_MEMBER; ++_nGIndex)
1054 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-share\DataBase\ArchiveInterface.cpp 296 KB CPP 文件 2013/3/10 22:15:54 2018/9/13 20:40:01 2018/9/13 20:40:01 1
9805 }
9807 /************************************************************************/
9808 /* 跨服战积分相关                                                       */
9809 /************************************************************************/
9811 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-share\DataBase\SqlStatement.cpp 21 KB CPP 文件 2013/3/10 22:15:55 2018/9/13 20:40:01 2018/9/13 20:40:01 1
251 char	*g_LoadLostItemInfo = "select aid,playerguid,srcplayerguid,srcplayername,guid,world,server,itemclass,creator,dataproperty,data,termendtime,islock,unlocktime,gmoptime from %s where aid>%u order by aid asc" ;
252 char	*g_DelLostItemInfo = "delete from %s where aid=%u";
254 // 跨服战积分相关处理
255 char	*LoadMPVPPointInfo = "select unitid, unitname, world, currentpoint, totalpoint, currentwintimes, currentjointimes, totalwintimes, totaljointimes, mpvptypename, currentweek, startweek, params from %s where valid = 1";
256 char	*SaveMPVPPointInfo = "call proc_save_mpvppoint(%d,\'%s\', %d, %d, %d, %d, %d, %d, %d, \'%s\', %d, %d, %d, 1)";

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-share\Messages\StructRoomBattle.cpp 68 KB CPP 文件 2013/3/10 22:17:43 2018/9/13 20:40:04 2018/9/13 20:40:04 19
4 Author:Michael		
5 Created:Michael    
6 Description :跨服房间相关结构
7 Revision :  2011/06/21 Michael create
9 =============================================================================*/
790 }
793 /************************************************************************/
794 /* 跨服报名候选数据结构定义  		                                    */
795 /************************************************************************/
796 BOOL RoomBattleSignupInfo::IsRoomIDInList(ut_id_room nRoomID) const
930 }
931 /************************************************************************/
932 /* 跨服报名候选数据结构定义 客户端消息结构                              */
933 /************************************************************************/
934 void RoomBattleSignupInfo_CX_Msg::Clear()
971 }
973 /************************************************************************/
974 /* 跨服取消报名结构定义   客户端消息结构	                           */
975 /************************************************************************/
976 void RoomBattleSignupCancel_CX_Msg::Clear()
1001 }
1003 /************************************************************************/
1004 /* 跨服确认进入结构定义    客户端消息结构	                           */
1005 /************************************************************************/
1006 void RoomBattleWaitingEnter_CX_Msg::Clear()
1108 }
1110 /************************************************************************/
1111 /* 跨服玩家确认结构定义    服务器消息结构	                           */
1112 /************************************************************************/
1113 void RoomBattlePlayerEnter_XC_Msg::Clear()
1147 }
1149 /************************************************************************/
1150 /* 跨服军团成员离开    服务器消息结构	                                */
1151 /************************************************************************/
1152 void RoomBattlePlayerLeave_XC_Msg::Clear()
1206 }
1209 /************************************************************************/
1210 /* 跨服确认进入结构定义    服务器消息结构	                           */
1211 /************************************************************************/
1212 void RoomBattleWaitingEnter_XC_Msg::Clear()
1580 }
1581 /************************************************************************/
1582 /* 跨服MapServer信息                  		                            */
1583 /************************************************************************/
1584 bool SMutiGroupMapServerInfo::IsValid( void ) const
1701 }
1703 /************************************************************************/
1704 /* 跨服关卡消息结构定义 MGP-->GL               		                    */
1705 /************************************************************************/
1706 uint32 MsgMGRoomBattle::GetMsgSize() const
1778 }
1780 /************************************************************************/
1781 /* 跨服关卡消息结构定义 GL-->MGP               		                    */
1782 /************************************************************************/
1783 uint32 MsgGMRoomBattle::GetMsgSize() const
1870 }
1871 /************************************************************************/
1872 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消            */
1873 /************************************************************************/
1874 uint32 MsgXGMRoomBattle_ReplyEnter::GetMsgSize()const
1907 }
1909 /************************************************************************/
1910 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消广播            */
1911 /************************************************************************/
1912 uint32 MsgXGMRoomBattle_ReplyEnter_BROADCAST::GetMsgSize()const
1945 }
1947 /************************************************************************/
1948 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  客户端确认离开，重新返回报名状态 */
1949 /************************************************************************/
1950 uint32 MsgXGMRoomBattle_Leave::GetMsgSize()const
1983 }
1985 /************************************************************************/
1986 /* 跨服关卡消息结构定义 MGP-->GL-->MGP        		                    */
1987 /************************************************************************/
1988 uint32 MsgMGMRoomBattle::GetMsgSize() const
2042 }
2044 /************************************************************************/
2045 /* 跨服关卡消息结构定义 MAP-->GL-->MGP        		                    */
2046 /************************************************************************/
2047 uint32 MsgXGMRoomBattle::GetMsgSize() const
2161 }
2163 /************************************************************************/
2164 /* 跨服关卡消息结构定义 MGP-->GL-->MAP        		                    */
2165 /************************************************************************/
2166 uint32 MsgMGXRoomBattle::GetMsgSize() const
2277 }
2279 /************************************************************************/
2280 /* 跨服关卡消息结构定义 Client-->MAP        		                    */
2281 /************************************************************************/
2282 uint32 MsgCXRoomBattle::GetMsgSize() const
2372 }
2374 /************************************************************************/
2375 /* 跨服关卡消息结构定义 MAP-->Client        		                    */
2376 /************************************************************************/
2377 uint32 MsgXCRoomBattle::GetMsgSize() const

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-share\TAB\TabDefine_Map_Misc.cpp 85 KB CPP 文件 2013/3/10 22:19:33 2018/9/13 20:40:07 2018/9/13 20:40:07 2
2378 /*
2379 =======================================================================================================================
2380 跨服关卡 逻辑数据表
2381 =======================================================================================================================
2382 */
2434 /*
2435 =======================================================================================================================
2436 跨服关卡 配置数据表
2437 =======================================================================================================================
2438 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\KR_OB3\src\khan2-share\TAB\TabDefine_Share.cpp 37 KB CPP 文件 2013/3/10 22:19:35 2018/9/13 20:40:07 2018/9/13 20:40:07 2
998 {
999 	__GUARD__
1001 	//如果不开跨服副本，默认不读BackScene
1002 	if (!g_Config.m_MultiGroupConfig.IsMultMapOpen())
1003 	{
1054 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0) 
1055 	{
1056 		//如果是跨服MapServer确保BackScene有配置
1057 		KCheckEx(bFindCurrServerBackScene,"BakSceneInfo.tab表配置错误");
1058 	}

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 13 KB CPP 文件 2013/3/10 12:47:20 2018/9/13 20:40:11 2018/9/13 20:40:11 1
191 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
192 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
194 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
195 		if (pFindPlayer == NULL)
196 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY\src\khan2-glserver\XGBattleDispatch.cpp 81 KB CPP 文件 2013/3/10 12:47:37 2018/9/13 20:40:12 2018/9/13 20:40:12 12
2502 }
2504 /***********************************************************
2505 desc:	跨服战场 XG 服务器消息处理
2506 auth:	rj
2507 date:	2011-2-14
2515 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2516 	{
2517 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2518 		static IntegerHashMap mapMPVP2v2SignupRecord;
2519 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2521 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2522 		}
2524 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2525 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2526 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2543 		case MPVP_BATTLE_RETSTATE:
2544 			{
2545 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名
2546 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2547 				{
2577 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2578 				KCheck(pServePlayer_Target);
2580 				// 转发跨服战场进入通知到报名玩家所在 Map
2581 				GXMPVPBattle msg;
2582 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2686 					}
2687 				}
2689 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2690 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2691 				msg.SetSignupType(pKMessage->GetSignupType());
2700 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2701 				KCheck(pServePlayer_Target);
2703 				// 转发跨服战场状态到报名玩家所在 Map
2704 				GXMPVPBattle msg;
2705 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2718 				if (iServerID)
2719 				{
2720 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2721 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2722 					KCheck(pServePlayer_Target);
2741 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2742 				KCheck(pServePlayer_Target);
2744 				// 转发跨服战场进入响应到报名玩家所在 Map
2745 				GXMPVPBattle msg;
2746 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY\src\khan2-mapserver\ChangeMapDelegater.cpp 35 KB CPP 文件 2013/3/10 12:48:13 2018/9/13 20:40:12 2018/9/13 20:40:12 2
1216 		pPlayer->ClearMutexState(MS_Fuben);
1217 	}
1219 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1220 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1221 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 12:47:59 2018/9/13 20:40:12 2018/9/13 20:40:12 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY\src\khan2-mapserver\CXItemDispatch.cpp 60 KB CPP 文件 2013/3/10 12:48:05 2018/9/13 20:40:12 2018/9/13 20:40:12 1
1956 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
1957 	{
1958 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
1959 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1960 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY\src\khan2-mapserver\GXBattleDispatch.cpp 52 KB CPP 文件 2013/3/10 12:48:24 2018/9/13 20:40:13 2018/9/13 20:40:13 6
1452 }
1454 /***********************************************************
1455 desc:	跨服战场 GX 服务器消息处理
1456 auth:	rj
1457 date:	2011-2-14
1474 			case MPVP_BATTLE_SIGNUP:
1475 				{
1476 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1478 					CMPVP2v2Battle *pMPVP2v2Battle = (CMPVP2v2Battle *)g_pMPVPBattleManager->GetMPVPBattleByType(MPVP_BATTLE_TYPE_2V2);
1479 					KCheck(pMPVP2v2Battle);
1524 						return MP_CONTINUE;
1525 					}
1527 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1528 					pMPVP2v2Battle->TellPlayerEnterMap(pKMessage->GetSNID(), pConnector);
1529 				}
1570 			case MPVP_BATTLE_RETSTATE:
1571 				{
1572 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1573 					pMap->GetLuaSystem()->RunScriptFunction
1574 						(
1586 			case MPVP_BATTLE_RES_ENTERSCENE:
1587 				{
1588 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1589 					pMap->GetLuaSystem()->RunScriptFunction
1590 						(
1617 }
1619 /***********************************************************
1620 desc:	跨服战场场景通知消息处理
1621 auth:	rj
1622 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 26 KB CPP 文件 2013/3/10 12:48:26 2018/9/13 20:40:13 2018/9/13 20:40:13 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY\src\khan2-mapserver\GXMapDispatch.cpp 16 KB CPP 文件 2013/3/10 12:48:29 2018/9/13 20:40:13 2018/9/13 20:40:13 1
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 12:48:47 2018/9/13 20:40:13 2018/9/13 20:40:13 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY\src\khan2-mapserver\LuaFunction_Map.cpp 182 KB CPP 文件 2013/3/10 12:48:51 2018/9/13 20:40:13 2018/9/13 20:40:13 11
1455 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1457 	KCheck(szName);
1459 	// 2010-11-2 对发送脚本邮件进行跨服支持
1460 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1461 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5360 	return 0;
5361 }
5363 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5364 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5365 {
5386 	LUA_RETURNERROR_1;
5387 }
5389 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5390 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5391 {
5433 	return 0;
5434 }
5436 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5437 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5438 //{
5460 //}
5461 //
5462 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5463 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5464 //{
5530 //}
5531 //
5532 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5533 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5534 //{
5600 //}
5601 //
5602 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5603 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5604 //{
5634 //}
5635 //
5636 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
5637 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5638 //{
5681 //}
5682 //
5683 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
5684 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
5685 //{
5733 //}
5734 //
5735 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
5736 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
5737 //{
5778 //}
5779 //
5780 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
5781 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
5782 //{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY\src\khan2-mapserver\LuaSystem_Function.cpp 105 KB CPP 文件 2013/3/10 12:48:58 2018/9/13 20:40:13 2018/9/13 20:40:13 1
891 	m_LuaVM.RegisterFunction("PVP2v2AskBattleSceneEnter", (void *) (LuaFunction_PVP2v2AskBattleMapEnter));
892 	m_LuaVM.RegisterFunction("SetPVP2v2BattleDisable", (void *) (LuaFunction_SetPVP2v2BattleDisable));
893 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));	// 跨服 2v2 战场扩充函数 by rj 2010-9-21 
894 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));
895 	m_LuaVM.RegisterFunction("PVP6v6RegisterScene", (void *) (LuaFunction_PVP6v6RegisterMap));

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY\src\khan2-mapserver\MapCore.cpp 36 KB CPP 文件 2013/3/10 12:49:00 2018/9/13 20:40:13 2018/9/13 20:40:13 1
635 				m_bFirstInit = FALSE;
636 			}
637 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
638 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
639 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY\src\khan2-mapserver\MapServer.cpp 31 KB CPP 文件 2013/3/10 12:49:02 2018/9/13 20:40:13 2018/9/13 20:40:13 1
550 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
551 	
552 	// 跨服战场管理器 2010-10-13 by rj
553 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
554 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY\src\khan2-mapserver\MPVP2v2Battle.cpp 29 KB CPP 文件 2013/3/10 12:48:58 2018/9/13 20:40:13 2018/9/13 20:40:13 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
124 	{
125 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
126 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
127 		if (FindSignup(pSignupPlayers[i].uSNID))
128 		{
470 			nLevelFlag = 0;
471 		}
473 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
474 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
475 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 12:48:59 2018/9/13 20:40:13 2018/9/13 20:40:13 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
91 	__UNGUARD__ return FALSE;
92 }
94 // 以类型方式获得跨服战场类
95 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
96 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 12 KB CPP 文件 2013/3/10 12:49:20 2018/9/13 20:40:14 2018/9/13 20:40:14 1
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/10 22:56:23 2018/9/13 20:40:14 2018/9/13 20:40:14 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/10 22:56:24 2018/9/13 20:40:14 2018/9/13 20:40:14 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/10 22:56:25 2018/9/13 20:40:14 2018/9/13 20:40:14 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
200 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY\src\khan2-share\Core\Setting.cpp 72 KB CPP 文件 2013/3/10 22:56:30 2018/9/13 20:40:14 2018/9/13 20:40:14 3
286 /*
287 =======================================================================================================================
288  加载跨服配置信息
289 =======================================================================================================================
290 */
300 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
301 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
303 	// 跨服战场最大场景数量配置 2010-9-23 by rj
304 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
305 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
319 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
320 		
321 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
323 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
325 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-client\UIMap.cpp 23 KB CPP 文件 2013/3/10 12:51:17 2018/9/13 20:40:22 2018/9/13 20:40:22 1
449 		case MAP_POINT_TRANSER_NPC:		szChildWinType = MAP_POINT_TYPE_TRANSER_NPC;	break;
450 		case MAP_POINT_MONSTER:			szChildWinType = MAP_POINT_TYPE_MONSTER;		break;
452 		// 跨服6v6的旗子
453 		case MAP_POINT_OneLevelFlag:			szChildWinType = MAP_POINT_TYPE_ONELEVELFLAG; break;
454 		case MAP_POINT_TwoLevelFlag:			szChildWinType = MAP_POINT_TYPE_TWOLEVELFLAG; break;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-client\UIPartyMessageBox.cpp 33 KB CPP 文件 2013/3/10 12:51:17 2018/9/13 20:40:22 2018/9/13 20:40:22 1
404 		}
405 		break;
407 	case MGUILD_BATTLE_TYPE: // 跨服帮会战
408 		{
409 			CXMPVPBattle msg;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-dbshare\MKLogicManager.cpp 105 KB CPP 文件 2013/3/10 12:51:54 2018/9/13 20:40:23 2018/9/13 20:40:23 1
3613 }
3615 /************************************************************************/
3616 /* 跨服战积分相关                                                       */
3617 /************************************************************************/
3618 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-glserver\GL.cpp 42 KB CPP 文件 2013/3/10 12:52:01 2018/9/13 20:40:23 2018/9/13 20:40:23 2
417 	KCheck(g_pGuildBattleManager);
418 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildBattleManager...OK");
420 	//跨服帮战的管理器
421 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new MultiGuildBattleManager ... ");
422 	g_pMGuildBattleManager = new MGuildBattleManager;
500 	KCheck(g_pGuildCenter);
501 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildManager...OK");
503 	//跨服战积分管理器
504 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMPVPPointManager ... ");
505 	g_pMPVPPointManager = new MPVPPointManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 14 KB CPP 文件 2013/3/10 12:52:10 2018/9/13 20:40:23 2018/9/13 20:40:23 1
208 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
209 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
211 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
212 		if (pFindPlayer == NULL)
213 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-glserver\MGuildBattleManager.cpp 14 KB CPP 文件 2013/3/10 12:52:12 2018/9/13 20:40:23 2018/9/13 20:40:23 8
94 	// 当前赛季进度
95 	int32 nSeasonWeek = (GET_TIME().GetWeekNumOfYear() - g_Config.m_ConfigInfo.m_MPVPGuildBeginWeek) % g_Config.m_ConfigInfo.m_MPVPPointPeriodWeeks;
97 	// 取得跨服服务器
98 	int32 nServerNum = 0;
99 	ut_id serverIDs[SERVER_CAPACITY] = {-1};
145 	//	if (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / nServerNum <= 0)
146 	//		return serverIDs[0];
148 	//	// 2011-07-26 by rj 改进原来的等分算法，在所连跨服服务器数量等于 2 时用用 4/6 算法来解决高分帮会人数过多的问题
149 	//	int32 iSeg = iIndex / (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / (nServerNum <= 2 ? 2.5f : nServerNum) );
150 	//	if (iSeg >= nServerNum)
166 	if (uPrevSignupTime)
167 	{
168 		// 超时保护（防止报名完成后跨服服务器宕机导致 GL 无法清理报名）
169 		if (GET_TIME().GetCTime() - uPrevSignupTime > 90*60)
170 		{
258 	if(!pGuild || pGuild->GetGuildID() == INVALID_KHAN_ID)
259 		return FALSE;
261 	// 转发跨服战场进入通知到报名玩家所在 Map
262 	GXMPVPBattle msg;
263 	msg.SetBattleType(MPVP_GUILD_BATTLE_TYPE);
416 				aSignupPlayers[0].GuildPoint = pPoint->m_nCurrentPoint;
417 			}
419 			// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
420 			msg.SetSubType(MPVP_BATTLE_SIGNUP);
421 			msg.SetSignupType(pKMessage->GetSignupType());
470 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
471 				KCheck(pServePlayer_Target);
473 				// 转发跨服战场状态到报名玩家所在 Map
474 				GXMPVPBattle msg;
475 				msg.SetBattleType(pKMessage->GetBattleType());
501 				return MP_CONTINUE;
502 			}
504 			// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
505 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pMatch->nServerID);
506 			KCheck(pServePlayer_Target);
523 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
524 			KCheck(pServePlayer_Target);
526 			// 转发跨服战场进入响应到报名玩家所在 Map
527 			GXMPVPBattle msg;
528 			msg.SetBattleType(pKMessage->GetBattleType());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-glserver\MPVPGuildPoint.cpp 8 KB CPP 文件 2013/3/10 12:52:13 2018/9/13 20:40:23 2018/9/13 20:40:23 3
1 /************************************************************************/
2 /* 帮会跨服战积分信息接口的具体实现                                     */
3 /************************************************************************/
5 #include "stdafx.h"
195 /*
196 =======================================================================================================================
197 处理不同跨服战各自的额外参数填充
198 =======================================================================================================================
199 */
223 /*
224 =======================================================================================================================
225 加载跨服帮战每周的场次信息
226 =======================================================================================================================
227 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-glserver\MPVPPointArithmetic.cpp 2 KB CPP 文件 2013/3/10 12:52:13 2018/9/13 20:40:23 2018/9/13 20:40:23 3
1 /************************************************************************/
2 /* 跨服战积分算法器,负责各种跨服战积分的计算逻辑实现                    */
3 /************************************************************************/
5 #include "stdafx.h"
16 /*
17 ===============================================================================================================
18 根据实力来计算跨服帮会的加权分
19 帮会实力-(错过的场次*放弃损失的分数)
20 ===============================================================================================================

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-glserver\MPVPPointInfo.cpp 14 KB CPP 文件 2013/3/10 12:52:13 2018/9/13 20:40:23 2018/9/13 20:40:23 2
1 /************************************************************************/
2 /* 跨服战积分信息接口的具体实现                                         */
3 /************************************************************************/
5 #include "stdafx.h"
72 /*
73 =======================================================================================================================
74 获取跨服积分的数据信息
75 =======================================================================================================================
76 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-glserver\MPVPPointManager.cpp 11 KB CPP 文件 2013/3/10 12:52:14 2018/9/13 20:40:23 2018/9/13 20:40:23 5
1 /************************************************************************/
2 /* 跨服战积分管理器的实现                                               */
3 /************************************************************************/
5 #include "stdafx.h"
98 /*
99 ===============================================================================================================
100 注册跨服积分的实现
101 ===============================================================================================================
102 */
220 /*
221 ===============================================================================================================
222 获取指定类型跨服战全部积分信息
223 ===============================================================================================================
224 */
243 /*
244 ===============================================================================================================
245 获取指定跨服战当前的赛季开始周
246 ===============================================================================================================
247 */
266 /*
267 ===============================================================================================================
268 获取指定跨服战当前周
269 ===============================================================================================================
270 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-glserver\MPVPToplist.cpp 8 KB CPP 文件 2013/3/10 12:52:14 2018/9/13 20:40:23 2018/9/13 20:40:23 2
1 /************************************************************************/
2 /* 跨服帮会战排行榜的具体实现		                                    */
3 /************************************************************************/
5 #include "stdafx.h"
25 /*
26 =======================================================================================================================
27 积分数据加载,从跨服积分管理器中加载需要的信息
28 =======================================================================================================================
29 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-glserver\ServerConnectorManager_GL.cpp 11 KB CPP 文件 2013/3/10 12:52:20 2018/9/13 20:40:23 2018/9/13 20:40:23 2
513 			_NET_TRY
514 			{
515 				// 跨服帮战管理器心跳
516 				ret = g_pMGuildBattleManager->HeartBeat(uTime);
517 				KCheck(ret);
523 			_NET_TRY
524 			{
525 				//处理跨服战积分管理器相关的心跳
526 				ret = g_pMPVPPointManager->HeartBeat(uTime);		
527 				KCheck(ret);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-glserver\TopListManager.cpp 17 KB CPP 文件 2013/3/10 12:52:25 2018/9/13 20:40:23 2018/9/13 20:40:23 1
152 	Register(HONOR_CHARIOT_TOP_LIST_BK,			new TopList,					"Chariot_Honor_bk" );
153 	// add by dragon 战车排行榜 }
155 	// 跨服帮会战排行榜
156 	Register(MPVP_GUILD_CURRENT,			new CurrentMPVPGuildTopList,		"MPVP_Guild_Current" );
157 	Register(MPVP_GUILD_CURRENT_BK,			new TopList,				"MPVP_Guild_Current_bk" );

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-glserver\XGBattleDispatch.cpp 92 KB CPP 文件 2013/3/10 12:52:28 2018/9/13 20:40:23 2018/9/13 20:40:23 25
2507 }
2509 /***********************************************************
2510 desc:	跨服战场 XG 服务器消息处理
2511 auth:	rj
2512 date:	2011-2-14
2520 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2521 	{
2522 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2523 		static IntegerHashMap mapMPVP2v2SignupRecord;
2524 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2526 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2527 		}
2529 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2530 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2531 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2548 		case MPVP_BATTLE_RETSTATE:
2549 			{
2550 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名。值是当前报名的时间。
2551 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2552 				{
2582 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2583 				KCheck(pServePlayer_Target);
2585 				// 转发跨服战场进入通知到报名玩家所在 Map
2586 				GXMPVPBattle msg;
2587 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2613 				if (uPrevSignupTime)
2614 				{
2615 					// 6 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2616 					if (GET_TIME().GetCTime() - uPrevSignupTime > 360)
2617 					{
2719 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2720 				}
2722 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2723 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2724 				msg.SetSignupType(pKMessage->GetSignupType());
2733 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2734 				KCheck(pServePlayer_Target);
2736 				// 转发跨服战场状态到报名玩家所在 Map
2737 				GXMPVPBattle msg;
2738 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2751 				if (iServerID)
2752 				{
2753 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2754 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2755 					KCheck(pServePlayer_Target);
2774 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2775 				KCheck(pServePlayer_Target);
2777 				// 转发跨服战场进入响应到报名玩家所在 Map
2778 				GXMPVPBattle msg;
2779 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2790 	else if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_6V6)
2791 	{
2792 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2793 		static IntegerHashMap mapMPVP6v6SignupRecord;
2794 		if (mapMPVP6v6SignupRecord.GetMaxCount() == 0)
2796 			mapMPVP6v6SignupRecord.InitTable(MAX_WORLD_PLAYER);
2797 		}
2799 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2800 		static IntegerHashMap mapMPVP6v6EnterBattleRecord;
2801 		if (mapMPVP6v6EnterBattleRecord.GetMaxCount() == 0)
2818 		case MPVP_BATTLE_RETSTATE:
2819 			{
2820 				// 记录这次跨服 6v6 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 6v6 的报名。值是当前报名的时间。
2821 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2822 				{
2852 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2853 				KCheck(pServePlayer_Target);
2855 				// 转发跨服战场进入通知到报名玩家所在 Map
2856 				GXMPVPBattle msg;
2857 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
2883 				if (uPrevSignupTime)
2884 				{
2885 					// 11 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2886 					if (GET_TIME().GetCTime() - uPrevSignupTime > 660)
2887 					{
2989 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2990 				}
2992 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2993 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2994 				msg.SetSignupType(pKMessage->GetSignupType());
3003 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
3004 				KCheck(pServePlayer_Target);
3006 				// 转发跨服战场状态到报名玩家所在 Map
3007 				GXMPVPBattle msg;
3008 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
3021 				if (iServerID)
3022 				{
3023 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
3024 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
3025 					KCheck(pServePlayer_Target);
3044 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
3045 				KCheck(pServePlayer_Target);
3047 				// 转发跨服战场进入响应到报名玩家所在 Map
3048 				GXMPVPBattle msg;
3049 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-mapserver\ChangeMapDelegater.cpp 36 KB CPP 文件 2013/3/10 12:53:05 2018/9/13 20:40:24 2018/9/13 20:40:24 2
1237 		pPlayer->ClearMutexState(MS_Fuben);
1238 	}
1240 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1241 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1242 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 12:52:50 2018/9/13 20:40:24 2018/9/13 20:40:24 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-mapserver\CXItemDispatch.cpp 62 KB CPP 文件 2013/3/10 12:52:57 2018/9/13 20:40:24 2018/9/13 20:40:24 1
2000 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
2001 	{
2002 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
2003 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2004 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-mapserver\GMCommand.cpp 199 KB CPP 文件 2013/3/10 12:53:17 2018/9/13 20:40:24 2018/9/13 20:40:24 1
543 	REGISTER_HANDLER(addchariothonour);	// \gm addchariothonour =100	增加战车荣誉
544 	REGISTER_HANDLER(unlockhorse);		// \gm unlockhorse =objid =horseindex  强制解锁骑乘
545 	REGISTER_HANDLER(addguildwin);		// \gm addguildwin =num 增加跨服帮战胜利次数
547 	__UNGUARD__
548 }

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-mapserver\GXBattleDispatch.cpp 55 KB CPP 文件 2013/3/10 12:53:18 2018/9/13 20:40:24 2018/9/13 20:40:24 6
1452 }
1454 /***********************************************************
1455 desc:	跨服战场 GX 服务器消息处理
1456 auth:	rj
1457 date:	2011-2-14
1474 			case MPVP_BATTLE_SIGNUP:
1475 				{
1476 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1478 					IMPVPBattle *pMPVPBattle = g_pMPVPBattleManager->GetMPVPBattleByType((MPVP_BATTLE_TYPE)pKMessage->GetBattleType());
1479 					//KCheck(pMPVPBattle);
1542 						return MP_CONTINUE;
1543 					}
1545 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1546 					pMPVPBattle->TellPlayerEnterMap(pKMessage, pConnector);
1547 				}
1588 			case MPVP_BATTLE_RETSTATE:
1589 				{
1590 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1591 					pMap->GetLuaSystem()->RunScriptFunction
1592 						(
1604 			case MPVP_BATTLE_RES_ENTERSCENE:
1605 				{
1606 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1607 					pMap->GetLuaSystem()->RunScriptFunction
1608 						(
1635 }
1637 /***********************************************************
1638 desc:	跨服战场场景通知消息处理
1639 auth:	rj
1640 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 28 KB CPP 文件 2013/3/10 12:53:19 2018/9/13 20:40:24 2018/9/13 20:40:24 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-mapserver\GXMapDispatch.cpp 16 KB CPP 文件 2013/3/10 12:53:23 2018/9/13 20:40:25 2018/9/13 20:40:25 1
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 12:53:42 2018/9/13 20:40:25 2018/9/13 20:40:25 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-mapserver\LuaFunction_Map.cpp 198 KB CPP 文件 2013/3/10 12:53:47 2018/9/13 20:40:25 2018/9/13 20:40:25 15
1523 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1525 	KCheck(szName);
1527 	// 2010-11-2 对发送脚本邮件进行跨服支持
1528 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1529 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5491 	return 0;
5492 }
5494 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5495 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5496 {
5517 	LUA_RETURNERROR_1;
5518 }
5520 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5521 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5522 {
5564 	return 0;
5565 }
5567 // 跨服 6v6 战场场景注册函数
5568 int32 LuaFunction_MPVP6v6RegisterMap(Lua_State *L)
5569 {
5590 	LUA_RETURNERROR_1;
5591 }
5593 // 跨服 6v6 战场场景更新战场 UI 面板
5594 int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5595 {
5637 	return 0;
5638 }
5640 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5641 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5642 //{
5664 //}
5665 //
5666 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5667 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5668 //{
5734 //}
5735 //
5736 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5737 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5738 //{
5804 //}
5805 //
5806 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5807 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5808 //{
5838 //}
5839 //
5840 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
5841 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5842 //{
5885 //}
5886 //
5887 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
5888 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
5889 //{
5937 //}
5938 //
5939 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
5940 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
5941 //{
5982 //}
5983 //
5984 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
5985 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
5986 //{
6828 	return 0;
6829 }
6831 // 跨服战场场景注册函数
6832 int32 LuaFunction_MPVPRegisterMap(Lua_State *L)
6833 {
6923 	if(pMap)
6924 	{
6925 		// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
6926 		int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
6927 			(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-mapserver\LuaSystem_Function.cpp 118 KB CPP 文件 2013/3/10 12:53:54 2018/9/13 20:40:25 2018/9/13 20:40:25 10
1167 	m_LuaVM.RegisterFunction("AddBattleHonour", (void *) (LuaFunction_AddBattleHonour));							// 增加战功
1168 	m_LuaVM.RegisterFunction("SubBattleHonour", (void *) (LuaFunction_SubBattleHonour));							// 减少战功
1169 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));					// 跨服 2v2 战场注册场景 
1170 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));			// 跨服 2v2 战场名称显示
1171 	m_LuaVM.RegisterFunction("MPVP6v6RegisterScene", (void *) (LuaFunction_MPVP6v6RegisterMap));					// 跨服 6v6 战场注册场景
1172 	m_LuaVM.RegisterFunction("SetMPVP6v6BattleDisable", (void *) (LuaFunction_SetMPVP6v6BattleDisable));			// 跨服 6v6 战场名称显示
1173 	m_LuaVM.RegisterFunction("MPVPRegisterMap", (void *) (LuaFunction_MPVPRegisterMap));							// 跨服战场注册场景
1174 	m_LuaVM.RegisterFunction("CountryIsFortuneTimeEx", (void *) (LuaFunction_CountryIsFortuneTimeEx));				// 获取特定国家的国运是否进行
1175 	m_LuaVM.RegisterFunction("AddCountryResourceWithRecall", (void *) (LuaFunction_AddCountryResourceWithRecall));	// 比较并增加的修改资源,保证同步
1283 	m_LuaVM.RegisterFunction("IsLeague", (void*)(LuaFunction_IsLeague));											// 判断两国是否是弱国联盟
1284 	m_LuaVM.RegisterFunction("CountryLeagueZhaoji", (void*)(LuaFunction_CountryLeagueZhaoji));						// 发送联盟召集令
1285 	m_LuaVM.RegisterFunction("AskEnterMGuildBattleScene",(void*)(LuaFunction_AskEnterMGuildBattleScene)); 			// 请求进入跨服帮会战场
1286 	m_LuaVM.RegisterFunction("MGuildBattleSignup",(void*)(LuaFunction_MGuildBattleSignup)); 						// 跨服帮会战报名
1287 	m_LuaVM.RegisterFunction("MGuildBattleResult",(void*)(LuaFunction_MGuildBattleResult)); 						// 跨服帮会战结果
1288 	m_LuaVM.RegisterFunction("MGuildBattleSeasonWeek",(void*)(LuaFunction_MGuildBattleSeasonWeek)); 				// 跨服帮会战赛季当前周数
1289 	m_LuaVM.RegisterFunction("GetMGuildNumOfBattleCurSeason", (void*)(LuaFunction_GetMGuildNumOfBattleCurSeason));	// 获取跨服帮战当前赛季的场数
1290 	m_LuaVM.RegisterFunction("SetEquipPokerData",(void*)(LuaFunction_SetEquipPokerData));							// 设置装备扑克牌属性
1291 	m_LuaVM.RegisterFunction("SetEquipPokerCount",(void*)(LuaFunction_SetEquipPokerCount));							// 设置装备扑克牌个数

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-mapserver\MapCore.cpp 38 KB CPP 文件 2013/3/10 12:53:57 2018/9/13 20:40:25 2018/9/13 20:40:25 1
671 				m_bFirstInit = FALSE;
672 			}
673 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
674 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
675 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-mapserver\MapServer.cpp 33 KB CPP 文件 2013/3/10 12:53:59 2018/9/13 20:40:25 2018/9/13 20:40:25 1
578 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
579 	
580 	// 跨服战场管理器 2010-10-13 by rj
581 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
582 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-mapserver\MGuildBattle.cpp 28 KB CPP 文件 2013/3/10 12:53:54 2018/9/13 20:40:25 2018/9/13 20:40:25 3
1 /***********************************************************
2 desc:	跨服帮会战场实现
3 auth:	txp
4 date:	2011-6-10
122 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，
123 		// 为这个很少出现的异常进行处理。
124 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，
125 		// 如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
126 		if (FindSignup(pSignupPlayers[i].iWorldID, pSignupPlayers[i].GuildID))
427 		m_MatchList.m_aMatch[m_MatchList.m_nCount].m_bFinished = FALSE;
429 		int32 nLevelFlag=0, nDisLevel = s1.m_nSignupLevel - s2.m_nSignupLevel;
431 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
432 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
433 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-mapserver\MPVP2v2Battle.cpp 35 KB CPP 文件 2013/3/10 12:53:55 2018/9/13 20:40:25 2018/9/13 20:40:25 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
249 		{
250 			// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
251 			// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
252 			if (FindSignup(pSignupPlayers[i].uSNID))
253 			{
649 			nLevelFlag = 0;
650 		}
652 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
653 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
654 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-mapserver\MPVP6v6Battle.cpp 30 KB CPP 文件 2013/3/10 12:53:55 2018/9/13 20:40:25 2018/9/13 20:40:25 3
1 /***********************************************************
2 desc:	跨服 6v6 战场实现
3 auth:	txp
4 date:	2011-3-16
154 	{
155 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
156 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
157 		if (FindSignup(pSignupPlayers[i].uSNID))
158 		{
536 			nLevelFlag = 0;
537 		}
539 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
540 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
541 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 12:53:55 2018/9/13 20:40:25 2018/9/13 20:40:25 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
97 	__UNGUARD__ return FALSE;
98 }
100 // 以类型方式获得跨服战场类
101 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
102 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 12 KB CPP 文件 2013/3/10 12:54:17 2018/9/13 20:40:25 2018/9/13 20:40:25 1
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/10 23:01:26 2018/9/13 20:40:26 2018/9/13 20:40:26 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/10 23:01:27 2018/9/13 20:40:26 2018/9/13 20:40:26 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/10 23:01:27 2018/9/13 20:40:26 2018/9/13 20:40:26 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
200 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-share\Core\Setting.cpp 79 KB CPP 文件 2013/3/10 23:01:31 2018/9/13 20:40:26 2018/9/13 20:40:26 4
289 /*
290 =======================================================================================================================
291  加载跨服配置信息
292 =======================================================================================================================
293 */
303 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
304 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
306 	// 跨服战场最大场景数量配置 2010-9-23 by rj
307 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
308 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
309 	
310 	m_MultiGroupConfig.m_nMaxMGuildMapCnt = ini.Get_Property_Int("MGuild", "Max_SceneCount");
311 	KCheckEx(m_MultiGroupConfig.m_nMaxMGuildMapCnt>0 && m_MultiGroupConfig.m_nMaxMGuildMapCnt<=MGUILD_MAX_MAPCOUNT, "跨服帮战场景数量要小于512");
313 // 	m_MultiGroupConfig.m_nMGuildBeginWeek = ini.Get_Property_Int("MGuild", "BeginWeek");
314 // 	KCheckEx(m_MultiGroupConfig.m_nMGuildBeginWeek>0 && m_MultiGroupConfig.m_nMGuildBeginWeek<=52, "起始周只能在1-52之间");
328 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
329 		
330 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
332 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
334 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-share\DataBase\ArchiveInterface.cpp 280 KB CPP 文件 2013/3/10 23:01:32 2018/9/13 20:40:26 2018/9/13 20:40:26 1
9694 }
9696 /************************************************************************/
9697 /* 跨服战积分相关                                                       */
9698 /************************************************************************/
9700 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\MY_OB1\src\khan2-share\DataBase\SqlStatement.cpp 20 KB CPP 文件 2013/3/10 23:01:33 2018/9/13 20:40:26 2018/9/13 20:40:26 1
249 char	*g_LoadLostItemInfo = "select aid,playerguid,srcplayerguid,srcplayername,guid,world,server,itemclass,creator,dataproperty,data,termendtime,islock,unlocktime,gmoptime from %s where aid>%u order by aid asc" ;
250 char	*g_DelLostItemInfo = "delete from %s where aid=%u";
252 // 跨服战积分相关处理
253 char	*LoadMPVPPointInfo = "select unitid, unitname, world, currentpoint, totalpoint, currentwintimes, currentjointimes, totalwintimes, totaljointimes, mpvptypename, currentweek, startweek, params from %s where valid = 1";
254 char	*SaveMPVPPointInfo = "call proc_save_mpvppoint(%d,\'%s\', %d, %d, %d, %d, %d, %d, %d, \'%s\', %d, %d, %d, 1)";

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\PH\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 13 KB CPP 文件 2013/3/10 12:57:10 2018/9/13 20:40:35 2018/9/13 20:40:35 1
191 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
192 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
194 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
195 		if (pFindPlayer == NULL)
196 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\PH\src\khan2-glserver\XGBattleDispatch.cpp 81 KB CPP 文件 2013/3/10 12:57:26 2018/9/13 20:40:36 2018/9/13 20:40:36 12
2502 }
2504 /***********************************************************
2505 desc:	跨服战场 XG 服务器消息处理
2506 auth:	rj
2507 date:	2011-2-14
2515 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2516 	{
2517 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2518 		static IntegerHashMap mapMPVP2v2SignupRecord;
2519 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2521 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2522 		}
2524 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2525 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2526 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2543 		case MPVP_BATTLE_RETSTATE:
2544 			{
2545 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名
2546 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2547 				{
2577 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2578 				KCheck(pServePlayer_Target);
2580 				// 转发跨服战场进入通知到报名玩家所在 Map
2581 				GXMPVPBattle msg;
2582 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2686 					}
2687 				}
2689 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2690 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2691 				msg.SetSignupType(pKMessage->GetSignupType());
2700 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2701 				KCheck(pServePlayer_Target);
2703 				// 转发跨服战场状态到报名玩家所在 Map
2704 				GXMPVPBattle msg;
2705 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2718 				if (iServerID)
2719 				{
2720 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2721 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2722 					KCheck(pServePlayer_Target);
2741 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2742 				KCheck(pServePlayer_Target);
2744 				// 转发跨服战场进入响应到报名玩家所在 Map
2745 				GXMPVPBattle msg;
2746 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\PH\src\khan2-mapserver\ChangeMapDelegater.cpp 35 KB CPP 文件 2013/3/10 12:58:02 2018/9/13 20:40:36 2018/9/13 20:40:36 2
1216 		pPlayer->ClearMutexState(MS_Fuben);
1217 	}
1219 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1220 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1221 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\PH\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 12:57:48 2018/9/13 20:40:36 2018/9/13 20:40:36 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\PH\src\khan2-mapserver\CXItemDispatch.cpp 60 KB CPP 文件 2013/3/10 12:57:54 2018/9/13 20:40:36 2018/9/13 20:40:36 1
1956 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
1957 	{
1958 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
1959 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1960 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\PH\src\khan2-mapserver\GXBattleDispatch.cpp 52 KB CPP 文件 2013/3/10 12:58:12 2018/9/13 20:40:37 2018/9/13 20:40:37 6
1452 }
1454 /***********************************************************
1455 desc:	跨服战场 GX 服务器消息处理
1456 auth:	rj
1457 date:	2011-2-14
1474 			case MPVP_BATTLE_SIGNUP:
1475 				{
1476 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1478 					CMPVP2v2Battle *pMPVP2v2Battle = (CMPVP2v2Battle *)g_pMPVPBattleManager->GetMPVPBattleByType(MPVP_BATTLE_TYPE_2V2);
1479 					KCheck(pMPVP2v2Battle);
1524 						return MP_CONTINUE;
1525 					}
1527 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1528 					pMPVP2v2Battle->TellPlayerEnterMap(pKMessage->GetSNID(), pConnector);
1529 				}
1570 			case MPVP_BATTLE_RETSTATE:
1571 				{
1572 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1573 					pMap->GetLuaSystem()->RunScriptFunction
1574 						(
1586 			case MPVP_BATTLE_RES_ENTERSCENE:
1587 				{
1588 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1589 					pMap->GetLuaSystem()->RunScriptFunction
1590 						(
1617 }
1619 /***********************************************************
1620 desc:	跨服战场场景通知消息处理
1621 auth:	rj
1622 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\PH\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 26 KB CPP 文件 2013/3/10 12:58:14 2018/9/13 20:40:37 2018/9/13 20:40:37 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\PH\src\khan2-mapserver\GXMapDispatch.cpp 16 KB CPP 文件 2013/3/10 12:58:17 2018/9/13 20:40:37 2018/9/13 20:40:37 1
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\PH\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 12:58:34 2018/9/13 20:40:37 2018/9/13 20:40:37 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\PH\src\khan2-mapserver\LuaFunction_Map.cpp 182 KB CPP 文件 2013/3/10 12:58:39 2018/9/13 20:40:37 2018/9/13 20:40:37 11
1455 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1457 	KCheck(szName);
1459 	// 2010-11-2 对发送脚本邮件进行跨服支持
1460 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1461 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5360 	return 0;
5361 }
5363 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5364 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5365 {
5386 	LUA_RETURNERROR_1;
5387 }
5389 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5390 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5391 {
5433 	return 0;
5434 }
5436 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5437 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5438 //{
5460 //}
5461 //
5462 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5463 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5464 //{
5530 //}
5531 //
5532 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5533 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5534 //{
5600 //}
5601 //
5602 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5603 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5604 //{
5634 //}
5635 //
5636 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
5637 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5638 //{
5681 //}
5682 //
5683 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
5684 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
5685 //{
5733 //}
5734 //
5735 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
5736 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
5737 //{
5778 //}
5779 //
5780 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
5781 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
5782 //{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\PH\src\khan2-mapserver\LuaSystem_Function.cpp 105 KB CPP 文件 2013/3/10 12:58:45 2018/9/13 20:40:37 2018/9/13 20:40:37 1
891 	m_LuaVM.RegisterFunction("PVP2v2AskBattleSceneEnter", (void *) (LuaFunction_PVP2v2AskBattleMapEnter));
892 	m_LuaVM.RegisterFunction("SetPVP2v2BattleDisable", (void *) (LuaFunction_SetPVP2v2BattleDisable));
893 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));	// 跨服 2v2 战场扩充函数 by rj 2010-9-21 
894 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));
895 	m_LuaVM.RegisterFunction("PVP6v6RegisterScene", (void *) (LuaFunction_PVP6v6RegisterMap));

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\PH\src\khan2-mapserver\MapCore.cpp 36 KB CPP 文件 2013/3/10 12:58:47 2018/9/13 20:40:37 2018/9/13 20:40:37 1
635 				m_bFirstInit = FALSE;
636 			}
637 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
638 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
639 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\PH\src\khan2-mapserver\MapServer.cpp 31 KB CPP 文件 2013/3/10 12:58:50 2018/9/13 20:40:37 2018/9/13 20:40:37 1
550 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
551 	
552 	// 跨服战场管理器 2010-10-13 by rj
553 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
554 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\PH\src\khan2-mapserver\MPVP2v2Battle.cpp 29 KB CPP 文件 2013/3/10 12:58:46 2018/9/13 20:40:37 2018/9/13 20:40:37 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
124 	{
125 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
126 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
127 		if (FindSignup(pSignupPlayers[i].uSNID))
128 		{
470 			nLevelFlag = 0;
471 		}
473 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
474 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
475 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\PH\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 12:58:46 2018/9/13 20:40:37 2018/9/13 20:40:37 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
91 	__UNGUARD__ return FALSE;
92 }
94 // 以类型方式获得跨服战场类
95 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
96 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\PH\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 12 KB CPP 文件 2013/3/10 12:59:07 2018/9/13 20:40:38 2018/9/13 20:40:38 1
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\PH\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/10 23:28:16 2018/9/13 20:40:39 2018/9/13 20:40:39 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\PH\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/10 23:28:17 2018/9/13 20:40:39 2018/9/13 20:40:39 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\PH\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/10 23:28:17 2018/9/13 20:40:39 2018/9/13 20:40:39 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
200 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\PH\src\khan2-share\Core\Setting.cpp 73 KB CPP 文件 2013/3/10 23:28:20 2018/9/13 20:40:39 2018/9/13 20:40:39 3
286 /*
287 =======================================================================================================================
288  加载跨服配置信息
289 =======================================================================================================================
290 */
300 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
301 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
303 	// 跨服战场最大场景数量配置 2010-9-23 by rj
304 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
305 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
319 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
320 		
321 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
323 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
325 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\RU\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 13 KB CPP 文件 2013/3/10 13:01:48 2018/9/13 20:40:48 2018/9/13 20:40:48 1
191 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
192 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
194 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
195 		if (pFindPlayer == NULL)
196 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\RU\src\khan2-mapserver\ChangeMapDelegater.cpp 35 KB CPP 文件 2013/3/10 13:02:39 2018/9/13 20:40:48 2018/9/13 20:40:48 2
1216 		pPlayer->ClearMutexState(MS_Fuben);
1217 	}
1219 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1220 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1221 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\RU\src\khan2-mapserver\CXBattleDispatch.cpp 13 KB CPP 文件 2013/3/10 13:02:25 2018/9/13 20:40:49 2018/9/13 20:40:49 1
133 }
134 /***********************************************************
135 desc:	跨服 2v2 战场客户端请请求处理
136 auth:	crj
137 date:	2010-9-21

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\RU\src\khan2-mapserver\CXItemDispatch.cpp 60 KB CPP 文件 2013/3/10 13:02:30 2018/9/13 20:40:49 2018/9/13 20:40:49 1
1953 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
1954 	{
1955 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
1956 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1957 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\RU\src\khan2-mapserver\GXBattleDispatch.cpp 50 KB CPP 文件 2013/3/10 13:02:49 2018/9/13 20:40:49 2018/9/13 20:40:49 1
1448 }
1449 /***********************************************************
1450 desc:	跨服 2v2 战场场景通知消息处理
1451 auth:	crj
1452 date:	2010-9-23

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\RU\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 26 KB CPP 文件 2013/3/10 13:02:50 2018/9/13 20:40:49 2018/9/13 20:40:49 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				&&	pMap->GetMapType() != MAP_TYPE_MSIGNUP
229 				) 
277 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
278 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
279 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
280 				&&	pMap->GetMapType() != MAP_TYPE_MSIGNUP
281 				)

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\RU\src\khan2-mapserver\GXGuildDispatch.cpp 81 KB CPP 文件 2013/3/10 13:02:53 2018/9/13 20:40:49 2018/9/13 20:40:49 1
2765 	{
2766 		KCheck(KGetCurrentTID() == pMap->m_ThreadID);
2768 		// 2010-10-21 by rj 增加跨服报名场景可以接收到拉兽召唤
2769 		if(pMap->GetMapType() == MAP_TYPE_GAMELOGIC || pMap->GetMapType() == MAP_TYPE_MSIGNUP)
2770 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\RU\src\khan2-mapserver\GXMapDispatch.cpp 16 KB CPP 文件 2013/3/10 13:02:53 2018/9/13 20:40:49 2018/9/13 20:40:49 1
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\RU\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 13:03:10 2018/9/13 20:40:49 2018/9/13 20:40:49 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\RU\src\khan2-mapserver\LuaFunction_Map.cpp 184 KB CPP 文件 2013/3/10 13:03:15 2018/9/13 20:40:49 2018/9/13 20:40:49 14
1456 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1458 	KCheck(szName);
1460 	// 2010-11-2 对发送脚本邮件进行跨服支持
1461 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1462 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5359 	return 0;
5360 }
5363 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5364 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5365 {
5386 	LUA_RETURNERROR_1;
5387 }
5389 // 跨服 2v2 战场场景报名查询函数 by rj 2010-9-21
5390 int32 LuaFunction_MPVP2v2SignupState(Lua_State *L)
5391 {
5448 	return 0;
5449 }
5451 // 跨服 2v2 战场场景报名函数 by rj 2010-9-21
5452 int32 LuaFunction_MPVP2v2Signup(Lua_State *L)
5453 {
5510 	return 0;
5511 }
5513 // 跨服 2v2 战场场景查询是否报名函数 by rj 2010-9-25
5514 int32 LuaFunction_MPVP2v2IsSignup(Lua_State *L)
5515 {
5544 	return 0;
5545 }
5547 // 跨服 2v2 战场场景启用战场 UI 面板 by rj 2010-9-28
5548 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5549 {
5591 	return 0;
5592 }
5594 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5595 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5596 //{
5618 //}
5619 //
5620 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5621 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5622 //{
5688 //}
5689 //
5690 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5691 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5692 //{
5758 //}
5759 //
5760 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5761 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5762 //{
5792 //}
5793 //
5794 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
5795 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5796 //{
5839 //}
5840 //
5841 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
5842 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
5843 //{
5891 //}
5892 //
5893 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
5894 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
5895 //{
5936 //}
5937 //
5938 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
5939 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
5940 //{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\RU\src\khan2-mapserver\LuaSystem_Function.cpp 103 KB CPP 文件 2013/3/10 13:03:21 2018/9/13 20:40:50 2018/9/13 20:40:50 1
888 	m_LuaVM.RegisterFunction("PVP2v2AskBattleSceneEnter", (void *) (LuaFunction_PVP2v2AskBattleMapEnter));
889 	m_LuaVM.RegisterFunction("SetPVP2v2BattleDisable", (void *) (LuaFunction_SetPVP2v2BattleDisable));
890 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));	// 跨服 2v2 战场扩充函数 by rj 2010-9-21 
891 	m_LuaVM.RegisterFunction("MPVP2v2SignupState", (void *) (LuaFunction_MPVP2v2SignupState));
892 	m_LuaVM.RegisterFunction("MPVP2v2Signup", (void *) (LuaFunction_MPVP2v2Signup));

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\RU\src\khan2-mapserver\MapCore.cpp 36 KB CPP 文件 2013/3/10 13:03:23 2018/9/13 20:40:50 2018/9/13 20:40:50 1
634 				m_bFirstInit = FALSE;
635 			}
636 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
637 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD || pSceneData->m_Type == MAP_TYPE_MSIGNUP)
638 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\RU\src\khan2-mapserver\MapServer.cpp 30 KB CPP 文件 2013/3/10 13:03:25 2018/9/13 20:40:50 2018/9/13 20:40:50 1
537 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTopListCacheMgr...OK");
538 	
539 	// 跨服战场管理器 2010-10-13 by rj
540 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
541 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\RU\src\khan2-mapserver\MPVP2v2Battle.cpp 31 KB CPP 文件 2013/3/10 13:03:21 2018/9/13 20:40:50 2018/9/13 20:40:50 2
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
548 			nLevelFlag = 0;
549 		}
551 		// 报名场景必须在这个跨服战场服务器上
552 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[_Idx]);
553 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\RU\src\khan2-mapserver\MPVPBattleManager.cpp 7 KB CPP 文件 2013/3/10 13:03:22 2018/9/13 20:40:50 2018/9/13 20:40:50 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
95 	__UNGUARD__ return FALSE;
96 }
98 // 以类型方式获得跨服战场类
99 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVPBattleType nType)
100 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\RU\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 12 KB CPP 文件 2013/3/10 13:03:42 2018/9/13 20:40:50 2018/9/13 20:40:50 1
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\RU\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/11 9:22:54 2018/9/13 20:40:50 2018/9/13 20:40:50 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\RU\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/11 9:22:55 2018/9/13 20:40:50 2018/9/13 20:40:50 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\RU\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/11 9:22:55 2018/9/13 20:40:50 2018/9/13 20:40:50 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
200 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\RU\src\khan2-share\Core\Setting.cpp 72 KB CPP 文件 2013/3/11 9:22:58 2018/9/13 20:40:50 2018/9/13 20:40:50 3
286 /*
287 =======================================================================================================================
288  加载跨服配置信息
289 =======================================================================================================================
290 */
300 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
301 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
303 	// 跨服战场最大场景数量配置 2010-9-23 by rj
304 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
305 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
319 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
320 		
321 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
323 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
325 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 13 KB CPP 文件 2013/3/10 13:06:24 2018/9/13 20:40:59 2018/9/13 20:40:59 1
191 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
192 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
194 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
195 		if (pFindPlayer == NULL)
196 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR\src\khan2-glserver\XGBattleDispatch.cpp 81 KB CPP 文件 2013/3/10 13:06:40 2018/9/13 20:41:00 2018/9/13 20:41:00 12
2502 }
2504 /***********************************************************
2505 desc:	跨服战场 XG 服务器消息处理
2506 auth:	rj
2507 date:	2011-2-14
2515 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2516 	{
2517 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2518 		static IntegerHashMap mapMPVP2v2SignupRecord;
2519 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2521 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2522 		}
2524 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2525 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2526 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2543 		case MPVP_BATTLE_RETSTATE:
2544 			{
2545 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名
2546 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2547 				{
2577 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2578 				KCheck(pServePlayer_Target);
2580 				// 转发跨服战场进入通知到报名玩家所在 Map
2581 				GXMPVPBattle msg;
2582 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2686 					}
2687 				}
2689 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2690 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2691 				msg.SetSignupType(pKMessage->GetSignupType());
2700 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2701 				KCheck(pServePlayer_Target);
2703 				// 转发跨服战场状态到报名玩家所在 Map
2704 				GXMPVPBattle msg;
2705 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2718 				if (iServerID)
2719 				{
2720 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2721 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2722 					KCheck(pServePlayer_Target);
2741 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2742 				KCheck(pServePlayer_Target);
2744 				// 转发跨服战场进入响应到报名玩家所在 Map
2745 				GXMPVPBattle msg;
2746 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR\src\khan2-mapserver\ChangeMapDelegater.cpp 35 KB CPP 文件 2013/3/10 13:07:16 2018/9/13 20:41:00 2018/9/13 20:41:00 2
1234 		pPlayer->ClearMutexState(MS_Fuben);
1235 	}
1237 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1238 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1239 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 13:07:02 2018/9/13 20:41:00 2018/9/13 20:41:00 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR\src\khan2-mapserver\CXItemDispatch.cpp 60 KB CPP 文件 2013/3/10 13:07:08 2018/9/13 20:41:00 2018/9/13 20:41:00 1
1956 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
1957 	{
1958 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
1959 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1960 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR\src\khan2-mapserver\GXBattleDispatch.cpp 52 KB CPP 文件 2013/3/10 13:07:26 2018/9/13 20:41:01 2018/9/13 20:41:01 6
1452 }
1454 /***********************************************************
1455 desc:	跨服战场 GX 服务器消息处理
1456 auth:	rj
1457 date:	2011-2-14
1474 			case MPVP_BATTLE_SIGNUP:
1475 				{
1476 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1478 					CMPVP2v2Battle *pMPVP2v2Battle = (CMPVP2v2Battle *)g_pMPVPBattleManager->GetMPVPBattleByType(MPVP_BATTLE_TYPE_2V2);
1479 					KCheck(pMPVP2v2Battle);
1524 						return MP_CONTINUE;
1525 					}
1527 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1528 					pMPVP2v2Battle->TellPlayerEnterMap(pKMessage->GetSNID(), pConnector);
1529 				}
1570 			case MPVP_BATTLE_RETSTATE:
1571 				{
1572 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1573 					pMap->GetLuaSystem()->RunScriptFunction
1574 						(
1586 			case MPVP_BATTLE_RES_ENTERSCENE:
1587 				{
1588 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1589 					pMap->GetLuaSystem()->RunScriptFunction
1590 						(
1617 }
1619 /***********************************************************
1620 desc:	跨服战场场景通知消息处理
1621 auth:	rj
1622 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 26 KB CPP 文件 2013/3/10 13:07:28 2018/9/13 20:41:01 2018/9/13 20:41:01 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR\src\khan2-mapserver\GXMapDispatch.cpp 16 KB CPP 文件 2013/3/10 13:07:31 2018/9/13 20:41:01 2018/9/13 20:41:01 1
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 13:07:49 2018/9/13 20:41:01 2018/9/13 20:41:01 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR\src\khan2-mapserver\LuaFunction_Map.cpp 182 KB CPP 文件 2013/3/10 13:07:53 2018/9/13 20:41:01 2018/9/13 20:41:01 11
1455 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1457 	KCheck(szName);
1459 	// 2010-11-2 对发送脚本邮件进行跨服支持
1460 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1461 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5360 	return 0;
5361 }
5363 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5364 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5365 {
5386 	LUA_RETURNERROR_1;
5387 }
5389 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5390 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5391 {
5433 	return 0;
5434 }
5436 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5437 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5438 //{
5460 //}
5461 //
5462 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5463 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5464 //{
5530 //}
5531 //
5532 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5533 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5534 //{
5600 //}
5601 //
5602 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5603 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5604 //{
5634 //}
5635 //
5636 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
5637 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5638 //{
5681 //}
5682 //
5683 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
5684 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
5685 //{
5733 //}
5734 //
5735 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
5736 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
5737 //{
5778 //}
5779 //
5780 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
5781 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
5782 //{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR\src\khan2-mapserver\LuaSystem_Function.cpp 105 KB CPP 文件 2013/3/10 13:07:59 2018/9/13 20:41:01 2018/9/13 20:41:01 1
891 	m_LuaVM.RegisterFunction("PVP2v2AskBattleSceneEnter", (void *) (LuaFunction_PVP2v2AskBattleMapEnter));
892 	m_LuaVM.RegisterFunction("SetPVP2v2BattleDisable", (void *) (LuaFunction_SetPVP2v2BattleDisable));
893 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));	// 跨服 2v2 战场扩充函数 by rj 2010-9-21 
894 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));
895 	m_LuaVM.RegisterFunction("PVP6v6RegisterScene", (void *) (LuaFunction_PVP6v6RegisterMap));

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR\src\khan2-mapserver\MapCore.cpp 36 KB CPP 文件 2013/3/10 13:08:01 2018/9/13 20:41:01 2018/9/13 20:41:01 1
635 				m_bFirstInit = FALSE;
636 			}
637 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
638 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
639 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR\src\khan2-mapserver\MapServer.cpp 31 KB CPP 文件 2013/3/10 13:08:03 2018/9/13 20:41:01 2018/9/13 20:41:01 1
556 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
557 	
558 	// 跨服战场管理器 2010-10-13 by rj
559 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
560 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR\src\khan2-mapserver\MPVP2v2Battle.cpp 29 KB CPP 文件 2013/3/10 13:08:00 2018/9/13 20:41:01 2018/9/13 20:41:01 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
124 	{
125 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
126 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
127 		if (FindSignup(pSignupPlayers[i].uSNID))
128 		{
470 			nLevelFlag = 0;
471 		}
473 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
474 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
475 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 13:08:00 2018/9/13 20:41:01 2018/9/13 20:41:01 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
91 	__UNGUARD__ return FALSE;
92 }
94 // 以类型方式获得跨服战场类
95 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
96 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 12 KB CPP 文件 2013/3/10 13:08:20 2018/9/13 20:41:02 2018/9/13 20:41:02 1
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/11 9:26:25 2018/9/13 20:41:02 2018/9/13 20:41:02 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/11 9:26:25 2018/9/13 20:41:02 2018/9/13 20:41:02 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/11 9:26:26 2018/9/13 20:41:02 2018/9/13 20:41:02 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
200 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR\src\khan2-share\Core\Setting.cpp 72 KB CPP 文件 2013/3/11 9:26:29 2018/9/13 20:41:02 2018/9/13 20:41:02 3
286 /*
287 =======================================================================================================================
288  加载跨服配置信息
289 =======================================================================================================================
290 */
300 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
301 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
303 	// 跨服战场最大场景数量配置 2010-9-23 by rj
304 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
305 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
319 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
320 		
321 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
323 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
325 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-client\GameCommandSystem.cpp 59 KB CPP 文件 2013/3/10 13:09:14 2018/9/13 20:41:10 2018/9/13 20:41:10 1
1403 	{ GCD_ASK_JOIN_FUBEN_WITH_TEAM, "ASK_JOIN_FUBEN_WITH_TEAM" },
1404 	{ GCD_ASK_EXIT_ROOM, "ASK_EXIT_ROOM" },
1406 	//跨服副本报名搜索
1407 	{ GCD_UPDATE_FUBEN_SEARCH_STATE,"UPDATE_FUBEN_SEARCH_STATE" },
1409 	//军团信息更新

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-client\GameStateChangeServer.cpp 6 KB CPP 文件 2013/3/10 13:09:47 2018/9/13 20:41:10 2018/9/13 20:41:10 1
210 			::GetPrivateProfileString( "Debug", "Login.WorldID", "", szReadTemp, MAX_PATH, DEBUG_FILE_NAME );
211 			static ut_id s_nWorldID = atoi(szReadTemp); 
212 			GAME_DATA_PLAYER_PTR->SetWorldID(s_nWorldID); // 支持跨服自架测试
213 																			
214 		}

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-client\GameStateRun.cpp 89 KB CPP 文件 2013/3/10 13:09:49 2018/9/13 20:41:10 2018/9/13 20:41:10 2
650 	
651 	GAME_DATA_PTR->askCountryData();
654 	//跨服关卡的处理 
656 	//清除小地图上的军团信息
657 	GAME_DATA_RELATION_PTR->GetCorps()->ClearCorpsInfo();
669 	//请求军团数据
670 	GAME_DATA_QUEST_PTR->AskRoomBattleGroupData();
671 	/////跨服关卡的处理	
672 }
675 void CGameStateRun::IsMapLoaded( void )

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-client\UIMap.cpp 24 KB CPP 文件 2013/3/10 13:10:23 2018/9/13 20:41:11 2018/9/13 20:41:11 1
455 		case MAP_POINT_TRANSER_NPC:		szChildWinType = MAP_POINT_TYPE_TRANSER_NPC;	break;
456 		case MAP_POINT_MONSTER:			szChildWinType = MAP_POINT_TYPE_MONSTER;		break;
458 		// 跨服6v6的旗子
459 		case MAP_POINT_OneLevelFlag:			szChildWinType = MAP_POINT_TYPE_ONELEVELFLAG; break;
460 		case MAP_POINT_TwoLevelFlag:			szChildWinType = MAP_POINT_TYPE_TWOLEVELFLAG; break;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-client\UIPartyMessageBox.cpp 33 KB CPP 文件 2013/3/10 13:10:23 2018/9/13 20:41:11 2018/9/13 20:41:11 1
404 		}
405 		break;
407 	case MGUILD_BATTLE_TYPE: // 跨服帮会战
408 		{
409 			CXMPVPBattle msg;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-dbshare\MKLogicManager.cpp 111 KB CPP 文件 2013/3/10 13:10:59 2018/9/13 20:41:12 2018/9/13 20:41:12 2
235 			{
236 			ArchiveNodeLogic<PlayerMK>* pLogicNode = (ArchiveNodeLogic<PlayerMK>*)GetNode(_Idx);
238 			// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
239 			uint32 uMaxPoolSize = MAX_POOL_SIZE;
240 			if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
3649 }
3651 /************************************************************************/
3652 /* 跨服战积分相关                                                       */
3653 /************************************************************************/
3654 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-glserver\GL.cpp 43 KB CPP 文件 2013/3/10 13:11:07 2018/9/13 20:41:12 2018/9/13 20:41:12 5
422 	KCheck(g_pGuildBattleManager);
423 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildBattleManager...OK");
425 	//跨服帮战的管理器
426 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new MultiGuildBattleManager ... ");
427 	g_pMGuildBattleManager = new MGuildBattleManager;
505 	KCheck(g_pGuildCenter);
506 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildManager...OK");
508 	//跨服战积分管理器
509 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMPVPPointManager ... ");
510 	g_pMPVPPointManager = new MPVPPointManager;
691 	KCheck(g_pSystemParamsManager);
692 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new g_pSystemParamsManager...OK");
695 	// 跨服管理器
696 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMutiGroupMapServerManager ... ");
697 	g_pMutiGroupMapServerManager = new MutiGroupMapServerManager;
928 	KCheck(ret);
929 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager->Init()...OK");
932 	//跨服管理器
933 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[Init] g_pMutiGroupMapServerManager->Init()...OK");
934 	ret = g_pMutiGroupMapServerManager->Init();
1096 	KSafeDelete(g_pSystemParamsManager);
1097 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager delete...OK");
1099 	//跨服管理器
1100 	KSafeDelete(g_pMutiGroupMapServerManager);
1101 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pMutiGroupMapServerManager delete...OK");

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 14 KB CPP 文件 2013/3/10 13:11:16 2018/9/13 20:41:12 2018/9/13 20:41:12 1
223 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
224 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
226 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
227 		if (pFindPlayer == NULL)
228 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-glserver\MGuildBattleManager.cpp 14 KB CPP 文件 2013/3/10 13:11:19 2018/9/13 20:41:12 2018/9/13 20:41:12 8
94 	// 当前赛季进度
95 	int32 nSeasonWeek = (GET_TIME().GetWeekNumFrom2011() - g_Config.m_ConfigInfo.m_MPVPGuildBeginWeek) % g_Config.m_ConfigInfo.m_MPVPPointPeriodWeeks;
97 	// 取得跨服服务器
98 	int32 nServerNum = 0;
99 	ut_id serverIDs[SERVER_CAPACITY] = {-1};
145 	//	if (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / nServerNum <= 0)
146 	//		return serverIDs[0];
148 	//	// 2011-07-26 by rj 改进原来的等分算法，在所连跨服服务器数量等于 2 时用用 4/6 算法来解决高分帮会人数过多的问题
149 	//	int32 iSeg = iIndex / (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / (nServerNum <= 2 ? 2.5f : nServerNum) );
150 	//	if (iSeg >= nServerNum)
166 	if (uPrevSignupTime)
167 	{
168 		// 超时保护（防止报名完成后跨服服务器宕机导致 GL 无法清理报名）
169 		if (GET_TIME().GetCTime() - uPrevSignupTime > 90*60)
170 		{
258 	if(!pGuild || pGuild->GetGuildID() == INVALID_KHAN_ID)
259 		return FALSE;
261 	// 转发跨服战场进入通知到报名玩家所在 Map
262 	GXMPVPBattle msg;
263 	msg.SetBattleType(MPVP_GUILD_BATTLE_TYPE);
416 				aSignupPlayers[0].GuildPoint = pPoint->m_nCurrentPoint;
417 			}
419 			// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
420 			msg.SetSubType(MPVP_BATTLE_SIGNUP);
421 			msg.SetSignupType(pKMessage->GetSignupType());
470 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
471 				KCheck(pServePlayer_Target);
473 				// 转发跨服战场状态到报名玩家所在 Map
474 				GXMPVPBattle msg;
475 				msg.SetBattleType(pKMessage->GetBattleType());
501 				return MP_CONTINUE;
502 			}
504 			// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
505 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pMatch->nServerID);
506 			KCheck(pServePlayer_Target);
523 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
524 			KCheck(pServePlayer_Target);
526 			// 转发跨服战场进入响应到报名玩家所在 Map
527 			GXMPVPBattle msg;
528 			msg.SetBattleType(pKMessage->GetBattleType());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-glserver\MPVPGuildPoint.cpp 8 KB CPP 文件 2013/3/10 13:11:19 2018/9/13 20:41:12 2018/9/13 20:41:12 3
1 /************************************************************************/
2 /* 帮会跨服战积分信息接口的具体实现                                     */
3 /************************************************************************/
5 #include "stdafx.h"
195 /*
196 =======================================================================================================================
197 处理不同跨服战各自的额外参数填充
198 =======================================================================================================================
199 */
223 /*
224 =======================================================================================================================
225 加载跨服帮战每周的场次信息
226 =======================================================================================================================
227 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-glserver\MPVPPointArithmetic.cpp 2 KB CPP 文件 2013/3/10 13:11:20 2018/9/13 20:41:12 2018/9/13 20:41:12 3
1 /************************************************************************/
2 /* 跨服战积分算法器,负责各种跨服战积分的计算逻辑实现                    */
3 /************************************************************************/
5 #include "stdafx.h"
16 /*
17 ===============================================================================================================
18 根据实力来计算跨服帮会的加权分
19 帮会实力-(错过的场次*放弃损失的分数)
20 ===============================================================================================================

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-glserver\MPVPPointInfo.cpp 14 KB CPP 文件 2013/3/10 13:11:20 2018/9/13 20:41:12 2018/9/13 20:41:12 2
1 /************************************************************************/
2 /* 跨服战积分信息接口的具体实现                                         */
3 /************************************************************************/
5 #include "stdafx.h"
72 /*
73 =======================================================================================================================
74 获取跨服积分的数据信息
75 =======================================================================================================================
76 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-glserver\MPVPPointManager.cpp 11 KB CPP 文件 2013/3/10 13:11:20 2018/9/13 20:41:12 2018/9/13 20:41:12 5
1 /************************************************************************/
2 /* 跨服战积分管理器的实现                                               */
3 /************************************************************************/
5 #include "stdafx.h"
98 /*
99 ===============================================================================================================
100 注册跨服积分的实现
101 ===============================================================================================================
102 */
220 /*
221 ===============================================================================================================
222 获取指定类型跨服战全部积分信息
223 ===============================================================================================================
224 */
243 /*
244 ===============================================================================================================
245 获取指定跨服战当前的赛季开始周
246 ===============================================================================================================
247 */
266 /*
267 ===============================================================================================================
268 获取指定跨服战当前周
269 ===============================================================================================================
270 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-glserver\MPVPToplist.cpp 8 KB CPP 文件 2013/3/10 13:11:20 2018/9/13 20:41:12 2018/9/13 20:41:12 2
1 /************************************************************************/
2 /* 跨服帮会战排行榜的具体实现		                                    */
3 /************************************************************************/
5 #include "stdafx.h"
25 /*
26 =======================================================================================================================
27 积分数据加载,从跨服积分管理器中加载需要的信息
28 =======================================================================================================================
29 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-glserver\MutiGroupMapServerManager.cpp 16 KB CPP 文件 2013/3/10 13:11:22 2018/9/13 20:41:12 2018/9/13 20:41:12 1
4 Author:Michael		
5 Created:Michael
6 Description :跨服MapServer管理器实现
7 Revision :  2011/06/17 Michael create
9 =============================================================================*/

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-glserver\ServerConnectorManager_GL.cpp 11 KB CPP 文件 2013/3/10 13:11:27 2018/9/13 20:41:12 2018/9/13 20:41:12 2
516 			_NET_TRY
517 			{
518 				// 跨服帮战管理器心跳
519 				ret = g_pMGuildBattleManager->HeartBeat(uTime);
520 				KCheck(ret);
526 			_NET_TRY
527 			{
528 				//处理跨服战积分管理器相关的心跳
529 				ret = g_pMPVPPointManager->HeartBeat(uTime);		
530 				KCheck(ret);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-glserver\TopListManager.cpp 18 KB CPP 文件 2013/3/10 13:11:32 2018/9/13 20:41:12 2018/9/13 20:41:12 1
152 	Register(HONOR_CHARIOT_TOP_LIST_BK,			new TopList,					"Chariot_Honor_bk" );
153 	// add by dragon 战车排行榜 }
155 	// 跨服帮会战排行榜
156 	Register(MPVP_GUILD_CURRENT,			new CurrentMPVPGuildTopList,		"MPVP_Guild_Current" );
157 	Register(MPVP_GUILD_CURRENT_BK,			new TopList,				"MPVP_Guild_Current_bk" );

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-glserver\XGBattleDispatch.cpp 92 KB CPP 文件 2013/3/10 13:11:35 2018/9/13 20:41:12 2018/9/13 20:41:12 25
2507 }
2509 /***********************************************************
2510 desc:	跨服战场 XG 服务器消息处理
2511 auth:	rj
2512 date:	2011-2-14
2520 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2521 	{
2522 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2523 		static IntegerHashMap mapMPVP2v2SignupRecord;
2524 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2526 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2527 		}
2529 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2530 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2531 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2548 		case MPVP_BATTLE_RETSTATE:
2549 			{
2550 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名。值是当前报名的时间。
2551 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2552 				{
2582 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2583 				KCheck(pServePlayer_Target);
2585 				// 转发跨服战场进入通知到报名玩家所在 Map
2586 				GXMPVPBattle msg;
2587 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2613 				if (uPrevSignupTime)
2614 				{
2615 					// 6 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2616 					if (GET_TIME().GetCTime() - uPrevSignupTime > 360)
2617 					{
2719 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2720 				}
2722 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2723 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2724 				msg.SetSignupType(pKMessage->GetSignupType());
2733 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2734 				KCheck(pServePlayer_Target);
2736 				// 转发跨服战场状态到报名玩家所在 Map
2737 				GXMPVPBattle msg;
2738 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2751 				if (iServerID)
2752 				{
2753 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2754 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2755 					KCheck(pServePlayer_Target);
2774 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2775 				KCheck(pServePlayer_Target);
2777 				// 转发跨服战场进入响应到报名玩家所在 Map
2778 				GXMPVPBattle msg;
2779 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2790 	else if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_6V6)
2791 	{
2792 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2793 		static IntegerHashMap mapMPVP6v6SignupRecord;
2794 		if (mapMPVP6v6SignupRecord.GetMaxCount() == 0)
2796 			mapMPVP6v6SignupRecord.InitTable(MAX_WORLD_PLAYER);
2797 		}
2799 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2800 		static IntegerHashMap mapMPVP6v6EnterBattleRecord;
2801 		if (mapMPVP6v6EnterBattleRecord.GetMaxCount() == 0)
2818 		case MPVP_BATTLE_RETSTATE:
2819 			{
2820 				// 记录这次跨服 6v6 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 6v6 的报名。值是当前报名的时间。
2821 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2822 				{
2852 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2853 				KCheck(pServePlayer_Target);
2855 				// 转发跨服战场进入通知到报名玩家所在 Map
2856 				GXMPVPBattle msg;
2857 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
2883 				if (uPrevSignupTime)
2884 				{
2885 					// 11 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2886 					if (GET_TIME().GetCTime() - uPrevSignupTime > 660)
2887 					{
2989 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2990 				}
2992 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2993 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2994 				msg.SetSignupType(pKMessage->GetSignupType());
3003 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
3004 				KCheck(pServePlayer_Target);
3006 				// 转发跨服战场状态到报名玩家所在 Map
3007 				GXMPVPBattle msg;
3008 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
3021 				if (iServerID)
3022 				{
3023 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
3024 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
3025 					KCheck(pServePlayer_Target);
3044 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
3045 				KCheck(pServePlayer_Target);
3047 				// 转发跨服战场进入响应到报名玩家所在 Map
3048 				GXMPVPBattle msg;
3049 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-mapserver\Bus.cpp 65 KB CPP 文件 2013/3/10 13:11:55 2018/9/13 20:41:13 2018/9/13 20:41:13 3
803 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
804 		= CaculateMonsterExpRuler::eCALC_TYPE_TEAM;
806 	//如果是跨服副本
807 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
808 	{
808 	{
809 		nValidMemberCount = GetValidOwnerListGroup(MAX_GROUP_MEMBER,apValidMember);
810 		eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
811 	}
812 	else
1083 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1085 	if(Get_OccupantTeamID() != INVALID_KHAN_ID) iFadeoutType = Obj_ItemRuler::FADE_OUT_TEAM;
1087 	//是否是跨服
1088 	BOOL BGroup = FALSE;
1089 	Map* pMap = GetMap();

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-mapserver\ChangeMapDelegater.cpp 43 KB CPP 文件 2013/3/10 13:12:15 2018/9/13 20:41:13 2018/9/13 20:41:13 2
1515 		pPlayer->ClearMutexState(MS_Fuben);
1516 	}
1518 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1519 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1520 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 13:11:58 2018/9/13 20:41:13 2018/9/13 20:41:13 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-mapserver\CXItemDispatch.cpp 64 KB CPP 文件 2013/3/10 13:12:06 2018/9/13 20:41:13 2018/9/13 20:41:13 1
2043 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
2044 	{
2045 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
2046 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2047 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-mapserver\GMCommand.cpp 199 KB CPP 文件 2013/3/10 13:12:26 2018/9/13 20:41:13 2018/9/13 20:41:13 1
542 	REGISTER_HANDLER(addchariothonour);	// \gm addchariothonour =100	增加战车荣誉
543 	REGISTER_HANDLER(unlockhorse);		// \gm unlockhorse =objid =horseindex  强制解锁骑乘
544 	REGISTER_HANDLER(addguildwin);		// \gm addguildwin =num 增加跨服帮战胜利次数
546 	__UNGUARD__
547 }

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-mapserver\GMRoomBattleDispatch.cpp 5 KB CPP 文件 2013/3/10 13:12:27 2018/9/13 20:41:13 2018/9/13 20:41:13 1
53 	else
54 	{
55 		ut_id_map nBackSceneID = g_pFubenManager->GetServerBakSceneID();  //跨服处的副本入口场景
57 		ut_id_map nTarSceneId = pPacket->GetRoomBattle()->u_RoomBattleData.m_SceneID;
58 		

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-mapserver\GXBattleDispatch.cpp 55 KB CPP 文件 2013/3/10 13:12:27 2018/9/13 20:41:13 2018/9/13 20:41:13 6
1452 }
1454 /***********************************************************
1455 desc:	跨服战场 GX 服务器消息处理
1456 auth:	rj
1457 date:	2011-2-14
1474 			case MPVP_BATTLE_SIGNUP:
1475 				{
1476 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1478 					IMPVPBattle *pMPVPBattle = g_pMPVPBattleManager->GetMPVPBattleByType((MPVP_BATTLE_TYPE)pKMessage->GetBattleType());
1479 					//KCheck(pMPVPBattle);
1542 						return MP_CONTINUE;
1543 					}
1545 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1546 					pMPVPBattle->TellPlayerEnterMap(pKMessage, pConnector);
1547 				}
1588 			case MPVP_BATTLE_RETSTATE:
1589 				{
1590 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1591 					pMap->GetLuaSystem()->RunScriptFunction
1592 						(
1604 			case MPVP_BATTLE_RES_ENTERSCENE:
1605 				{
1606 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1607 					pMap->GetLuaSystem()->RunScriptFunction
1608 						(
1635 }
1637 /***********************************************************
1638 desc:	跨服战场场景通知消息处理
1639 auth:	rj
1640 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 28 KB CPP 文件 2013/3/10 13:12:29 2018/9/13 20:41:13 2018/9/13 20:41:13 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-mapserver\GXMapDispatch.cpp 19 KB CPP 文件 2013/3/10 13:12:32 2018/9/13 20:41:13 2018/9/13 20:41:13 2
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{
575 		return MP_CONTINUE;
576 	}
578 	//以下是跨服的副本的处理
580 	//给报名服务器返回创建成功消息			
581 	MGMRoomBattle* Msg = CREATE_MESSAGE_OBJ(MGMRoomBattle,MESSAGE_MGM_ROOMBATTLE);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 13:12:51 2018/9/13 20:41:14 2018/9/13 20:41:14 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-mapserver\LuaFunction_Chat.cpp 61 KB CPP 文件 2013/3/10 13:12:54 2018/9/13 20:41:14 2018/9/13 20:41:14 1
1086 		pMsg->SetCycleCount(nParam);
1087 	g_pServerConnectorMgr->SendMessage_SingleMode(pMsg);
1090 	//世界频道支持跨服
1091 	for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
1092 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-mapserver\LuaFunction_Map.cpp 203 KB CPP 文件 2013/3/10 13:12:56 2018/9/13 20:41:14 2018/9/13 20:41:14 16
256 	SelectMap.m_MapDataType = 0;
257 	SelectMap.m_CopyData = * pFD;
258 	SelectMap.m_CopyData.m_bRoom = false;//非跨服房间类型
260 	if (nRoomType == 1)
261 	{
1710 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1712 	KCheck(szName);
1714 	// 2010-11-2 对发送脚本邮件进行跨服支持
1715 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1716 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5678 	return 0;
5679 }
5681 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5682 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5683 {
5704 	LUA_RETURNERROR_1;
5705 }
5707 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5708 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5709 {
5751 	return 0;
5752 }
5754 // 跨服 6v6 战场场景注册函数
5755 int32 LuaFunction_MPVP6v6RegisterMap(Lua_State *L)
5756 {
5777 	LUA_RETURNERROR_1;
5778 }
5780 // 跨服 6v6 战场场景更新战场 UI 面板
5781 int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5782 {
5824 	return 0;
5825 }
5827 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5828 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5829 //{
5851 //}
5852 //
5853 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5854 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5855 //{
5921 //}
5922 //
5923 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5924 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5925 //{
5991 //}
5992 //
5993 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5994 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5995 //{
6025 //}
6026 //
6027 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
6028 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
6029 //{
6072 //}
6073 //
6074 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
6075 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
6076 //{
6124 //}
6125 //
6126 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
6127 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
6128 //{
6169 //}
6170 //
6171 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
6172 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
6173 //{
7015 	return 0;
7016 }
7018 // 跨服战场场景注册函数
7019 int32 LuaFunction_MPVPRegisterMap(Lua_State *L)
7020 {
7110 	if(pMap)
7111 	{
7112 		// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
7113 		int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
7114 			(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-mapserver\LuaSystem_Function.cpp 121 KB CPP 文件 2013/3/10 13:13:03 2018/9/13 20:41:14 2018/9/13 20:41:14 10
1171 	m_LuaVM.RegisterFunction("AddBattleHonour", (void *) (LuaFunction_AddBattleHonour));							// 增加战功
1172 	m_LuaVM.RegisterFunction("SubBattleHonour", (void *) (LuaFunction_SubBattleHonour));							// 减少战功
1173 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));					// 跨服 2v2 战场注册场景 
1174 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));			// 跨服 2v2 战场名称显示
1175 	m_LuaVM.RegisterFunction("MPVP6v6RegisterScene", (void *) (LuaFunction_MPVP6v6RegisterMap));					// 跨服 6v6 战场注册场景
1176 	m_LuaVM.RegisterFunction("SetMPVP6v6BattleDisable", (void *) (LuaFunction_SetMPVP6v6BattleDisable));			// 跨服 6v6 战场名称显示
1177 	m_LuaVM.RegisterFunction("MPVPRegisterMap", (void *) (LuaFunction_MPVPRegisterMap));							// 跨服战场注册场景
1178 	m_LuaVM.RegisterFunction("CountryIsFortuneTimeEx", (void *) (LuaFunction_CountryIsFortuneTimeEx));				// 获取特定国家的国运是否进行
1179 	m_LuaVM.RegisterFunction("AddCountryResourceWithRecall", (void *) (LuaFunction_AddCountryResourceWithRecall));	// 比较并增加的修改资源,保证同步
1291 	m_LuaVM.RegisterFunction("IsLeague", (void*)(LuaFunction_IsLeague));											// 判断两国是否是弱国联盟
1292 	m_LuaVM.RegisterFunction("CountryLeagueZhaoji", (void*)(LuaFunction_CountryLeagueZhaoji));						// 发送联盟召集令
1293 	m_LuaVM.RegisterFunction("AskEnterMGuildBattleScene",(void*)(LuaFunction_AskEnterMGuildBattleScene)); 			// 请求进入跨服帮会战场
1294 	m_LuaVM.RegisterFunction("MGuildBattleSignup",(void*)(LuaFunction_MGuildBattleSignup)); 						// 跨服帮会战报名
1295 	m_LuaVM.RegisterFunction("MGuildBattleResult",(void*)(LuaFunction_MGuildBattleResult)); 						// 跨服帮会战结果
1296 	m_LuaVM.RegisterFunction("MGuildBattleSeasonWeek",(void*)(LuaFunction_MGuildBattleSeasonWeek)); 				// 跨服帮会战赛季当前周数
1297 	m_LuaVM.RegisterFunction("GetMGuildNumOfBattleCurSeason", (void*)(LuaFunction_GetMGuildNumOfBattleCurSeason));	// 获取跨服帮战当前赛季的场数
1298 	m_LuaVM.RegisterFunction("SetEquipPokerData",(void*)(LuaFunction_SetEquipPokerData));							// 设置装备扑克牌属性
1299 	m_LuaVM.RegisterFunction("SetEquipPokerCount",(void*)(LuaFunction_SetEquipPokerCount));							// 设置装备扑克牌个数

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-mapserver\MapCore.cpp 38 KB CPP 文件 2013/3/10 13:13:06 2018/9/13 20:41:14 2018/9/13 20:41:14 2
614 				pSceneData->m_MapID == 20 ||
615 				pSceneData->m_MapID == 23 || 
616 				pSceneData->m_MapID == g_pFubenManager->GetServerBakSceneID())//  支持跨服副本
617 				
618 			{
673 				m_bFirstInit = FALSE;
674 			}
675 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
676 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
677 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-mapserver\MapManager.cpp 59 KB CPP 文件 2013/3/10 13:13:07 2018/9/13 20:41:14 2018/9/13 20:41:14 3
1698 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1699 		{
1700 			KCheck(FALSE);//跨服服务器上找不到报错
1701 		}
1703 		return INVALID_KHAN_ID;
1975 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1976 	{
1977 		//以下开始通知广播,支持跨服架构
1978 		for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
1979 		{
2007 BOOL FubenManager::BroadcastFubenSceneInfo(void)
2008 {
2009 	//如果不开跨服副本，不广播
2010 	if (g_Config.m_MultiGroupConfig.IsMultMapOpen() == FALSE)
2011 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-mapserver\MapServer.cpp 34 KB CPP 文件 2013/3/10 13:13:08 2018/9/13 20:41:14 2018/9/13 20:41:14 3
587 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
588 	
589 	// 跨服战场管理器 2010-10-13 by rj
590 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
591 	g_pMPVPBattleManager = new CMPVPBattleManager;
660 	if(pCurrentSData->m_EnableDBShare)
661 	{
662 		// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
663 		uint32 uMaxPoolSize = MAX_POOL_SIZE;
664 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
752 	{
753 		QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[Init] Begin g_pConnectorPool->Init() ... ");
755 		// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
756 		uint32 uMaxPoolSize = MAX_POOL_SIZE;
757 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-mapserver\MGuildBattle.cpp 28 KB CPP 文件 2013/3/10 13:13:03 2018/9/13 20:41:14 2018/9/13 20:41:14 3
1 /***********************************************************
2 desc:	跨服帮会战场实现
3 auth:	txp
4 date:	2011-6-10
122 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，
123 		// 为这个很少出现的异常进行处理。
124 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，
125 		// 如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
126 		if (FindSignup(pSignupPlayers[i].iWorldID, pSignupPlayers[i].GuildID))
427 		m_MatchList.m_aMatch[m_MatchList.m_nCount].m_bFinished = FALSE;
429 		int32 nLevelFlag=0, nDisLevel = s1.m_nSignupLevel - s2.m_nSignupLevel;
431 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
432 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
433 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-mapserver\Monster.cpp 65 KB CPP 文件 2013/3/10 13:13:10 2018/9/13 20:41:14 2018/9/13 20:41:14 5
640 		return 0;
641 	}
643 	//如果是跨服副本
644 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
645 	{
877 		return;
878 	}
880 	//跨服副本
881 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
882 	{
953 		nExp = (int32) (m_BaseExp * fExpParam);
954 	}
956 	uint32	auExp[MAX_GROUP_MEMBER];//  for 跨服军团
957 	int32	_Idx;
959 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
968 			if (pMap->m_FubenDataParty.IsRoomType())
969 			{
970 				eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
971 			}
972 		}
2096 		return 0;
2097 	}
2099 	//场景类型必须为跨服副本
2100 	Map* pMap = GetMap();
2101 	if (NULL == pMap)

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-mapserver\MPVP2v2Battle.cpp 35 KB CPP 文件 2013/3/10 13:13:04 2018/9/13 20:41:14 2018/9/13 20:41:14 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
249 		{
250 			// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
251 			// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
252 			if (FindSignup(pSignupPlayers[i].uSNID))
253 			{
649 			nLevelFlag = 0;
650 		}
652 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
653 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
654 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-mapserver\MPVP6v6Battle.cpp 30 KB CPP 文件 2013/3/10 13:13:04 2018/9/13 20:41:14 2018/9/13 20:41:14 3
1 /***********************************************************
2 desc:	跨服 6v6 战场实现
3 auth:	txp
4 date:	2011-3-16
154 	{
155 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
156 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
157 		if (FindSignup(pSignupPlayers[i].uSNID))
158 		{
536 			nLevelFlag = 0;
537 		}
539 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
540 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
541 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 13:13:04 2018/9/13 20:41:14 2018/9/13 20:41:14 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
97 	__UNGUARD__ return FALSE;
98 }
100 // 以类型方式获得跨服战场类
101 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
102 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 20 KB CPP 文件 2013/3/10 13:13:26 2018/9/13 20:41:14 2018/9/13 20:41:14 4
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());
280 	if(g_Config.m_MultiGroupConfig.IsSignUpServer())
281 	{
282 		//只要一组服务器连接正常,跨服房间管理器的心跳仍然执行 
283 		if (GetGLServerActiveCount() > 0)
284 		{
588 				{
589 					AddGroupTmp( connID, g_Config.m_MultiGroupConfig.m_GLServerInfo[i].m_WorldID );
591 					//2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，
592 					//当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
593 					SSHandShake msg;
664 	if(FALSE == IsGLServerActiveTmp())//处理断线重连
665 	{
666 		//跨服重连机制
667 		if (FALSE == m_ConnectTimer.IsSetTimer())
668 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-mapserver\SignUpMgr.cpp 83 KB CPP 文件 2013/3/10 13:13:27 2018/9/13 20:41:14 2018/9/13 20:41:14 1
4 Author:shangy		
5 Created:shangy    
6 Description :跨服报名管理类
7 Revision :  2011/06/20 shangy create
8 			2011/08/05 Michael Lin Modify

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/11 9:31:08 2018/9/13 20:41:15 2018/9/13 20:41:15 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/11 9:31:09 2018/9/13 20:41:15 2018/9/13 20:41:15 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/11 9:31:10 2018/9/13 20:41:15 2018/9/13 20:41:15 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
200 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-share\Core\Setting.cpp 80 KB CPP 文件 2013/3/11 9:31:16 2018/9/13 20:41:15 2018/9/13 20:41:15 6
290 /*
291 =======================================================================================================================
292  加载跨服配置信息
293 =======================================================================================================================
294 */
304 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
305 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
307 	// 跨服战场最大场景数量配置 2010-9-23 by rj
308 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
309 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
310 	
311 	m_MultiGroupConfig.m_nMaxMGuildMapCnt = ini.Get_Property_Int("MGuild", "Max_SceneCount");
312 	KCheckEx(m_MultiGroupConfig.m_nMaxMGuildMapCnt>0 && m_MultiGroupConfig.m_nMaxMGuildMapCnt<=MGUILD_MAX_MAPCOUNT, "跨服帮战场景数量要小于512");
314 // 	m_MultiGroupConfig.m_nMGuildBeginWeek = ini.Get_Property_Int("MGuild", "BeginWeek");
315 // 	KCheckEx(m_MultiGroupConfig.m_nMGuildBeginWeek>0 && m_MultiGroupConfig.m_nMGuildBeginWeek<=52, "起始周只能在1-52之间");
329 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
330 		
331 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
333 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
335 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);
392 		}		
393 	}
395 	//跨服关卡报名服务器开关 
396 	m_MultiGroupConfig.m_SignUpServerToggle = ini.Get_Property_Int( "Room", "SignUpServerToggle" );
397 	m_MultiGroupConfig.m_MapFubenToogle = ini.Get_Property_Int( "Room", "MapFubenToogle" );
1054 	m_ConfigInfo.m_nEmpireOfficerMinLevel = ini.Get_Property_Int("Empire","OfficerMinLevel");
1055 	//[Empire] End
1057 	//added for跨服军团  
1058 	for (int32 _nGIndex = 0; _nGIndex < MAX_GROUP_MEMBER; ++_nGIndex)
1059 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-share\DataBase\ArchiveInterface.cpp 296 KB CPP 文件 2013/3/11 9:31:19 2018/9/13 20:41:15 2018/9/13 20:41:15 1
9802 }
9804 /************************************************************************/
9805 /* 跨服战积分相关                                                       */
9806 /************************************************************************/
9808 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-share\DataBase\SqlStatement.cpp 21 KB CPP 文件 2013/3/11 9:31:22 2018/9/13 20:41:15 2018/9/13 20:41:15 1
251 char	*g_LoadLostItemInfo = "select aid,playerguid,srcplayerguid,srcplayername,guid,world,server,itemclass,creator,dataproperty,data,termendtime,islock,unlocktime,gmoptime from %s where aid>%u order by aid asc" ;
252 char	*g_DelLostItemInfo = "delete from %s where aid=%u";
254 // 跨服战积分相关处理
255 char	*LoadMPVPPointInfo = "select unitid, unitname, world, currentpoint, totalpoint, currentwintimes, currentjointimes, totalwintimes, totaljointimes, mpvptypename, currentweek, startweek, params from %s where valid = 1";
256 char	*SaveMPVPPointInfo = "call proc_save_mpvppoint(%d,\'%s\', %d, %d, %d, %d, %d, %d, %d, \'%s\', %d, %d, %d, 1)";

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-share\Messages\StructRoomBattle.cpp 68 KB CPP 文件 2013/3/11 9:34:53 2018/9/13 20:41:18 2018/9/13 20:41:18 19
4 Author:Michael		
5 Created:Michael    
6 Description :跨服房间相关结构
7 Revision :  2011/06/21 Michael create
9 =============================================================================*/
790 }
793 /************************************************************************/
794 /* 跨服报名候选数据结构定义  		                                    */
795 /************************************************************************/
796 BOOL RoomBattleSignupInfo::IsRoomIDInList(ut_id_room nRoomID) const
930 }
931 /************************************************************************/
932 /* 跨服报名候选数据结构定义 客户端消息结构                              */
933 /************************************************************************/
934 void RoomBattleSignupInfo_CX_Msg::Clear()
971 }
973 /************************************************************************/
974 /* 跨服取消报名结构定义   客户端消息结构	                           */
975 /************************************************************************/
976 void RoomBattleSignupCancel_CX_Msg::Clear()
1001 }
1003 /************************************************************************/
1004 /* 跨服确认进入结构定义    客户端消息结构	                           */
1005 /************************************************************************/
1006 void RoomBattleWaitingEnter_CX_Msg::Clear()
1108 }
1110 /************************************************************************/
1111 /* 跨服玩家确认结构定义    服务器消息结构	                           */
1112 /************************************************************************/
1113 void RoomBattlePlayerEnter_XC_Msg::Clear()
1147 }
1149 /************************************************************************/
1150 /* 跨服军团成员离开    服务器消息结构	                                */
1151 /************************************************************************/
1152 void RoomBattlePlayerLeave_XC_Msg::Clear()
1206 }
1209 /************************************************************************/
1210 /* 跨服确认进入结构定义    服务器消息结构	                           */
1211 /************************************************************************/
1212 void RoomBattleWaitingEnter_XC_Msg::Clear()
1580 }
1581 /************************************************************************/
1582 /* 跨服MapServer信息                  		                            */
1583 /************************************************************************/
1584 bool SMutiGroupMapServerInfo::IsValid( void ) const
1701 }
1703 /************************************************************************/
1704 /* 跨服关卡消息结构定义 MGP-->GL               		                    */
1705 /************************************************************************/
1706 uint32 MsgMGRoomBattle::GetMsgSize() const
1778 }
1780 /************************************************************************/
1781 /* 跨服关卡消息结构定义 GL-->MGP               		                    */
1782 /************************************************************************/
1783 uint32 MsgGMRoomBattle::GetMsgSize() const
1870 }
1871 /************************************************************************/
1872 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消            */
1873 /************************************************************************/
1874 uint32 MsgXGMRoomBattle_ReplyEnter::GetMsgSize()const
1907 }
1909 /************************************************************************/
1910 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消广播            */
1911 /************************************************************************/
1912 uint32 MsgXGMRoomBattle_ReplyEnter_BROADCAST::GetMsgSize()const
1945 }
1947 /************************************************************************/
1948 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  客户端确认离开，重新返回报名状态 */
1949 /************************************************************************/
1950 uint32 MsgXGMRoomBattle_Leave::GetMsgSize()const
1983 }
1985 /************************************************************************/
1986 /* 跨服关卡消息结构定义 MGP-->GL-->MGP        		                    */
1987 /************************************************************************/
1988 uint32 MsgMGMRoomBattle::GetMsgSize() const
2042 }
2044 /************************************************************************/
2045 /* 跨服关卡消息结构定义 MAP-->GL-->MGP        		                    */
2046 /************************************************************************/
2047 uint32 MsgXGMRoomBattle::GetMsgSize() const
2161 }
2163 /************************************************************************/
2164 /* 跨服关卡消息结构定义 MGP-->GL-->MAP        		                    */
2165 /************************************************************************/
2166 uint32 MsgMGXRoomBattle::GetMsgSize() const
2277 }
2279 /************************************************************************/
2280 /* 跨服关卡消息结构定义 Client-->MAP        		                    */
2281 /************************************************************************/
2282 uint32 MsgCXRoomBattle::GetMsgSize() const
2372 }
2374 /************************************************************************/
2375 /* 跨服关卡消息结构定义 MAP-->Client        		                    */
2376 /************************************************************************/
2377 uint32 MsgXCRoomBattle::GetMsgSize() const

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-share\TAB\TabDefine_Map_Misc.cpp 85 KB CPP 文件 2013/3/11 9:39:47 2018/9/13 20:41:21 2018/9/13 20:41:21 2
2376 /*
2377 =======================================================================================================================
2378 跨服关卡 逻辑数据表
2379 =======================================================================================================================
2380 */
2432 /*
2433 =======================================================================================================================
2434 跨服关卡 配置数据表
2435 =======================================================================================================================
2436 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TR_OB\src\khan2-share\TAB\TabDefine_Share.cpp 37 KB CPP 文件 2013/3/11 9:39:50 2018/9/13 20:41:21 2018/9/13 20:41:21 2
998 {
999 	__GUARD__
1001 	//如果不开跨服副本，默认不读BackScene
1002 	if (!g_Config.m_MultiGroupConfig.IsMultMapOpen())
1003 	{
1054 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0) 
1055 	{
1056 		//如果是跨服MapServer确保BackScene有配置
1057 		KCheckEx(bFindCurrServerBackScene,"BakSceneInfo.tab表配置错误");
1058 	}

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW\Share\Connector\ConnectorManager.cpp 14 KB CPP 文件 2013/3/10 13:15:04 2018/9/13 20:42:24 2018/9/13 20:42:24 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ConnectorID_t pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW\Share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/10 13:15:05 2018/9/13 20:42:24 2018/9/13 20:42:24 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ConnectorID_t ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW\Share\Core\Setting.cpp 67 KB CPP 文件 2013/3/10 13:15:08 2018/9/13 20:42:24 2018/9/13 20:42:24 1
280 /*
281 =======================================================================================================================
282  加载跨服配置信息
283 =======================================================================================================================
284 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\Client\Game\Network\Message\XCMPVP2v2BattleDispatch.cpp 2 KB CPP 文件 2013/3/11 13:28:31 2018/9/13 20:42:57 2018/9/13 20:42:57 1
1 /***********************************************************
2 desc:	跨服 2v2 战场服务器相应处理
3 auth:	crj
4 date:	2010-9-21

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\Client\Game\ScriptFunction\GameScriptFunction.cpp 242 KB CPP 文件 2013/3/11 10:22:39 2018/9/13 20:42:58 2018/9/13 20:42:58 1
8115 			return 0;
8116 	}
8118 	/* 跨服战场 2010-9-23 by rj */
8119 	if(MPVP2V2_BATTLE_TYPE == nIndex || MPVP6V6_BATTLE_TYPE == nIndex)
8120 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\Client\Game\ScriptFunction\GameScriptFunctionAroundPlayer.cpp 11 KB CPP 文件 2013/3/11 10:22:41 2018/9/13 20:42:58 2018/9/13 20:42:58 1
96 		if(propertyName == "Name")
97 		{
98 			// 2010-10-18 by rj 对组队对话框中的附近玩家，如果聊天者与自身不在一个服（跨服战场）则将这个用户显示名加入其服的名字
99 			if (OBJECT_MANAGER_PTR->GetMySelf() &&
100 			    OBJECT_MANAGER_PTR->GetMySelf()->GetCharacterData()->Get_WorldID() != pData->Get_WorldID())

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\Client\Game\ScriptFunction\GameScriptFunctionTalk.cpp 269 KB CPP 文件 2013/3/11 10:23:11 2018/9/13 20:42:58 2018/9/13 20:42:58 3
5469 			KYLIN_TRY std::vector<STRING>	strParam;
5470 			strParam.push_back(ChannelType2String((eCHAT_TYPE) reN.getChannelType()));
5472 			// 2010-10-18 by rj 如果聊天者与自身不在一个服（跨服战场）则将这个用户显示名加入其服的名字。增加附近聊天限制，否则可能会出现小喇叭显示异服的问题。
5473 			if (chatType == CHAT_TYPE_NEAR && 
5474 				pPacket->GetWorldID() != INVALID_ID &&
7308 void CScriptFunTalk::SetPaoPaoTxt(STRING &strUser, STRING &strTxt, int32 strType, int32 extLength, ID_t nWorldID)
7309 {
7310 	// 2010-10-26 by rj 对跨服聊天泡泡显示不同服的同名玩家进行支持
7311 	KCharacter	*pObj = OBJECT_MANAGER_PTR->FindCharacterByName(strUser, CHARACTER_PLAYER_TYPE, nWorldID);
7312 	if(pObj && pObj->GetTitleBoard()->isShow())
7322 void CScriptFunTalk::SetPaoPaoMoodAnim(STRING &strUser, STRING &strTxt, ID_t nWorldID)
7323 {
7324 	// 2010-10-26 by rj 对跨服聊天泡泡显示不同服的同名玩家进行支持
7325 	KCharacter	*pObj = OBJECT_MANAGER_PTR->FindCharacterByName(strUser, CHARACTER_PLAYER_TYPE, nWorldID);
7326 	if(!pObj || !(pObj->GetTitleBoard()->isShow()))

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\Client\Game\UI\UIPartyMessageBox.cpp 29 KB CPP 文件 2013/3/11 10:23:41 2018/9/13 20:42:58 2018/9/13 20:42:58 2
269 		}
270 		break;
271 	case MPVP2V2_BATTLE_TYPE: 	// 发送进入跨服 2v2 竞技场请求 2010-9-23 by rj
272 		{
273 			CXMPVP2v2Battle	msg;
549 			}
550 			break;
551 		case MPVP2V2_BATTLE_TYPE: // 2010-9-23 by rj 跨服 2v2 战场处理
552 			{
553 				CEGUI::String	strUtf32;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\DBShare\DBShare\Run\ServerConnectorManager_DBShare.cpp 6 KB CPP 文件 2013/3/11 10:24:25 2018/9/13 20:42:58 2018/9/13 20:42:58 1
261 		for( int32 i=0; i<g_Config.m_MultiGroupConfig.m_nGroupCount; i++ )
262 		{
263 			// 2010-9-27 使用跨服方式获取连接实例，跳过 IsEmpty 判定
264 			ServerConnector* pConnector = (ServerConnector*)GetConnectorForGroupMode(i);
265 			KCheck(pConnector);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\GLServer\GL\Messages\LWRequestPlayerLoginDispatch.cpp 13 KB CPP 文件 2013/3/11 10:25:47 2018/9/13 20:42:59 2018/9/13 20:42:59 1
191 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
192 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
194 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
195 		if (pFindPlayer == NULL)
196 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\MapServer\Server\Connector\ServerConnectorManager_MapServer.cpp 12 KB CPP 文件 2013/3/11 10:27:48 2018/9/13 20:43:00 2018/9/13 20:43:00 2
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());
479 		for (int32 i = 0; i < g_Config.m_MultiGroupConfig.m_nGroupCount; ++i)
480 		{
481 			// 使用跨服方式获取连接实例，跳过 IsEmpty 判定
482 			ServerConnector *pConnector = (ServerConnector *)GetConnectorForGroupMode(i);
483 			KCheck(pConnector);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\MapServer\Server\Map\MapCore.cpp 36 KB CPP 文件 2013/3/11 10:29:08 2018/9/13 20:43:00 2018/9/13 20:43:00 1
630 				m_bFirstInit = FALSE;
631 			}
632 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
633 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD || pSceneData->m_Type == MAP_TYPE_MSIGNUP)
634 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\MapServer\Server\Messages\CXMPVP2v2BattleDispatch.cpp 4 KB CPP 文件 2013/3/11 10:30:04 2018/9/13 20:43:01 2018/9/13 20:43:01 1
1 /***********************************************************
2 desc:	跨服 2v2 战场客户端请请求处理
3 auth:	crj
4 date:	2010-9-21

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\MapServer\Server\Messages\CXUseItemDispatch.cpp 8 KB CPP 文件 2013/3/11 10:31:05 2018/9/13 20:43:01 2018/9/13 20:43:01 1
117 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
118 	{
119 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
120 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
121 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\MapServer\Server\Messages\GXRequestGuildConvoyDispatch.cpp 4 KB CPP 文件 2013/3/11 10:31:36 2018/9/13 20:43:01 2018/9/13 20:43:01 1
77 	{
78 		KCheck(KGetCurrentTID() == pMap->m_ThreadID);
80 		// 2010-10-21 by rj 增加跨服报名场景可以接收到拉兽召唤
81 		if(pMap->GetMapType() == MAP_TYPE_GAMELOGIC || pMap->GetMapType() == MAP_TYPE_MSIGNUP)
82 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\MapServer\Server\Messages\GXRetChangeSceneDispatch.cpp 5 KB CPP 文件 2013/3/11 10:31:39 2018/9/13 20:43:01 2018/9/13 20:43:01 1
106 				KCheck(pMapData);
108 				ID_t ServerID = pMapData->m_ServerID;
110 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
111 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
112 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\MapServer\Server\Messages\XXMPVP2v2BattleDispatch.cpp 5 KB CPP 文件 2013/3/11 10:31:57 2018/9/13 20:43:02 2018/9/13 20:43:02 1
1 /***********************************************************
2 desc:	跨服 2v2 战场场景通知消息处理
3 auth:	crj
4 date:	2010-9-23

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\MapServer\Server\Messages\Delegater\ChangeMapDelegater.cpp 35 KB CPP 文件 2013/3/11 13:29:06 2018/9/13 20:43:01 2018/9/13 20:43:01 2
1215 		pPlayer->ClearMutexState(MS_Fuben);
1216 	}
1218 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1219 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1220 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\MapServer\Server\Messages\Delegater\GXCountryDispatchDelegater.cpp 24 KB CPP 文件 2013/3/11 13:29:07 2018/9/13 20:43:01 2018/9/13 20:43:01 2
224 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
225 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
226 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
227 				&&	pMap->GetMapType() != MAP_TYPE_MSIGNUP
228 				) 
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				&&	pMap->GetMapType() != MAP_TYPE_MSIGNUP
280 				)

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\MapServer\Server\Other\MPVP2v2Battle.cpp 31 KB CPP 文件 2013/3/11 10:32:50 2018/9/13 20:43:02 2018/9/13 20:43:02 2
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
548 			nLevelFlag = 0;
549 		}
551 		// 报名场景必须在这个跨服战场服务器上
552 		Map	*pMap = g_pMapManager->GetMap((MapID_t)m_SceneList.m_aScene[i]);
553 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\MapServer\Server\Other\MPVPBattleManager.cpp 7 KB CPP 文件 2013/3/11 10:32:50 2018/9/13 20:43:02 2018/9/13 20:43:02 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
95 	__UNGUARD__ return FALSE;
96 }
98 // 以类型方式获得跨服战场类
99 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVPBattleType nType)
100 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\MapServer\Server\Run\DaemonThread.cpp 8 KB CPP 文件 2013/3/11 10:33:05 2018/9/13 20:43:02 2018/9/13 20:43:02 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\MapServer\Server\Run\Server.cpp 30 KB CPP 文件 2013/3/11 10:33:07 2018/9/13 20:43:02 2018/9/13 20:43:02 1
543 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTopListCacheMgr...OK");
544 	
545 	// 跨服战场管理器 2010-10-13 by rj
546 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
547 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\MapServer\Server\Script\LuaFunction_Scene.cpp 184 KB CPP 文件 2013/3/11 10:33:37 2018/9/13 20:43:03 2018/9/13 20:43:03 14
1456 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1458 	KCheck(szName);
1460 	// 2010-11-2 对发送脚本邮件进行跨服支持
1461 	ObjID_t selfId = Lua_ValueToNumber(L, 7);
1462 	BEGPLAYERDEFINE("LuaFunction_SendScriptMail");
5359 	return 0;
5360 }
5363 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5364 int32 LuaFunction_MPVP2v2RegisterScene(Lua_State *L)
5365 {
5386 	LUA_RETURNERROR_1;
5387 }
5389 // 跨服 2v2 战场场景报名查询函数 by rj 2010-9-21
5390 int32 LuaFunction_MPVP2v2SignupState(Lua_State *L)
5391 {
5448 	return 0;
5449 }
5451 // 跨服 2v2 战场场景报名函数 by rj 2010-9-21
5452 int32 LuaFunction_MPVP2v2Signup(Lua_State *L)
5453 {
5510 	return 0;
5511 }
5513 // 跨服 2v2 战场场景查询是否报名函数 by rj 2010-9-25
5514 int32 LuaFunction_MPVP2v2IsSignup(Lua_State *L)
5515 {
5544 	return 0;
5545 }
5547 // 跨服 2v2 战场场景启用战场 UI 面板 by rj 2010-9-28
5548 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5549 {
5591 	return 0;
5592 }
5594 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5595 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5596 //{
5618 //}
5619 //
5620 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5621 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5622 //{
5688 //}
5689 //
5690 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5691 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5692 //{
5758 //}
5759 //
5760 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5761 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5762 //{
5792 //}
5793 //
5794 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
5795 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5796 //{
5839 //}
5840 //
5841 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
5842 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
5843 //{
5891 //}
5892 //
5893 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
5894 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
5895 //{
5936 //}
5937 //
5938 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
5939 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
5940 //{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\MapServer\Server\Script\LuaSystem_Function.cpp 101 KB CPP 文件 2013/3/11 10:33:47 2018/9/13 20:43:03 2018/9/13 20:43:03 1
888 	m_LuaVM.RegisterFunction("PVP2v2AskBattleSceneEnter", (void *) (LuaFunction_PVP2v2AskBattleSceneEnter));
889 	m_LuaVM.RegisterFunction("SetPVP2v2BattleDisable", (void *) (LuaFunction_SetPVP2v2BattleDisable));
890 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterScene));	// 跨服 2v2 战场扩充函数 by rj 2010-9-21 
891 	m_LuaVM.RegisterFunction("MPVP2v2SignupState", (void *) (LuaFunction_MPVP2v2SignupState));
892 	m_LuaVM.RegisterFunction("MPVP2v2Signup", (void *) (LuaFunction_MPVP2v2Signup));

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\Share\Connector\ConnectorManager.cpp 14 KB CPP 文件 2013/3/10 13:20:06 2018/9/13 20:43:03 2018/9/13 20:43:03 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ConnectorID_t pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\Share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/10 13:20:06 2018/9/13 20:43:03 2018/9/13 20:43:03 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ConnectorID_t ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\Share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/10 13:20:07 2018/9/13 20:43:03 2018/9/13 20:43:03 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ID_t serverid,ConnectorID_t& connID)
200 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB1\Share\Core\Setting.cpp 70 KB CPP 文件 2013/3/10 13:20:10 2018/9/13 20:43:03 2018/9/13 20:43:03 3
279 /*
280 =======================================================================================================================
281  加载跨服配置信息
282 =======================================================================================================================
283 */
288 	Configer	ini(FILE_MULTIGROUPCONFIG);
290 	m_MultiGroupConfig.m_nGroupCount = ini.Get_Property_Int( "System", "GroupCount" );
292 	// 跨服战场最大场景数量配置 2010-9-23 by rj
293 	m_MultiGroupConfig.m_nMax2v2SceneCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
294 	m_MultiGroupConfig.m_nMax6v6SceneCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
308 		m_MultiGroupConfig.m_GLServerInfo[i].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
309 		
310 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
312 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
314 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB3\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 13 KB CPP 文件 2013/3/10 13:25:41 2018/9/13 20:43:12 2018/9/13 20:43:12 1
191 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
192 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
194 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
195 		if (pFindPlayer == NULL)
196 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB3\src\khan2-glserver\XGBattleDispatch.cpp 81 KB CPP 文件 2013/3/10 13:25:57 2018/9/13 20:43:12 2018/9/13 20:43:12 12
2502 }
2504 /***********************************************************
2505 desc:	跨服战场 XG 服务器消息处理
2506 auth:	rj
2507 date:	2011-2-14
2515 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2516 	{
2517 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2518 		static IntegerHashMap mapMPVP2v2SignupRecord;
2519 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2521 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2522 		}
2524 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2525 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2526 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2543 		case MPVP_BATTLE_RETSTATE:
2544 			{
2545 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名
2546 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2547 				{
2577 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2578 				KCheck(pServePlayer_Target);
2580 				// 转发跨服战场进入通知到报名玩家所在 Map
2581 				GXMPVPBattle msg;
2582 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2686 					}
2687 				}
2689 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2690 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2691 				msg.SetSignupType(pKMessage->GetSignupType());
2700 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2701 				KCheck(pServePlayer_Target);
2703 				// 转发跨服战场状态到报名玩家所在 Map
2704 				GXMPVPBattle msg;
2705 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2718 				if (iServerID)
2719 				{
2720 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2721 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2722 					KCheck(pServePlayer_Target);
2741 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2742 				KCheck(pServePlayer_Target);
2744 				// 转发跨服战场进入响应到报名玩家所在 Map
2745 				GXMPVPBattle msg;
2746 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB3\src\khan2-mapserver\ChangeMapDelegater.cpp 35 KB CPP 文件 2013/3/10 13:26:33 2018/9/13 20:43:12 2018/9/13 20:43:12 2
1216 		pPlayer->ClearMutexState(MS_Fuben);
1217 	}
1219 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1220 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1221 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB3\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 13:26:19 2018/9/13 20:43:13 2018/9/13 20:43:13 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB3\src\khan2-mapserver\CXItemDispatch.cpp 60 KB CPP 文件 2013/3/10 13:26:25 2018/9/13 20:43:13 2018/9/13 20:43:13 1
1956 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
1957 	{
1958 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
1959 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1960 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB3\src\khan2-mapserver\GXBattleDispatch.cpp 52 KB CPP 文件 2013/3/10 13:26:44 2018/9/13 20:43:13 2018/9/13 20:43:13 6
1452 }
1454 /***********************************************************
1455 desc:	跨服战场 GX 服务器消息处理
1456 auth:	rj
1457 date:	2011-2-14
1474 			case MPVP_BATTLE_SIGNUP:
1475 				{
1476 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1478 					CMPVP2v2Battle *pMPVP2v2Battle = (CMPVP2v2Battle *)g_pMPVPBattleManager->GetMPVPBattleByType(MPVP_BATTLE_TYPE_2V2);
1479 					KCheck(pMPVP2v2Battle);
1524 						return MP_CONTINUE;
1525 					}
1527 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1528 					pMPVP2v2Battle->TellPlayerEnterMap(pKMessage->GetSNID(), pConnector);
1529 				}
1570 			case MPVP_BATTLE_RETSTATE:
1571 				{
1572 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1573 					pMap->GetLuaSystem()->RunScriptFunction
1574 						(
1586 			case MPVP_BATTLE_RES_ENTERSCENE:
1587 				{
1588 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1589 					pMap->GetLuaSystem()->RunScriptFunction
1590 						(
1617 }
1619 /***********************************************************
1620 desc:	跨服战场场景通知消息处理
1621 auth:	rj
1622 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB3\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 26 KB CPP 文件 2013/3/10 13:26:45 2018/9/13 20:43:13 2018/9/13 20:43:13 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB3\src\khan2-mapserver\GXMapDispatch.cpp 16 KB CPP 文件 2013/3/10 13:26:48 2018/9/13 20:43:13 2018/9/13 20:43:13 1
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB3\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 13:27:06 2018/9/13 20:43:13 2018/9/13 20:43:13 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB3\src\khan2-mapserver\LuaFunction_Map.cpp 182 KB CPP 文件 2013/3/10 13:27:10 2018/9/13 20:43:14 2018/9/13 20:43:14 11
1455 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1457 	KCheck(szName);
1459 	// 2010-11-2 对发送脚本邮件进行跨服支持
1460 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1461 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5360 	return 0;
5361 }
5363 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5364 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5365 {
5386 	LUA_RETURNERROR_1;
5387 }
5389 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5390 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5391 {
5433 	return 0;
5434 }
5436 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5437 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5438 //{
5460 //}
5461 //
5462 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5463 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5464 //{
5530 //}
5531 //
5532 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5533 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5534 //{
5600 //}
5601 //
5602 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5603 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5604 //{
5634 //}
5635 //
5636 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
5637 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5638 //{
5681 //}
5682 //
5683 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
5684 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
5685 //{
5733 //}
5734 //
5735 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
5736 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
5737 //{
5778 //}
5779 //
5780 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
5781 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
5782 //{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB3\src\khan2-mapserver\LuaSystem_Function.cpp 105 KB CPP 文件 2013/3/10 13:27:17 2018/9/13 20:43:14 2018/9/13 20:43:14 1
891 	m_LuaVM.RegisterFunction("PVP2v2AskBattleSceneEnter", (void *) (LuaFunction_PVP2v2AskBattleMapEnter));
892 	m_LuaVM.RegisterFunction("SetPVP2v2BattleDisable", (void *) (LuaFunction_SetPVP2v2BattleDisable));
893 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));	// 跨服 2v2 战场扩充函数 by rj 2010-9-21 
894 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));
895 	m_LuaVM.RegisterFunction("PVP6v6RegisterScene", (void *) (LuaFunction_PVP6v6RegisterMap));

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB3\src\khan2-mapserver\MapCore.cpp 36 KB CPP 文件 2013/3/10 13:27:19 2018/9/13 20:43:14 2018/9/13 20:43:14 1
635 				m_bFirstInit = FALSE;
636 			}
637 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
638 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
639 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB3\src\khan2-mapserver\MapServer.cpp 31 KB CPP 文件 2013/3/10 13:27:21 2018/9/13 20:43:14 2018/9/13 20:43:14 1
550 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
551 	
552 	// 跨服战场管理器 2010-10-13 by rj
553 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
554 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB3\src\khan2-mapserver\MPVP2v2Battle.cpp 29 KB CPP 文件 2013/3/10 13:27:17 2018/9/13 20:43:14 2018/9/13 20:43:14 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
124 	{
125 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
126 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
127 		if (FindSignup(pSignupPlayers[i].uSNID))
128 		{
470 			nLevelFlag = 0;
471 		}
473 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
474 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
475 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB3\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 13:27:17 2018/9/13 20:43:14 2018/9/13 20:43:14 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
91 	__UNGUARD__ return FALSE;
92 }
94 // 以类型方式获得跨服战场类
95 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
96 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB3\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 12 KB CPP 文件 2013/3/10 13:28:09 2018/9/13 20:43:14 2018/9/13 20:43:14 1
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB3\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/11 10:34:14 2018/9/13 20:43:14 2018/9/13 20:43:14 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB3\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/11 10:34:15 2018/9/13 20:43:14 2018/9/13 20:43:14 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB3\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/11 10:34:16 2018/9/13 20:43:14 2018/9/13 20:43:14 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
200 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB3\src\khan2-share\Core\Setting.cpp 72 KB CPP 文件 2013/3/11 10:34:29 2018/9/13 20:43:14 2018/9/13 20:43:14 3
286 /*
287 =======================================================================================================================
288  加载跨服配置信息
289 =======================================================================================================================
290 */
300 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
301 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
303 	// 跨服战场最大场景数量配置 2010-9-23 by rj
304 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
305 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
319 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
320 		
321 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
323 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
325 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-client\UIMap.cpp 23 KB CPP 文件 2013/3/10 13:30:04 2018/9/13 20:43:26 2018/9/13 20:43:26 1
449 		case MAP_POINT_TRANSER_NPC:		szChildWinType = MAP_POINT_TYPE_TRANSER_NPC;	break;
450 		case MAP_POINT_MONSTER:			szChildWinType = MAP_POINT_TYPE_MONSTER;		break;
452 		// 跨服6v6的旗子
453 		case MAP_POINT_OneLevelFlag:			szChildWinType = MAP_POINT_TYPE_ONELEVELFLAG; break;
454 		case MAP_POINT_TwoLevelFlag:			szChildWinType = MAP_POINT_TYPE_TWOLEVELFLAG; break;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-client\UIPartyMessageBox.cpp 33 KB CPP 文件 2013/3/10 13:30:05 2018/9/13 20:43:26 2018/9/13 20:43:26 1
404 		}
405 		break;
407 	case MGUILD_BATTLE_TYPE: // 跨服帮会战
408 		{
409 			CXMPVPBattle msg;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-dbshare\MKLogicManager.cpp 105 KB CPP 文件 2013/3/10 13:30:43 2018/9/13 20:43:27 2018/9/13 20:43:27 1
3613 }
3615 /************************************************************************/
3616 /* 跨服战积分相关                                                       */
3617 /************************************************************************/
3618 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-glserver\GL.cpp 42 KB CPP 文件 2013/3/10 13:30:51 2018/9/13 20:43:27 2018/9/13 20:43:27 2
417 	KCheck(g_pGuildBattleManager);
418 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildBattleManager...OK");
420 	//跨服帮战的管理器
421 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new MultiGuildBattleManager ... ");
422 	g_pMGuildBattleManager = new MGuildBattleManager;
500 	KCheck(g_pGuildCenter);
501 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildManager...OK");
503 	//跨服战积分管理器
504 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMPVPPointManager ... ");
505 	g_pMPVPPointManager = new MPVPPointManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 14 KB CPP 文件 2013/3/10 13:31:00 2018/9/13 20:43:27 2018/9/13 20:43:27 1
208 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
209 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
211 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
212 		if (pFindPlayer == NULL)
213 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-glserver\MGuildBattleManager.cpp 14 KB CPP 文件 2013/3/10 13:31:02 2018/9/13 20:43:27 2018/9/13 20:43:27 8
94 	// 当前赛季进度
95 	int32 nSeasonWeek = (GET_TIME().GetWeekNumOfYear() - g_Config.m_ConfigInfo.m_MPVPGuildBeginWeek) % g_Config.m_ConfigInfo.m_MPVPPointPeriodWeeks;
97 	// 取得跨服服务器
98 	int32 nServerNum = 0;
99 	ut_id serverIDs[SERVER_CAPACITY] = {-1};
145 	//	if (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / nServerNum <= 0)
146 	//		return serverIDs[0];
148 	//	// 2011-07-26 by rj 改进原来的等分算法，在所连跨服服务器数量等于 2 时用用 4/6 算法来解决高分帮会人数过多的问题
149 	//	int32 iSeg = iIndex / (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / (nServerNum <= 2 ? 2.5f : nServerNum) );
150 	//	if (iSeg >= nServerNum)
166 	if (uPrevSignupTime)
167 	{
168 		// 超时保护（防止报名完成后跨服服务器宕机导致 GL 无法清理报名）
169 		if (GET_TIME().GetCTime() - uPrevSignupTime > 90*60)
170 		{
258 	if(!pGuild || pGuild->GetGuildID() == INVALID_KHAN_ID)
259 		return FALSE;
261 	// 转发跨服战场进入通知到报名玩家所在 Map
262 	GXMPVPBattle msg;
263 	msg.SetBattleType(MPVP_GUILD_BATTLE_TYPE);
416 				aSignupPlayers[0].GuildPoint = pPoint->m_nCurrentPoint;
417 			}
419 			// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
420 			msg.SetSubType(MPVP_BATTLE_SIGNUP);
421 			msg.SetSignupType(pKMessage->GetSignupType());
470 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
471 				KCheck(pServePlayer_Target);
473 				// 转发跨服战场状态到报名玩家所在 Map
474 				GXMPVPBattle msg;
475 				msg.SetBattleType(pKMessage->GetBattleType());
501 				return MP_CONTINUE;
502 			}
504 			// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
505 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pMatch->nServerID);
506 			KCheck(pServePlayer_Target);
523 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
524 			KCheck(pServePlayer_Target);
526 			// 转发跨服战场进入响应到报名玩家所在 Map
527 			GXMPVPBattle msg;
528 			msg.SetBattleType(pKMessage->GetBattleType());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-glserver\MPVPGuildPoint.cpp 8 KB CPP 文件 2013/3/10 13:31:03 2018/9/13 20:43:27 2018/9/13 20:43:27 3
1 /************************************************************************/
2 /* 帮会跨服战积分信息接口的具体实现                                     */
3 /************************************************************************/
5 #include "stdafx.h"
195 /*
196 =======================================================================================================================
197 处理不同跨服战各自的额外参数填充
198 =======================================================================================================================
199 */
223 /*
224 =======================================================================================================================
225 加载跨服帮战每周的场次信息
226 =======================================================================================================================
227 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-glserver\MPVPPointArithmetic.cpp 2 KB CPP 文件 2013/3/10 13:31:03 2018/9/13 20:43:27 2018/9/13 20:43:27 3
1 /************************************************************************/
2 /* 跨服战积分算法器,负责各种跨服战积分的计算逻辑实现                    */
3 /************************************************************************/
5 #include "stdafx.h"
16 /*
17 ===============================================================================================================
18 根据实力来计算跨服帮会的加权分
19 帮会实力-(错过的场次*放弃损失的分数)
20 ===============================================================================================================

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-glserver\MPVPPointInfo.cpp 14 KB CPP 文件 2013/3/10 13:31:03 2018/9/13 20:43:27 2018/9/13 20:43:27 2
1 /************************************************************************/
2 /* 跨服战积分信息接口的具体实现                                         */
3 /************************************************************************/
5 #include "stdafx.h"
72 /*
73 =======================================================================================================================
74 获取跨服积分的数据信息
75 =======================================================================================================================
76 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-glserver\MPVPPointManager.cpp 11 KB CPP 文件 2013/3/10 13:31:04 2018/9/13 20:43:27 2018/9/13 20:43:27 5
1 /************************************************************************/
2 /* 跨服战积分管理器的实现                                               */
3 /************************************************************************/
5 #include "stdafx.h"
98 /*
99 ===============================================================================================================
100 注册跨服积分的实现
101 ===============================================================================================================
102 */
220 /*
221 ===============================================================================================================
222 获取指定类型跨服战全部积分信息
223 ===============================================================================================================
224 */
243 /*
244 ===============================================================================================================
245 获取指定跨服战当前的赛季开始周
246 ===============================================================================================================
247 */
266 /*
267 ===============================================================================================================
268 获取指定跨服战当前周
269 ===============================================================================================================
270 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-glserver\MPVPToplist.cpp 8 KB CPP 文件 2013/3/10 13:31:04 2018/9/13 20:43:27 2018/9/13 20:43:27 2
1 /************************************************************************/
2 /* 跨服帮会战排行榜的具体实现		                                    */
3 /************************************************************************/
5 #include "stdafx.h"
25 /*
26 =======================================================================================================================
27 积分数据加载,从跨服积分管理器中加载需要的信息
28 =======================================================================================================================
29 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-glserver\ServerConnectorManager_GL.cpp 11 KB CPP 文件 2013/3/10 13:31:11 2018/9/13 20:43:27 2018/9/13 20:43:27 2
513 			_NET_TRY
514 			{
515 				// 跨服帮战管理器心跳
516 				ret = g_pMGuildBattleManager->HeartBeat(uTime);
517 				KCheck(ret);
523 			_NET_TRY
524 			{
525 				//处理跨服战积分管理器相关的心跳
526 				ret = g_pMPVPPointManager->HeartBeat(uTime);		
527 				KCheck(ret);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-glserver\TopListManager.cpp 17 KB CPP 文件 2013/3/10 13:31:16 2018/9/13 20:43:27 2018/9/13 20:43:27 1
152 	Register(HONOR_CHARIOT_TOP_LIST_BK,			new TopList,					"Chariot_Honor_bk" );
153 	// add by dragon 战车排行榜 }
155 	// 跨服帮会战排行榜
156 	Register(MPVP_GUILD_CURRENT,			new CurrentMPVPGuildTopList,		"MPVP_Guild_Current" );
157 	Register(MPVP_GUILD_CURRENT_BK,			new TopList,				"MPVP_Guild_Current_bk" );

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-glserver\XGBattleDispatch.cpp 92 KB CPP 文件 2013/3/10 13:31:20 2018/9/13 20:43:27 2018/9/13 20:43:27 25
2507 }
2509 /***********************************************************
2510 desc:	跨服战场 XG 服务器消息处理
2511 auth:	rj
2512 date:	2011-2-14
2520 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2521 	{
2522 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2523 		static IntegerHashMap mapMPVP2v2SignupRecord;
2524 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2526 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2527 		}
2529 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2530 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2531 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2548 		case MPVP_BATTLE_RETSTATE:
2549 			{
2550 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名。值是当前报名的时间。
2551 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2552 				{
2582 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2583 				KCheck(pServePlayer_Target);
2585 				// 转发跨服战场进入通知到报名玩家所在 Map
2586 				GXMPVPBattle msg;
2587 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2613 				if (uPrevSignupTime)
2614 				{
2615 					// 6 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2616 					if (GET_TIME().GetCTime() - uPrevSignupTime > 360)
2617 					{
2719 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2720 				}
2722 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2723 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2724 				msg.SetSignupType(pKMessage->GetSignupType());
2733 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2734 				KCheck(pServePlayer_Target);
2736 				// 转发跨服战场状态到报名玩家所在 Map
2737 				GXMPVPBattle msg;
2738 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2751 				if (iServerID)
2752 				{
2753 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2754 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2755 					KCheck(pServePlayer_Target);
2774 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2775 				KCheck(pServePlayer_Target);
2777 				// 转发跨服战场进入响应到报名玩家所在 Map
2778 				GXMPVPBattle msg;
2779 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2790 	else if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_6V6)
2791 	{
2792 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2793 		static IntegerHashMap mapMPVP6v6SignupRecord;
2794 		if (mapMPVP6v6SignupRecord.GetMaxCount() == 0)
2796 			mapMPVP6v6SignupRecord.InitTable(MAX_WORLD_PLAYER);
2797 		}
2799 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2800 		static IntegerHashMap mapMPVP6v6EnterBattleRecord;
2801 		if (mapMPVP6v6EnterBattleRecord.GetMaxCount() == 0)
2818 		case MPVP_BATTLE_RETSTATE:
2819 			{
2820 				// 记录这次跨服 6v6 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 6v6 的报名。值是当前报名的时间。
2821 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2822 				{
2852 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2853 				KCheck(pServePlayer_Target);
2855 				// 转发跨服战场进入通知到报名玩家所在 Map
2856 				GXMPVPBattle msg;
2857 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
2883 				if (uPrevSignupTime)
2884 				{
2885 					// 11 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2886 					if (GET_TIME().GetCTime() - uPrevSignupTime > 660)
2887 					{
2989 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2990 				}
2992 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2993 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2994 				msg.SetSignupType(pKMessage->GetSignupType());
3003 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
3004 				KCheck(pServePlayer_Target);
3006 				// 转发跨服战场状态到报名玩家所在 Map
3007 				GXMPVPBattle msg;
3008 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
3021 				if (iServerID)
3022 				{
3023 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
3024 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
3025 					KCheck(pServePlayer_Target);
3044 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
3045 				KCheck(pServePlayer_Target);
3047 				// 转发跨服战场进入响应到报名玩家所在 Map
3048 				GXMPVPBattle msg;
3049 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-mapserver\ChangeMapDelegater.cpp 36 KB CPP 文件 2013/3/10 13:31:58 2018/9/13 20:43:28 2018/9/13 20:43:28 2
1237 		pPlayer->ClearMutexState(MS_Fuben);
1238 	}
1240 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1241 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1242 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 13:31:42 2018/9/13 20:43:28 2018/9/13 20:43:28 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-mapserver\CXItemDispatch.cpp 62 KB CPP 文件 2013/3/10 13:31:49 2018/9/13 20:43:28 2018/9/13 20:43:28 1
2000 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
2001 	{
2002 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
2003 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2004 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-mapserver\GMCommand.cpp 199 KB CPP 文件 2013/3/10 13:32:09 2018/9/13 20:43:28 2018/9/13 20:43:28 1
544 	REGISTER_HANDLER(addchariothonour);	// \gm addchariothonour =100	增加战车荣誉
545 	REGISTER_HANDLER(unlockhorse);		// \gm unlockhorse =objid =horseindex  强制解锁骑乘
546 	REGISTER_HANDLER(addguildwin);		// \gm addguildwin =num 增加跨服帮战胜利次数
548 	__UNGUARD__
549 }

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-mapserver\GXBattleDispatch.cpp 55 KB CPP 文件 2013/3/10 13:32:10 2018/9/13 20:43:29 2018/9/13 20:43:29 6
1452 }
1454 /***********************************************************
1455 desc:	跨服战场 GX 服务器消息处理
1456 auth:	rj
1457 date:	2011-2-14
1474 			case MPVP_BATTLE_SIGNUP:
1475 				{
1476 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1478 					IMPVPBattle *pMPVPBattle = g_pMPVPBattleManager->GetMPVPBattleByType((MPVP_BATTLE_TYPE)pKMessage->GetBattleType());
1479 					//KCheck(pMPVPBattle);
1542 						return MP_CONTINUE;
1543 					}
1545 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1546 					pMPVPBattle->TellPlayerEnterMap(pKMessage, pConnector);
1547 				}
1588 			case MPVP_BATTLE_RETSTATE:
1589 				{
1590 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1591 					pMap->GetLuaSystem()->RunScriptFunction
1592 						(
1604 			case MPVP_BATTLE_RES_ENTERSCENE:
1605 				{
1606 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1607 					pMap->GetLuaSystem()->RunScriptFunction
1608 						(
1635 }
1637 /***********************************************************
1638 desc:	跨服战场场景通知消息处理
1639 auth:	rj
1640 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 28 KB CPP 文件 2013/3/10 13:32:11 2018/9/13 20:43:29 2018/9/13 20:43:29 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-mapserver\GXMapDispatch.cpp 16 KB CPP 文件 2013/3/10 13:32:15 2018/9/13 20:43:29 2018/9/13 20:43:29 1
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 13:32:34 2018/9/13 20:43:29 2018/9/13 20:43:29 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-mapserver\LuaFunction_Map.cpp 198 KB CPP 文件 2013/3/10 13:32:39 2018/9/13 20:43:29 2018/9/13 20:43:29 15
1523 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1525 	KCheck(szName);
1527 	// 2010-11-2 对发送脚本邮件进行跨服支持
1528 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1529 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5491 	return 0;
5492 }
5494 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5495 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5496 {
5517 	LUA_RETURNERROR_1;
5518 }
5520 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5521 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5522 {
5564 	return 0;
5565 }
5567 // 跨服 6v6 战场场景注册函数
5568 int32 LuaFunction_MPVP6v6RegisterMap(Lua_State *L)
5569 {
5590 	LUA_RETURNERROR_1;
5591 }
5593 // 跨服 6v6 战场场景更新战场 UI 面板
5594 int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5595 {
5637 	return 0;
5638 }
5640 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5641 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5642 //{
5664 //}
5665 //
5666 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5667 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5668 //{
5734 //}
5735 //
5736 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5737 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5738 //{
5804 //}
5805 //
5806 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5807 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5808 //{
5838 //}
5839 //
5840 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
5841 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5842 //{
5885 //}
5886 //
5887 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
5888 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
5889 //{
5937 //}
5938 //
5939 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
5940 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
5941 //{
5982 //}
5983 //
5984 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
5985 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
5986 //{
6828 	return 0;
6829 }
6831 // 跨服战场场景注册函数
6832 int32 LuaFunction_MPVPRegisterMap(Lua_State *L)
6833 {
6923 	if(pMap)
6924 	{
6925 		// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
6926 		int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
6927 			(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-mapserver\LuaSystem_Function.cpp 118 KB CPP 文件 2013/3/10 13:32:45 2018/9/13 20:43:29 2018/9/13 20:43:29 10
1167 	m_LuaVM.RegisterFunction("AddBattleHonour", (void *) (LuaFunction_AddBattleHonour));							// 增加战功
1168 	m_LuaVM.RegisterFunction("SubBattleHonour", (void *) (LuaFunction_SubBattleHonour));							// 减少战功
1169 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));					// 跨服 2v2 战场注册场景 
1170 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));			// 跨服 2v2 战场名称显示
1171 	m_LuaVM.RegisterFunction("MPVP6v6RegisterScene", (void *) (LuaFunction_MPVP6v6RegisterMap));					// 跨服 6v6 战场注册场景
1172 	m_LuaVM.RegisterFunction("SetMPVP6v6BattleDisable", (void *) (LuaFunction_SetMPVP6v6BattleDisable));			// 跨服 6v6 战场名称显示
1173 	m_LuaVM.RegisterFunction("MPVPRegisterMap", (void *) (LuaFunction_MPVPRegisterMap));							// 跨服战场注册场景
1174 	m_LuaVM.RegisterFunction("CountryIsFortuneTimeEx", (void *) (LuaFunction_CountryIsFortuneTimeEx));				// 获取特定国家的国运是否进行
1175 	m_LuaVM.RegisterFunction("AddCountryResourceWithRecall", (void *) (LuaFunction_AddCountryResourceWithRecall));	// 比较并增加的修改资源,保证同步
1283 	m_LuaVM.RegisterFunction("IsLeague", (void*)(LuaFunction_IsLeague));											// 判断两国是否是弱国联盟
1284 	m_LuaVM.RegisterFunction("CountryLeagueZhaoji", (void*)(LuaFunction_CountryLeagueZhaoji));						// 发送联盟召集令
1285 	m_LuaVM.RegisterFunction("AskEnterMGuildBattleScene",(void*)(LuaFunction_AskEnterMGuildBattleScene)); 			// 请求进入跨服帮会战场
1286 	m_LuaVM.RegisterFunction("MGuildBattleSignup",(void*)(LuaFunction_MGuildBattleSignup)); 						// 跨服帮会战报名
1287 	m_LuaVM.RegisterFunction("MGuildBattleResult",(void*)(LuaFunction_MGuildBattleResult)); 						// 跨服帮会战结果
1288 	m_LuaVM.RegisterFunction("MGuildBattleSeasonWeek",(void*)(LuaFunction_MGuildBattleSeasonWeek)); 				// 跨服帮会战赛季当前周数
1289 	m_LuaVM.RegisterFunction("GetMGuildNumOfBattleCurSeason", (void*)(LuaFunction_GetMGuildNumOfBattleCurSeason));	// 获取跨服帮战当前赛季的场数
1290 	m_LuaVM.RegisterFunction("SetEquipPokerData",(void*)(LuaFunction_SetEquipPokerData));							// 设置装备扑克牌属性
1291 	m_LuaVM.RegisterFunction("SetEquipPokerCount",(void*)(LuaFunction_SetEquipPokerCount));							// 设置装备扑克牌个数

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-mapserver\MapCore.cpp 38 KB CPP 文件 2013/3/10 13:32:48 2018/9/13 20:43:29 2018/9/13 20:43:29 1
671 				m_bFirstInit = FALSE;
672 			}
673 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
674 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
675 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-mapserver\MapServer.cpp 33 KB CPP 文件 2013/3/10 13:32:50 2018/9/13 20:43:29 2018/9/13 20:43:29 1
578 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
579 	
580 	// 跨服战场管理器 2010-10-13 by rj
581 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
582 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-mapserver\MGuildBattle.cpp 28 KB CPP 文件 2013/3/10 13:32:45 2018/9/13 20:43:29 2018/9/13 20:43:29 3
1 /***********************************************************
2 desc:	跨服帮会战场实现
3 auth:	txp
4 date:	2011-6-10
122 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，
123 		// 为这个很少出现的异常进行处理。
124 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，
125 		// 如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
126 		if (FindSignup(pSignupPlayers[i].iWorldID, pSignupPlayers[i].GuildID))
427 		m_MatchList.m_aMatch[m_MatchList.m_nCount].m_bFinished = FALSE;
429 		int32 nLevelFlag=0, nDisLevel = s1.m_nSignupLevel - s2.m_nSignupLevel;
431 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
432 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
433 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-mapserver\MPVP2v2Battle.cpp 35 KB CPP 文件 2013/3/10 13:32:46 2018/9/13 20:43:29 2018/9/13 20:43:29 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
249 		{
250 			// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
251 			// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
252 			if (FindSignup(pSignupPlayers[i].uSNID))
253 			{
649 			nLevelFlag = 0;
650 		}
652 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
653 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
654 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-mapserver\MPVP6v6Battle.cpp 30 KB CPP 文件 2013/3/10 13:32:46 2018/9/13 20:43:29 2018/9/13 20:43:29 3
1 /***********************************************************
2 desc:	跨服 6v6 战场实现
3 auth:	txp
4 date:	2011-3-16
154 	{
155 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
156 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
157 		if (FindSignup(pSignupPlayers[i].uSNID))
158 		{
536 			nLevelFlag = 0;
537 		}
539 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
540 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
541 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 13:32:47 2018/9/13 20:43:29 2018/9/13 20:43:29 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
97 	__UNGUARD__ return FALSE;
98 }
100 // 以类型方式获得跨服战场类
101 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
102 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 12 KB CPP 文件 2013/3/10 13:33:07 2018/9/13 20:43:30 2018/9/13 20:43:30 1
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/11 10:46:22 2018/9/13 20:43:30 2018/9/13 20:43:30 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/11 10:46:24 2018/9/13 20:43:30 2018/9/13 20:43:30 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/11 10:46:24 2018/9/13 20:43:30 2018/9/13 20:43:30 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
200 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-share\Core\Setting.cpp 79 KB CPP 文件 2013/3/11 10:46:34 2018/9/13 20:43:30 2018/9/13 20:43:30 4
289 /*
290 =======================================================================================================================
291  加载跨服配置信息
292 =======================================================================================================================
293 */
303 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
304 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
306 	// 跨服战场最大场景数量配置 2010-9-23 by rj
307 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
308 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
309 	
310 	m_MultiGroupConfig.m_nMaxMGuildMapCnt = ini.Get_Property_Int("MGuild", "Max_SceneCount");
311 	KCheckEx(m_MultiGroupConfig.m_nMaxMGuildMapCnt>0 && m_MultiGroupConfig.m_nMaxMGuildMapCnt<=MGUILD_MAX_MAPCOUNT, "跨服帮战场景数量要小于512");
313 // 	m_MultiGroupConfig.m_nMGuildBeginWeek = ini.Get_Property_Int("MGuild", "BeginWeek");
314 // 	KCheckEx(m_MultiGroupConfig.m_nMGuildBeginWeek>0 && m_MultiGroupConfig.m_nMGuildBeginWeek<=52, "起始周只能在1-52之间");
328 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
329 		
330 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
332 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
334 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-share\DataBase\ArchiveInterface.cpp 280 KB CPP 文件 2013/3/11 10:46:39 2018/9/13 20:43:30 2018/9/13 20:43:30 1
9694 }
9696 /************************************************************************/
9697 /* 跨服战积分相关                                                       */
9698 /************************************************************************/
9700 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB5\src\khan2-share\DataBase\SqlStatement.cpp 20 KB CPP 文件 2013/3/11 10:46:43 2018/9/13 20:43:30 2018/9/13 20:43:30 1
249 char	*g_LoadLostItemInfo = "select aid,playerguid,srcplayerguid,srcplayername,guid,world,server,itemclass,creator,dataproperty,data,termendtime,islock,unlocktime,gmoptime from %s where aid>%u order by aid asc" ;
250 char	*g_DelLostItemInfo = "delete from %s where aid=%u";
252 // 跨服战积分相关处理
253 char	*LoadMPVPPointInfo = "select unitid, unitname, world, currentpoint, totalpoint, currentwintimes, currentjointimes, totalwintimes, totaljointimes, mpvptypename, currentweek, startweek, params from %s where valid = 1";
254 char	*SaveMPVPPointInfo = "call proc_save_mpvppoint(%d,\'%s\', %d, %d, %d, %d, %d, %d, %d, \'%s\', %d, %d, %d, 1)";

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-client\UIMap.cpp 23 KB CPP 文件 2013/3/10 13:35:06 2018/9/13 20:43:39 2018/9/13 20:43:39 1
449 		case MAP_POINT_TRANSER_NPC:		szChildWinType = MAP_POINT_TYPE_TRANSER_NPC;	break;
450 		case MAP_POINT_MONSTER:			szChildWinType = MAP_POINT_TYPE_MONSTER;		break;
452 		// 跨服6v6的旗子
453 		case MAP_POINT_OneLevelFlag:			szChildWinType = MAP_POINT_TYPE_ONELEVELFLAG; break;
454 		case MAP_POINT_TwoLevelFlag:			szChildWinType = MAP_POINT_TYPE_TWOLEVELFLAG; break;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-client\UIPartyMessageBox.cpp 33 KB CPP 文件 2013/3/10 13:35:07 2018/9/13 20:43:39 2018/9/13 20:43:39 1
404 		}
405 		break;
407 	case MGUILD_BATTLE_TYPE: // 跨服帮会战
408 		{
409 			CXMPVPBattle msg;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-dbshare\MKLogicManager.cpp 105 KB CPP 文件 2013/3/10 13:35:43 2018/9/13 20:43:39 2018/9/13 20:43:39 2
228 			{
229 			ArchiveNodeLogic<PlayerMK>* pLogicNode = (ArchiveNodeLogic<PlayerMK>*)GetNode(_Idx);
231 			// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
232 			uint32 uMaxPoolSize = MAX_POOL_SIZE;
233 			if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
3623 }
3625 /************************************************************************/
3626 /* 跨服战积分相关                                                       */
3627 /************************************************************************/
3628 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-glserver\GL.cpp 42 KB CPP 文件 2013/3/10 13:35:50 2018/9/13 20:43:40 2018/9/13 20:43:40 2
417 	KCheck(g_pGuildBattleManager);
418 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildBattleManager...OK");
420 	//跨服帮战的管理器
421 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new MultiGuildBattleManager ... ");
422 	g_pMGuildBattleManager = new MGuildBattleManager;
500 	KCheck(g_pGuildCenter);
501 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildManager...OK");
503 	//跨服战积分管理器
504 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMPVPPointManager ... ");
505 	g_pMPVPPointManager = new MPVPPointManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 14 KB CPP 文件 2013/3/10 13:35:59 2018/9/13 20:43:40 2018/9/13 20:43:40 1
208 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
209 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
211 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
212 		if (pFindPlayer == NULL)
213 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-glserver\MGuildBattleManager.cpp 14 KB CPP 文件 2013/3/10 13:36:01 2018/9/13 20:43:40 2018/9/13 20:43:40 8
94 	// 当前赛季进度
95 	int32 nSeasonWeek = (GET_TIME().GetWeekNumOfYear() - g_Config.m_ConfigInfo.m_MPVPGuildBeginWeek) % g_Config.m_ConfigInfo.m_MPVPPointPeriodWeeks;
97 	// 取得跨服服务器
98 	int32 nServerNum = 0;
99 	ut_id serverIDs[SERVER_CAPACITY] = {-1};
145 	//	if (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / nServerNum <= 0)
146 	//		return serverIDs[0];
148 	//	// 2011-07-26 by rj 改进原来的等分算法，在所连跨服服务器数量等于 2 时用用 4/6 算法来解决高分帮会人数过多的问题
149 	//	int32 iSeg = iIndex / (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / (nServerNum <= 2 ? 2.5f : nServerNum) );
150 	//	if (iSeg >= nServerNum)
166 	if (uPrevSignupTime)
167 	{
168 		// 超时保护（防止报名完成后跨服服务器宕机导致 GL 无法清理报名）
169 		if (GET_TIME().GetCTime() - uPrevSignupTime > 90*60)
170 		{
258 	if(!pGuild || pGuild->GetGuildID() == INVALID_KHAN_ID)
259 		return FALSE;
261 	// 转发跨服战场进入通知到报名玩家所在 Map
262 	GXMPVPBattle msg;
263 	msg.SetBattleType(MPVP_GUILD_BATTLE_TYPE);
416 				aSignupPlayers[0].GuildPoint = pPoint->m_nCurrentPoint;
417 			}
419 			// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
420 			msg.SetSubType(MPVP_BATTLE_SIGNUP);
421 			msg.SetSignupType(pKMessage->GetSignupType());
470 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
471 				KCheck(pServePlayer_Target);
473 				// 转发跨服战场状态到报名玩家所在 Map
474 				GXMPVPBattle msg;
475 				msg.SetBattleType(pKMessage->GetBattleType());
501 				return MP_CONTINUE;
502 			}
504 			// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
505 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pMatch->nServerID);
506 			KCheck(pServePlayer_Target);
523 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
524 			KCheck(pServePlayer_Target);
526 			// 转发跨服战场进入响应到报名玩家所在 Map
527 			GXMPVPBattle msg;
528 			msg.SetBattleType(pKMessage->GetBattleType());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-glserver\MPVPGuildPoint.cpp 8 KB CPP 文件 2013/3/10 13:36:02 2018/9/13 20:43:40 2018/9/13 20:43:40 3
1 /************************************************************************/
2 /* 帮会跨服战积分信息接口的具体实现                                     */
3 /************************************************************************/
5 #include "stdafx.h"
195 /*
196 =======================================================================================================================
197 处理不同跨服战各自的额外参数填充
198 =======================================================================================================================
199 */
223 /*
224 =======================================================================================================================
225 加载跨服帮战每周的场次信息
226 =======================================================================================================================
227 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-glserver\MPVPPointArithmetic.cpp 2 KB CPP 文件 2013/3/10 13:36:02 2018/9/13 20:43:40 2018/9/13 20:43:40 3
1 /************************************************************************/
2 /* 跨服战积分算法器,负责各种跨服战积分的计算逻辑实现                    */
3 /************************************************************************/
5 #include "stdafx.h"
16 /*
17 ===============================================================================================================
18 根据实力来计算跨服帮会的加权分
19 帮会实力-(错过的场次*放弃损失的分数)
20 ===============================================================================================================

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-glserver\MPVPPointInfo.cpp 14 KB CPP 文件 2013/3/10 13:36:02 2018/9/13 20:43:40 2018/9/13 20:43:40 2
1 /************************************************************************/
2 /* 跨服战积分信息接口的具体实现                                         */
3 /************************************************************************/
5 #include "stdafx.h"
72 /*
73 =======================================================================================================================
74 获取跨服积分的数据信息
75 =======================================================================================================================
76 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-glserver\MPVPPointManager.cpp 11 KB CPP 文件 2013/3/10 13:36:03 2018/9/13 20:43:40 2018/9/13 20:43:40 5
1 /************************************************************************/
2 /* 跨服战积分管理器的实现                                               */
3 /************************************************************************/
5 #include "stdafx.h"
98 /*
99 ===============================================================================================================
100 注册跨服积分的实现
101 ===============================================================================================================
102 */
220 /*
221 ===============================================================================================================
222 获取指定类型跨服战全部积分信息
223 ===============================================================================================================
224 */
243 /*
244 ===============================================================================================================
245 获取指定跨服战当前的赛季开始周
246 ===============================================================================================================
247 */
266 /*
267 ===============================================================================================================
268 获取指定跨服战当前周
269 ===============================================================================================================
270 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-glserver\MPVPToplist.cpp 8 KB CPP 文件 2013/3/10 13:36:03 2018/9/13 20:43:40 2018/9/13 20:43:40 2
1 /************************************************************************/
2 /* 跨服帮会战排行榜的具体实现		                                    */
3 /************************************************************************/
5 #include "stdafx.h"
25 /*
26 =======================================================================================================================
27 积分数据加载,从跨服积分管理器中加载需要的信息
28 =======================================================================================================================
29 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-glserver\ServerConnectorManager_GL.cpp 11 KB CPP 文件 2013/3/10 13:36:09 2018/9/13 20:43:40 2018/9/13 20:43:40 2
513 			_NET_TRY
514 			{
515 				// 跨服帮战管理器心跳
516 				ret = g_pMGuildBattleManager->HeartBeat(uTime);
517 				KCheck(ret);
523 			_NET_TRY
524 			{
525 				//处理跨服战积分管理器相关的心跳
526 				ret = g_pMPVPPointManager->HeartBeat(uTime);		
527 				KCheck(ret);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-glserver\TopListManager.cpp 17 KB CPP 文件 2013/3/10 13:36:14 2018/9/13 20:43:40 2018/9/13 20:43:40 1
152 	Register(HONOR_CHARIOT_TOP_LIST_BK,			new TopList,					"Chariot_Honor_bk" );
153 	// add by dragon 战车排行榜 }
155 	// 跨服帮会战排行榜
156 	Register(MPVP_GUILD_CURRENT,			new CurrentMPVPGuildTopList,		"MPVP_Guild_Current" );
157 	Register(MPVP_GUILD_CURRENT_BK,			new TopList,				"MPVP_Guild_Current_bk" );

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-glserver\XGBattleDispatch.cpp 92 KB CPP 文件 2013/3/10 13:36:17 2018/9/13 20:43:40 2018/9/13 20:43:40 25
2507 }
2509 /***********************************************************
2510 desc:	跨服战场 XG 服务器消息处理
2511 auth:	rj
2512 date:	2011-2-14
2520 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2521 	{
2522 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2523 		static IntegerHashMap mapMPVP2v2SignupRecord;
2524 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2526 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2527 		}
2529 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2530 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2531 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2548 		case MPVP_BATTLE_RETSTATE:
2549 			{
2550 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名。值是当前报名的时间。
2551 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2552 				{
2582 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2583 				KCheck(pServePlayer_Target);
2585 				// 转发跨服战场进入通知到报名玩家所在 Map
2586 				GXMPVPBattle msg;
2587 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2613 				if (uPrevSignupTime)
2614 				{
2615 					// 6 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2616 					if (GET_TIME().GetCTime() - uPrevSignupTime > 360)
2617 					{
2719 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2720 				}
2722 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2723 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2724 				msg.SetSignupType(pKMessage->GetSignupType());
2733 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2734 				KCheck(pServePlayer_Target);
2736 				// 转发跨服战场状态到报名玩家所在 Map
2737 				GXMPVPBattle msg;
2738 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2751 				if (iServerID)
2752 				{
2753 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2754 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2755 					KCheck(pServePlayer_Target);
2774 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2775 				KCheck(pServePlayer_Target);
2777 				// 转发跨服战场进入响应到报名玩家所在 Map
2778 				GXMPVPBattle msg;
2779 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2790 	else if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_6V6)
2791 	{
2792 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2793 		static IntegerHashMap mapMPVP6v6SignupRecord;
2794 		if (mapMPVP6v6SignupRecord.GetMaxCount() == 0)
2796 			mapMPVP6v6SignupRecord.InitTable(MAX_WORLD_PLAYER);
2797 		}
2799 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2800 		static IntegerHashMap mapMPVP6v6EnterBattleRecord;
2801 		if (mapMPVP6v6EnterBattleRecord.GetMaxCount() == 0)
2818 		case MPVP_BATTLE_RETSTATE:
2819 			{
2820 				// 记录这次跨服 6v6 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 6v6 的报名。值是当前报名的时间。
2821 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2822 				{
2852 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2853 				KCheck(pServePlayer_Target);
2855 				// 转发跨服战场进入通知到报名玩家所在 Map
2856 				GXMPVPBattle msg;
2857 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
2883 				if (uPrevSignupTime)
2884 				{
2885 					// 11 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2886 					if (GET_TIME().GetCTime() - uPrevSignupTime > 660)
2887 					{
2989 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2990 				}
2992 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2993 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2994 				msg.SetSignupType(pKMessage->GetSignupType());
3003 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
3004 				KCheck(pServePlayer_Target);
3006 				// 转发跨服战场状态到报名玩家所在 Map
3007 				GXMPVPBattle msg;
3008 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
3021 				if (iServerID)
3022 				{
3023 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
3024 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
3025 					KCheck(pServePlayer_Target);
3044 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
3045 				KCheck(pServePlayer_Target);
3047 				// 转发跨服战场进入响应到报名玩家所在 Map
3048 				GXMPVPBattle msg;
3049 				msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-mapserver\ChangeMapDelegater.cpp 37 KB CPP 文件 2013/3/10 13:36:54 2018/9/13 20:43:40 2018/9/13 20:43:40 2
1267 		pPlayer->ClearMutexState(MS_Fuben);
1268 	}
1270 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1271 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1272 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 13:36:39 2018/9/13 20:43:41 2018/9/13 20:43:41 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-mapserver\CXItemDispatch.cpp 62 KB CPP 文件 2013/3/10 13:36:46 2018/9/13 20:43:41 2018/9/13 20:43:41 1
2000 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
2001 	{
2002 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
2003 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2004 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-mapserver\GMCommand.cpp 199 KB CPP 文件 2013/3/10 13:37:06 2018/9/13 20:43:41 2018/9/13 20:43:41 1
544 	REGISTER_HANDLER(addchariothonour);	// \gm addchariothonour =100	增加战车荣誉
545 	REGISTER_HANDLER(unlockhorse);		// \gm unlockhorse =objid =horseindex  强制解锁骑乘
546 	REGISTER_HANDLER(addguildwin);		// \gm addguildwin =num 增加跨服帮战胜利次数
548 	__UNGUARD__
549 }

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-mapserver\GXBattleDispatch.cpp 55 KB CPP 文件 2013/3/10 13:37:06 2018/9/13 20:43:41 2018/9/13 20:43:41 6
1452 }
1454 /***********************************************************
1455 desc:	跨服战场 GX 服务器消息处理
1456 auth:	rj
1457 date:	2011-2-14
1474 			case MPVP_BATTLE_SIGNUP:
1475 				{
1476 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1478 					IMPVPBattle *pMPVPBattle = g_pMPVPBattleManager->GetMPVPBattleByType((MPVP_BATTLE_TYPE)pKMessage->GetBattleType());
1479 					//KCheck(pMPVPBattle);
1542 						return MP_CONTINUE;
1543 					}
1545 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1546 					pMPVPBattle->TellPlayerEnterMap(pKMessage, pConnector);
1547 				}
1588 			case MPVP_BATTLE_RETSTATE:
1589 				{
1590 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1591 					pMap->GetLuaSystem()->RunScriptFunction
1592 						(
1604 			case MPVP_BATTLE_RES_ENTERSCENE:
1605 				{
1606 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1607 					pMap->GetLuaSystem()->RunScriptFunction
1608 						(
1635 }
1637 /***********************************************************
1638 desc:	跨服战场场景通知消息处理
1639 auth:	rj
1640 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 28 KB CPP 文件 2013/3/10 13:37:08 2018/9/13 20:43:41 2018/9/13 20:43:41 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-mapserver\GXMapDispatch.cpp 16 KB CPP 文件 2013/3/10 13:37:11 2018/9/13 20:43:41 2018/9/13 20:43:41 1
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 13:37:30 2018/9/13 20:43:42 2018/9/13 20:43:42 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-mapserver\LuaFunction_Map.cpp 198 KB CPP 文件 2013/3/10 13:37:35 2018/9/13 20:43:42 2018/9/13 20:43:42 15
1523 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1525 	KCheck(szName);
1527 	// 2010-11-2 对发送脚本邮件进行跨服支持
1528 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1529 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5491 	return 0;
5492 }
5494 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5495 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5496 {
5517 	LUA_RETURNERROR_1;
5518 }
5520 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5521 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5522 {
5564 	return 0;
5565 }
5567 // 跨服 6v6 战场场景注册函数
5568 int32 LuaFunction_MPVP6v6RegisterMap(Lua_State *L)
5569 {
5590 	LUA_RETURNERROR_1;
5591 }
5593 // 跨服 6v6 战场场景更新战场 UI 面板
5594 int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5595 {
5637 	return 0;
5638 }
5640 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5641 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5642 //{
5664 //}
5665 //
5666 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5667 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5668 //{
5734 //}
5735 //
5736 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5737 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5738 //{
5804 //}
5805 //
5806 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5807 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5808 //{
5838 //}
5839 //
5840 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
5841 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5842 //{
5885 //}
5886 //
5887 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
5888 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
5889 //{
5937 //}
5938 //
5939 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
5940 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
5941 //{
5982 //}
5983 //
5984 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
5985 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
5986 //{
6828 	return 0;
6829 }
6831 // 跨服战场场景注册函数
6832 int32 LuaFunction_MPVPRegisterMap(Lua_State *L)
6833 {
6923 	if(pMap)
6924 	{
6925 		// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
6926 		int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
6927 			(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-mapserver\LuaSystem_Function.cpp 118 KB CPP 文件 2013/3/10 13:37:41 2018/9/13 20:43:42 2018/9/13 20:43:42 10
1167 	m_LuaVM.RegisterFunction("AddBattleHonour", (void *) (LuaFunction_AddBattleHonour));							// 增加战功
1168 	m_LuaVM.RegisterFunction("SubBattleHonour", (void *) (LuaFunction_SubBattleHonour));							// 减少战功
1169 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));					// 跨服 2v2 战场注册场景 
1170 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));			// 跨服 2v2 战场名称显示
1171 	m_LuaVM.RegisterFunction("MPVP6v6RegisterScene", (void *) (LuaFunction_MPVP6v6RegisterMap));					// 跨服 6v6 战场注册场景
1172 	m_LuaVM.RegisterFunction("SetMPVP6v6BattleDisable", (void *) (LuaFunction_SetMPVP6v6BattleDisable));			// 跨服 6v6 战场名称显示
1173 	m_LuaVM.RegisterFunction("MPVPRegisterMap", (void *) (LuaFunction_MPVPRegisterMap));							// 跨服战场注册场景
1174 	m_LuaVM.RegisterFunction("CountryIsFortuneTimeEx", (void *) (LuaFunction_CountryIsFortuneTimeEx));				// 获取特定国家的国运是否进行
1175 	m_LuaVM.RegisterFunction("AddCountryResourceWithRecall", (void *) (LuaFunction_AddCountryResourceWithRecall));	// 比较并增加的修改资源,保证同步
1284 	m_LuaVM.RegisterFunction("IsLeague", (void*)(LuaFunction_IsLeague));											// 判断两国是否是弱国联盟
1285 	m_LuaVM.RegisterFunction("CountryLeagueZhaoji", (void*)(LuaFunction_CountryLeagueZhaoji));						// 发送联盟召集令
1286 	m_LuaVM.RegisterFunction("AskEnterMGuildBattleScene",(void*)(LuaFunction_AskEnterMGuildBattleScene)); 			// 请求进入跨服帮会战场
1287 	m_LuaVM.RegisterFunction("MGuildBattleSignup",(void*)(LuaFunction_MGuildBattleSignup)); 						// 跨服帮会战报名
1288 	m_LuaVM.RegisterFunction("MGuildBattleResult",(void*)(LuaFunction_MGuildBattleResult)); 						// 跨服帮会战结果
1289 	m_LuaVM.RegisterFunction("MGuildBattleSeasonWeek",(void*)(LuaFunction_MGuildBattleSeasonWeek)); 				// 跨服帮会战赛季当前周数
1290 	m_LuaVM.RegisterFunction("GetMGuildNumOfBattleCurSeason", (void*)(LuaFunction_GetMGuildNumOfBattleCurSeason));	// 获取跨服帮战当前赛季的场数
1291 	m_LuaVM.RegisterFunction("SetEquipPokerData",(void*)(LuaFunction_SetEquipPokerData));							// 设置装备扑克牌属性
1292 	m_LuaVM.RegisterFunction("SetEquipPokerCount",(void*)(LuaFunction_SetEquipPokerCount));							// 设置装备扑克牌个数

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-mapserver\MapCore.cpp 38 KB CPP 文件 2013/3/10 13:37:44 2018/9/13 20:43:42 2018/9/13 20:43:42 1
671 				m_bFirstInit = FALSE;
672 			}
673 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
674 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
675 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-mapserver\MapServer.cpp 33 KB CPP 文件 2013/3/10 13:37:46 2018/9/13 20:43:42 2018/9/13 20:43:42 3
578 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
579 	
580 	// 跨服战场管理器 2010-10-13 by rj
581 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
582 	g_pMPVPBattleManager = new CMPVPBattleManager;
645 	if(pCurrentSData->m_EnableDBShare)
646 	{
647 		// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
648 		uint32 uMaxPoolSize = MAX_POOL_SIZE;
649 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
737 	{
738 		QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[Init] Begin g_pConnectorPool->Init() ... ");
740 		// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
741 		uint32 uMaxPoolSize = MAX_POOL_SIZE;
742 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-mapserver\MGuildBattle.cpp 28 KB CPP 文件 2013/3/10 13:37:42 2018/9/13 20:43:42 2018/9/13 20:43:42 3
1 /***********************************************************
2 desc:	跨服帮会战场实现
3 auth:	txp
4 date:	2011-6-10
122 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，
123 		// 为这个很少出现的异常进行处理。
124 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，
125 		// 如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
126 		if (FindSignup(pSignupPlayers[i].iWorldID, pSignupPlayers[i].GuildID))
427 		m_MatchList.m_aMatch[m_MatchList.m_nCount].m_bFinished = FALSE;
429 		int32 nLevelFlag=0, nDisLevel = s1.m_nSignupLevel - s2.m_nSignupLevel;
431 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
432 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
433 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-mapserver\MPVP2v2Battle.cpp 35 KB CPP 文件 2013/3/10 13:37:42 2018/9/13 20:43:42 2018/9/13 20:43:42 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
249 		{
250 			// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
251 			// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
252 			if (FindSignup(pSignupPlayers[i].uSNID))
253 			{
649 			nLevelFlag = 0;
650 		}
652 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
653 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
654 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-mapserver\MPVP6v6Battle.cpp 30 KB CPP 文件 2013/3/10 13:37:43 2018/9/13 20:43:42 2018/9/13 20:43:42 3
1 /***********************************************************
2 desc:	跨服 6v6 战场实现
3 auth:	txp
4 date:	2011-3-16
154 	{
155 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
156 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
157 		if (FindSignup(pSignupPlayers[i].uSNID))
158 		{
536 			nLevelFlag = 0;
537 		}
539 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
540 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
541 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 13:37:43 2018/9/13 20:43:42 2018/9/13 20:43:42 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
97 	__UNGUARD__ return FALSE;
98 }
100 // 以类型方式获得跨服战场类
101 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
102 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 13 KB CPP 文件 2013/3/10 13:38:04 2018/9/13 20:43:42 2018/9/13 20:43:42 1
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/11 10:50:59 2018/9/13 20:43:42 2018/9/13 20:43:42 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/11 10:51:00 2018/9/13 20:43:42 2018/9/13 20:43:42 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/11 10:51:00 2018/9/13 20:43:42 2018/9/13 20:43:42 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
200 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-share\Core\Setting.cpp 79 KB CPP 文件 2013/3/11 10:51:04 2018/9/13 20:43:43 2018/9/13 20:43:43 4
289 /*
290 =======================================================================================================================
291  加载跨服配置信息
292 =======================================================================================================================
293 */
303 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
304 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
306 	// 跨服战场最大场景数量配置 2010-9-23 by rj
307 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
308 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
309 	
310 	m_MultiGroupConfig.m_nMaxMGuildMapCnt = ini.Get_Property_Int("MGuild", "Max_SceneCount");
311 	KCheckEx(m_MultiGroupConfig.m_nMaxMGuildMapCnt>0 && m_MultiGroupConfig.m_nMaxMGuildMapCnt<=MGUILD_MAX_MAPCOUNT, "跨服帮战场景数量要小于512");
313 // 	m_MultiGroupConfig.m_nMGuildBeginWeek = ini.Get_Property_Int("MGuild", "BeginWeek");
314 // 	KCheckEx(m_MultiGroupConfig.m_nMGuildBeginWeek>0 && m_MultiGroupConfig.m_nMGuildBeginWeek<=52, "起始周只能在1-52之间");
328 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
329 		
330 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
332 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
334 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-share\DataBase\ArchiveInterface.cpp 281 KB CPP 文件 2013/3/11 10:51:05 2018/9/13 20:43:43 2018/9/13 20:43:43 1
9712 }
9714 /************************************************************************/
9715 /* 跨服战积分相关                                                       */
9716 /************************************************************************/
9718 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB6\src\khan2-share\DataBase\SqlStatement.cpp 20 KB CPP 文件 2013/3/11 10:51:07 2018/9/13 20:43:43 2018/9/13 20:43:43 1
249 char	*g_LoadLostItemInfo = "select aid,playerguid,srcplayerguid,srcplayername,guid,world,server,itemclass,creator,dataproperty,data,termendtime,islock,unlocktime,gmoptime from %s where aid>%u order by aid asc" ;
250 char	*g_DelLostItemInfo = "delete from %s where aid=%u";
252 // 跨服战积分相关处理
253 char	*LoadMPVPPointInfo = "select unitid, unitname, world, currentpoint, totalpoint, currentwintimes, currentjointimes, totalwintimes, totaljointimes, mpvptypename, currentweek, startweek, params from %s where valid = 1";
254 char	*SaveMPVPPointInfo = "call proc_save_mpvppoint(%d,\'%s\', %d, %d, %d, %d, %d, %d, %d, \'%s\', %d, %d, %d, 1)";

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-client\GameCommandSystem.cpp 59 KB CPP 文件 2013/3/10 13:38:59 2018/9/13 20:43:50 2018/9/13 20:43:50 1
1399 	{ GCD_ASK_JOIN_FUBEN_WITH_TEAM, "ASK_JOIN_FUBEN_WITH_TEAM" },
1400 	{ GCD_ASK_EXIT_ROOM, "ASK_EXIT_ROOM" },
1402 	//跨服副本报名搜索
1403 	{ GCD_UPDATE_FUBEN_SEARCH_STATE,"UPDATE_FUBEN_SEARCH_STATE" },
1405 	//军团信息更新

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-client\GameStateChangeServer.cpp 6 KB CPP 文件 2013/3/10 13:39:32 2018/9/13 20:43:50 2018/9/13 20:43:50 1
210 			::GetPrivateProfileString( "Debug", "Login.WorldID", "", szReadTemp, MAX_PATH, DEBUG_FILE_NAME );
211 			static ut_id s_nWorldID = atoi(szReadTemp); 
212 			GAME_DATA_PLAYER_PTR->SetWorldID(s_nWorldID); // 支持跨服自架测试
213 																			
214 		}

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-client\GameStateRun.cpp 89 KB CPP 文件 2013/3/10 13:39:34 2018/9/13 20:43:50 2018/9/13 20:43:50 2
649 	
650 	GAME_DATA_PTR->askCountryData();
653 	//跨服关卡的处理 
655 	//清除小地图上的军团信息
656 	GAME_DATA_RELATION_PTR->GetCorps()->ClearCorpsInfo();
668 	//请求军团数据
669 	GAME_DATA_QUEST_PTR->AskRoomBattleGroupData();
670 	/////跨服关卡的处理	
671 }
674 void CGameStateRun::IsMapLoaded( void )

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-client\UIMap.cpp 24 KB CPP 文件 2013/3/10 13:40:03 2018/9/13 20:43:52 2018/9/13 20:43:52 1
455 		case MAP_POINT_TRANSER_NPC:		szChildWinType = MAP_POINT_TYPE_TRANSER_NPC;	break;
456 		case MAP_POINT_MONSTER:			szChildWinType = MAP_POINT_TYPE_MONSTER;		break;
458 		// 跨服6v6的旗子
459 		case MAP_POINT_OneLevelFlag:			szChildWinType = MAP_POINT_TYPE_ONELEVELFLAG; break;
460 		case MAP_POINT_TwoLevelFlag:			szChildWinType = MAP_POINT_TYPE_TWOLEVELFLAG; break;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-client\UIPartyMessageBox.cpp 33 KB CPP 文件 2013/3/10 13:40:04 2018/9/13 20:43:52 2018/9/13 20:43:52 1
404 		}
405 		break;
407 	case MGUILD_BATTLE_TYPE: // 跨服帮会战
408 		{
409 			CXMPVPBattle msg;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-dbshare\MKLogicManager.cpp 111 KB CPP 文件 2013/3/10 13:40:40 2018/9/13 20:43:52 2018/9/13 20:43:52 2
235 			{
236 			ArchiveNodeLogic<PlayerMK>* pLogicNode = (ArchiveNodeLogic<PlayerMK>*)GetNode(_Idx);
238 			// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
239 			uint32 uMaxPoolSize = MAX_POOL_SIZE;
240 			if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
3649 }
3651 /************************************************************************/
3652 /* 跨服战积分相关                                                       */
3653 /************************************************************************/
3654 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-glserver\GL.cpp 43 KB CPP 文件 2013/3/10 13:40:48 2018/9/13 20:43:52 2018/9/13 20:43:52 5
422 	KCheck(g_pGuildBattleManager);
423 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildBattleManager...OK");
425 	//跨服帮战的管理器
426 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new MultiGuildBattleManager ... ");
427 	g_pMGuildBattleManager = new MGuildBattleManager;
505 	KCheck(g_pGuildCenter);
506 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildManager...OK");
508 	//跨服战积分管理器
509 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMPVPPointManager ... ");
510 	g_pMPVPPointManager = new MPVPPointManager;
691 	KCheck(g_pSystemParamsManager);
692 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new g_pSystemParamsManager...OK");
695 	// 跨服管理器
696 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMutiGroupMapServerManager ... ");
697 	g_pMutiGroupMapServerManager = new MutiGroupMapServerManager;
928 	KCheck(ret);
929 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager->Init()...OK");
932 	//跨服管理器
933 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[Init] g_pMutiGroupMapServerManager->Init()...OK");
934 	ret = g_pMutiGroupMapServerManager->Init();
1096 	KSafeDelete(g_pSystemParamsManager);
1097 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager delete...OK");
1099 	//跨服管理器
1100 	KSafeDelete(g_pMutiGroupMapServerManager);
1101 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pMutiGroupMapServerManager delete...OK");

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 14 KB CPP 文件 2013/3/10 13:40:57 2018/9/13 20:43:52 2018/9/13 20:43:52 1
223 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
224 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
226 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
227 		if (pFindPlayer == NULL)
228 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-glserver\MGuildBattleManager.cpp 15 KB CPP 文件 2013/3/10 13:41:02 2018/9/13 20:43:53 2018/9/13 20:43:53 8
94 	// 当前赛季进度
95 	int32 nSeasonWeek = (GET_TIME().GetWeekNumFrom2011() - g_Config.m_ConfigInfo.m_MPVPGuildBeginWeek) % g_Config.m_ConfigInfo.m_MPVPPointPeriodWeeks;
97 	// 取得跨服服务器
98 	int32 nServerNum = 0;
99 	ut_id serverIDs[SERVER_CAPACITY] = {-1};
145 	//	if (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / nServerNum <= 0)
146 	//		return serverIDs[0];
148 	//	// 2011-07-26 by rj 改进原来的等分算法，在所连跨服服务器数量等于 2 时用用 4/6 算法来解决高分帮会人数过多的问题
149 	//	int32 iSeg = iIndex / (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / (nServerNum <= 2 ? 2.5f : nServerNum) );
150 	//	if (iSeg >= nServerNum)
166 	if (uPrevSignupTime)
167 	{
168 		// 超时保护（防止报名完成后跨服服务器宕机导致 GL 无法清理报名）
169 		if (GET_TIME().GetCTime() - uPrevSignupTime > 90*60)
170 		{
258 	if(!pGuild || pGuild->GetGuildID() == INVALID_KHAN_ID)
259 		return FALSE;
261 	// 转发跨服战场进入通知到报名玩家所在 Map
262 	GXMPVPBattle msg;
263 	msg.SetBattleType(MPVP_GUILD_BATTLE_TYPE);
416 					aSignupPlayers[0].GuildPoint = pPoint->m_nCurrentPoint;
417 				}
419 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
420 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
421 				msg.SetSignupType(pKMessage->GetSignupType());
472 				if (NULL != pServePlayer_Target)
473 				{
474 					// 转发跨服战场状态到报名玩家所在 Map
475 					GXMPVPBattle msg;
476 					msg.SetBattleType(pKMessage->GetBattleType());
503 				return MP_CONTINUE;
504 			}
506 			// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
507 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pMatch->nServerID);
508 			if (pServePlayer_Target)
524 			if (NULL != pServePlayer_Target)
525 			{
526 				// 转发跨服战场进入响应到报名玩家所在 Map
527 				GXMPVPBattle msg;
528 				msg.SetBattleType(pKMessage->GetBattleType());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-glserver\MPVPGuildPoint.cpp 8 KB CPP 文件 2013/3/10 13:41:02 2018/9/13 20:43:53 2018/9/13 20:43:53 3
1 /************************************************************************/
2 /* 帮会跨服战积分信息接口的具体实现                                     */
3 /************************************************************************/
5 #include "stdafx.h"
195 /*
196 =======================================================================================================================
197 处理不同跨服战各自的额外参数填充
198 =======================================================================================================================
199 */
223 /*
224 =======================================================================================================================
225 加载跨服帮战每周的场次信息
226 =======================================================================================================================
227 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-glserver\MPVPPointArithmetic.cpp 2 KB CPP 文件 2013/3/10 13:41:02 2018/9/13 20:43:53 2018/9/13 20:43:53 3
1 /************************************************************************/
2 /* 跨服战积分算法器,负责各种跨服战积分的计算逻辑实现                    */
3 /************************************************************************/
5 #include "stdafx.h"
16 /*
17 ===============================================================================================================
18 根据实力来计算跨服帮会的加权分
19 帮会实力-(错过的场次*放弃损失的分数)
20 ===============================================================================================================

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-glserver\MPVPPointInfo.cpp 14 KB CPP 文件 2013/3/10 13:41:03 2018/9/13 20:43:53 2018/9/13 20:43:53 2
1 /************************************************************************/
2 /* 跨服战积分信息接口的具体实现                                         */
3 /************************************************************************/
5 #include "stdafx.h"
72 /*
73 =======================================================================================================================
74 获取跨服积分的数据信息
75 =======================================================================================================================
76 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-glserver\MPVPPointManager.cpp 11 KB CPP 文件 2013/3/10 13:41:03 2018/9/13 20:43:53 2018/9/13 20:43:53 5
1 /************************************************************************/
2 /* 跨服战积分管理器的实现                                               */
3 /************************************************************************/
5 #include "stdafx.h"
98 /*
99 ===============================================================================================================
100 注册跨服积分的实现
101 ===============================================================================================================
102 */
220 /*
221 ===============================================================================================================
222 获取指定类型跨服战全部积分信息
223 ===============================================================================================================
224 */
243 /*
244 ===============================================================================================================
245 获取指定跨服战当前的赛季开始周
246 ===============================================================================================================
247 */
266 /*
267 ===============================================================================================================
268 获取指定跨服战当前周
269 ===============================================================================================================
270 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-glserver\MPVPToplist.cpp 8 KB CPP 文件 2013/3/10 13:41:04 2018/9/13 20:43:53 2018/9/13 20:43:53 2
1 /************************************************************************/
2 /* 跨服帮会战排行榜的具体实现		                                    */
3 /************************************************************************/
5 #include "stdafx.h"
25 /*
26 =======================================================================================================================
27 积分数据加载,从跨服积分管理器中加载需要的信息
28 =======================================================================================================================
29 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-glserver\MutiGroupMapServerManager.cpp 16 KB CPP 文件 2013/3/10 13:41:07 2018/9/13 20:43:53 2018/9/13 20:43:53 1
4 Author:Michael		
5 Created:Michael
6 Description :跨服MapServer管理器实现
7 Revision :  2011/06/17 Michael create
9 =============================================================================*/

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-glserver\ServerConnectorManager_GL.cpp 11 KB CPP 文件 2013/3/10 13:41:11 2018/9/13 20:43:53 2018/9/13 20:43:53 2
516 			_NET_TRY
517 			{
518 				// 跨服帮战管理器心跳
519 				ret = g_pMGuildBattleManager->HeartBeat(uTime);
520 				KCheck(ret);
526 			_NET_TRY
527 			{
528 				//处理跨服战积分管理器相关的心跳
529 				ret = g_pMPVPPointManager->HeartBeat(uTime);		
530 				KCheck(ret);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-glserver\TopListManager.cpp 18 KB CPP 文件 2013/3/10 13:41:16 2018/9/13 20:43:53 2018/9/13 20:43:53 1
152 	Register(HONOR_CHARIOT_TOP_LIST_BK,			new TopList,					"Chariot_Honor_bk" );
153 	// add by dragon 战车排行榜 }
155 	// 跨服帮会战排行榜
156 	Register(MPVP_GUILD_CURRENT,			new CurrentMPVPGuildTopList,		"MPVP_Guild_Current" );
157 	Register(MPVP_GUILD_CURRENT_BK,			new TopList,				"MPVP_Guild_Current_bk" );

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-glserver\XGBattleDispatch.cpp 93 KB CPP 文件 2013/3/10 13:41:19 2018/9/13 20:43:53 2018/9/13 20:43:53 25
2507 }
2509 /***********************************************************
2510 desc:	跨服战场 XG 服务器消息处理
2511 auth:	rj
2512 date:	2011-2-14
2520 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2521 	{
2522 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2523 		static IntegerHashMap mapMPVP2v2SignupRecord;
2524 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2526 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2527 		}
2529 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2530 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2531 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2548 		case MPVP_BATTLE_RETSTATE:
2549 			{
2550 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名。值是当前报名的时间。
2551 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2552 				{
2582 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2583 				KCheck(pServePlayer_Target);
2585 				// 转发跨服战场进入通知到报名玩家所在 Map
2586 				GXMPVPBattle msg;
2587 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2613 				if (uPrevSignupTime)
2614 				{
2615 					// 6 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2616 					if (GET_TIME().GetCTime() - uPrevSignupTime > 360)
2617 					{
2719 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2720 				}
2722 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2723 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2724 				msg.SetSignupType(pKMessage->GetSignupType());
2734 				if (NULL != pServePlayer_Target)
2735 				{
2736 					// 转发跨服战场状态到报名玩家所在 Map
2737 					GXMPVPBattle msg;
2738 					msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2752 				if (iServerID)
2753 				{
2754 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2755 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2756 					if (NULL != pServePlayer_Target)
2777 				if (NULL != pServePlayer_Target)
2778 				{
2779 					// 转发跨服战场进入响应到报名玩家所在 Map
2780 					GXMPVPBattle msg;
2781 					msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2793 	else if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_6V6)
2794 	{
2795 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2796 		static IntegerHashMap mapMPVP6v6SignupRecord;
2797 		if (mapMPVP6v6SignupRecord.GetMaxCount() == 0)
2799 			mapMPVP6v6SignupRecord.InitTable(MAX_WORLD_PLAYER);
2800 		}
2802 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2803 		static IntegerHashMap mapMPVP6v6EnterBattleRecord;
2804 		if (mapMPVP6v6EnterBattleRecord.GetMaxCount() == 0)
2821 		case MPVP_BATTLE_RETSTATE:
2822 			{
2823 				// 记录这次跨服 6v6 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 6v6 的报名。值是当前报名的时间。
2824 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2825 				{
2856 				if (NULL != pServePlayer_Target)
2857 				{
2858 					// 转发跨服战场进入通知到报名玩家所在 Map
2859 					GXMPVPBattle msg;
2860 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
2890 				if (uPrevSignupTime)
2891 				{
2892 					// 11 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2893 					if (GET_TIME().GetCTime() - uPrevSignupTime > 660)
2894 					{
2996 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2997 				}
2999 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
3000 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
3001 				msg.SetSignupType(pKMessage->GetSignupType());
3011 				if (NULL != pServePlayer_Target)
3012 				{
3013 					// 转发跨服战场状态到报名玩家所在 Map
3014 					GXMPVPBattle msg;
3015 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
3029 				if (iServerID)
3030 				{
3031 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
3032 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
3033 					if (NULL != pServePlayer_Target)
3054 				if (NULL != pServePlayer_Target)
3055 				{
3056 					// 转发跨服战场进入响应到报名玩家所在 Map
3057 					GXMPVPBattle msg;
3058 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-mapserver\Bus.cpp 65 KB CPP 文件 2013/3/10 13:41:39 2018/9/13 20:43:53 2018/9/13 20:43:53 3
803 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
804 		= CaculateMonsterExpRuler::eCALC_TYPE_TEAM;
806 	//如果是跨服副本
807 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
808 	{
808 	{
809 		nValidMemberCount = GetValidOwnerListGroup(MAX_GROUP_MEMBER,apValidMember);
810 		eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
811 	}
812 	else
1083 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1085 	if(Get_OccupantTeamID() != INVALID_KHAN_ID) iFadeoutType = Obj_ItemRuler::FADE_OUT_TEAM;
1087 	//是否是跨服
1088 	BOOL BGroup = FALSE;
1089 	Map* pMap = GetMap();

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-mapserver\ChangeMapDelegater.cpp 43 KB CPP 文件 2013/3/10 13:41:57 2018/9/13 20:43:53 2018/9/13 20:43:53 2
1503 		pPlayer->ClearMutexState(MS_Fuben);
1504 	}
1506 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1507 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1508 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 13:41:42 2018/9/13 20:43:54 2018/9/13 20:43:54 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-mapserver\CXItemDispatch.cpp 64 KB CPP 文件 2013/3/10 13:41:48 2018/9/13 20:43:54 2018/9/13 20:43:54 1
2048 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
2049 	{
2050 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
2051 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2052 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-mapserver\GMCommand.cpp 205 KB CPP 文件 2013/3/10 13:42:09 2018/9/13 20:43:54 2018/9/13 20:43:54 1
543 	REGISTER_HANDLER(addchariothonour);	// \gm addchariothonour =100	增加战车荣誉
544 	REGISTER_HANDLER(unlockhorse);		// \gm unlockhorse =objid =horseindex  强制解锁骑乘
545 	REGISTER_HANDLER(addguildwin);		// \gm addguildwin =num 增加跨服帮战胜利次数
547 	REGISTER_HANDLER(getviewgroup);		// \gm getviewgroup	//获取当前的可视组
548 	REGISTER_HANDLER(setviewgroup);		// \gm setviewgroup	=groupnum //设置当前的可视组

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-mapserver\GMRoomBattleDispatch.cpp 5 KB CPP 文件 2013/3/10 13:42:09 2018/9/13 20:43:54 2018/9/13 20:43:54 1
53 	else
54 	{
55 		ut_id_map nBackSceneID = g_pFubenManager->GetServerBakSceneID();  //跨服处的副本入口场景
57 		ut_id_map nTarSceneId = pPacket->GetRoomBattle()->u_RoomBattleData.m_SceneID;
58 		

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-mapserver\GXBattleDispatch.cpp 55 KB CPP 文件 2013/3/10 13:42:09 2018/9/13 20:43:54 2018/9/13 20:43:54 6
1452 }
1454 /***********************************************************
1455 desc:	跨服战场 GX 服务器消息处理
1456 auth:	rj
1457 date:	2011-2-14
1474 			case MPVP_BATTLE_SIGNUP:
1475 				{
1476 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1478 					IMPVPBattle *pMPVPBattle = g_pMPVPBattleManager->GetMPVPBattleByType((MPVP_BATTLE_TYPE)pKMessage->GetBattleType());
1479 					//KCheck(pMPVPBattle);
1542 						return MP_CONTINUE;
1543 					}
1545 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1546 					pMPVPBattle->TellPlayerEnterMap(pKMessage, pConnector);
1547 				}
1588 			case MPVP_BATTLE_RETSTATE:
1589 				{
1590 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1591 					pMap->GetLuaSystem()->RunScriptFunction
1592 						(
1604 			case MPVP_BATTLE_RES_ENTERSCENE:
1605 				{
1606 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1607 					pMap->GetLuaSystem()->RunScriptFunction
1608 						(
1635 }
1637 /***********************************************************
1638 desc:	跨服战场场景通知消息处理
1639 auth:	rj
1640 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 28 KB CPP 文件 2013/3/10 13:42:11 2018/9/13 20:43:54 2018/9/13 20:43:54 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-mapserver\GXMapDispatch.cpp 19 KB CPP 文件 2013/3/10 13:42:15 2018/9/13 20:43:54 2018/9/13 20:43:54 2
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{
575 		return MP_CONTINUE;
576 	}
578 	//以下是跨服的副本的处理
580 	//给报名服务器返回创建成功消息			
581 	MGMRoomBattle* Msg = CREATE_MESSAGE_OBJ(MGMRoomBattle,MESSAGE_MGM_ROOMBATTLE);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 13:42:33 2018/9/13 20:43:54 2018/9/13 20:43:54 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-mapserver\LuaFunction_Chat.cpp 61 KB CPP 文件 2013/3/10 13:42:35 2018/9/13 20:43:55 2018/9/13 20:43:55 1
1086 		pMsg->SetCycleCount(nParam);
1087 	g_pServerConnectorMgr->SendMessage_SingleMode(pMsg);
1090 	//世界频道支持跨服
1091 	for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
1092 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-mapserver\LuaFunction_Map.cpp 203 KB CPP 文件 2013/3/10 13:42:38 2018/9/13 20:43:55 2018/9/13 20:43:55 16
256 	SelectMap.m_MapDataType = 0;
257 	SelectMap.m_CopyData = * pFD;
258 	SelectMap.m_CopyData.m_bRoom = false;//非跨服房间类型
260 	if (nRoomType == 1)
261 	{
1710 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1712 	KCheck(szName);
1714 	// 2010-11-2 对发送脚本邮件进行跨服支持
1715 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1716 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5678 	return 0;
5679 }
5681 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5682 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5683 {
5704 	LUA_RETURNERROR_1;
5705 }
5707 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5708 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5709 {
5751 	return 0;
5752 }
5754 // 跨服 6v6 战场场景注册函数
5755 int32 LuaFunction_MPVP6v6RegisterMap(Lua_State *L)
5756 {
5777 	LUA_RETURNERROR_1;
5778 }
5780 // 跨服 6v6 战场场景更新战场 UI 面板
5781 int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5782 {
5824 	return 0;
5825 }
5827 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5828 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5829 //{
5851 //}
5852 //
5853 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5854 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5855 //{
5921 //}
5922 //
5923 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5924 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5925 //{
5991 //}
5992 //
5993 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5994 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5995 //{
6025 //}
6026 //
6027 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
6028 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
6029 //{
6072 //}
6073 //
6074 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
6075 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
6076 //{
6124 //}
6125 //
6126 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
6127 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
6128 //{
6169 //}
6170 //
6171 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
6172 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
6173 //{
7015 	return 0;
7016 }
7018 // 跨服战场场景注册函数
7019 int32 LuaFunction_MPVPRegisterMap(Lua_State *L)
7020 {
7110 	if(pMap)
7111 	{
7112 		// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
7113 		int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
7114 			(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-mapserver\LuaSystem_Function.cpp 121 KB CPP 文件 2013/3/10 13:42:45 2018/9/13 20:43:55 2018/9/13 20:43:55 10
1171 	m_LuaVM.RegisterFunction("AddBattleHonour", (void *) (LuaFunction_AddBattleHonour));							// 增加战功
1172 	m_LuaVM.RegisterFunction("SubBattleHonour", (void *) (LuaFunction_SubBattleHonour));							// 减少战功
1173 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));					// 跨服 2v2 战场注册场景 
1174 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));			// 跨服 2v2 战场名称显示
1175 	m_LuaVM.RegisterFunction("MPVP6v6RegisterScene", (void *) (LuaFunction_MPVP6v6RegisterMap));					// 跨服 6v6 战场注册场景
1176 	m_LuaVM.RegisterFunction("SetMPVP6v6BattleDisable", (void *) (LuaFunction_SetMPVP6v6BattleDisable));			// 跨服 6v6 战场名称显示
1177 	m_LuaVM.RegisterFunction("MPVPRegisterMap", (void *) (LuaFunction_MPVPRegisterMap));							// 跨服战场注册场景
1178 	m_LuaVM.RegisterFunction("CountryIsFortuneTimeEx", (void *) (LuaFunction_CountryIsFortuneTimeEx));				// 获取特定国家的国运是否进行
1179 	m_LuaVM.RegisterFunction("AddCountryResourceWithRecall", (void *) (LuaFunction_AddCountryResourceWithRecall));	// 比较并增加的修改资源,保证同步
1291 	m_LuaVM.RegisterFunction("IsLeague", (void*)(LuaFunction_IsLeague));											// 判断两国是否是弱国联盟
1292 	m_LuaVM.RegisterFunction("CountryLeagueZhaoji", (void*)(LuaFunction_CountryLeagueZhaoji));						// 发送联盟召集令
1293 	m_LuaVM.RegisterFunction("AskEnterMGuildBattleScene",(void*)(LuaFunction_AskEnterMGuildBattleScene)); 			// 请求进入跨服帮会战场
1294 	m_LuaVM.RegisterFunction("MGuildBattleSignup",(void*)(LuaFunction_MGuildBattleSignup)); 						// 跨服帮会战报名
1295 	m_LuaVM.RegisterFunction("MGuildBattleResult",(void*)(LuaFunction_MGuildBattleResult)); 						// 跨服帮会战结果
1296 	m_LuaVM.RegisterFunction("MGuildBattleSeasonWeek",(void*)(LuaFunction_MGuildBattleSeasonWeek)); 				// 跨服帮会战赛季当前周数
1297 	m_LuaVM.RegisterFunction("GetMGuildNumOfBattleCurSeason", (void*)(LuaFunction_GetMGuildNumOfBattleCurSeason));	// 获取跨服帮战当前赛季的场数
1298 	m_LuaVM.RegisterFunction("SetEquipPokerData",(void*)(LuaFunction_SetEquipPokerData));							// 设置装备扑克牌属性
1299 	m_LuaVM.RegisterFunction("SetEquipPokerCount",(void*)(LuaFunction_SetEquipPokerCount));							// 设置装备扑克牌个数

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-mapserver\MapCore.cpp 38 KB CPP 文件 2013/3/10 13:42:48 2018/9/13 20:43:55 2018/9/13 20:43:55 2
614 				pSceneData->m_MapID == 20 ||
615 				pSceneData->m_MapID == 23 || 
616 				pSceneData->m_MapID == g_pFubenManager->GetServerBakSceneID())//  支持跨服副本
617 				
618 			{
673 				m_bFirstInit = FALSE;
674 			}
675 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
676 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
677 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-mapserver\MapManager.cpp 59 KB CPP 文件 2013/3/10 13:42:49 2018/9/13 20:43:55 2018/9/13 20:43:55 3
1698 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1699 		{
1700 			KCheck(FALSE);//跨服服务器上找不到报错
1701 		}
1703 		return INVALID_KHAN_ID;
1975 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1976 	{
1977 		//以下开始通知广播,支持跨服架构
1978 		for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
1979 		{
2007 BOOL FubenManager::BroadcastFubenSceneInfo(void)
2008 {
2009 	//如果不开跨服副本，不广播
2010 	if (g_Config.m_MultiGroupConfig.IsMultMapOpen() == FALSE)
2011 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-mapserver\MapServer.cpp 33 KB CPP 文件 2013/3/10 13:42:50 2018/9/13 20:43:55 2018/9/13 20:43:55 3
581 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
582 	
583 	// 跨服战场管理器 2010-10-13 by rj
584 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
585 	g_pMPVPBattleManager = new CMPVPBattleManager;
648 	if(pCurrentSData->m_EnableDBShare)
649 	{
650 		// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
651 		uint32 uMaxPoolSize = MAX_POOL_SIZE;
652 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
740 	{
741 		QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[Init] Begin g_pConnectorPool->Init() ... ");
743 		// 如果是跨服，缩小池用户连接池大小为2000 2011-8-25 by rj
744 		uint32 uMaxPoolSize = MAX_POOL_SIZE;
745 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-mapserver\MGuildBattle.cpp 28 KB CPP 文件 2013/3/10 13:42:45 2018/9/13 20:43:55 2018/9/13 20:43:55 3
1 /***********************************************************
2 desc:	跨服帮会战场实现
3 auth:	txp
4 date:	2011-6-10
122 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，
123 		// 为这个很少出现的异常进行处理。
124 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，
125 		// 如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
126 		if (FindSignup(pSignupPlayers[i].iWorldID, pSignupPlayers[i].GuildID))
427 		m_MatchList.m_aMatch[m_MatchList.m_nCount].m_bFinished = FALSE;
429 		int32 nLevelFlag=0, nDisLevel = s1.m_nSignupLevel - s2.m_nSignupLevel;
431 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
432 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
433 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-mapserver\Monster.cpp 65 KB CPP 文件 2013/3/10 13:42:52 2018/9/13 20:43:55 2018/9/13 20:43:55 5
640 		return 0;
641 	}
643 	//如果是跨服副本
644 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
645 	{
877 		return;
878 	}
880 	//跨服副本
881 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
882 	{
953 		nExp = (int32) (m_BaseExp * fExpParam);
954 	}
956 	uint32	auExp[MAX_GROUP_MEMBER];//  for 跨服军团
957 	int32	_Idx;
959 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
968 			if (pMap->m_FubenDataParty.IsRoomType())
969 			{
970 				eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
971 			}
972 		}
2097 		return 0;
2098 	}
2100 	//场景类型必须为跨服副本
2101 	Map* pMap = GetMap();
2102 	if (NULL == pMap)

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-mapserver\MPVP2v2Battle.cpp 35 KB CPP 文件 2013/3/10 13:42:46 2018/9/13 20:43:55 2018/9/13 20:43:55 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
249 		{
250 			// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
251 			// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
252 			if (FindSignup(pSignupPlayers[i].uSNID))
253 			{
649 			nLevelFlag = 0;
650 		}
652 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
653 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
654 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-mapserver\MPVP6v6Battle.cpp 30 KB CPP 文件 2013/3/10 13:42:46 2018/9/13 20:43:55 2018/9/13 20:43:55 3
1 /***********************************************************
2 desc:	跨服 6v6 战场实现
3 auth:	txp
4 date:	2011-3-16
154 	{
155 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
156 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
157 		if (FindSignup(pSignupPlayers[i].uSNID))
158 		{
536 			nLevelFlag = 0;
537 		}
539 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
540 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
541 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 13:42:46 2018/9/13 20:43:55 2018/9/13 20:43:55 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
97 	__UNGUARD__ return FALSE;
98 }
100 // 以类型方式获得跨服战场类
101 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
102 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 20 KB CPP 文件 2013/3/10 13:43:08 2018/9/13 20:43:55 2018/9/13 20:43:55 4
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());
280 	if(g_Config.m_MultiGroupConfig.IsSignUpServer())
281 	{
282 		//只要一组服务器连接正常,跨服房间管理器的心跳仍然执行 
283 		if (GetGLServerActiveCount() > 0)
284 		{
588 				{
589 					AddGroupTmp( connID, g_Config.m_MultiGroupConfig.m_GLServerInfo[i].m_WorldID );
591 					//2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，
592 					//当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
593 					SSHandShake msg;
664 	if(FALSE == IsGLServerActiveTmp())//处理断线重连
665 	{
666 		//跨服重连机制
667 		if (FALSE == m_ConnectTimer.IsSetTimer())
668 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-mapserver\SignUpMgr.cpp 83 KB CPP 文件 2013/3/10 13:43:09 2018/9/13 20:43:55 2018/9/13 20:43:55 1
4 Author:shangy		
5 Created:shangy    
6 Description :跨服报名管理类
7 Revision :  2011/06/20 shangy create
8 			2011/08/05 Michael Lin Modify

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/11 10:55:02 2018/9/13 20:43:55 2018/9/13 20:43:55 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/11 10:55:02 2018/9/13 20:43:55 2018/9/13 20:43:55 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/11 10:55:03 2018/9/13 20:43:55 2018/9/13 20:43:55 1
199 }
200 	
201 // 2010-10-9 by rj 跨服线程连接方式
202 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
203 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-share\Core\Setting.cpp 80 KB CPP 文件 2013/3/11 10:55:06 2018/9/13 20:43:56 2018/9/13 20:43:56 6
290 /*
291 =======================================================================================================================
292  加载跨服配置信息
293 =======================================================================================================================
294 */
304 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
305 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
307 	// 跨服战场最大场景数量配置 2010-9-23 by rj
308 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
309 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
310 	
311 	m_MultiGroupConfig.m_nMaxMGuildMapCnt = ini.Get_Property_Int("MGuild", "Max_SceneCount");
312 	KCheckEx(m_MultiGroupConfig.m_nMaxMGuildMapCnt>0 && m_MultiGroupConfig.m_nMaxMGuildMapCnt<=MGUILD_MAX_MAPCOUNT, "跨服帮战场景数量要小于512");
314 // 	m_MultiGroupConfig.m_nMGuildBeginWeek = ini.Get_Property_Int("MGuild", "BeginWeek");
315 // 	KCheckEx(m_MultiGroupConfig.m_nMGuildBeginWeek>0 && m_MultiGroupConfig.m_nMGuildBeginWeek<=52, "起始周只能在1-52之间");
329 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
330 		
331 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
333 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
335 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);
392 		}		
393 	}
395 	//跨服关卡报名服务器开关 
396 	m_MultiGroupConfig.m_SignUpServerToggle = ini.Get_Property_Int( "Room", "SignUpServerToggle" );
397 	m_MultiGroupConfig.m_MapFubenToogle = ini.Get_Property_Int( "Room", "MapFubenToogle" );
1048 	m_ConfigInfo.m_nEmpireOfficerMinLevel = ini.Get_Property_Int("Empire","OfficerMinLevel");
1049 	//[Empire] End
1051 	//added for跨服军团  
1052 	for (int32 _nGIndex = 0; _nGIndex < MAX_GROUP_MEMBER; ++_nGIndex)
1053 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-share\DataBase\ArchiveInterface.cpp 296 KB CPP 文件 2013/3/11 10:55:08 2018/9/13 20:43:56 2018/9/13 20:43:56 1
9805 }
9807 /************************************************************************/
9808 /* 跨服战积分相关                                                       */
9809 /************************************************************************/
9811 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-share\DataBase\SqlStatement.cpp 21 KB CPP 文件 2013/3/11 10:55:10 2018/9/13 20:43:56 2018/9/13 20:43:56 1
251 char	*g_LoadLostItemInfo = "select aid,playerguid,srcplayerguid,srcplayername,guid,world,server,itemclass,creator,dataproperty,data,termendtime,islock,unlocktime,gmoptime from %s where aid>%u order by aid asc" ;
252 char	*g_DelLostItemInfo = "delete from %s where aid=%u";
254 // 跨服战积分相关处理
255 char	*LoadMPVPPointInfo = "select unitid, unitname, world, currentpoint, totalpoint, currentwintimes, currentjointimes, totalwintimes, totaljointimes, mpvptypename, currentweek, startweek, params from %s where valid = 1";
256 char	*SaveMPVPPointInfo = "call proc_save_mpvppoint(%d,\'%s\', %d, %d, %d, %d, %d, %d, %d, \'%s\', %d, %d, %d, 1)";

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-share\Messages\StructRoomBattle.cpp 68 KB CPP 文件 2013/3/11 10:57:03 2018/9/13 20:43:58 2018/9/13 20:43:58 19
4 Author:Michael		
5 Created:Michael    
6 Description :跨服房间相关结构
7 Revision :  2011/06/21 Michael create
9 =============================================================================*/
790 }
793 /************************************************************************/
794 /* 跨服报名候选数据结构定义  		                                    */
795 /************************************************************************/
796 BOOL RoomBattleSignupInfo::IsRoomIDInList(ut_id_room nRoomID) const
930 }
931 /************************************************************************/
932 /* 跨服报名候选数据结构定义 客户端消息结构                              */
933 /************************************************************************/
934 void RoomBattleSignupInfo_CX_Msg::Clear()
971 }
973 /************************************************************************/
974 /* 跨服取消报名结构定义   客户端消息结构	                           */
975 /************************************************************************/
976 void RoomBattleSignupCancel_CX_Msg::Clear()
1001 }
1003 /************************************************************************/
1004 /* 跨服确认进入结构定义    客户端消息结构	                           */
1005 /************************************************************************/
1006 void RoomBattleWaitingEnter_CX_Msg::Clear()
1108 }
1110 /************************************************************************/
1111 /* 跨服玩家确认结构定义    服务器消息结构	                           */
1112 /************************************************************************/
1113 void RoomBattlePlayerEnter_XC_Msg::Clear()
1147 }
1149 /************************************************************************/
1150 /* 跨服军团成员离开    服务器消息结构	                                */
1151 /************************************************************************/
1152 void RoomBattlePlayerLeave_XC_Msg::Clear()
1206 }
1209 /************************************************************************/
1210 /* 跨服确认进入结构定义    服务器消息结构	                           */
1211 /************************************************************************/
1212 void RoomBattleWaitingEnter_XC_Msg::Clear()
1580 }
1581 /************************************************************************/
1582 /* 跨服MapServer信息                  		                            */
1583 /************************************************************************/
1584 bool SMutiGroupMapServerInfo::IsValid( void ) const
1701 }
1703 /************************************************************************/
1704 /* 跨服关卡消息结构定义 MGP-->GL               		                    */
1705 /************************************************************************/
1706 uint32 MsgMGRoomBattle::GetMsgSize() const
1778 }
1780 /************************************************************************/
1781 /* 跨服关卡消息结构定义 GL-->MGP               		                    */
1782 /************************************************************************/
1783 uint32 MsgGMRoomBattle::GetMsgSize() const
1870 }
1871 /************************************************************************/
1872 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消            */
1873 /************************************************************************/
1874 uint32 MsgXGMRoomBattle_ReplyEnter::GetMsgSize()const
1907 }
1909 /************************************************************************/
1910 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消广播            */
1911 /************************************************************************/
1912 uint32 MsgXGMRoomBattle_ReplyEnter_BROADCAST::GetMsgSize()const
1945 }
1947 /************************************************************************/
1948 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  客户端确认离开，重新返回报名状态 */
1949 /************************************************************************/
1950 uint32 MsgXGMRoomBattle_Leave::GetMsgSize()const
1983 }
1985 /************************************************************************/
1986 /* 跨服关卡消息结构定义 MGP-->GL-->MGP        		                    */
1987 /************************************************************************/
1988 uint32 MsgMGMRoomBattle::GetMsgSize() const
2042 }
2044 /************************************************************************/
2045 /* 跨服关卡消息结构定义 MAP-->GL-->MGP        		                    */
2046 /************************************************************************/
2047 uint32 MsgXGMRoomBattle::GetMsgSize() const
2161 }
2163 /************************************************************************/
2164 /* 跨服关卡消息结构定义 MGP-->GL-->MAP        		                    */
2165 /************************************************************************/
2166 uint32 MsgMGXRoomBattle::GetMsgSize() const
2277 }
2279 /************************************************************************/
2280 /* 跨服关卡消息结构定义 Client-->MAP        		                    */
2281 /************************************************************************/
2282 uint32 MsgCXRoomBattle::GetMsgSize() const
2372 }
2374 /************************************************************************/
2375 /* 跨服关卡消息结构定义 MAP-->Client        		                    */
2376 /************************************************************************/
2377 uint32 MsgXCRoomBattle::GetMsgSize() const

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-share\TAB\TabDefine_Map_Misc.cpp 85 KB CPP 文件 2013/3/11 10:59:01 2018/9/13 20:44:02 2018/9/13 20:44:02 2
2378 /*
2379 =======================================================================================================================
2380 跨服关卡 逻辑数据表
2381 =======================================================================================================================
2382 */
2434 /*
2435 =======================================================================================================================
2436 跨服关卡 配置数据表
2437 =======================================================================================================================
2438 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\TW_OB7\src\khan2-share\TAB\TabDefine_Share.cpp 37 KB CPP 文件 2013/3/11 10:59:03 2018/9/13 20:44:02 2018/9/13 20:44:02 2
998 {
999 	__GUARD__
1001 	//如果不开跨服副本，默认不读BackScene
1002 	if (!g_Config.m_MultiGroupConfig.IsMultMapOpen())
1003 	{
1054 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0) 
1055 	{
1056 		//如果是跨服MapServer确保BackScene有配置
1057 		KCheckEx(bFindCurrServerBackScene,"BakSceneInfo.tab表配置错误");
1058 	}

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\VN\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 13 KB CPP 文件 2013/3/10 13:45:56 2018/9/13 20:44:06 2018/9/13 20:44:06 1
191 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
192 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
194 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
195 		if (pFindPlayer == NULL)
196 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\VN\src\khan2-glserver\XGBattleDispatch.cpp 81 KB CPP 文件 2013/3/10 13:46:12 2018/9/13 20:44:07 2018/9/13 20:44:07 12
2502 }
2504 /***********************************************************
2505 desc:	跨服战场 XG 服务器消息处理
2506 auth:	rj
2507 date:	2011-2-14
2515 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2516 	{
2517 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2518 		static IntegerHashMap mapMPVP2v2SignupRecord;
2519 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2521 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2522 		}
2524 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2525 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2526 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2543 		case MPVP_BATTLE_RETSTATE:
2544 			{
2545 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名
2546 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2547 				{
2577 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2578 				KCheck(pServePlayer_Target);
2580 				// 转发跨服战场进入通知到报名玩家所在 Map
2581 				GXMPVPBattle msg;
2582 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2686 					}
2687 				}
2689 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2690 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2691 				msg.SetSignupType(pKMessage->GetSignupType());
2700 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2701 				KCheck(pServePlayer_Target);
2703 				// 转发跨服战场状态到报名玩家所在 Map
2704 				GXMPVPBattle msg;
2705 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2718 				if (iServerID)
2719 				{
2720 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2721 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2722 					KCheck(pServePlayer_Target);
2741 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2742 				KCheck(pServePlayer_Target);
2744 				// 转发跨服战场进入响应到报名玩家所在 Map
2745 				GXMPVPBattle msg;
2746 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\VN\src\khan2-mapserver\ChangeMapDelegater.cpp 35 KB CPP 文件 2013/3/10 13:46:48 2018/9/13 20:44:07 2018/9/13 20:44:07 2
1216 		pPlayer->ClearMutexState(MS_Fuben);
1217 	}
1219 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1220 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1221 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\VN\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 13:46:33 2018/9/13 20:44:07 2018/9/13 20:44:07 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\VN\src\khan2-mapserver\CXItemDispatch.cpp 60 KB CPP 文件 2013/3/10 13:46:39 2018/9/13 20:44:07 2018/9/13 20:44:07 1
1956 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
1957 	{
1958 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
1959 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1960 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\VN\src\khan2-mapserver\GXBattleDispatch.cpp 52 KB CPP 文件 2013/3/10 13:46:58 2018/9/13 20:44:08 2018/9/13 20:44:08 6
1452 }
1454 /***********************************************************
1455 desc:	跨服战场 GX 服务器消息处理
1456 auth:	rj
1457 date:	2011-2-14
1474 			case MPVP_BATTLE_SIGNUP:
1475 				{
1476 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1478 					CMPVP2v2Battle *pMPVP2v2Battle = (CMPVP2v2Battle *)g_pMPVPBattleManager->GetMPVPBattleByType(MPVP_BATTLE_TYPE_2V2);
1479 					KCheck(pMPVP2v2Battle);
1524 						return MP_CONTINUE;
1525 					}
1527 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1528 					pMPVP2v2Battle->TellPlayerEnterMap(pKMessage->GetSNID(), pConnector);
1529 				}
1570 			case MPVP_BATTLE_RETSTATE:
1571 				{
1572 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1573 					pMap->GetLuaSystem()->RunScriptFunction
1574 						(
1586 			case MPVP_BATTLE_RES_ENTERSCENE:
1587 				{
1588 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1589 					pMap->GetLuaSystem()->RunScriptFunction
1590 						(
1617 }
1619 /***********************************************************
1620 desc:	跨服战场场景通知消息处理
1621 auth:	rj
1622 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\VN\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 26 KB CPP 文件 2013/3/10 13:47:00 2018/9/13 20:44:08 2018/9/13 20:44:08 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\VN\src\khan2-mapserver\GXMapDispatch.cpp 16 KB CPP 文件 2013/3/10 13:47:03 2018/9/13 20:44:08 2018/9/13 20:44:08 1
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\VN\src\khan2-mapserver\KLDaemonThread.cpp 8 KB CPP 文件 2013/3/10 13:47:21 2018/9/13 20:44:08 2018/9/13 20:44:08 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\VN\src\khan2-mapserver\LuaFunction_Map.cpp 182 KB CPP 文件 2013/3/10 13:47:25 2018/9/13 20:44:08 2018/9/13 20:44:08 11
1455 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1457 	KCheck(szName);
1459 	// 2010-11-2 对发送脚本邮件进行跨服支持
1460 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1461 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5360 	return 0;
5361 }
5363 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5364 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5365 {
5386 	LUA_RETURNERROR_1;
5387 }
5389 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5390 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5391 {
5433 	return 0;
5434 }
5436 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5437 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5438 //{
5460 //}
5461 //
5462 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5463 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5464 //{
5530 //}
5531 //
5532 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5533 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5534 //{
5600 //}
5601 //
5602 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5603 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5604 //{
5634 //}
5635 //
5636 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
5637 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5638 //{
5681 //}
5682 //
5683 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
5684 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
5685 //{
5733 //}
5734 //
5735 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
5736 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
5737 //{
5778 //}
5779 //
5780 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
5781 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
5782 //{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\VN\src\khan2-mapserver\LuaSystem_Function.cpp 105 KB CPP 文件 2013/3/10 13:47:32 2018/9/13 20:44:08 2018/9/13 20:44:08 1
891 	m_LuaVM.RegisterFunction("PVP2v2AskBattleSceneEnter", (void *) (LuaFunction_PVP2v2AskBattleMapEnter));
892 	m_LuaVM.RegisterFunction("SetPVP2v2BattleDisable", (void *) (LuaFunction_SetPVP2v2BattleDisable));
893 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));	// 跨服 2v2 战场扩充函数 by rj 2010-9-21 
894 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));
895 	m_LuaVM.RegisterFunction("PVP6v6RegisterScene", (void *) (LuaFunction_PVP6v6RegisterMap));

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\VN\src\khan2-mapserver\MapCore.cpp 36 KB CPP 文件 2013/3/10 13:47:34 2018/9/13 20:44:08 2018/9/13 20:44:08 1
635 				m_bFirstInit = FALSE;
636 			}
637 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
638 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
639 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\VN\src\khan2-mapserver\MapServer.cpp 31 KB CPP 文件 2013/3/10 13:47:36 2018/9/13 20:44:08 2018/9/13 20:44:08 1
549 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
550 	
551 	// 跨服战场管理器 2010-10-13 by rj
552 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
553 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\VN\src\khan2-mapserver\MPVP2v2Battle.cpp 29 KB CPP 文件 2013/3/10 13:47:32 2018/9/13 20:44:09 2018/9/13 20:44:09 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
124 	{
125 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
126 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
127 		if (FindSignup(pSignupPlayers[i].uSNID))
128 		{
470 			nLevelFlag = 0;
471 		}
473 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
474 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
475 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\VN\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 13:47:32 2018/9/13 20:44:09 2018/9/13 20:44:09 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
91 	__UNGUARD__ return FALSE;
92 }
94 // 以类型方式获得跨服战场类
95 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
96 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\VN\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 12 KB CPP 文件 2013/3/10 13:47:53 2018/9/13 20:44:09 2018/9/13 20:44:09 1
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\VN\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/11 10:59:11 2018/9/13 20:44:09 2018/9/13 20:44:09 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\VN\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/11 10:59:11 2018/9/13 20:44:09 2018/9/13 20:44:09 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\VN\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/11 10:59:12 2018/9/13 20:44:09 2018/9/13 20:44:09 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
200 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\Overseas\VN\src\khan2-share\Core\Setting.cpp 72 KB CPP 文件 2013/3/11 10:59:15 2018/9/13 20:44:09 2018/9/13 20:44:09 3
286 /*
287 =======================================================================================================================
288  加载跨服配置信息
289 =======================================================================================================================
290 */
300 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
301 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
303 	// 跨服战场最大场景数量配置 2010-9-23 by rj
304 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
305 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
319 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
320 		
321 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
323 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
325 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-client\GameCommandSystem.cpp 73 KB CPP 文件 2013/3/10 10:23:13 2018/9/13 20:44:16 2018/9/13 20:44:16 1
1138 	{ GCD_ASK_JOIN_FUBEN_WITH_TEAM, "ASK_JOIN_FUBEN_WITH_TEAM" },
1139 	{ GCD_ASK_EXIT_ROOM, "ASK_EXIT_ROOM" },
1141 	//跨服副本报名搜索
1142 	{ GCD_UPDATE_FUBEN_SEARCH_STATE,"UPDATE_FUBEN_SEARCH_STATE" },
1144 	//军团信息更新

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-client\GameStateChangeServer.cpp 6 KB CPP 文件 2013/3/10 10:24:13 2018/9/13 20:44:17 2018/9/13 20:44:17 1
217 			::GetPrivateProfileString( "Debug", "Login.WorldID", "", szReadTemp, MAX_PATH, DEBUG_FILE_NAME );
218 			static ut_id s_nWorldID = atoi(szReadTemp); 
219 			GAME_DATA_PLAYER_PTR->SetWorldID(s_nWorldID); // 支持跨服自架测试
220 																			
221 		}

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-client\GameStateRun.cpp 98 KB CPP 文件 2013/3/10 10:24:17 2018/9/13 20:44:17 2018/9/13 20:44:17 2
651 	MsgFCSYSData.SetType(HYCSYS_GRATULATION_ALL_DATA);
652 	NET_MANAGER_PTR->SendMessage(&MsgFCSYSData);
654 	//跨服关卡的处理 
656 	//清除小地图上的军团信息
657 	GAME_DATA_RELATION_PTR->GetCorps()->ClearCorpsInfo();
669 	//请求军团数据
670 	GAME_DATA_QUEST_PTR->AskRoomBattleGroupData();
671 	/////跨服关卡的处理	
672 }
675 void CGameStateRun::IsMapLoaded( void )

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-client\UIMap.cpp 24 KB CPP 文件 2013/3/10 10:25:12 2018/9/13 20:44:18 2018/9/13 20:44:18 1
483 		case MAP_POINT_TRANSER_NPC:		szChildWinType = MAP_POINT_TYPE_TRANSER_NPC;	break;
484 		case MAP_POINT_MONSTER:			szChildWinType = MAP_POINT_TYPE_MONSTER;		break;
486 		// 跨服6v6的旗子
487 		case MAP_POINT_OneLevelFlag:			szChildWinType = MAP_POINT_TYPE_ONELEVELFLAG; break;
488 		case MAP_POINT_TwoLevelFlag:			szChildWinType = MAP_POINT_TYPE_TWOLEVELFLAG; break;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-client\UIPartyMessageBox.cpp 33 KB CPP 文件 2013/3/10 10:25:13 2018/9/13 20:44:18 2018/9/13 20:44:18 1
404 		}
405 		break;
407 	case MGUILD_BATTLE_TYPE: // 跨服帮会战
408 		{
409 			CXMPVPBattle msg;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-dbshare\MKLogicManager.cpp 122 KB CPP 文件 2013/3/10 10:26:20 2018/9/13 20:44:18 2018/9/13 20:44:18 1
3696 }
3698 /************************************************************************/
3699 /* 跨服战积分相关                                                       */
3700 /************************************************************************/
3701 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-glserver\GL.cpp 45 KB CPP 文件 2013/3/10 10:26:33 2018/9/13 20:44:19 2018/9/13 20:44:19 5
435 	KCheck(g_pGuildBattleManager);
436 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildBattleManager...OK");
438 	//跨服帮战的管理器
439 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new MultiGuildBattleManager ... ");
440 	g_pMGuildBattleManager = new MGuildBattleManager;
518 	KCheck(g_pGuildCenter);
519 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildManager...OK");
521 	//跨服战积分管理器
522 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMPVPPointManager ... ");
523 	g_pMPVPPointManager = new MPVPPointManager;
704 	KCheck(g_pSystemParamsManager);
705 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new g_pSystemParamsManager...OK");
708 	// 跨服管理器
709 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMutiGroupMapServerManager ... ");
710 	g_pMutiGroupMapServerManager = new MutiGroupMapServerManager;
959 	KCheck(ret);
960 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager->Init()...OK");
963 	//跨服管理器
964 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[Init] g_pMutiGroupMapServerManager->Init()...OK");
965 	ret = g_pMutiGroupMapServerManager->Init();
1145 	KSafeDelete(g_pSystemParamsManager);
1146 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager delete...OK");
1148 	//跨服管理器
1149 	KSafeDelete(g_pMutiGroupMapServerManager);
1150 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pMutiGroupMapServerManager delete...OK");

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 15 KB CPP 文件 2013/3/10 10:26:48 2018/9/13 20:44:19 2018/9/13 20:44:19 1
227 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
228 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
230 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
231 		if (pFindPlayer == NULL)
232 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-glserver\MGuildBattleManager.cpp 15 KB CPP 文件 2013/3/10 10:26:53 2018/9/13 20:44:19 2018/9/13 20:44:19 8
94 	// 当前赛季进度
95 	int32 nSeasonWeek = (GET_TIME().GetWeekNumFrom2011() - g_Config.m_ConfigInfo.m_MPVPGuildBeginWeek) % g_Config.m_ConfigInfo.m_MPVPPointPeriodWeeks;
97 	// 取得跨服服务器
98 	int32 nServerNum = 0;
99 	ut_id serverIDs[SERVER_CAPACITY] = {-1};
145 	//	if (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / nServerNum <= 0)
146 	//		return serverIDs[0];
148 	//	// 2011-07-26 by rj 改进原来的等分算法，在所连跨服服务器数量等于 2 时用用 4/6 算法来解决高分帮会人数过多的问题
149 	//	int32 iSeg = iIndex / (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / (nServerNum <= 2 ? 2.5f : nServerNum) );
150 	//	if (iSeg >= nServerNum)
166 	if (uPrevSignupTime)
167 	{
168 		// 超时保护（防止报名完成后跨服服务器宕机导致 GL 无法清理报名）
169 		if (GET_TIME().GetCTime() - uPrevSignupTime > 90*60)
170 		{
258 	if(!pGuild || pGuild->GetGuildID() == INVALID_KHAN_ID)
259 		return FALSE;
261 	// 转发跨服战场进入通知到报名玩家所在 Map
262 	GXMPVPBattle msg;
263 	msg.SetBattleType(MPVP_GUILD_BATTLE_TYPE);
416 					aSignupPlayers[0].GuildPoint = pPoint->m_nCurrentPoint;
417 				}
419 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
420 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
421 				msg.SetSignupType(pKMessage->GetSignupType());
472 				if (NULL != pServePlayer_Target)
473 				{
474 					// 转发跨服战场状态到报名玩家所在 Map
475 					GXMPVPBattle msg;
476 					msg.SetBattleType(pKMessage->GetBattleType());
503 				return MP_CONTINUE;
504 			}
506 			// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
507 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pMatch->nServerID);
508 			if (pServePlayer_Target)
524 			if (NULL != pServePlayer_Target)
525 			{
526 				// 转发跨服战场进入响应到报名玩家所在 Map
527 				GXMPVPBattle msg;
528 				msg.SetBattleType(pKMessage->GetBattleType());

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-glserver\MPVPGuildPoint.cpp 8 KB CPP 文件 2013/3/10 10:26:53 2018/9/13 20:44:19 2018/9/13 20:44:19 3
1 /************************************************************************/
2 /* 帮会跨服战积分信息接口的具体实现                                     */
3 /************************************************************************/
5 #include "stdafx.h"
195 /*
196 =======================================================================================================================
197 处理不同跨服战各自的额外参数填充
198 =======================================================================================================================
199 */
223 /*
224 =======================================================================================================================
225 加载跨服帮战每周的场次信息
226 =======================================================================================================================
227 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-glserver\MPVPPointArithmetic.cpp 2 KB CPP 文件 2013/3/10 10:26:54 2018/9/13 20:44:19 2018/9/13 20:44:19 3
1 /************************************************************************/
2 /* 跨服战积分算法器,负责各种跨服战积分的计算逻辑实现                    */
3 /************************************************************************/
5 #include "stdafx.h"
16 /*
17 ===============================================================================================================
18 根据实力来计算跨服帮会的加权分
19 帮会实力-(错过的场次*放弃损失的分数)
20 ===============================================================================================================

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-glserver\MPVPPointInfo.cpp 14 KB CPP 文件 2013/3/10 10:26:54 2018/9/13 20:44:19 2018/9/13 20:44:19 2
1 /************************************************************************/
2 /* 跨服战积分信息接口的具体实现                                         */
3 /************************************************************************/
5 #include "stdafx.h"
72 /*
73 =======================================================================================================================
74 获取跨服积分的数据信息
75 =======================================================================================================================
76 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-glserver\MPVPPointManager.cpp 11 KB CPP 文件 2013/3/10 10:26:55 2018/9/13 20:44:19 2018/9/13 20:44:19 5
1 /************************************************************************/
2 /* 跨服战积分管理器的实现                                               */
3 /************************************************************************/
5 #include "stdafx.h"
98 /*
99 ===============================================================================================================
100 注册跨服积分的实现
101 ===============================================================================================================
102 */
220 /*
221 ===============================================================================================================
222 获取指定类型跨服战全部积分信息
223 ===============================================================================================================
224 */
243 /*
244 ===============================================================================================================
245 获取指定跨服战当前的赛季开始周
246 ===============================================================================================================
247 */
266 /*
267 ===============================================================================================================
268 获取指定跨服战当前周
269 ===============================================================================================================
270 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-glserver\MPVPToplist.cpp 8 KB CPP 文件 2013/3/10 10:26:55 2018/9/13 20:44:19 2018/9/13 20:44:19 2
1 /************************************************************************/
2 /* 跨服帮会战排行榜的具体实现		                                    */
3 /************************************************************************/
5 #include "stdafx.h"
25 /*
26 =======================================================================================================================
27 积分数据加载,从跨服积分管理器中加载需要的信息
28 =======================================================================================================================
29 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-glserver\MutiGroupMapServerManager.cpp 18 KB CPP 文件 2013/3/10 10:26:59 2018/9/13 20:44:19 2018/9/13 20:44:19 1
4 Author:Michael		
5 Created:Michael
6 Description :跨服MapServer管理器实现
7 Revision :  2011/06/17 Michael create
9 =============================================================================*/

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-glserver\ServerConnectorManager_GL.cpp 12 KB CPP 文件 2013/3/10 10:27:07 2018/9/13 20:44:19 2018/9/13 20:44:19 2
530 			_NET_TRY
531 			{
532 				// 跨服帮战管理器心跳
533 				ret = g_pMGuildBattleManager->HeartBeat(uTime);
534 				KCheck(ret);
540 			_NET_TRY
541 			{
542 				//处理跨服战积分管理器相关的心跳
543 				ret = g_pMPVPPointManager->HeartBeat(uTime);		
544 				KCheck(ret);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-glserver\TopListManager.cpp 19 KB CPP 文件 2013/3/10 10:27:16 2018/9/13 20:44:19 2018/9/13 20:44:19 1
153 	Register(HONOR_CHARIOT_TOP_LIST_BK,			new TopList,					"Chariot_Honor_bk" );
154 	// add by dragon 战车排行榜 }
156 	// 跨服帮会战排行榜
157 	Register(MPVP_GUILD_CURRENT,			new CurrentMPVPGuildTopList,		"MPVP_Guild_Current" );
158 	Register(MPVP_GUILD_CURRENT_BK,			new TopList,				"MPVP_Guild_Current_bk" );

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-glserver\XGBattleDispatch.cpp 93 KB CPP 文件 2013/3/10 10:27:21 2018/9/13 20:44:19 2018/9/13 20:44:19 25
2507 }
2509 /***********************************************************
2510 desc:	跨服战场 XG 服务器消息处理
2511 auth:	rj
2512 date:	2011-2-14
2520 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2521 	{
2522 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2523 		static IntegerHashMap mapMPVP2v2SignupRecord;
2524 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2526 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2527 		}
2529 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2530 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2531 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2548 		case MPVP_BATTLE_RETSTATE:
2549 			{
2550 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名。值是当前报名的时间。
2551 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2552 				{
2582 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2583 				KCheck(pServePlayer_Target);
2585 				// 转发跨服战场进入通知到报名玩家所在 Map
2586 				GXMPVPBattle msg;
2587 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2613 				if (uPrevSignupTime)
2614 				{
2615 					// 6 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2616 					if (GET_TIME().GetCTime() - uPrevSignupTime > 360)
2617 					{
2719 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2720 				}
2722 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2723 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2724 				msg.SetSignupType(pKMessage->GetSignupType());
2734 				if (NULL != pServePlayer_Target)
2735 				{
2736 					// 转发跨服战场状态到报名玩家所在 Map
2737 					GXMPVPBattle msg;
2738 					msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2752 				if (iServerID)
2753 				{
2754 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2755 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2756 					if (NULL != pServePlayer_Target)
2777 				if (NULL != pServePlayer_Target)
2778 				{
2779 					// 转发跨服战场进入响应到报名玩家所在 Map
2780 					GXMPVPBattle msg;
2781 					msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2793 	else if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_6V6)
2794 	{
2795 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2796 		static IntegerHashMap mapMPVP6v6SignupRecord;
2797 		if (mapMPVP6v6SignupRecord.GetMaxCount() == 0)
2799 			mapMPVP6v6SignupRecord.InitTable(MAX_WORLD_PLAYER);
2800 		}
2802 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2803 		static IntegerHashMap mapMPVP6v6EnterBattleRecord;
2804 		if (mapMPVP6v6EnterBattleRecord.GetMaxCount() == 0)
2821 		case MPVP_BATTLE_RETSTATE:
2822 			{
2823 				// 记录这次跨服 6v6 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 6v6 的报名。值是当前报名的时间。
2824 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2825 				{
2856 				if (NULL != pServePlayer_Target)
2857 				{
2858 					// 转发跨服战场进入通知到报名玩家所在 Map
2859 					GXMPVPBattle msg;
2860 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
2890 				if (uPrevSignupTime)
2891 				{
2892 					// 11 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2893 					if (GET_TIME().GetCTime() - uPrevSignupTime > 660)
2894 					{
2996 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2997 				}
2999 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
3000 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
3001 				msg.SetSignupType(pKMessage->GetSignupType());
3011 				if (NULL != pServePlayer_Target)
3012 				{
3013 					// 转发跨服战场状态到报名玩家所在 Map
3014 					GXMPVPBattle msg;
3015 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
3029 				if (iServerID)
3030 				{
3031 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
3032 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
3033 					if (NULL != pServePlayer_Target)
3054 				if (NULL != pServePlayer_Target)
3055 				{
3056 					// 转发跨服战场进入响应到报名玩家所在 Map
3057 					GXMPVPBattle msg;
3058 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-mapserver\Bus.cpp 66 KB CPP 文件 2013/3/10 10:27:57 2018/9/13 20:44:20 2018/9/13 20:44:20 3
805 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
806 		= CaculateMonsterExpRuler::eCALC_TYPE_TEAM;
808 	//如果是跨服副本
809 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
810 	{
810 	{
811 		nValidMemberCount = GetValidOwnerListGroup(MAX_GROUP_MEMBER,apValidMember);
812 		eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
813 	}
814 	else
1091 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1093 	if(Get_OccupantTeamID() != INVALID_KHAN_ID) iFadeoutType = Obj_ItemRuler::FADE_OUT_TEAM;
1095 	//是否是跨服
1096 	BOOL BGroup = FALSE;
1097 	Map* pMap = GetMap();

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-mapserver\ChangeMapDelegater.cpp 44 KB CPP 文件 2013/3/10 10:28:30 2018/9/13 20:44:20 2018/9/13 20:44:20 2
1546 		pPlayer->ClearMutexState(MS_Fuben);
1547 	}
1549 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1550 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1551 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 10:28:01 2018/9/13 20:44:20 2018/9/13 20:44:20 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-mapserver\CXItemDispatch.cpp 69 KB CPP 文件 2013/3/10 10:28:14 2018/9/13 20:44:20 2018/9/13 20:44:20 1
2233 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
2234 	{
2235 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
2236 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2237 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-mapserver\GMCommand.cpp 217 KB CPP 文件 2013/3/10 10:28:49 2018/9/13 20:44:20 2018/9/13 20:44:20 1
542 	REGISTER_HANDLER(addchariothonour);	// \gm addchariothonour =100	增加战车荣誉
543 	REGISTER_HANDLER(unlockhorse);		// \gm unlockhorse =objid =horseindex  强制解锁骑乘
544 	REGISTER_HANDLER(addguildwin);		// \gm addguildwin =num 增加跨服帮战胜利次数
546 	REGISTER_HANDLER(getviewgroup);		// \gm getviewgroup	//获取当前的可视组
547 	REGISTER_HANDLER(setviewgroup);		// \gm setviewgroup	=groupnum //设置当前的可视组

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-mapserver\GMRoomBattleDispatch.cpp 5 KB CPP 文件 2013/3/10 10:28:49 2018/9/13 20:44:20 2018/9/13 20:44:20 1
53 	else
54 	{
55 		ut_id_map nBackSceneID = g_pFubenManager->GetServerBakSceneID();  //跨服处的副本入口场景
57 		ut_id_map nTarSceneId = pPacket->GetRoomBattle()->u_RoomBattleData.m_SceneID;
58 		

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-mapserver\GXBattleDispatch.cpp 56 KB CPP 文件 2013/3/10 10:28:50 2018/9/13 20:44:20 2018/9/13 20:44:20 6
1482 }
1484 /***********************************************************
1485 desc:	跨服战场 GX 服务器消息处理
1486 auth:	rj
1487 date:	2011-2-14
1504 			case MPVP_BATTLE_SIGNUP:
1505 				{
1506 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1508 					IMPVPBattle *pMPVPBattle = g_pMPVPBattleManager->GetMPVPBattleByType((MPVP_BATTLE_TYPE)pKMessage->GetBattleType());
1509 					//KCheck(pMPVPBattle);
1572 						return MP_CONTINUE;
1573 					}
1575 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1576 					pMPVPBattle->TellPlayerEnterMap(pKMessage, pConnector);
1577 				}
1618 			case MPVP_BATTLE_RETSTATE:
1619 				{
1620 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1621 					pMap->GetLuaSystem()->RunScriptFunction
1622 						(
1634 			case MPVP_BATTLE_RES_ENTERSCENE:
1635 				{
1636 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1637 					pMap->GetLuaSystem()->RunScriptFunction
1638 						(
1665 }
1667 /***********************************************************
1668 desc:	跨服战场场景通知消息处理
1669 auth:	rj
1670 date:	2011-2-14

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 28 KB CPP 文件 2013/3/10 10:28:53 2018/9/13 20:44:20 2018/9/13 20:44:20 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-mapserver\GXMapDispatch.cpp 20 KB CPP 文件 2013/3/10 10:29:00 2018/9/13 20:44:20 2018/9/13 20:44:20 2
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{
588 		return MP_CONTINUE;
589 	}
591 	//以下是跨服的副本的处理
593 	//给报名服务器返回创建成功消息			
594 	MGMRoomBattle* Msg = CREATE_MESSAGE_OBJ(MGMRoomBattle,MESSAGE_MGM_ROOMBATTLE);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-mapserver\KLDaemonThread.cpp 9 KB CPP 文件 2013/3/10 10:29:30 2018/9/13 20:44:21 2018/9/13 20:44:21 3
160 		}
162 		m_OPSteps = 7;
164 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
165 		_NET_TRY
166 		{
165 		_NET_TRY
166 		{
167 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
168 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
169 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-mapserver\LuaFunction_Chat.cpp 63 KB CPP 文件 2013/3/10 10:29:34 2018/9/13 20:44:21 2018/9/13 20:44:21 1
1086 		pMsg->SetCycleCount(nParam);
1087 	g_pServerConnectorMgr->SendMessage_SingleMode(pMsg);
1090 	//世界频道支持跨服
1091 	for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
1092 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-mapserver\LuaFunction_Map.cpp 222 KB CPP 文件 2013/3/10 10:29:39 2018/9/13 20:44:21 2018/9/13 20:44:21 16
259 	SelectMap.m_MapDataType = 0;
260 	SelectMap.m_CopyData = * pFD;
261 	SelectMap.m_CopyData.m_bRoom = false;//非跨服房间类型
263 	if (nRoomType == 1)
264 	{
1713 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1715 	KCheck(szName);
1717 	// 2010-11-2 对发送脚本邮件进行跨服支持
1718 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1720 	if (INVALID_KHAN_ID == selfId)
6036 	return 0;
6037 }
6039 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
6040 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
6041 {
6062 	LUA_RETURNERROR_1;
6063 }
6065 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
6066 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
6067 {
6109 	return 0;
6110 }
6112 // 跨服 6v6 战场场景注册函数
6113 int32 LuaFunction_MPVP6v6RegisterMap(Lua_State *L)
6114 {
6135 	LUA_RETURNERROR_1;
6136 }
6138 // 跨服 6v6 战场场景更新战场 UI 面板
6139 int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
6140 {
6182 	return 0;
6183 }
6185 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
6186 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
6187 //{
6209 //}
6210 //
6211 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
6212 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
6213 //{
6279 //}
6280 //
6281 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
6282 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
6283 //{
6349 //}
6350 //
6351 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
6352 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
6353 //{
6383 //}
6384 //
6385 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
6386 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
6387 //{
6430 //}
6431 //
6432 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
6433 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
6434 //{
6482 //}
6483 //
6484 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
6485 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
6486 //{
6527 //}
6528 //
6529 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
6530 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
6531 //{
7373 	return 0;
7374 }
7376 // 跨服战场场景注册函数
7377 int32 LuaFunction_MPVPRegisterMap(Lua_State *L)
7378 {
7468 	if(pMap)
7469 	{
7470 		// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
7471 		int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
7472 			(

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-mapserver\LuaSystem_Function.cpp 146 KB CPP 文件 2013/3/10 10:29:50 2018/9/13 20:44:21 2018/9/13 20:44:21 10
1195 	m_LuaVM.RegisterFunction("AddBattleHonour", (void *) (LuaFunction_AddBattleHonour));							// 增加战功
1196 	m_LuaVM.RegisterFunction("SubBattleHonour", (void *) (LuaFunction_SubBattleHonour));							// 减少战功
1197 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));					// 跨服 2v2 战场注册场景 
1198 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));			// 跨服 2v2 战场名称显示
1199 	m_LuaVM.RegisterFunction("MPVP6v6RegisterScene", (void *) (LuaFunction_MPVP6v6RegisterMap));					// 跨服 6v6 战场注册场景
1200 	m_LuaVM.RegisterFunction("SetMPVP6v6BattleDisable", (void *) (LuaFunction_SetMPVP6v6BattleDisable));			// 跨服 6v6 战场名称显示
1201 	m_LuaVM.RegisterFunction("MPVPRegisterMap", (void *) (LuaFunction_MPVPRegisterMap));							// 跨服战场注册场景
1202 	m_LuaVM.RegisterFunction("CountryIsFortuneTimeEx", (void *) (LuaFunction_CountryIsFortuneTimeEx));				// 获取特定国家的国运是否进行
1203 	m_LuaVM.RegisterFunction("AddCountryResourceWithRecall", (void *) (LuaFunction_AddCountryResourceWithRecall));	// 比较并增加的修改资源,保证同步
1316 	m_LuaVM.RegisterFunction("IsLeague", (void*)(LuaFunction_IsLeague));											// 判断两国是否是弱国联盟
1317 	m_LuaVM.RegisterFunction("CountryLeagueZhaoji", (void*)(LuaFunction_CountryLeagueZhaoji));						// 发送联盟召集令
1318 	m_LuaVM.RegisterFunction("AskEnterMGuildBattleScene",(void*)(LuaFunction_AskEnterMGuildBattleScene)); 			// 请求进入跨服帮会战场
1319 	m_LuaVM.RegisterFunction("MGuildBattleSignup",(void*)(LuaFunction_MGuildBattleSignup)); 						// 跨服帮会战报名
1320 	m_LuaVM.RegisterFunction("MGuildBattleResult",(void*)(LuaFunction_MGuildBattleResult)); 						// 跨服帮会战结果
1321 	m_LuaVM.RegisterFunction("MGuildBattleSeasonWeek",(void*)(LuaFunction_MGuildBattleSeasonWeek)); 				// 跨服帮会战赛季当前周数
1322 	m_LuaVM.RegisterFunction("GetMGuildNumOfBattleCurSeason", (void*)(LuaFunction_GetMGuildNumOfBattleCurSeason));	// 获取跨服帮战当前赛季的场数
1323 	m_LuaVM.RegisterFunction("SetEquipPokerData",(void*)(LuaFunction_SetEquipPokerData));							// 设置装备扑克牌属性
1324 	m_LuaVM.RegisterFunction("SetEquipPokerCount",(void*)(LuaFunction_SetEquipPokerCount));							// 设置装备扑克牌个数

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-mapserver\MapCore.cpp 39 KB CPP 文件 2013/3/10 10:29:55 2018/9/13 20:44:21 2018/9/13 20:44:21 2
612 			if(	(pSceneData->m_uExtraType & EXTRA_MAPTYPE_FUBENENTRANCE) ||
613 				g_Config.m_ConfigInfo.IsGardenMap(pSceneData->m_MapID) || //家园场景副本入口
614 				pSceneData->m_MapID == g_pFubenManager->GetServerBakSceneID())//  支持跨服副本				
615 			{
616 				//以上场景是副本入口场景 创建副本数据
670 				m_bFirstInit = FALSE;
671 			}
672 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
673 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
674 			{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-mapserver\MapManager.cpp 64 KB CPP 文件 2013/3/10 10:29:58 2018/9/13 20:44:21 2018/9/13 20:44:21 3
1743 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1744 		{
1745 			KCheck(FALSE);//跨服服务器上找不到报错
1746 		}
1748 		return INVALID_KHAN_ID;
2026 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2027 	{
2028 		//以下开始通知广播,支持跨服架构
2029 		for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
2030 		{
2058 BOOL FubenManager::BroadcastFubenSceneInfo(void)
2059 {
2060 	//如果不开跨服副本，不广播
2061 	if (g_Config.m_MultiGroupConfig.IsMultMapOpen() == FALSE)
2062 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-mapserver\MapServer.cpp 35 KB CPP 文件 2013/3/10 10:29:59 2018/9/13 20:44:21 2018/9/13 20:44:21 1
612 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
613 	
614 	// 跨服战场管理器 2010-10-13 by rj
615 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
616 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-mapserver\MGuildBattle.cpp 28 KB CPP 文件 2013/3/10 10:29:51 2018/9/13 20:44:21 2018/9/13 20:44:21 3
1 /***********************************************************
2 desc:	跨服帮会战场实现
3 auth:	txp
4 date:	2011-6-10
122 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，
123 		// 为这个很少出现的异常进行处理。
124 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，
125 		// 如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
126 		if (FindSignup(pSignupPlayers[i].iWorldID, pSignupPlayers[i].GuildID))
427 		m_MatchList.m_aMatch[m_MatchList.m_nCount].m_bFinished = FALSE;
429 		int32 nLevelFlag=0, nDisLevel = s1.m_nSignupLevel - s2.m_nSignupLevel;
431 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
432 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
433 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-mapserver\Monster.cpp 67 KB CPP 文件 2013/3/10 10:30:03 2018/9/13 20:44:21 2018/9/13 20:44:21 6
652 		return 0;
653 	}
655 	//如果是跨服副本
656 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
657 	{
891 		return;
892 	}
894 	//跨服副本
895 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
896 	{
928 	Player *apValidMember[MAX_GROUP_MEMBER];
929 	uint32 nValidMemberCount = 0;
931 	// 跨服副本
932 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
933 	{
1008 		nExp = (int32) (m_BaseExp * fExpParam);
1009 	}
1011 	uint32	auExp[MAX_GROUP_MEMBER];//  for 跨服军团
1012 	int32	_Idx;
1014 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
1023 			if (pMap->m_FubenDataParty.IsRoomType())
1024 			{
1025 				eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
1026 			}
1027 		}
2192 		return 0;
2193 	}
2195 	//场景类型必须为跨服副本
2196 	Map* pMap = GetMap();
2197 	if (NULL == pMap)

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-mapserver\MPVP2v2Battle.cpp 35 KB CPP 文件 2013/3/10 10:29:52 2018/9/13 20:44:21 2018/9/13 20:44:21 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
249 		{
250 			// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
251 			// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
252 			if (FindSignup(pSignupPlayers[i].uSNID))
253 			{
649 			nLevelFlag = 0;
650 		}
652 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
653 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
654 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-mapserver\MPVP6v6Battle.cpp 30 KB CPP 文件 2013/3/10 10:29:52 2018/9/13 20:44:21 2018/9/13 20:44:21 3
1 /***********************************************************
2 desc:	跨服 6v6 战场实现
3 auth:	txp
4 date:	2011-3-16
154 	{
155 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
156 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
157 		if (FindSignup(pSignupPlayers[i].uSNID))
158 		{
536 			nLevelFlag = 0;
537 		}
539 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
540 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
541 		KCheck(pMap);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 10:29:53 2018/9/13 20:44:21 2018/9/13 20:44:21 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
97 	__UNGUARD__ return FALSE;
98 }
100 // 以类型方式获得跨服战场类
101 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
102 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 20 KB CPP 文件 2013/3/10 10:30:31 2018/9/13 20:44:21 2018/9/13 20:44:21 4
34 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
35 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
37 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
38 		SSHandShake msg;
39 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());
281 	if(g_Config.m_MultiGroupConfig.IsSignUpServer())
282 	{
283 		//只要一组服务器连接正常,跨服房间管理器的心跳仍然执行 
284 		if (GetGLServerActiveCount() > 0)
285 		{
602 				{
603 					AddGroupTmp( connID, g_Config.m_MultiGroupConfig.m_GLServerInfo[i].m_WorldID );
605 					//2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，
606 					//当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
607 					SSHandShake msg;
678 	if(FALSE == IsGLServerActiveTmp())//处理断线重连
679 	{
680 		//跨服重连机制
681 		if (FALSE == m_ConnectTimer.IsSetTimer())
682 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-mapserver\SignUpMgr.cpp 83 KB CPP 文件 2013/3/10 10:30:33 2018/9/13 20:44:21 2018/9/13 20:44:21 1
4 Author:shangy		
5 Created:shangy    
6 Description :跨服报名管理类
7 Revision :  2011/06/20 shangy create
8 			2011/08/05 Michael Lin Modify

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/10 11:02:00 2018/9/13 20:44:22 2018/9/13 20:44:22 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/10 11:02:01 2018/9/13 20:44:22 2018/9/13 20:44:22 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/10 11:02:01 2018/9/13 20:44:22 2018/9/13 20:44:22 1
199 }
200 	
201 // 2010-10-9 by rj 跨服线程连接方式
202 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
203 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-share\Core\Setting.cpp 97 KB CPP 文件 2013/3/10 11:02:05 2018/9/13 20:44:22 2018/9/13 20:44:22 6
343 /*
344 =======================================================================================================================
345  加载跨服配置信息
346 =======================================================================================================================
347 */
357 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
358 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
360 	// 跨服战场最大场景数量配置 2010-9-23 by rj
361 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
362 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
363 	
364 	m_MultiGroupConfig.m_nMaxMGuildMapCnt = ini.Get_Property_Int("MGuild", "Max_SceneCount");
365 	KCheckEx(m_MultiGroupConfig.m_nMaxMGuildMapCnt>0 && m_MultiGroupConfig.m_nMaxMGuildMapCnt<=MGUILD_MAX_MAPCOUNT, "跨服帮战场景数量要小于512");
367 // 	m_MultiGroupConfig.m_nMGuildBeginWeek = ini.Get_Property_Int("MGuild", "BeginWeek");
368 // 	KCheckEx(m_MultiGroupConfig.m_nMGuildBeginWeek>0 && m_MultiGroupConfig.m_nMGuildBeginWeek<=52, "起始周只能在1-52之间");
382 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
383 		
384 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
386 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
388 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);
445 		}		
446 	}
448 	//跨服关卡报名服务器开关 
449 	m_MultiGroupConfig.m_SignUpServerToggle = ini.Get_Property_Int( "Room", "SignUpServerToggle" );
450 	m_MultiGroupConfig.m_MapFubenToogle = ini.Get_Property_Int( "Room", "MapFubenToogle" );
1106 	m_ConfigInfo.m_nEmpireOfficerMinLevel = ini.Get_Property_Int("Empire","OfficerMinLevel");
1107 	//[Empire] End
1109 	//added for跨服军团  
1110 	for (int32 _nGIndex = 0; _nGIndex < MAX_GROUP_MEMBER; ++_nGIndex)
1111 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-share\DataBase\ArchiveInterface.cpp 376 KB CPP 文件 2013/3/10 11:02:07 2018/9/13 20:44:22 2018/9/13 20:44:22 1
10029 }
10031 /************************************************************************/
10032 /* 跨服战积分相关                                                       */
10033 /************************************************************************/
10035 /*

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-share\DataBase\SqlStatement.cpp 25 KB CPP 文件 2013/3/10 11:02:09 2018/9/13 20:44:22 2018/9/13 20:44:22 1
248 char	*g_LoadLostItemInfo = "select aid,playerguid,srcplayerguid,srcplayername,guid,world,server,itemclass,creator,dataproperty,data,termendtime,islock,unlocktime,gmoptime from %s where aid>%u order by aid asc" ;
249 char	*g_DelLostItemInfo = "delete from %s where aid=%u";
251 // 跨服战积分相关处理
252 char	*LoadMPVPPointInfo = "select unitid, unitname, world, currentpoint, totalpoint, currentwintimes, currentjointimes, totalwintimes, totaljointimes, mpvptypename, currentweek, startweek, params from %s where valid = 1";
253 char	*SaveMPVPPointInfo = "call proc_save_mpvppoint(%d,\'%s\', %d, %d, %d, %d, %d, %d, %d, \'%s\', %d, %d, %d, 1)";

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-share\Messages\StructRoomBattle.cpp 68 KB CPP 文件 2013/3/10 11:04:25 2018/9/13 20:44:25 2018/9/13 20:44:25 19
4 Author:Michael		
5 Created:Michael    
6 Description :跨服房间相关结构
7 Revision :  2011/06/21 Michael create
9 =============================================================================*/
791 }
794 /************************************************************************/
795 /* 跨服报名候选数据结构定义  		                                    */
796 /************************************************************************/
797 BOOL RoomBattleSignupInfo::IsRoomIDInList(ut_id_room nRoomID) const
931 }
932 /************************************************************************/
933 /* 跨服报名候选数据结构定义 客户端消息结构                              */
934 /************************************************************************/
935 void RoomBattleSignupInfo_CX_Msg::Clear()
972 }
974 /************************************************************************/
975 /* 跨服取消报名结构定义   客户端消息结构	                           */
976 /************************************************************************/
977 void RoomBattleSignupCancel_CX_Msg::Clear()
1002 }
1004 /************************************************************************/
1005 /* 跨服确认进入结构定义    客户端消息结构	                           */
1006 /************************************************************************/
1007 void RoomBattleWaitingEnter_CX_Msg::Clear()
1109 }
1111 /************************************************************************/
1112 /* 跨服玩家确认结构定义    服务器消息结构	                           */
1113 /************************************************************************/
1114 void RoomBattlePlayerEnter_XC_Msg::Clear()
1148 }
1150 /************************************************************************/
1151 /* 跨服军团成员离开    服务器消息结构	                                */
1152 /************************************************************************/
1153 void RoomBattlePlayerLeave_XC_Msg::Clear()
1207 }
1210 /************************************************************************/
1211 /* 跨服确认进入结构定义    服务器消息结构	                           */
1212 /************************************************************************/
1213 void RoomBattleWaitingEnter_XC_Msg::Clear()
1581 }
1582 /************************************************************************/
1583 /* 跨服MapServer信息                  		                            */
1584 /************************************************************************/
1585 float SMutiGroupMapServerInfo::GetUseRate() const
1725 }
1727 /************************************************************************/
1728 /* 跨服关卡消息结构定义 MGP-->GL               		                    */
1729 /************************************************************************/
1730 uint32 MsgMGRoomBattle::GetMsgSize() const
1802 }
1804 /************************************************************************/
1805 /* 跨服关卡消息结构定义 GL-->MGP               		                    */
1806 /************************************************************************/
1807 uint32 MsgGMRoomBattle::GetMsgSize() const
1894 }
1895 /************************************************************************/
1896 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消            */
1897 /************************************************************************/
1898 uint32 MsgXGMRoomBattle_ReplyEnter::GetMsgSize()const
1931 }
1933 /************************************************************************/
1934 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消广播            */
1935 /************************************************************************/
1936 uint32 MsgXGMRoomBattle_ReplyEnter_BROADCAST::GetMsgSize()const
1969 }
1971 /************************************************************************/
1972 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  客户端确认离开，重新返回报名状态 */
1973 /************************************************************************/
1974 uint32 MsgXGMRoomBattle_Leave::GetMsgSize()const
2007 }
2009 /************************************************************************/
2010 /* 跨服关卡消息结构定义 MGP-->GL-->MGP        		                    */
2011 /************************************************************************/
2012 uint32 MsgMGMRoomBattle::GetMsgSize() const
2066 }
2068 /************************************************************************/
2069 /* 跨服关卡消息结构定义 MAP-->GL-->MGP        		                    */
2070 /************************************************************************/
2071 uint32 MsgXGMRoomBattle::GetMsgSize() const
2185 }
2187 /************************************************************************/
2188 /* 跨服关卡消息结构定义 MGP-->GL-->MAP        		                    */
2189 /************************************************************************/
2190 uint32 MsgMGXRoomBattle::GetMsgSize() const
2301 }
2303 /************************************************************************/
2304 /* 跨服关卡消息结构定义 Client-->MAP        		                    */
2305 /************************************************************************/
2306 uint32 MsgCXRoomBattle::GetMsgSize() const
2396 }
2398 /************************************************************************/
2399 /* 跨服关卡消息结构定义 MAP-->Client        		                    */
2400 /************************************************************************/
2401 uint32 MsgXCRoomBattle::GetMsgSize() const

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-share\TAB\TabDefine_Map_Misc.cpp 97 KB CPP 文件 2013/3/10 11:06:38 2018/9/13 20:44:28 2018/9/13 20:44:28 2
2223 /*
2224 =======================================================================================================================
2225 跨服关卡 逻辑数据表
2226 =======================================================================================================================
2227 */
2279 /*
2280 =======================================================================================================================
2281 跨服关卡 配置数据表
2282 =======================================================================================================================
2283 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khan3_tgwc_release\src\khan2-share\TAB\TabDefine_Share.cpp 72 KB CPP 文件 2013/3/10 11:06:41 2018/9/13 20:44:28 2018/9/13 20:44:28 2
1031 {
1032 	__GUARD__
1034 	//如果不开跨服副本，默认不读BackScene
1035 	if (g_Config.m_MultiGroupConfig.m_nGroupCount <= 0)
1036 	{
1087 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0) 
1088 	{
1089 		//如果是跨服MapServer确保BackScene有配置
1090 		KCheckEx(bFindCurrServerBackScene,"BakSceneInfo.tab表配置错误");
1091 	}

H:\work\source\成吉思汗\[src.cool]成吉思汗\khanweb\Src\MapServer\Server\Connector\ServerConnectorManager_MapServer.cpp 19 KB CPP 文件 2013/3/3 10:18:00 2018/9/13 20:45:44 2018/9/13 20:45:44 3
250 	if(g_Config.m_MultiGroupConfig.IsSignUpServer())
251 	{
252 		//只要一组服务器连接正常,跨服房间管理器的心跳仍然执行 
253 		//added by Michael 2011-10-26
254 		if (GetGLServerActiveCount() > 0)
654 				{
655 					AddGroupTmp( connID, g_Config.m_MultiGroupConfig.m_GLServerInfo[i].m_WorldID );
657 					//2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，
658 					//当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
659 				//	SSHandShake msg;
687 	if(FALSE == IsGLServerActiveTmp())//处理断线重连
688 	{
689 		//added by Michael 2011-06-23 跨服重连机制
691 		if (FALSE == m_ConnectTimer.IsSetTimer())
692 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khanweb\Src\MapServer\Server\GameLogic\Item_Manager.cpp 15 KB CPP 文件 2013/3/3 10:18:22 2018/9/13 20:45:44 2018/9/13 20:45:44 1
278 {
279 	__GUARD__ ig.m_Server = (uchar) m_ServerId;
280 	ig.m_World = (uchar) m_WorldId; //todo 跨服是否需要处理 added by Michael Lin 2011-07-28
281 	ig.m_Serial = GenItemSN();
283 	return TRUE;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khanweb\Src\MapServer\Server\GameLogic\SignUpMgr.cpp 82 KB CPP 文件 2013/3/3 10:18:35 2018/9/13 20:45:44 2018/9/13 20:45:44 1
4 Author:shangy		
5 Created:shangy    
6 Description :跨服报名管理类
7 Revision :  2011/06/20 shangy create
8 			2011/08/05 Michael Lin Modify

H:\work\source\成吉思汗\[src.cool]成吉思汗\khanweb\Src\MapServer\Server\Map\FubenManager.cpp 15 KB CPP 文件 2013/3/3 10:18:53 2018/9/13 20:45:45 2018/9/13 20:45:45 2
94 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
95 	{
96 		KCheck(FALSE);//跨服服务器上找不到报错
97 	}
98 	
456 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
457 	{
458 		//以下开始通知广播,支持跨服架构
459 		for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
460 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khanweb\Src\MapServer\Server\Map\MapCore.cpp 38 KB CPP 文件 2013/3/3 10:18:55 2018/9/13 20:45:45 2018/9/13 20:45:45 1
576 		{
577 			if ((pSceneData->m_uExtraType & EXTRA_MAPTYPE_FUBENENTRANCE) ||
578 				pSceneData->m_MapID == g_pFubenManager->GetServerBakSceneID()) //modify by Michael 2011-07-08 支持跨服副本
579 			{
580 				//以上场景是副本入口场景 创建副本数据

H:\work\source\成吉思汗\[src.cool]成吉思汗\khanweb\Src\MapServer\Server\Messages\CXUseItemDispatch.cpp 8 KB CPP 文件 2013/3/3 10:20:05 2018/9/13 20:45:46 2018/9/13 20:45:46 1
115 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
116 	{
117 // 		by rj 2010-10-20 对跨服场景使用物品进行许可限制 
118 // 				if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
119 // 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khanweb\Src\MapServer\Server\Messages\GMRoomBattleDispatch.cpp 5 KB CPP 文件 2013/3/3 10:20:07 2018/9/13 20:45:46 2018/9/13 20:45:46 1
53 	else
54 	{
55 		MapID_t nBackSceneID = g_pFubenManager->GetServerBakSceneID();  //跨服处的副本入口场景
57 		MapID_t nTarSceneId = pPacket->GetRoomBattle()->u_RoomBattleData.m_SceneID;
58 		

H:\work\source\成吉思汗\[src.cool]成吉思汗\khanweb\Src\MapServer\Server\Messages\GXRetChangeSceneDispatch.cpp 6 KB CPP 文件 2013/3/3 10:20:20 2018/9/13 20:45:46 2018/9/13 20:45:46 1
106 				KCheck(MapID != INVALID_ID);
108 				ID_t		ServerID = g_pMapManager->GetMapData(MapID)->m_ServerID;
111 				// 2011-06-28 by Michael 根据跨服不同进行不同 ip port 查找
112 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
113 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khanweb\Src\MapServer\Server\Messages\XXMapNotifyDispatch.cpp 5 KB CPP 文件 2013/3/3 10:20:28 2018/9/13 20:45:46 2018/9/13 20:45:46 1
61 		return MP_CONTINUE;
62 	}
64 	//以下是跨服的副本的处理
66 	//给报名服务器返回创建成功消息			
67 	MGMRoomBattle* Msg = CREATE_PACKET_OBJ(MGMRoomBattle,PACKET_MGM_ROOMBATTLE);

H:\work\source\成吉思汗\[src.cool]成吉思汗\khanweb\Src\MapServer\Server\Object\Bus.cpp 61 KB CPP 文件 2013/3/3 10:20:30 2018/9/13 20:45:46 2018/9/13 20:45:46 3
798 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
799 		= CaculateMonsterExpRuler::eCALC_TYPE_TEAM;
801 	//如果是跨服副本
802 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
803 	{
803 	{
804 		nValidMemberCount = GetValidOwnerListGroup(MAX_GROUP_MEMBER,apValidMember);
806 		eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
807 	}
808 	else
1083 		iFadeoutType = Obj_ItemRuler::FADE_OUT_TEAM;
1084 	}
1086 	//是否是跨服
1087 	BOOL BGroup = FALSE;
1088 	Map* pMap = GetMap();

H:\work\source\成吉思汗\[src.cool]成吉思汗\khanweb\Src\MapServer\Server\Object\Monster.cpp 78 KB CPP 文件 2013/3/3 10:20:39 2018/9/13 20:45:47 2018/9/13 20:45:47 6
1308 		return 0;
1309 	}
1311 	//如果是跨服副本
1312 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
1313 	{
1396 		return 0;
1397 	}
1399 	//场景类型必须为跨服副本
1400 	Map* pMap = GetMap();
1401 	if (NULL == pMap)
1782 		return;
1783 	}
1785 	//跨服副本
1786 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
1787 	{
1816 		return;
1817 	}
1819 	//跨服副本
1820 	Player* apValidMember[MAX_GROUP_MEMBER];
1821 	uint32 nValidMemberCount = 0;
2032 		nExp = (int32) (m_BaseExp * g_Config.m_ConfigInfo.m_ExpParam);
2033 	}
2035 	uint32	auExp[MAX_GROUP_MEMBER];//modify by Michael Lin 2011-07-26 for 跨服军团
2036 	int32	i;
2038 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
2047 			if (pMap->m_FubenDataParty.IsRoomType())
2048 			{
2049 				eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
2050 			}
2051 		}

H:\work\source\成吉思汗\[src.cool]成吉思汗\khanweb\Src\MapServer\Server\Run\ThreadManager.cpp 9 KB CPP 文件 2013/3/3 10:21:08 2018/9/13 20:45:47 2018/9/13 20:45:47 8
131 	
132 	int32 nServertype = g_Config.GetCurrentServerInfo()->m_Type;	
134 	//跨服服务器线程
135 	if ( SERVER_MID_MGSERVER == nServertype
136 		||SERVER_TOP_MGSERVER == nServertype)
142 		QLogSystem::SLOW_LOG(SLOW_LOG_SERVER,"ThreadSingleton::Init,Create MGServiceThread,thrCount=%d",m_nThreads);
143 	}		
145 	//跨服客户端线程
146 	if ( SERVER_GAME == nServertype
147 		|| SERVER_MID_MGSERVER == nServertype)
214 		ret = m_pMapThreadContainer->IsAllRun();
216 	}while(!ret);
218 	//3.1跨服客户端异步连接线程
219 	if (m_pAsyConnectMGServerThread)
220 	{
228 	}
229 	
230 	//3.2 跨服客户端线程
231 	if (m_pMGClientThread)
232 	{
239 		}while(!ret);
240 	}
242 	//3.3跨服服务器线程
243 	if (m_pMGServiceThread)
244 	{
312 		}while(!ret);
313 	}
315 	//1.1跨服服务器线程
316 	if (m_pMGServiceThread)
317 	{
324 		}while(!ret);
325 	}
327 	//1.2跨服客户端线程
328 	if (m_pMGClientThread)
329 	{
336 		}while(!ret);
337 	}
339 	//1.3跨服客户端异步连接线程
340 	if (m_pAsyConnectMGServerThread)
341 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khanweb\Src\MapServer\Server\Script\LuaFunction_Chat.cpp 66 KB CPP 文件 2013/3/3 10:21:13 2018/9/13 20:45:47 2018/9/13 20:45:47 1
1073 		LUA_RETURNERROR_1;
1074 	}
1076 	//世界频道支持跨服 added by Michael Lin 2011-08-07
1077 	for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
1078 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khanweb\Src\Share\StructRoomBattle.cpp 111 KB CPP 文件 2013/3/3 10:03:18 2018/9/13 20:45:50 2018/9/13 20:45:50 21
4 Author:Michael		
5 Created:Michael    
6 Description :跨服房间相关结构
7 Revision :  2011/06/21 Michael create
9 =============================================================================*/
813 }
816 /************************************************************************/
817 /* 跨服报名候选数据结构定义  		                                    */
818 /************************************************************************/
819 BOOL RoomBattleSignupInfo::IsRoomIDInList(RoomID_t nRoomID) const
953 }
954 /************************************************************************/
955 /* 跨服报名候选数据结构定义 客户端消息结构                              */
956 /************************************************************************/
957 void RoomBattleSignupInfo_CX_Msg::Clear()
994 }
996 /************************************************************************/
997 /* 跨服取消报名结构定义   客户端消息结构	                           */
998 /************************************************************************/
999 void RoomBattleSignupCancel_CX_Msg::Clear()
1024 }
1026 /************************************************************************/
1027 /* 跨服确认进入结构定义    客户端消息结构	                           */
1028 /************************************************************************/
1029 void RoomBattleWaitingEnter_CX_Msg::Clear()
1119 }
1121 /************************************************************************/
1122 /* 跨服玩家确认结构定义    服务器消息结构	                           */
1123 /************************************************************************/
1124 void RoomBattlePlayerEnter_XC_Msg::Clear()
1158 }
1160 /************************************************************************/
1161 /* 跨服军团成员离开    服务器消息结构	                                */
1162 /************************************************************************/
1163 void RoomBattlePlayerLeave_XC_Msg::Clear()
1217 }
1220 /************************************************************************/
1221 /* 跨服确认进入结构定义    服务器消息结构	                           */
1222 /************************************************************************/
1223 void RoomBattleWaitingEnter_XC_Msg::Clear()
1591 }
1592 /************************************************************************/
1593 /* 跨服MapServer信息                  		                            */
1594 /************************************************************************/
1595 bool SMutiGroupMapServerInfo::IsValid( void ) const
1712 }
1714 /************************************************************************/
1715 /* 跨服关卡消息结构定义 MGP-->GL               		                    */
1716 /************************************************************************/
1717 uint32 MsgMGRoomBattle::GetMsgSize() const
1789 }
1791 /************************************************************************/
1792 /* 跨服关卡消息结构定义 GL-->MGP               		                    */
1793 /************************************************************************/
1794 uint32 MsgGMRoomBattle::GetMsgSize() const
1881 }
1882 /************************************************************************/
1883 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消            */
1884 /************************************************************************/
1885 uint32 MsgXGMRoomBattle_ReplyEnter::GetMsgSize()const
1918 }
1920 /************************************************************************/
1921 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消广播            */
1922 /************************************************************************/
1923 uint32 MsgXGMRoomBattle_ReplyEnter_BROADCAST::GetMsgSize()const
1956 }
1958 /************************************************************************/
1959 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  客户端确认离开，重新返回报名状态 */
1960 /************************************************************************/
1961 uint32 MsgXGMRoomBattle_Leave::GetMsgSize()const
1994 }
1996 /************************************************************************/
1997 /* 跨服关卡消息结构定义 MGP-->GL-->MGP        		                    */
1998 /************************************************************************/
1999 uint32 MsgMGMRoomBattle::GetMsgSize() const
2053 }
2055 /************************************************************************/
2056 /* 跨服关卡消息结构定义 MAP-->GL-->MGP        		                    */
2057 /************************************************************************/
2058 uint32 MsgXGMRoomBattle::GetMsgSize() const
2172 }
2174 /************************************************************************/
2175 /* 跨服关卡消息结构定义 MGP-->GL-->MAP        		                    */
2176 /************************************************************************/
2177 uint32 MsgMGXRoomBattle::GetMsgSize() const
2288 }
2290 /************************************************************************/
2291 /* 跨服关卡消息结构定义 Client-->MAP        		                    */
2292 /************************************************************************/
2293 uint32 MsgCXRoomBattle::GetMsgSize() const
2383 }
2385 /************************************************************************/
2386 /* 跨服关卡消息结构定义 MAP-->Client        		                    */
2387 /************************************************************************/
2388 uint32 MsgXCRoomBattle::GetMsgSize() const
2853 }
2855 /************************************************************************/
2856 /* 跨服关卡消息结构定义 Client-->MAP        		                    */
2857 /************************************************************************/
2858 uint32 MsgCXPKRoom::GetMsgSize() const
3703 }
3706 /************************************************************************/
3707 /* 跨服关卡消息结构定义 MAP-->GL-->MGP        		                    */
3708 /************************************************************************/
3709 uint32 MsgXGMPKRoom::GetMsgSize() const

H:\work\source\成吉思汗\[src.cool]成吉思汗\khanweb\Src\Share\Connector\ServerConnectorManager.cpp 10 KB CPP 文件 2013/3/3 10:04:26 2018/9/13 20:45:48 2018/9/13 20:45:48 1
224 	__UNGUARD__
225 }
227 // 2011-10-27 by Michael 跨服线程连接方式(非阻塞)
228 Connector *ServerConnectorManager::ConnectToServerNonBlock(const char* ip,uint16 port,ID_t serverid,ConnectorID_t& connID,BOOL bCreate, BOOL bSendSS)
229 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\khanweb\Src\Share\Core\BaseTool_Log.cpp 27 KB CPP 文件 2013/3/3 10:04:29 2018/9/13 20:45:48 2018/9/13 20:45:48 1
384 			if (g_Config.m_MultiGroupConfig.m_nGroupCount >  0)
385 			{
386 				iWorldID = INVALID_ID;//跨服上WorldID无效
387 			}
389 			int iMapID	 = g_Config.m_ConfigInfo.m_ServerID;

H:\work\source\成吉思汗\[src.cool]成吉思汗\khanweb\Src\Share\Core\Setting.cpp 98 KB CPP 文件 2013/3/3 10:04:36 2018/9/13 20:45:48 2018/9/13 20:45:48 4
340 /*
341 =======================================================================================================================
342  加载跨服配置信息
343 =======================================================================================================================
344 */
368 		m_MultiGroupConfig.m_GLServerInfo[i].m_Port = ini.Get_Property_Int( szSection, "gl_port" );
369 		m_MultiGroupConfig.m_GLServerInfo[i].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
371 		// 2011-11-05 by Michael Lin 改变跨服配置文件结构
372 		int32 nMapCount = ini.Get_Property_Int(szSection,"map_count");
373 		KCheckEx(nMapCount >= 0 && nMapCount <= PERGROUP_MAX_MAPCOUNT,
390 		}
391 	}
393 	//跨服关卡报名服务器开关 added by Michael Lin 2011-08-03
394 	m_MultiGroupConfig.m_SignUpServerToggle = ini.Get_Property_Int( "Room", "SignUpServerToggle" );
396 	__UNGUARD__
1113 	m_ConfigInfo.m_nVendueBidIncreaseLimit = ini.Get_Property_Int("Vendue", "VendueBidIncreaseLimit");
1114 	m_ConfigInfo.m_nVendueBargainOnTax = ini.GetFloat("Vendue", "VendueBargainOnTax") / 1000;
1116 	//added for跨服军团 by Michael Lin 2011-07-26
1117 	for (int32 _nGIndex = 0; _nGIndex < MAX_GROUP_MEMBER; ++_nGIndex)
1118 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\khanweb\Src\Share\TAB\TabDefine_Map_Misc.cpp 126 KB CPP 文件 2013/3/3 10:07:59 2018/9/13 20:45:50 2018/9/13 20:45:50 2
2456 /*
2457 =======================================================================================================================
2458 跨服关卡 逻辑数据表
2459 =======================================================================================================================
2460 */
2515 /*
2516 =======================================================================================================================
2517 跨服关卡 配置数据表
2518 =======================================================================================================================
2519 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\khanweb\Src\Share\TAB\TabDefine_Share.cpp 105 KB CPP 文件 2013/3/3 10:08:05 2018/9/13 20:45:50 2018/9/13 20:45:50 1
1293 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0) 
1294 	{
1295 		//如果是跨服MapServer确保BackScene有配置
1296 		KCheckEx(bFindCurrServerBackScene,"BakSceneInfo.tab表配置错误");
1297 	}

H:\work\source\成吉思汗\[src.cool]成吉思汗\khanweb\Src\Tools\MyRobot2\PacketHandle\XCRoomBattleHandler.cpp 3 KB CPP 文件 2013/3/3 10:25:11 2018/9/13 20:46:24 2018/9/13 20:46:24 1
72 			default:
73 				{
74 					pAgent->getLuaState()->DoString("XCRetCreateBattleHandler(\"ERROR\")");//跨服失败
75 				}
76 		}

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\Client\Game\GameManager\GameStateChangeServer.cpp 8 KB CPP 文件 2013/3/3 13:28:12 2018/9/13 20:52:39 2018/9/13 20:52:39 1
210 			::GetPrivateProfileString( "Debug", "Login.WorldID", "", szReadTemp, MAX_PATH, DEBUG_FILE_NAME );
211 			static ID_t s_nWorldID = atoi(szReadTemp); 
212 			GAME_DATA_PLAYER_PTR->SetWorldID(s_nWorldID); //added by Michael 2011-06-27 支持跨服自架测试
213 		}
214 	}

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\Client\Game\GameManager\GameStateRun.cpp 87 KB CPP 文件 2013/3/3 13:28:16 2018/9/13 20:52:39 2018/9/13 20:52:39 2
642 	//请求帮会令数据
643 	GAME_DATA_PTR->askGuildOrderData();
645 	//跨服关卡的处理  2011-08-26 added by Michael Lin
647 	//清除小地图上的军团信息
648 	GAME_DATA_RELATION_PTR->GetCorps()->ClearCorpsInfo();
659 	//请求军团数据
660 	GAME_DATA_QUEST_PTR->AskRoomBattleGroupData();
661 	/////跨服关卡的处理	
662 }
664 // 判断场景是否加载完毕， 处理进入游戏事件

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\Client\Game\Network\Message\XCTeamRequestInviteDispatch.cpp 8 KB CPP 文件 2013/3/3 17:29:31 2018/9/13 20:52:41 2018/9/13 20:52:41 1
29 	 */
30 	CGameTeamOrGroup	*pTeam = GAME_DATA_RELATION_PTR->GetTeamOrGroup();
32 	/* 有队伍的时候收到信息表示客户端数据出现问题; 如果是处于跨服副本,不接受入队邀请 */
33 	if(pTeam->HasTeam() || GAME_DATA_QUEST_PTR->IsRoomBattleGroupState() == TRUE)
34 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\DBShare\DBShare\Run\ServerConnectorManager_DBShare.cpp 12 KB CPP 文件 2013/3/3 13:30:53 2018/9/13 20:52:46 2018/9/13 20:52:46 2
333 				{					
334 					AddGroupTmp( connID, g_Config.m_MultiGroupConfig.m_DBCenterInfo[i].m_WorldID );
336 					//2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，
337 					//当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
338 					SSHandShake msg;
365 	if(IsDBCenterServerActiveTmp())
366 		return TRUE;
368 	//added by Michael 2011-06-23 跨服重连机制
370 	uint32 uTime = GET_TIME().TickCount();
372 	if (FALSE == m_ConnectTimer.IsSetTimer())

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\GLServer\GL\GLData\MutiGroupMapServerManager.cpp 16 KB CPP 文件 2013/3/3 13:56:48 2018/9/13 20:55:08 2018/9/13 20:55:08 1
4 Author:Michael		
5 Created:Michael
6 Description :跨服MapServer管理器实现
7 Revision :  2011/06/17 Michael create
9 =============================================================================*/

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\GLServer\GL\Run\GL.cpp 41 KB CPP 文件 2013/3/3 13:57:42 2018/9/13 20:55:09 2018/9/13 20:55:09 3
657 	KCheck(g_pGLDynamicShopManager);
658 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new g_pGLDynamicShopManager...OK");
660 	// 跨服管理器
661 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMutiGroupMapServerManager ... ");
662 	g_pMutiGroupMapServerManager = new MutiGroupMapServerManager;
876 	KCheck(ret);
877 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pGLDynamicShopManager->Init()...OK");
879 	//跨服管理器
880 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[Init] g_pMutiGroupMapServerManager->Init()...OK");
881 	ret = g_pMutiGroupMapServerManager->Init();
1037 	KSafeDelete(g_pGLDynamicShopManager);
1038 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pGLDynamicShopManager delete...OK");
1040 	//跨服管理器
1041 	KSafeDelete(g_pMutiGroupMapServerManager);
1042 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pMutiGroupMapServerManager delete...OK");

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\MapServer\Server\Connector\ServerConnectorManager_MapServer.cpp 19 KB CPP 文件 2013/3/3 13:58:07 2018/9/13 20:55:32 2018/9/13 20:55:32 3
250 	if(g_Config.m_MultiGroupConfig.IsSignUpServer())
251 	{
252 		//只要一组服务器连接正常,跨服房间管理器的心跳仍然执行 
253 		//added by Michael 2011-10-26
254 		if (GetGLServerActiveCount() > 0)
654 				{
655 					AddGroupTmp( connID, g_Config.m_MultiGroupConfig.m_GLServerInfo[i].m_WorldID );
657 					//2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，
658 					//当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
659 					SSHandShake msg;
686 	if(FALSE == IsGLServerActiveTmp())//处理断线重连
687 	{
688 		//added by Michael 2011-06-23 跨服重连机制
690 		if (FALSE == m_ConnectTimer.IsSetTimer())
691 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\MapServer\Server\GameLogic\Item_Manager.cpp 15 KB CPP 文件 2013/3/3 13:58:22 2018/9/13 20:55:32 2018/9/13 20:55:32 1
278 {
279 	__GUARD__ ig.m_Server = (uchar) m_ServerId;
280 	ig.m_World = (uchar) m_WorldId; //todo 跨服是否需要处理 added by Michael Lin 2011-07-28
281 	ig.m_Serial = GenItemSN();
283 	return TRUE;

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\MapServer\Server\GameLogic\SignUpMgr.cpp 83 KB CPP 文件 2013/3/3 13:58:32 2018/9/13 20:55:33 2018/9/13 20:55:33 1
4 Author:shangy		
5 Created:shangy    
6 Description :跨服报名管理类
7 Revision :  2011/06/20 shangy create
8 			2011/08/05 Michael Lin Modify

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\MapServer\Server\Map\FubenManager.cpp 15 KB CPP 文件 2013/3/3 13:58:46 2018/9/13 20:55:33 2018/9/13 20:55:33 2
94 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
95 	{
96 		KCheck(FALSE);//跨服服务器上找不到报错
97 	}
98 	
456 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
457 	{
458 		//以下开始通知广播,支持跨服架构
459 		for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
460 		{

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\MapServer\Server\Map\MapCore.cpp 35 KB CPP 文件 2013/3/3 13:58:49 2018/9/13 20:55:33 2018/9/13 20:55:33 1
536 		{
537 			if ((pSceneData->m_uExtraType & EXTRA_MAPTYPE_FUBENENTRANCE) ||
538 				pSceneData->m_MapID == g_pFubenManager->GetServerBakSceneID()) //modify by Michael 2011-07-08 支持跨服副本
539 			{
540 				//以上场景是副本入口场景 创建副本数据

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\MapServer\Server\Messages\CXUseItemDispatch.cpp 8 KB CPP 文件 2013/3/3 13:59:43 2018/9/13 20:55:34 2018/9/13 20:55:34 1
115 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
116 	{
117 // 		by rj 2010-10-20 对跨服场景使用物品进行许可限制 
118 // 				if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
119 // 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\MapServer\Server\Messages\GMRoomBattleDispatch.cpp 5 KB CPP 文件 2013/3/3 13:59:44 2018/9/13 20:55:34 2018/9/13 20:55:34 1
53 	else
54 	{
55 		MapID_t nBackSceneID = g_pFubenManager->GetServerBakSceneID();  //跨服处的副本入口场景
57 		MapID_t nTarSceneId = pPacket->GetRoomBattle()->u_RoomBattleData.m_SceneID;
58 		

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\MapServer\Server\Messages\GXRetChangeSceneDispatch.cpp 6 KB CPP 文件 2013/3/3 13:59:58 2018/9/13 20:55:35 2018/9/13 20:55:35 1
106 				KCheck(MapID != INVALID_ID);
108 				ID_t		ServerID = g_pMapManager->GetMapData(MapID)->m_ServerID;
111 				// 2011-06-28 by Michael 根据跨服不同进行不同 ip port 查找
112 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
113 				{

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\MapServer\Server\Messages\XXMapNotifyDispatch.cpp 5 KB CPP 文件 2013/3/3 14:00:07 2018/9/13 20:55:35 2018/9/13 20:55:35 1
61 		return MP_CONTINUE;
62 	}
64 	//以下是跨服的副本的处理
66 	//给报名服务器返回创建成功消息			
67 	MGMRoomBattle* Msg = CREATE_PACKET_OBJ(MGMRoomBattle,PACKET_MGM_ROOMBATTLE);

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\MapServer\Server\Object\Bus.cpp 60 KB CPP 文件 2013/3/3 14:00:09 2018/9/13 20:55:35 2018/9/13 20:55:35 3
798 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
799 		= CaculateMonsterExpRuler::eCALC_TYPE_TEAM;
801 	//如果是跨服副本
802 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
803 	{
803 	{
804 		nValidMemberCount = GetValidOwnerListGroup(MAX_GROUP_MEMBER,apValidMember);
806 		eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
807 	}
808 	else
1083 		iFadeoutType = Obj_ItemRuler::FADE_OUT_TEAM;
1084 	}
1086 	//是否是跨服
1087 	BOOL BGroup = FALSE;
1088 	Map* pMap = GetMap();

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\MapServer\Server\Object\Monster.cpp 64 KB CPP 文件 2013/3/3 14:00:20 2018/9/13 20:55:35 2018/9/13 20:55:35 6
1317 		return 0;
1318 	}
1320 	//如果是跨服副本
1321 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
1322 	{
1405 		return 0;
1406 	}
1408 	//场景类型必须为跨服副本
1409 	Map* pMap = GetMap();
1410 	if (NULL == pMap)
1791 		return;
1792 	}
1794 	//跨服副本
1795 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
1796 	{
1825 		return;
1826 	}
1828 	//跨服副本
1829 	Player* apValidMember[MAX_GROUP_MEMBER];
1830 	uint32 nValidMemberCount = 0;
2031 		nExp = (int32) (m_BaseExp * g_Config.m_ConfigInfo.m_ExpParam);
2032 	}
2034 	uint32	auExp[MAX_GROUP_MEMBER];//modify by Michael Lin 2011-07-26 for 跨服军团
2035 	int32	i;
2037 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
2046 			if (pMap->m_FubenDataParty.IsRoomType())
2047 			{
2048 				eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
2049 			}
2050 		}

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\MapServer\Server\Script\LuaFunction_Chat.cpp 66 KB CPP 文件 2013/3/3 14:01:08 2018/9/13 20:55:36 2018/9/13 20:55:36 1
1072 		LUA_RETURNERROR_1;
1073 	}
1075 	//世界频道支持跨服 added by Michael Lin 2011-08-07
1076 	for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
1077 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\Share\StructRoomBattle.cpp 118 KB CPP 文件 2013/3/3 11:32:36 2018/9/13 20:56:26 2018/9/13 20:56:26 21
4 Author:Michael		
5 Created:Michael    
6 Description :跨服房间相关结构
7 Revision :  2011/06/21 Michael create
9 =============================================================================*/
1005 }
1008 /************************************************************************/
1009 /* 跨服报名候选数据结构定义  		                                    */
1010 /************************************************************************/
1011 BOOL RoomBattleSignupInfo::IsRoomIDInList(RoomID_t nRoomID) const
1145 }
1146 /************************************************************************/
1147 /* 跨服报名候选数据结构定义 客户端消息结构                              */
1148 /************************************************************************/
1149 void RoomBattleSignupInfo_CX_Msg::Clear()
1186 }
1188 /************************************************************************/
1189 /* 跨服取消报名结构定义   客户端消息结构	                           */
1190 /************************************************************************/
1191 void RoomBattleSignupCancel_CX_Msg::Clear()
1216 }
1218 /************************************************************************/
1219 /* 跨服确认进入结构定义    客户端消息结构	                           */
1220 /************************************************************************/
1221 void RoomBattleWaitingEnter_CX_Msg::Clear()
1324 }
1326 /************************************************************************/
1327 /* 跨服玩家确认结构定义    服务器消息结构	                           */
1328 /************************************************************************/
1329 void RoomBattlePlayerEnter_XC_Msg::Clear()
1363 }
1365 /************************************************************************/
1366 /* 跨服军团成员离开    服务器消息结构	                                */
1367 /************************************************************************/
1368 void RoomBattlePlayerLeave_XC_Msg::Clear()
1422 }
1425 /************************************************************************/
1426 /* 跨服确认进入结构定义    服务器消息结构	                           */
1427 /************************************************************************/
1428 void RoomBattleWaitingEnter_XC_Msg::Clear()
1796 }
1797 /************************************************************************/
1798 /* 跨服MapServer信息                  		                            */
1799 /************************************************************************/
1800 bool SMutiGroupMapServerInfo::IsValid( void ) const
1917 }
1919 /************************************************************************/
1920 /* 跨服关卡消息结构定义 MGP-->GL               		                    */
1921 /************************************************************************/
1922 uint32 MsgMGRoomBattle::GetMsgSize() const
1994 }
1996 /************************************************************************/
1997 /* 跨服关卡消息结构定义 GL-->MGP               		                    */
1998 /************************************************************************/
1999 uint32 MsgGMRoomBattle::GetMsgSize() const
2086 }
2087 /************************************************************************/
2088 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消            */
2089 /************************************************************************/
2090 uint32 MsgXGMRoomBattle_ReplyEnter::GetMsgSize()const
2123 }
2125 /************************************************************************/
2126 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消广播            */
2127 /************************************************************************/
2128 uint32 MsgXGMRoomBattle_ReplyEnter_BROADCAST::GetMsgSize()const
2161 }
2163 /************************************************************************/
2164 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  客户端确认离开，重新返回报名状态 */
2165 /************************************************************************/
2166 uint32 MsgXGMRoomBattle_Leave::GetMsgSize()const
2199 }
2201 /************************************************************************/
2202 /* 跨服关卡消息结构定义 MGP-->GL-->MGP        		                    */
2203 /************************************************************************/
2204 uint32 MsgMGMRoomBattle::GetMsgSize() const
2258 }
2260 /************************************************************************/
2261 /* 跨服关卡消息结构定义 MAP-->GL-->MGP        		                    */
2262 /************************************************************************/
2263 uint32 MsgXGMRoomBattle::GetMsgSize() const
2377 }
2379 /************************************************************************/
2380 /* 跨服关卡消息结构定义 MGP-->GL-->MAP        		                    */
2381 /************************************************************************/
2382 uint32 MsgMGXRoomBattle::GetMsgSize() const
2493 }
2495 /************************************************************************/
2496 /* 跨服关卡消息结构定义 Client-->MAP        		                    */
2497 /************************************************************************/
2498 uint32 MsgCXRoomBattle::GetMsgSize() const
2588 }
2590 /************************************************************************/
2591 /* 跨服关卡消息结构定义 MAP-->Client        		                    */
2592 /************************************************************************/
2593 uint32 MsgXCRoomBattle::GetMsgSize() const
3058 }
3060 /************************************************************************/
3061 /* 跨服关卡消息结构定义 Client-->MAP        		                    */
3062 /************************************************************************/
3063 uint32 MsgCXPKRoom::GetMsgSize() const
3908 }
3911 /************************************************************************/
3912 /* 跨服关卡消息结构定义 MAP-->GL-->MGP        		                    */
3913 /************************************************************************/
3914 uint32 MsgXGMPKRoom::GetMsgSize() const

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\Share\Connector\ServerConnectorManager.cpp 10 KB CPP 文件 2013/3/3 12:49:14 2018/9/13 20:56:23 2018/9/13 20:56:23 1
222 	__UNGUARD__
223 }
225 // 2011-10-27 by Michael 跨服线程连接方式(非阻塞)
226 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ID_t serverid,ConnectorID_t& connID)
227 {

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\Share\Core\BaseTool_Log.cpp 26 KB CPP 文件 2013/3/3 12:49:16 2018/9/13 20:56:23 2018/9/13 20:56:23 1
382 			if (g_Config.m_MultiGroupConfig.m_nGroupCount >  0)
383 			{
384 				iWorldID = INVALID_ID;//跨服上WorldID无效
385 			}
387 			int iMapID	 = g_Config.m_ConfigInfo.m_ServerID;

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\Share\Core\Setting.cpp 88 KB CPP 文件 2013/3/3 12:49:22 2018/9/13 20:56:23 2018/9/13 20:56:23 4
309 /*
310 =======================================================================================================================
311  加载跨服配置信息
312 =======================================================================================================================
313 */
337 		m_MultiGroupConfig.m_GLServerInfo[i].m_Port = ini.Get_Property_Int( szSection, "gl_port" );
338 		m_MultiGroupConfig.m_GLServerInfo[i].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
340 		// 2011-11-05 by Michael Lin 改变跨服配置文件结构
341 		int32 nMapCount = ini.Get_Property_Int(szSection,"map_count");
342 		KCheckEx(nMapCount >= 0 && nMapCount <= PERGROUP_MAX_MAPCOUNT,
359 		}
360 	}
362 	//跨服关卡报名服务器开关 added by Michael Lin 2011-08-03
363 	m_MultiGroupConfig.m_SignUpServerToggle = ini.Get_Property_Int( "Room", "SignUpServerToggle" );
365 	__UNGUARD__
1079 	m_ConfigInfo.m_nVendueBidIncreaseLimit = ini.Get_Property_Int("Vendue", "VendueBidIncreaseLimit");
1080 	m_ConfigInfo.m_nVendueBargainOnTax = ini.GetFloat("Vendue", "VendueBargainOnTax") / 1000;
1082 	//added for跨服军团 by Michael Lin 2011-07-26
1083 	for (int32 _nGIndex = 0; _nGIndex < MAX_GROUP_MEMBER; ++_nGIndex)
1084 	{

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\Share\TAB\TabDefine_Map_Misc.cpp 91 KB CPP 文件 2013/3/3 12:51:45 2018/9/13 20:56:26 2018/9/13 20:56:26 2
2380 /*
2381 =======================================================================================================================
2382 跨服关卡 逻辑数据表
2383 =======================================================================================================================
2384 */
2439 /*
2440 =======================================================================================================================
2441 跨服关卡 配置数据表
2442 =======================================================================================================================
2443 */

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\Share\TAB\TabDefine_Share.cpp 90 KB CPP 文件 2013/3/3 12:51:49 2018/9/13 20:56:26 2018/9/13 20:56:26 1
1284 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0) 
1285 	{
1286 		//如果是跨服MapServer确保BackScene有配置
1287 		KCheckEx(bFindCurrServerBackScene,"BakSceneInfo.tab表配置错误");
1288 	}

H:\work\source\成吉思汗\[src.cool]成吉思汗\sjwork\Src\Tools\MyRobot2\PacketHandle\XCRoomBattleHandler.cpp 3 KB CPP 文件 2013/3/3 15:10:16 2018/9/13 20:58:15 2018/9/13 20:58:15 1
72 			default:
73 				{
74 					pAgent->getLuaState()->DoString("XCRetCreateBattleHandler(\"ERROR\")");//跨服失败
75 				}
76 		}

H:\work\source\成吉思汗\cj3\src\src\khan2-client\GameCommandSystem.cpp 68 KB CPP 文件 2013/3/10 14:05:56 2018/10/9 14:14:55 2018/10/9 14:14:55 1
1433 	{ GCD_ASK_JOIN_FUBEN_WITH_TEAM, "ASK_JOIN_FUBEN_WITH_TEAM" },
1434 	{ GCD_ASK_EXIT_ROOM, "ASK_EXIT_ROOM" },
1436 	//跨服副本报名搜索
1437 	{ GCD_UPDATE_FUBEN_SEARCH_STATE,"UPDATE_FUBEN_SEARCH_STATE" },
1439 	//军团信息更新

H:\work\source\成吉思汗\cj3\src\src\khan2-client\GameMapManager.cpp 32 KB CPP 文件 2013/3/10 14:06:11 2018/10/9 14:14:55 2018/10/9 14:14:55 1
1420 BOOL CMapManager::IsMutiServerMap()const
1421 {
1422 	//跨服后花园场景
1423 	if (   GetCurrMapMapId() == 539
1424 		|| GetCurrMapMapId() == 540

H:\work\source\成吉思汗\cj3\src\src\khan2-client\GameStateChangeServer.cpp 6 KB CPP 文件 2013/3/10 14:06:30 2018/10/9 14:14:56 2018/10/9 14:14:56 1
211 			::GetPrivateProfileString( "Debug", "Login.WorldID", "", szReadTemp, MAX_PATH, DEBUG_FILE_NAME );
212 			static ut_id s_nWorldID = atoi(szReadTemp); 
213 			GAME_DATA_PLAYER_PTR->SetWorldID(s_nWorldID); // 支持跨服自架测试
214 																			
215 		}

H:\work\source\成吉思汗\cj3\src\src\khan2-client\GameStateRun.cpp 90 KB CPP 文件 2013/3/10 14:06:32 2018/10/9 14:14:56 2018/10/9 14:14:56 2
653 	
654 	GAME_DATA_PTR->askCountryData();
657 	//跨服关卡的处理 
659 	//清除小地图上的军团信息
660 	GAME_DATA_RELATION_PTR->GetCorps()->ClearCorpsInfo();
672 	//请求军团数据
673 	GAME_DATA_QUEST_PTR->AskRoomBattleGroupData();
674 	/////跨服关卡的处理	
675 }
678 void CGameStateRun::IsMapLoaded( void )

H:\work\source\成吉思汗\cj3\src\src\khan2-client\KCharacterEvent.cpp 66 KB CPP 文件 2013/3/10 14:06:39 2018/10/9 14:14:56 2018/10/9 14:14:56 1
1088 							if (eCountryRelation == COUNTRY_HAS_COLLEAGUE)
1089 							{
1090 								if (!MAP_MANAGER_PTR->IsMutiServerMap())//如果是跨服，不检查弱国联盟
1091 								{
1092 									nSceneNameColor = 2;

H:\work\source\成吉思汗\cj3\src\src\khan2-client\KGameOperate.cpp 69 KB CPP 文件 2013/3/10 14:06:46 2018/10/9 14:14:57 2018/10/9 14:14:57 1
2532 	if (eCountryRelation == COUNTRY_HAS_COLLEAGUE)
2533 	{
2534 		if (!MAP_MANAGER_PTR->IsMutiServerMap())//如果跨服则不计算弱国联盟
2535 		{
2536 			return COUNTRY_HAS_COLLEAGUE;

H:\work\source\成吉思汗\cj3\src\src\khan2-client\UIMap.cpp 24 KB CPP 文件 2013/3/10 14:07:05 2018/10/9 14:14:58 2018/10/9 14:14:58 1
482 		case MAP_POINT_TRANSER_NPC:		szChildWinType = MAP_POINT_TYPE_TRANSER_NPC;	break;
483 		case MAP_POINT_MONSTER:			szChildWinType = MAP_POINT_TYPE_MONSTER;		break;
485 		// 跨服6v6的旗子
486 		case MAP_POINT_OneLevelFlag:			szChildWinType = MAP_POINT_TYPE_ONELEVELFLAG; break;
487 		case MAP_POINT_TwoLevelFlag:			szChildWinType = MAP_POINT_TYPE_TWOLEVELFLAG; break;

H:\work\source\成吉思汗\cj3\src\src\khan2-client\UIPartyMessageBox.cpp 33 KB CPP 文件 2013/3/10 14:07:06 2018/10/9 14:14:58 2018/10/9 14:14:58 1
404 		}
405 		break;
407 	case MGUILD_BATTLE_TYPE: // 跨服帮会战
408 		{
409 			CXMPVPBattle msg;

H:\work\source\成吉思汗\cj3\src\src\khan2-dbshare\MKLogicManager.cpp 116 KB CPP 文件 2013/3/10 14:07:44 2018/10/9 14:15:00 2018/10/9 14:15:00 1
3672 }
3674 /************************************************************************/
3675 /* 跨服战积分相关                                                       */
3676 /************************************************************************/
3677 /*

H:\work\source\成吉思汗\cj3\src\src\khan2-glserver\GL.cpp 44 KB CPP 文件 2013/5/18 21:16:46 2018/10/9 14:15:00 2018/10/9 14:15:00 5
429 	KCheck(g_pGuildBattleManager);
430 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildBattleManager...OK");
432 	//跨服帮战的管理器
433 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new MultiGuildBattleManager ... ");
434 	g_pMGuildBattleManager = new MGuildBattleManager;
512 	KCheck(g_pGuildCenter);
513 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildManager...OK");
515 	//跨服战积分管理器
516 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMPVPPointManager ... ");
517 	g_pMPVPPointManager = new MPVPPointManager;
698 	KCheck(g_pSystemParamsManager);
699 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new g_pSystemParamsManager...OK");
702 	// 跨服管理器
703 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMutiGroupMapServerManager ... ");
704 	g_pMutiGroupMapServerManager = new MutiGroupMapServerManager;
947 	KCheck(ret);
948 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager->Init()...OK");
951 	//跨服管理器
952 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[Init] g_pMutiGroupMapServerManager->Init()...OK");
953 	ret = g_pMutiGroupMapServerManager->Init();
1127 	KSafeDelete(g_pSystemParamsManager);
1128 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager delete...OK");
1130 	//跨服管理器
1131 	KSafeDelete(g_pMutiGroupMapServerManager);
1132 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pMutiGroupMapServerManager delete...OK");

H:\work\source\成吉思汗\cj3\src\src\khan2-glserver\LWRequestPlayerLoginDispatch.cpp 14 KB CPP 文件 2013/3/10 14:08:02 2018/10/9 14:15:00 2018/10/9 14:15:00 1
227 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
228 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
230 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
231 		if (pFindPlayer == NULL)
232 		{

H:\work\source\成吉思汗\cj3\src\src\khan2-glserver\MGuildBattleManager.cpp 15 KB CPP 文件 2013/3/10 14:08:04 2018/10/9 14:15:00 2018/10/9 14:15:00 8
94 	// 当前赛季进度
95 	int32 nSeasonWeek = (GET_TIME().GetWeekNumFrom2011() - g_Config.m_ConfigInfo.m_MPVPGuildBeginWeek) % g_Config.m_ConfigInfo.m_MPVPPointPeriodWeeks;
97 	// 取得跨服服务器
98 	int32 nServerNum = 0;
99 	ut_id serverIDs[SERVER_CAPACITY] = {-1};
145 	//	if (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / nServerNum <= 0)
146 	//		return serverIDs[0];
148 	//	// 2011-07-26 by rj 改进原来的等分算法，在所连跨服服务器数量等于 2 时用用 4/6 算法来解决高分帮会人数过多的问题
149 	//	int32 iSeg = iIndex / (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / (nServerNum <= 2 ? 2.5f : nServerNum) );
150 	//	if (iSeg >= nServerNum)
166 	if (uPrevSignupTime)
167 	{
168 		// 超时保护（防止报名完成后跨服服务器宕机导致 GL 无法清理报名）
169 		if (GET_TIME().GetCTime() - uPrevSignupTime > 90*60)
170 		{
258 	if(!pGuild || pGuild->GetGuildID() == INVALID_KHAN_ID)
259 		return FALSE;
261 	// 转发跨服战场进入通知到报名玩家所在 Map
262 	GXMPVPBattle msg;
263 	msg.SetBattleType(MPVP_GUILD_BATTLE_TYPE);
416 					aSignupPlayers[0].GuildPoint = pPoint->m_nCurrentPoint;
417 				}
419 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
420 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
421 				msg.SetSignupType(pKMessage->GetSignupType());
472 				if (NULL != pServePlayer_Target)
473 				{
474 					// 转发跨服战场状态到报名玩家所在 Map
475 					GXMPVPBattle msg;
476 					msg.SetBattleType(pKMessage->GetBattleType());
503 				return MP_CONTINUE;
504 			}
506 			// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
507 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pMatch->nServerID);
508 			if (pServePlayer_Target)
524 			if (NULL != pServePlayer_Target)
525 			{
526 				// 转发跨服战场进入响应到报名玩家所在 Map
527 				GXMPVPBattle msg;
528 				msg.SetBattleType(pKMessage->GetBattleType());

H:\work\source\成吉思汗\cj3\src\src\khan2-glserver\MPVPGuildPoint.cpp 8 KB CPP 文件 2013/3/10 14:08:05 2018/10/9 14:15:00 2018/10/9 14:15:00 3
1 /************************************************************************/
2 /* 帮会跨服战积分信息接口的具体实现                                     */
3 /************************************************************************/
5 #include "stdafx.h"
195 /*
196 =======================================================================================================================
197 处理不同跨服战各自的额外参数填充
198 =======================================================================================================================
199 */
223 /*
224 =======================================================================================================================
225 加载跨服帮战每周的场次信息
226 =======================================================================================================================
227 */

H:\work\source\成吉思汗\cj3\src\src\khan2-glserver\MPVPPointArithmetic.cpp 2 KB CPP 文件 2013/3/10 14:08:05 2018/10/9 14:15:00 2018/10/9 14:15:00 3
1 /************************************************************************/
2 /* 跨服战积分算法器,负责各种跨服战积分的计算逻辑实现                    */
3 /************************************************************************/
5 #include "stdafx.h"
16 /*
17 ===============================================================================================================
18 根据实力来计算跨服帮会的加权分
19 帮会实力-(错过的场次*放弃损失的分数)
20 ===============================================================================================================

H:\work\source\成吉思汗\cj3\src\src\khan2-glserver\MPVPPointInfo.cpp 14 KB CPP 文件 2013/3/10 14:08:05 2018/10/9 14:15:00 2018/10/9 14:15:00 2
1 /************************************************************************/
2 /* 跨服战积分信息接口的具体实现                                         */
3 /************************************************************************/
5 #include "stdafx.h"
72 /*
73 =======================================================================================================================
74 获取跨服积分的数据信息
75 =======================================================================================================================
76 */

H:\work\source\成吉思汗\cj3\src\src\khan2-glserver\MPVPPointManager.cpp 11 KB CPP 文件 2013/3/10 14:08:06 2018/10/9 14:15:00 2018/10/9 14:15:00 5
1 /************************************************************************/
2 /* 跨服战积分管理器的实现                                               */
3 /************************************************************************/
5 #include "stdafx.h"
98 /*
99 ===============================================================================================================
100 注册跨服积分的实现
101 ===============================================================================================================
102 */
220 /*
221 ===============================================================================================================
222 获取指定类型跨服战全部积分信息
223 ===============================================================================================================
224 */
243 /*
244 ===============================================================================================================
245 获取指定跨服战当前的赛季开始周
246 ===============================================================================================================
247 */
266 /*
267 ===============================================================================================================
268 获取指定跨服战当前周
269 ===============================================================================================================
270 */

H:\work\source\成吉思汗\cj3\src\src\khan2-glserver\MPVPToplist.cpp 8 KB CPP 文件 2013/3/10 14:08:06 2018/10/9 14:15:00 2018/10/9 14:15:00 2
1 /************************************************************************/
2 /* 跨服帮会战排行榜的具体实现		                                    */
3 /************************************************************************/
5 #include "stdafx.h"
25 /*
26 =======================================================================================================================
27 积分数据加载,从跨服积分管理器中加载需要的信息
28 =======================================================================================================================
29 */

H:\work\source\成吉思汗\cj3\src\src\khan2-glserver\MutiGroupMapServerManager.cpp 18 KB CPP 文件 2013/3/10 14:08:08 2018/10/9 14:15:00 2018/10/9 14:15:00 1
4 Author:Michael		
5 Created:Michael
6 Description :跨服MapServer管理器实现
7 Revision :  2011/06/17 Michael create
9 =============================================================================*/

H:\work\source\成吉思汗\cj3\src\src\khan2-glserver\ServerConnectorManager_GL.cpp 12 KB CPP 文件 2013/3/10 14:08:12 2018/10/9 14:15:01 2018/10/9 14:15:01 2
528 			_NET_TRY
529 			{
530 				// 跨服帮战管理器心跳
531 				ret = g_pMGuildBattleManager->HeartBeat(uTime);
532 				KCheck(ret);
538 			_NET_TRY
539 			{
540 				//处理跨服战积分管理器相关的心跳
541 				ret = g_pMPVPPointManager->HeartBeat(uTime);		
542 				KCheck(ret);

H:\work\source\成吉思汗\cj3\src\src\khan2-glserver\TopListManager.cpp 18 KB CPP 文件 2013/3/10 14:08:18 2018/10/9 14:15:01 2018/10/9 14:15:01 1
152 	Register(HONOR_CHARIOT_TOP_LIST_BK,			new TopList,					"Chariot_Honor_bk" );
153 	// add by dragon 战车排行榜 }
155 	// 跨服帮会战排行榜
156 	Register(MPVP_GUILD_CURRENT,			new CurrentMPVPGuildTopList,		"MPVP_Guild_Current" );
157 	Register(MPVP_GUILD_CURRENT_BK,			new TopList,				"MPVP_Guild_Current_bk" );

H:\work\source\成吉思汗\cj3\src\src\khan2-glserver\XGBattleDispatch.cpp 93 KB CPP 文件 2013/3/10 14:08:21 2018/10/9 14:15:01 2018/10/9 14:15:01 25
2507 }
2509 /***********************************************************
2510 desc:	跨服战场 XG 服务器消息处理
2511 auth:	rj
2512 date:	2011-2-14
2520 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2521 	{
2522 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2523 		static IntegerHashMap mapMPVP2v2SignupRecord;
2524 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2526 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2527 		}
2529 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2530 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2531 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2548 		case MPVP_BATTLE_RETSTATE:
2549 			{
2550 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名。值是当前报名的时间。
2551 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2552 				{
2582 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2583 				KCheck(pServePlayer_Target);
2585 				// 转发跨服战场进入通知到报名玩家所在 Map
2586 				GXMPVPBattle msg;
2587 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2613 				if (uPrevSignupTime)
2614 				{
2615 					// 6 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2616 					if (GET_TIME().GetCTime() - uPrevSignupTime > 360)
2617 					{
2719 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2720 				}
2722 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2723 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2724 				msg.SetSignupType(pKMessage->GetSignupType());
2734 				if (NULL != pServePlayer_Target)
2735 				{
2736 					// 转发跨服战场状态到报名玩家所在 Map
2737 					GXMPVPBattle msg;
2738 					msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2752 				if (iServerID)
2753 				{
2754 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2755 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2756 					if (NULL != pServePlayer_Target)
2777 				if (NULL != pServePlayer_Target)
2778 				{
2779 					// 转发跨服战场进入响应到报名玩家所在 Map
2780 					GXMPVPBattle msg;
2781 					msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2793 	else if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_6V6)
2794 	{
2795 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2796 		static IntegerHashMap mapMPVP6v6SignupRecord;
2797 		if (mapMPVP6v6SignupRecord.GetMaxCount() == 0)
2799 			mapMPVP6v6SignupRecord.InitTable(MAX_WORLD_PLAYER);
2800 		}
2802 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2803 		static IntegerHashMap mapMPVP6v6EnterBattleRecord;
2804 		if (mapMPVP6v6EnterBattleRecord.GetMaxCount() == 0)
2821 		case MPVP_BATTLE_RETSTATE:
2822 			{
2823 				// 记录这次跨服 6v6 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 6v6 的报名。值是当前报名的时间。
2824 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2825 				{
2856 				if (NULL != pServePlayer_Target)
2857 				{
2858 					// 转发跨服战场进入通知到报名玩家所在 Map
2859 					GXMPVPBattle msg;
2860 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
2890 				if (uPrevSignupTime)
2891 				{
2892 					// 11 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2893 					if (GET_TIME().GetCTime() - uPrevSignupTime > 660)
2894 					{
2996 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2997 				}
2999 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
3000 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
3001 				msg.SetSignupType(pKMessage->GetSignupType());
3011 				if (NULL != pServePlayer_Target)
3012 				{
3013 					// 转发跨服战场状态到报名玩家所在 Map
3014 					GXMPVPBattle msg;
3015 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
3029 				if (iServerID)
3030 				{
3031 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
3032 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
3033 					if (NULL != pServePlayer_Target)
3054 				if (NULL != pServePlayer_Target)
3055 				{
3056 					// 转发跨服战场进入响应到报名玩家所在 Map
3057 					GXMPVPBattle msg;
3058 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\Bus.cpp 66 KB CPP 文件 2013/3/10 14:08:43 2018/10/9 14:15:02 2018/10/9 14:15:02 3
805 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
806 		= CaculateMonsterExpRuler::eCALC_TYPE_TEAM;
808 	//如果是跨服副本
809 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
810 	{
810 	{
811 		nValidMemberCount = GetValidOwnerListGroup(MAX_GROUP_MEMBER,apValidMember);
812 		eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
813 	}
814 	else
1091 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1093 	if(Get_OccupantTeamID() != INVALID_KHAN_ID) iFadeoutType = Obj_ItemRuler::FADE_OUT_TEAM;
1095 	//是否是跨服
1096 	BOOL BGroup = FALSE;
1097 	Map* pMap = GetMap();

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\ChangeMapDelegater.cpp 44 KB CPP 文件 2013/3/10 14:09:05 2018/10/9 14:15:02 2018/10/9 14:15:02 2
1538 		pPlayer->ClearMutexState(MS_Fuben);
1539 	}
1541 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1542 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1543 	{

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\CountryCacheManager.cpp 49 KB CPP 文件 2013/3/10 14:09:14 2018/10/9 14:15:02 2018/10/9 14:15:02 1
525 		
526 	/************************************弱国联盟判断 begin***********************************************************/
528 	//只要跨服map，不判断弱国联盟
529 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
530 	{

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\CXBattleDispatch.cpp 12 KB CPP 文件 2013/3/10 14:08:45 2018/10/9 14:15:02 2018/10/9 14:15:02 2
132 }
134 /***********************************************************
135 desc:	跨服战场客户端请请求处理
136 auth:	rj
137 date:	2011-2-14
156 		case MPVP_BATTLE_SIGNUP:
157 			{
158 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
159 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
160 					(

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\CXItemDispatch.cpp 69 KB CPP 文件 2013/3/10 14:08:54 2018/10/9 14:15:03 2018/10/9 14:15:03 1
2233 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
2234 	{
2235 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
2236 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2237 		{

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\GMCommand.cpp 213 KB CPP 文件 2013/3/10 14:09:19 2018/10/9 14:15:03 2018/10/9 14:15:03 1
545 	REGISTER_HANDLER(addchariothonour);	// \gm addchariothonour =100	增加战车荣誉
546 	REGISTER_HANDLER(unlockhorse);		// \gm unlockhorse =objid =horseindex  强制解锁骑乘
547 	REGISTER_HANDLER(addguildwin);		// \gm addguildwin =num 增加跨服帮战胜利次数
549 	REGISTER_HANDLER(getviewgroup);		// \gm getviewgroup	//获取当前的可视组
550 	REGISTER_HANDLER(setviewgroup);		// \gm setviewgroup	=groupnum //设置当前的可视组

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\GMRoomBattleDispatch.cpp 5 KB CPP 文件 2013/3/10 14:09:19 2018/10/9 14:15:03 2018/10/9 14:15:03 1
53 	else
54 	{
55 		ut_id_map nBackSceneID = g_pFubenManager->GetServerBakSceneID();  //跨服处的副本入口场景
57 		ut_id_map nTarSceneId = pPacket->GetRoomBattle()->u_RoomBattleData.m_SceneID;
58 		

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\GXBattleDispatch.cpp 56 KB CPP 文件 2013/3/10 14:09:20 2018/10/9 14:15:03 2018/10/9 14:15:03 6
1482 }
1484 /***********************************************************
1485 desc:	跨服战场 GX 服务器消息处理
1486 auth:	rj
1487 date:	2011-2-14
1504 			case MPVP_BATTLE_SIGNUP:
1505 				{
1506 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1508 					IMPVPBattle *pMPVPBattle = g_pMPVPBattleManager->GetMPVPBattleByType((MPVP_BATTLE_TYPE)pKMessage->GetBattleType());
1509 					//KCheck(pMPVPBattle);
1572 						return MP_CONTINUE;
1573 					}
1575 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1576 					pMPVPBattle->TellPlayerEnterMap(pKMessage, pConnector);
1577 				}
1618 			case MPVP_BATTLE_RETSTATE:
1619 				{
1620 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1621 					pMap->GetLuaSystem()->RunScriptFunction
1622 						(
1634 			case MPVP_BATTLE_RES_ENTERSCENE:
1635 				{
1636 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1637 					pMap->GetLuaSystem()->RunScriptFunction
1638 						(
1665 }
1667 /***********************************************************
1668 desc:	跨服战场场景通知消息处理
1669 auth:	rj
1670 date:	2011-2-14

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\GXCountryDispatchDelegater.cpp 28 KB CPP 文件 2013/3/10 14:09:22 2018/10/9 14:15:03 2018/10/9 14:15:03 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\GXMapDispatch.cpp 20 KB CPP 文件 2013/3/10 14:09:28 2018/10/9 14:15:03 2018/10/9 14:15:03 2
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{
588 		return MP_CONTINUE;
589 	}
591 	//以下是跨服的副本的处理
593 	//给报名服务器返回创建成功消息			
594 	MGMRoomBattle* Msg = CREATE_MESSAGE_OBJ(MGMRoomBattle,MESSAGE_MGM_ROOMBATTLE);

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\KLDaemonThread.cpp 9 KB CPP 文件 2013/3/10 14:09:51 2018/10/9 14:15:04 2018/10/9 14:15:04 3
160 		}
162 		m_OPSteps = 7;
164 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
165 		_NET_TRY
166 		{
165 		_NET_TRY
166 		{
167 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
168 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
169 			{

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\LuaFunction_Chat.cpp 63 KB CPP 文件 2013/3/10 14:09:54 2018/10/9 14:15:05 2018/10/9 14:15:05 1
1086 		pMsg->SetCycleCount(nParam);
1087 	g_pServerConnectorMgr->SendMessage_SingleMode(pMsg);
1090 	//世界频道支持跨服
1091 	for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
1092 	{

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\LuaFunction_Map.cpp 213 KB CPP 文件 2013/3/10 14:09:57 2018/10/9 14:15:05 2018/10/9 14:15:05 16
257 	SelectMap.m_MapDataType = 0;
258 	SelectMap.m_CopyData = * pFD;
259 	SelectMap.m_CopyData.m_bRoom = false;//非跨服房间类型
261 	if (nRoomType == 1)
262 	{
1711 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1713 	KCheck(szName);
1715 	// 2010-11-2 对发送脚本邮件进行跨服支持
1716 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1717 	BEGPLAYERDEFINE("LuaFunction_SendScriptPost");
5968 	return 0;
5969 }
5971 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5972 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
5973 {
5994 	LUA_RETURNERROR_1;
5995 }
5997 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
5998 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5999 {
6041 	return 0;
6042 }
6044 // 跨服 6v6 战场场景注册函数
6045 int32 LuaFunction_MPVP6v6RegisterMap(Lua_State *L)
6046 {
6067 	LUA_RETURNERROR_1;
6068 }
6070 // 跨服 6v6 战场场景更新战场 UI 面板
6071 int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
6072 {
6114 	return 0;
6115 }
6117 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
6118 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
6119 //{
6141 //}
6142 //
6143 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
6144 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
6145 //{
6211 //}
6212 //
6213 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
6214 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
6215 //{
6281 //}
6282 //
6283 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
6284 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
6285 //{
6315 //}
6316 //
6317 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
6318 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
6319 //{
6362 //}
6363 //
6364 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
6365 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
6366 //{
6414 //}
6415 //
6416 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
6417 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
6418 //{
6459 //}
6460 //
6461 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
6462 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
6463 //{
7305 	return 0;
7306 }
7308 // 跨服战场场景注册函数
7309 int32 LuaFunction_MPVPRegisterMap(Lua_State *L)
7310 {
7400 	if(pMap)
7401 	{
7402 		// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
7403 		int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
7404 			(

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\LuaSystem_Function.cpp 134 KB CPP 文件 2013/3/10 14:10:04 2018/10/9 14:15:05 2018/10/9 14:15:05 10
1185 	m_LuaVM.RegisterFunction("AddBattleHonour", (void *) (LuaFunction_AddBattleHonour));							// 增加战功
1186 	m_LuaVM.RegisterFunction("SubBattleHonour", (void *) (LuaFunction_SubBattleHonour));							// 减少战功
1187 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));					// 跨服 2v2 战场注册场景 
1188 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));			// 跨服 2v2 战场名称显示
1189 	m_LuaVM.RegisterFunction("MPVP6v6RegisterScene", (void *) (LuaFunction_MPVP6v6RegisterMap));					// 跨服 6v6 战场注册场景
1190 	m_LuaVM.RegisterFunction("SetMPVP6v6BattleDisable", (void *) (LuaFunction_SetMPVP6v6BattleDisable));			// 跨服 6v6 战场名称显示
1191 	m_LuaVM.RegisterFunction("MPVPRegisterMap", (void *) (LuaFunction_MPVPRegisterMap));							// 跨服战场注册场景
1192 	m_LuaVM.RegisterFunction("CountryIsFortuneTimeEx", (void *) (LuaFunction_CountryIsFortuneTimeEx));				// 获取特定国家的国运是否进行
1193 	m_LuaVM.RegisterFunction("AddCountryResourceWithRecall", (void *) (LuaFunction_AddCountryResourceWithRecall));	// 比较并增加的修改资源,保证同步
1305 	m_LuaVM.RegisterFunction("IsLeague", (void*)(LuaFunction_IsLeague));											// 判断两国是否是弱国联盟
1306 	m_LuaVM.RegisterFunction("CountryLeagueZhaoji", (void*)(LuaFunction_CountryLeagueZhaoji));						// 发送联盟召集令
1307 	m_LuaVM.RegisterFunction("AskEnterMGuildBattleScene",(void*)(LuaFunction_AskEnterMGuildBattleScene)); 			// 请求进入跨服帮会战场
1308 	m_LuaVM.RegisterFunction("MGuildBattleSignup",(void*)(LuaFunction_MGuildBattleSignup)); 						// 跨服帮会战报名
1309 	m_LuaVM.RegisterFunction("MGuildBattleResult",(void*)(LuaFunction_MGuildBattleResult)); 						// 跨服帮会战结果
1310 	m_LuaVM.RegisterFunction("MGuildBattleSeasonWeek",(void*)(LuaFunction_MGuildBattleSeasonWeek)); 				// 跨服帮会战赛季当前周数
1311 	m_LuaVM.RegisterFunction("GetMGuildNumOfBattleCurSeason", (void*)(LuaFunction_GetMGuildNumOfBattleCurSeason));	// 获取跨服帮战当前赛季的场数
1312 	m_LuaVM.RegisterFunction("SetEquipPokerData",(void*)(LuaFunction_SetEquipPokerData));							// 设置装备扑克牌属性
1313 	m_LuaVM.RegisterFunction("SetEquipPokerCount",(void*)(LuaFunction_SetEquipPokerCount));							// 设置装备扑克牌个数

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\MapCore.cpp 40 KB CPP 文件 2013/3/10 14:10:07 2018/10/9 14:15:05 2018/10/9 14:15:05 2
626 				pSceneData->m_MapID == 23 || 
627 				g_Config.m_ConfigInfo.IsGardenMap(pSceneData->m_MapID) || //家园场景副本入口
628 				pSceneData->m_MapID == g_pFubenManager->GetServerBakSceneID())//  支持跨服副本				
629 			{
630 				//以上场景是副本入口场景 创建副本数据
684 				m_bFirstInit = FALSE;
685 			}
686 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
687 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
688 			{

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\MapManager.cpp 64 KB CPP 文件 2013/3/10 14:10:09 2018/10/9 14:15:05 2018/10/9 14:15:05 3
1741 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1742 		{
1743 			KCheck(FALSE);//跨服服务器上找不到报错
1744 		}
1746 		return INVALID_KHAN_ID;
2024 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2025 	{
2026 		//以下开始通知广播,支持跨服架构
2027 		for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
2028 		{
2056 BOOL FubenManager::BroadcastFubenSceneInfo(void)
2057 {
2058 	//如果不开跨服副本，不广播
2059 	if (g_Config.m_MultiGroupConfig.IsMultMapOpen() == FALSE)
2060 	{

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\MapServer.cpp 35 KB CPP 文件 2013/5/18 21:56:21 2018/10/9 14:15:05 2018/10/9 14:15:05 1
604 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
605 	
606 	// 跨服战场管理器 2010-10-13 by rj
607 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
608 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\MGuildBattle.cpp 28 KB CPP 文件 2013/3/10 14:10:05 2018/10/9 14:15:05 2018/10/9 14:15:05 3
1 /***********************************************************
2 desc:	跨服帮会战场实现
3 auth:	txp
4 date:	2011-6-10
122 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，
123 		// 为这个很少出现的异常进行处理。
124 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，
125 		// 如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
126 		if (FindSignup(pSignupPlayers[i].iWorldID, pSignupPlayers[i].GuildID))
427 		m_MatchList.m_aMatch[m_MatchList.m_nCount].m_bFinished = FALSE;
429 		int32 nLevelFlag=0, nDisLevel = s1.m_nSignupLevel - s2.m_nSignupLevel;
431 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
432 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
433 		KCheck(pMap);

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\Monster.cpp 67 KB CPP 文件 2013/3/10 14:10:12 2018/10/9 14:15:05 2018/10/9 14:15:05 6
641 		return 0;
642 	}
644 	//如果是跨服副本
645 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
646 	{
880 		return;
881 	}
883 	//跨服副本
884 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
885 	{
916 	Player *apValidMember[MAX_GROUP_MEMBER];
917 	uint32 nValidMemberCount = 0;
919 	// 跨服副本
920 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
921 	{
996 		nExp = (int32) (m_BaseExp * fExpParam);
997 	}
999 	uint32	auExp[MAX_GROUP_MEMBER];//  for 跨服军团
1000 	int32	_Idx;
1002 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
1011 			if (pMap->m_FubenDataParty.IsRoomType())
1012 			{
1013 				eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
1014 			}
1015 		}
2170 		return 0;
2171 	}
2173 	//场景类型必须为跨服副本
2174 	Map* pMap = GetMap();
2175 	if (NULL == pMap)

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\MPVP2v2Battle.cpp 35 KB CPP 文件 2013/3/10 14:10:05 2018/10/9 14:15:05 2018/10/9 14:15:05 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
249 		{
250 			// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
251 			// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
252 			if (FindSignup(pSignupPlayers[i].uSNID))
253 			{
649 			nLevelFlag = 0;
650 		}
652 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
653 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
654 		KCheck(pMap);

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\MPVP6v6Battle.cpp 30 KB CPP 文件 2013/3/10 14:10:06 2018/10/9 14:15:05 2018/10/9 14:15:05 3
1 /***********************************************************
2 desc:	跨服 6v6 战场实现
3 auth:	txp
4 date:	2011-3-16
154 	{
155 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
156 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
157 		if (FindSignup(pSignupPlayers[i].uSNID))
158 		{
536 			nLevelFlag = 0;
537 		}
539 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
540 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
541 		KCheck(pMap);

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/10 14:10:06 2018/10/9 14:15:05 2018/10/9 14:15:05 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
97 	__UNGUARD__ return FALSE;
98 }
100 // 以类型方式获得跨服战场类
101 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
102 {

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\ServerConnectorManager_MapServer.cpp 20 KB CPP 文件 2013/3/10 14:10:31 2018/10/9 14:15:06 2018/10/9 14:15:06 4
34 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
35 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
37 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
38 		SSHandShake msg;
39 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());
281 	if(g_Config.m_MultiGroupConfig.IsSignUpServer())
282 	{
283 		//只要一组服务器连接正常,跨服房间管理器的心跳仍然执行 
284 		if (GetGLServerActiveCount() > 0)
285 		{
602 				{
603 					AddGroupTmp( connID, g_Config.m_MultiGroupConfig.m_GLServerInfo[i].m_WorldID );
605 					//2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，
606 					//当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
607 					SSHandShake msg;
678 	if(FALSE == IsGLServerActiveTmp())//处理断线重连
679 	{
680 		//跨服重连机制
681 		if (FALSE == m_ConnectTimer.IsSetTimer())
682 		{

H:\work\source\成吉思汗\cj3\src\src\khan2-mapserver\SignUpMgr.cpp 83 KB CPP 文件 2013/3/10 14:10:32 2018/10/9 14:15:06 2018/10/9 14:15:06 1
4 Author:shangy		
5 Created:shangy    
6 Description :跨服报名管理类
7 Revision :  2011/06/20 shangy create
8 			2011/08/05 Michael Lin Modify

H:\work\source\成吉思汗\cj3\src\src\khan2-share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/11 11:17:20 2018/10/9 14:15:08 2018/10/9 14:15:08 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\cj3\src\src\khan2-share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/11 11:17:20 2018/10/9 14:15:08 2018/10/9 14:15:08 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\cj3\src\src\khan2-share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/11 11:17:21 2018/10/9 14:15:08 2018/10/9 14:15:08 1
199 }
200 	
201 // 2010-10-9 by rj 跨服线程连接方式
202 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
203 {

H:\work\source\成吉思汗\cj3\src\src\khan2-share\Core\Setting.cpp 89 KB CPP 文件 2013/5/18 18:16:49 2018/10/9 14:15:08 2018/10/9 14:15:08 6
339 /*
340 =======================================================================================================================
341  加载跨服配置信息
342 =======================================================================================================================
343 */
353 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
354 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
356 	// 跨服战场最大场景数量配置 2010-9-23 by rj
357 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
358 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
359 	
360 	m_MultiGroupConfig.m_nMaxMGuildMapCnt = ini.Get_Property_Int("MGuild", "Max_SceneCount");
361 	KCheckEx(m_MultiGroupConfig.m_nMaxMGuildMapCnt>0 && m_MultiGroupConfig.m_nMaxMGuildMapCnt<=MGUILD_MAX_MAPCOUNT, "跨服帮战场景数量要小于512");
363 // 	m_MultiGroupConfig.m_nMGuildBeginWeek = ini.Get_Property_Int("MGuild", "BeginWeek");
364 // 	KCheckEx(m_MultiGroupConfig.m_nMGuildBeginWeek>0 && m_MultiGroupConfig.m_nMGuildBeginWeek<=52, "起始周只能在1-52之间");
378 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
379 		
380 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
382 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
384 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);
441 		}		
442 	}
444 	//跨服关卡报名服务器开关 
445 	m_MultiGroupConfig.m_SignUpServerToggle = ini.Get_Property_Int( "Room", "SignUpServerToggle" );
446 	m_MultiGroupConfig.m_MapFubenToogle = ini.Get_Property_Int( "Room", "MapFubenToogle" );
1102 	m_ConfigInfo.m_nEmpireOfficerMinLevel = ini.Get_Property_Int("Empire","OfficerMinLevel");
1103 	//[Empire] End
1105 	//added for跨服军团  
1106 	for (int32 _nGIndex = 0; _nGIndex < MAX_GROUP_MEMBER; ++_nGIndex)
1107 	{

H:\work\source\成吉思汗\cj3\src\src\khan2-share\DataBase\ArchiveInterface.cpp 329 KB CPP 文件 2013/3/11 11:17:27 2018/10/9 14:15:08 2018/10/9 14:15:08 1
10122 }
10124 /************************************************************************/
10125 /* 跨服战积分相关                                                       */
10126 /************************************************************************/
10128 /*

H:\work\source\成吉思汗\cj3\src\src\khan2-share\DataBase\SqlStatement.cpp 23 KB CPP 文件 2013/3/11 11:17:28 2018/10/9 14:15:08 2018/10/9 14:15:08 1
251 char	*g_LoadLostItemInfo = "select aid,playerguid,srcplayerguid,srcplayername,guid,world,server,itemclass,creator,dataproperty,data,termendtime,islock,unlocktime,gmoptime from %s where aid>%u order by aid asc" ;
252 char	*g_DelLostItemInfo = "delete from %s where aid=%u";
254 // 跨服战积分相关处理
255 char	*LoadMPVPPointInfo = "select unitid, unitname, world, currentpoint, totalpoint, currentwintimes, currentjointimes, totalwintimes, totaljointimes, mpvptypename, currentweek, startweek, params from %s where valid = 1";
256 char	*SaveMPVPPointInfo = "call proc_save_mpvppoint(%d,\'%s\', %d, %d, %d, %d, %d, %d, %d, \'%s\', %d, %d, %d, 1)";

H:\work\source\成吉思汗\cj3\src\src\khan2-share\Messages\StructRoomBattle.cpp 68 KB CPP 文件 2013/3/11 11:19:33 2018/10/9 14:15:13 2018/10/9 14:15:13 19
4 Author:Michael		
5 Created:Michael    
6 Description :跨服房间相关结构
7 Revision :  2011/06/21 Michael create
9 =============================================================================*/
791 }
794 /************************************************************************/
795 /* 跨服报名候选数据结构定义  		                                    */
796 /************************************************************************/
797 BOOL RoomBattleSignupInfo::IsRoomIDInList(ut_id_room nRoomID) const
931 }
932 /************************************************************************/
933 /* 跨服报名候选数据结构定义 客户端消息结构                              */
934 /************************************************************************/
935 void RoomBattleSignupInfo_CX_Msg::Clear()
972 }
974 /************************************************************************/
975 /* 跨服取消报名结构定义   客户端消息结构	                           */
976 /************************************************************************/
977 void RoomBattleSignupCancel_CX_Msg::Clear()
1002 }
1004 /************************************************************************/
1005 /* 跨服确认进入结构定义    客户端消息结构	                           */
1006 /************************************************************************/
1007 void RoomBattleWaitingEnter_CX_Msg::Clear()
1109 }
1111 /************************************************************************/
1112 /* 跨服玩家确认结构定义    服务器消息结构	                           */
1113 /************************************************************************/
1114 void RoomBattlePlayerEnter_XC_Msg::Clear()
1148 }
1150 /************************************************************************/
1151 /* 跨服军团成员离开    服务器消息结构	                                */
1152 /************************************************************************/
1153 void RoomBattlePlayerLeave_XC_Msg::Clear()
1207 }
1210 /************************************************************************/
1211 /* 跨服确认进入结构定义    服务器消息结构	                           */
1212 /************************************************************************/
1213 void RoomBattleWaitingEnter_XC_Msg::Clear()
1581 }
1582 /************************************************************************/
1583 /* 跨服MapServer信息                  		                            */
1584 /************************************************************************/
1585 float SMutiGroupMapServerInfo::GetUseRate() const
1725 }
1727 /************************************************************************/
1728 /* 跨服关卡消息结构定义 MGP-->GL               		                    */
1729 /************************************************************************/
1730 uint32 MsgMGRoomBattle::GetMsgSize() const
1802 }
1804 /************************************************************************/
1805 /* 跨服关卡消息结构定义 GL-->MGP               		                    */
1806 /************************************************************************/
1807 uint32 MsgGMRoomBattle::GetMsgSize() const
1894 }
1895 /************************************************************************/
1896 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消            */
1897 /************************************************************************/
1898 uint32 MsgXGMRoomBattle_ReplyEnter::GetMsgSize()const
1931 }
1933 /************************************************************************/
1934 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消广播            */
1935 /************************************************************************/
1936 uint32 MsgXGMRoomBattle_ReplyEnter_BROADCAST::GetMsgSize()const
1969 }
1971 /************************************************************************/
1972 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  客户端确认离开，重新返回报名状态 */
1973 /************************************************************************/
1974 uint32 MsgXGMRoomBattle_Leave::GetMsgSize()const
2007 }
2009 /************************************************************************/
2010 /* 跨服关卡消息结构定义 MGP-->GL-->MGP        		                    */
2011 /************************************************************************/
2012 uint32 MsgMGMRoomBattle::GetMsgSize() const
2066 }
2068 /************************************************************************/
2069 /* 跨服关卡消息结构定义 MAP-->GL-->MGP        		                    */
2070 /************************************************************************/
2071 uint32 MsgXGMRoomBattle::GetMsgSize() const
2185 }
2187 /************************************************************************/
2188 /* 跨服关卡消息结构定义 MGP-->GL-->MAP        		                    */
2189 /************************************************************************/
2190 uint32 MsgMGXRoomBattle::GetMsgSize() const
2301 }
2303 /************************************************************************/
2304 /* 跨服关卡消息结构定义 Client-->MAP        		                    */
2305 /************************************************************************/
2306 uint32 MsgCXRoomBattle::GetMsgSize() const
2396 }
2398 /************************************************************************/
2399 /* 跨服关卡消息结构定义 MAP-->Client        		                    */
2400 /************************************************************************/
2401 uint32 MsgXCRoomBattle::GetMsgSize() const

H:\work\source\成吉思汗\cj3\src\src\khan2-share\TAB\TabDefine_Map_Misc.cpp 89 KB CPP 文件 2013/3/11 11:21:31 2018/10/9 14:15:19 2018/10/9 14:15:19 2
2230 /*
2231 =======================================================================================================================
2232 跨服关卡 逻辑数据表
2233 =======================================================================================================================
2234 */
2286 /*
2287 =======================================================================================================================
2288 跨服关卡 配置数据表
2289 =======================================================================================================================
2290 */

H:\work\source\成吉思汗\cj3\src\src\khan2-share\TAB\TabDefine_Share.cpp 46 KB CPP 文件 2013/3/11 11:21:33 2018/10/9 14:15:19 2018/10/9 14:15:19 2
1011 {
1012 	__GUARD__
1014 	//如果不开跨服副本，默认不读BackScene
1015 	if (g_Config.m_MultiGroupConfig.m_nGroupCount <= 0)
1016 	{
1067 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0) 
1068 	{
1069 		//如果是跨服MapServer确保BackScene有配置
1070 		KCheckEx(bFindCurrServerBackScene,"BakSceneInfo.tab表配置错误");
1071 	}

H:\work\source\成吉思汗\Khan2\Client\Game\Network\Message\XCMPVP2v2BattleDispatch.cpp 2 KB CPP 文件 2013/3/11 12:48:37 2018/10/9 16:52:59 2018/10/9 16:52:59 1
1 /***********************************************************
2 desc:	跨服 2v2 战场服务器相应处理
3 auth:	crj
4 date:	2010-9-21

H:\work\source\成吉思汗\Khan2\Client\Game\ScriptFunction\GameScriptFunction.cpp 244 KB CPP 文件 2013/3/10 22:20:07 2018/10/9 16:53:02 2018/10/9 16:53:02 1
8197 			return 0;
8198 	}
8200 	/* 跨服战场 2010-9-23 by rj */
8201 	if(MPVP2V2_BATTLE_TYPE == nIndex || MPVP6V6_BATTLE_TYPE == nIndex)
8202 	{

H:\work\source\成吉思汗\Khan2\Client\Game\ScriptFunction\GameScriptFunctionAroundPlayer.cpp 11 KB CPP 文件 2013/3/10 22:20:08 2018/10/9 16:53:03 2018/10/9 16:53:03 1
96 		if(propertyName == "Name")
97 		{
98 			// 2010-10-18 by rj 对组队对话框中的附近玩家，如果聊天者与自身不在一个服（跨服战场）则将这个用户显示名加入其服的名字
99 			if (OBJECT_MANAGER_PTR->GetMySelf() &&
100 			    OBJECT_MANAGER_PTR->GetMySelf()->GetCharacterData()->Get_WorldID() != pData->Get_WorldID())

H:\work\source\成吉思汗\Khan2\Client\Game\ScriptFunction\GameScriptFunctionTalk.cpp 270 KB CPP 文件 2013/8/12 17:02:50 2018/10/9 16:53:03 2018/10/9 16:53:03 3
5469 			KYLIN_TRY std::vector<STRING>	strParam;
5470 			strParam.push_back(ChannelType2String((eCHAT_TYPE) reN.getChannelType()));
5472 			// 2010-10-18 by rj 如果聊天者与自身不在一个服（跨服战场）则将这个用户显示名加入其服的名字。增加附近聊天限制，否则可能会出现小喇叭显示异服的问题。
5473 			if (chatType == CHAT_TYPE_NEAR && 
5474 				pPacket->GetWorldID() != INVALID_ID &&
7316 void CScriptFunTalk::SetPaoPaoTxt(STRING &strUser, STRING &strTxt, int32 strType, int32 extLength, ID_t nWorldID)
7317 {
7318 	// 2010-10-26 by rj 对跨服聊天泡泡显示不同服的同名玩家进行支持
7319 	KCharacter	*pObj = OBJECT_MANAGER_PTR->FindCharacterByName(strUser, CHARACTER_PLAYER_TYPE, nWorldID);
7320 	if(pObj && pObj->GetTitleBoard()->isShow())
7330 void CScriptFunTalk::SetPaoPaoMoodAnim(STRING &strUser, STRING &strTxt, ID_t nWorldID)
7331 {
7332 	// 2010-10-26 by rj 对跨服聊天泡泡显示不同服的同名玩家进行支持
7333 	KCharacter	*pObj = OBJECT_MANAGER_PTR->FindCharacterByName(strUser, CHARACTER_PLAYER_TYPE, nWorldID);
7334 	if(!pObj || !(pObj->GetTitleBoard()->isShow()))

H:\work\source\成吉思汗\Khan2\Client\Game\UI\UIPartyMessageBox.cpp 29 KB CPP 文件 2013/3/10 22:20:28 2018/10/9 16:53:04 2018/10/9 16:53:04 2
269 		}
270 		break;
271 	case MPVP2V2_BATTLE_TYPE: 	// 发送进入跨服 2v2 竞技场请求 2010-9-23 by rj
272 		{
273 			CXMPVP2v2Battle	msg;
549 			}
550 			break;
551 		case MPVP2V2_BATTLE_TYPE: // 2010-9-23 by rj 跨服 2v2 战场处理
552 			{
553 				CEGUI::String	strUtf32;

H:\work\source\成吉思汗\Khan2\GLServer\GL\Messages\LWRequestPlayerLoginDispatch.cpp 13 KB CPP 文件 2013/3/10 22:39:07 2018/10/9 16:55:39 2018/10/9 16:55:39 1
191 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
192 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
194 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
195 		if (pFindPlayer == NULL)
196 		{

H:\work\source\成吉思汗\Khan2\MapServer\Server\Connector\ServerConnectorManager_MapServer.cpp 12 KB CPP 文件 2013/3/10 22:40:15 2018/10/9 16:55:41 2018/10/9 16:55:41 1
33 		g_pServerConnectorMgr->AddGroup(nConnectID, g_Config.m_MultiGroupConfig.m_GLServerInfo[m_nConnectIdx].m_WorldID);
34 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
36 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
37 		SSHandShake msg;
38 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());

H:\work\source\成吉思汗\Khan2\MapServer\Server\Map\MapCore.cpp 37 KB CPP 文件 2013/3/10 22:41:08 2018/10/9 16:55:44 2018/10/9 16:55:44 1
630 				m_bFirstInit = FALSE;
631 			}
632 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
633 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD || pSceneData->m_Type == MAP_TYPE_MSIGNUP)
634 			{

H:\work\source\成吉思汗\Khan2\MapServer\Server\Messages\CXMPVP2v2BattleDispatch.cpp 4 KB CPP 文件 2013/3/10 22:41:43 2018/10/9 16:55:45 2018/10/9 16:55:45 1
1 /***********************************************************
2 desc:	跨服 2v2 战场客户端请请求处理
3 auth:	crj
4 date:	2010-9-21

H:\work\source\成吉思汗\Khan2\MapServer\Server\Messages\CXUseItemDispatch.cpp 8 KB CPP 文件 2013/3/10 22:42:30 2018/10/9 16:55:46 2018/10/9 16:55:46 1
117 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
118 	{
119 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
120 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
121 		{

H:\work\source\成吉思汗\Khan2\MapServer\Server\Messages\GXRequestGuildConvoyDispatch.cpp 4 KB CPP 文件 2013/3/10 22:42:52 2018/10/9 16:55:47 2018/10/9 16:55:47 1
77 	{
78 		KCheck(KGetCurrentTID() == pMap->m_ThreadID);
80 		// 2010-10-21 by rj 增加跨服报名场景可以接收到拉兽召唤
81 		if(pMap->GetMapType() == MAP_TYPE_GAMELOGIC || pMap->GetMapType() == MAP_TYPE_MSIGNUP)
82 		{

H:\work\source\成吉思汗\Khan2\MapServer\Server\Messages\GXRetChangeSceneDispatch.cpp 5 KB CPP 文件 2013/3/10 22:42:54 2018/10/9 16:55:47 2018/10/9 16:55:47 1
106 				KCheck(pMapData);
108 				ID_t ServerID = pMapData->m_ServerID;
110 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
111 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
112 				{

H:\work\source\成吉思汗\Khan2\MapServer\Server\Messages\XXMPVP2v2BattleDispatch.cpp 5 KB CPP 文件 2013/3/10 22:43:05 2018/10/9 16:55:47 2018/10/9 16:55:47 1
1 /***********************************************************
2 desc:	跨服 2v2 战场场景通知消息处理
3 auth:	crj
4 date:	2010-9-23

H:\work\source\成吉思汗\Khan2\MapServer\Server\Messages\Delegater\ChangeMapDelegater.cpp 35 KB CPP 文件 2013/3/11 13:03:45 2018/10/9 16:55:46 2018/10/9 16:55:46 2
1216 		pPlayer->ClearMutexState(MS_Fuben);
1217 	}
1219 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1220 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1221 	{

H:\work\source\成吉思汗\Khan2\MapServer\Server\Messages\Delegater\GXCountryDispatchDelegater.cpp 26 KB CPP 文件 2013/3/11 13:03:46 2018/10/9 16:55:46 2018/10/9 16:55:46 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				&&	pMap->GetMapType() != MAP_TYPE_MSIGNUP
229 				) 
277 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
278 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
279 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
280 				&&	pMap->GetMapType() != MAP_TYPE_MSIGNUP
281 				)

H:\work\source\成吉思汗\Khan2\MapServer\Server\Other\MPVP2v2Battle.cpp 31 KB CPP 文件 2013/3/10 22:43:46 2018/10/9 16:55:49 2018/10/9 16:55:49 2
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
548 			nLevelFlag = 0;
549 		}
551 		// 报名场景必须在这个跨服战场服务器上
552 		Map	*pMap = g_pMapManager->GetMap((MapID_t)m_SceneList.m_aScene[i]);
553 		KCheck(pMap);

H:\work\source\成吉思汗\Khan2\MapServer\Server\Other\MPVPBattleManager.cpp 8 KB CPP 文件 2013/3/10 22:43:48 2018/10/9 16:55:49 2018/10/9 16:55:49 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
95 	__UNGUARD__ return FALSE;
96 }
98 // 以类型方式获得跨服战场类
99 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVPBattleType nType)
100 {

H:\work\source\成吉思汗\Khan2\MapServer\Server\Run\DaemonThread.cpp 8 KB CPP 文件 2013/3/10 22:43:56 2018/10/9 16:55:49 2018/10/9 16:55:49 3
159 		}
161 		m_OPSteps = 7;
163 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
164 		_NET_TRY
165 		{
164 		_NET_TRY
165 		{
166 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
167 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
168 			{

H:\work\source\成吉思汗\Khan2\MapServer\Server\Run\Server.cpp 30 KB CPP 文件 2013/3/10 22:43:58 2018/10/9 16:55:49 2018/10/9 16:55:49 1
537 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTopListCacheMgr...OK");
538 	
539 	// 跨服战场管理器 2010-10-13 by rj
540 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
541 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\Khan2\MapServer\Server\Script\LuaFunction_Scene.cpp 184 KB CPP 文件 2013/3/10 22:44:19 2018/10/9 16:55:49 2018/10/9 16:55:49 14
1456 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1458 	KCheck(szName);
1460 	// 2010-11-2 对发送脚本邮件进行跨服支持
1461 	ObjID_t selfId = Lua_ValueToNumber(L, 7);
1462 	BEGPLAYERDEFINE("LuaFunction_SendScriptMail");
5359 	return 0;
5360 }
5363 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
5364 int32 LuaFunction_MPVP2v2RegisterScene(Lua_State *L)
5365 {
5386 	LUA_RETURNERROR_1;
5387 }
5389 // 跨服 2v2 战场场景报名查询函数 by rj 2010-9-21
5390 int32 LuaFunction_MPVP2v2SignupState(Lua_State *L)
5391 {
5448 	return 0;
5449 }
5451 // 跨服 2v2 战场场景报名函数 by rj 2010-9-21
5452 int32 LuaFunction_MPVP2v2Signup(Lua_State *L)
5453 {
5510 	return 0;
5511 }
5513 // 跨服 2v2 战场场景查询是否报名函数 by rj 2010-9-25
5514 int32 LuaFunction_MPVP2v2IsSignup(Lua_State *L)
5515 {
5544 	return 0;
5545 }
5547 // 跨服 2v2 战场场景启用战场 UI 面板 by rj 2010-9-28
5548 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
5549 {
5591 	return 0;
5592 }
5594 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
5595 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
5596 //{
5618 //}
5619 //
5620 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
5621 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
5622 //{
5688 //}
5689 //
5690 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
5691 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
5692 //{
5758 //}
5759 //
5760 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
5761 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
5762 //{
5792 //}
5793 //
5794 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
5795 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
5796 //{
5839 //}
5840 //
5841 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
5842 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
5843 //{
5891 //}
5892 //
5893 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
5894 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
5895 //{
5936 //}
5937 //
5938 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
5939 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
5940 //{

H:\work\source\成吉思汗\Khan2\MapServer\Server\Script\LuaSystem_Function.cpp 102 KB CPP 文件 2013/3/10 22:44:24 2018/10/9 16:55:50 2018/10/9 16:55:50 1
888 	m_LuaVM.RegisterFunction("PVP2v2AskBattleSceneEnter", (void *) (LuaFunction_PVP2v2AskBattleSceneEnter));
889 	m_LuaVM.RegisterFunction("SetPVP2v2BattleDisable", (void *) (LuaFunction_SetPVP2v2BattleDisable));
890 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterScene));	// 跨服 2v2 战场扩充函数 by rj 2010-9-21 
891 	m_LuaVM.RegisterFunction("MPVP2v2SignupState", (void *) (LuaFunction_MPVP2v2SignupState));
892 	m_LuaVM.RegisterFunction("MPVP2v2Signup", (void *) (LuaFunction_MPVP2v2Signup));

H:\work\source\成吉思汗\Khan2\Share\Connector\ConnectorManager.cpp 14 KB CPP 文件 2013/3/10 12:39:51 2018/10/9 16:57:36 2018/10/9 16:57:36 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ConnectorID_t pid)
332 {

H:\work\source\成吉思汗\Khan2\Share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/10 12:39:52 2018/10/9 16:57:36 2018/10/9 16:57:36 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ConnectorID_t ConnectorID)
74 {

H:\work\source\成吉思汗\Khan2\Share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/10 12:39:53 2018/10/9 16:57:36 2018/10/9 16:57:36 1
196 }
197 	
198 // 2010-10-9 by rj 跨服线程连接方式
199 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ID_t serverid,ConnectorID_t& connID)
200 {

H:\work\source\成吉思汗\Khan2\Share\Core\Setting.cpp 72 KB CPP 文件 2013/8/18 22:25:04 2018/10/9 16:57:36 2018/10/9 16:57:36 3
286 /*
287 =======================================================================================================================
288  加载跨服配置信息
289 =======================================================================================================================
290 */
300 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
301 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
303 	// 跨服战场最大场景数量配置 2010-9-23 by rj
304 	m_MultiGroupConfig.m_nMax2v2SceneCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
305 	m_MultiGroupConfig.m_nMax6v6SceneCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
319 		m_MultiGroupConfig.m_GLServerInfo[i].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
320 		
321 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
323 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "";
325 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);

H:\work\source\成吉思汗\mycode\Client\GameCommandSystem.cpp 78 KB CPP 文件 2013/3/9 12:56:24 2018/10/8 21:48:55 2018/10/8 21:48:55 1
1139 	{ GCD_ASK_JOIN_FUBEN_WITH_TEAM, "ASK_JOIN_FUBEN_WITH_TEAM" },
1140 	{ GCD_ASK_EXIT_ROOM, "ASK_EXIT_ROOM" },
1142 	//跨服副本报名搜索
1143 	{ GCD_UPDATE_FUBEN_SEARCH_STATE,"UPDATE_FUBEN_SEARCH_STATE" },
1145 	//军团信息更新

H:\work\source\成吉思汗\mycode\Client\GameStateChangeServer.cpp 6 KB CPP 文件 2013/3/9 12:57:04 2018/10/8 21:48:55 2018/10/8 21:48:55 1
217 			::GetPrivateProfileString( "Debug", "Login.WorldID", "", szReadTemp, MAX_PATH, DEBUG_FILE_NAME );
218 			static ut_id s_nWorldID = atoi(szReadTemp); 
219 			GAME_DATA_PLAYER_PTR->SetWorldID(s_nWorldID); // 支持跨服自架测试
220 																			
221 		}

H:\work\source\成吉思汗\mycode\Client\GameStateRun.cpp 100 KB CPP 文件 2013/3/9 12:57:06 2018/10/8 21:48:55 2018/10/8 21:48:55 2
663 	MsgFCSYSData.SetType(HYCSYS_GRATULATION_ALL_DATA);
664 	NET_MANAGER_PTR->SendMessage(&MsgFCSYSData);
666 	//跨服关卡的处理 
668 	//清除小地图上的军团信息
669 	GAME_DATA_RELATION_PTR->GetCorps()->ClearCorpsInfo();
681 	//请求军团数据
682 	GAME_DATA_QUEST_PTR->AskRoomBattleGroupData();
683 	/////跨服关卡的处理	
685 	//请求宠物属性点培养冷却时间
686 	GAME_DATA_PET_PTR->AskAttrUpCDTime();

H:\work\source\成吉思汗\mycode\Client\UIMap.cpp 24 KB CPP 文件 2013/3/9 12:57:43 2018/10/8 21:49:05 2018/10/8 21:49:05 1
483 		case MAP_POINT_TRANSER_NPC:		szChildWinType = MAP_POINT_TYPE_TRANSER_NPC;	break;
484 		case MAP_POINT_MONSTER:			szChildWinType = MAP_POINT_TYPE_MONSTER;		break;
486 		// 跨服6v6的旗子
487 		case MAP_POINT_OneLevelFlag:			szChildWinType = MAP_POINT_TYPE_ONELEVELFLAG; break;
488 		case MAP_POINT_TwoLevelFlag:			szChildWinType = MAP_POINT_TYPE_TWOLEVELFLAG; break;

H:\work\source\成吉思汗\mycode\Client\UIPartyMessageBox.cpp 33 KB CPP 文件 2013/3/9 12:57:44 2018/10/8 21:49:05 2018/10/8 21:49:05 1
404 		}
405 		break;
407 	case MGUILD_BATTLE_TYPE: // 跨服帮会战
408 		{
409 			CXMPVPBattle msg;

H:\work\source\成吉思汗\mycode\DBShare\ShareData\MKLogicManager.cpp 133 KB CPP 文件 2013/3/9 12:58:37 2018/10/8 21:49:06 2018/10/8 21:49:06 2
3741 }
3743 /************************************************************************/
3744 /* 跨服战积分相关                                                       */
3745 /************************************************************************/
3746 /*
4439 }
4441 /************************************************************************/
4442 /* 跨服联赛结果
4443 /************************************************************************/
4444 /*

H:\work\source\成吉思汗\mycode\GLServer\GLData\MGuildBattleManager.cpp 15 KB CPP 文件 2013/3/9 12:58:58 2018/10/8 21:49:08 2018/10/8 21:49:08 8
94 	// 当前赛季进度
95 	int32 nSeasonWeek = (GET_TIME().GetWeekNumFrom2011() - g_Config.m_ConfigInfo.m_MPVPGuildBeginWeek) % g_Config.m_ConfigInfo.m_MPVPPointPeriodWeeks;
97 	// 取得跨服服务器
98 	int32 nServerNum = 0;
99 	ut_id serverIDs[SERVER_CAPACITY] = {-1};
145 	//	if (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / nServerNum <= 0)
146 	//		return serverIDs[0];
148 	//	// 2011-07-26 by rj 改进原来的等分算法，在所连跨服服务器数量等于 2 时用用 4/6 算法来解决高分帮会人数过多的问题
149 	//	int32 iSeg = iIndex / (g_pMPVPPointManager->GetPointNumByType(MPVP_POINT_GUILD) / (nServerNum <= 2 ? 2.5f : nServerNum) );
150 	//	if (iSeg >= nServerNum)
166 	if (uPrevSignupTime)
167 	{
168 		// 超时保护（防止报名完成后跨服服务器宕机导致 GL 无法清理报名）
169 		if (GET_TIME().GetCTime() - uPrevSignupTime > 90*60)
170 		{
258 	if(!pGuild || pGuild->GetGuildID() == INVALID_KHAN_ID)
259 		return FALSE;
261 	// 转发跨服战场进入通知到报名玩家所在 Map
262 	GXMPVPBattle msg;
263 	msg.SetBattleType(MPVP_GUILD_BATTLE_TYPE);
416 					aSignupPlayers[0].GuildPoint = pPoint->m_nCurrentPoint;
417 				}
419 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
420 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
421 				msg.SetSignupType(pKMessage->GetSignupType());
472 				if (NULL != pServePlayer_Target)
473 				{
474 					// 转发跨服战场状态到报名玩家所在 Map
475 					GXMPVPBattle msg;
476 					msg.SetBattleType(pKMessage->GetBattleType());
503 				return MP_CONTINUE;
504 			}
506 			// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
507 			pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pMatch->nServerID);
508 			if (pServePlayer_Target)
524 			if (NULL != pServePlayer_Target)
525 			{
526 				// 转发跨服战场进入响应到报名玩家所在 Map
527 				GXMPVPBattle msg;
528 				msg.SetBattleType(pKMessage->GetBattleType());

H:\work\source\成吉思汗\mycode\GLServer\GLData\MPVPGuildPoint.cpp 8 KB CPP 文件 2013/3/9 12:58:58 2018/10/8 21:49:08 2018/10/8 21:49:08 3
1 /************************************************************************/
2 /* 帮会跨服战积分信息接口的具体实现                                     */
3 /************************************************************************/
5 #include "stdafx.h"
195 /*
196 =======================================================================================================================
197 处理不同跨服战各自的额外参数填充
198 =======================================================================================================================
199 */
223 /*
224 =======================================================================================================================
225 加载跨服帮战每周的场次信息
226 =======================================================================================================================
227 */

H:\work\source\成吉思汗\mycode\GLServer\GLData\MPVPPointArithmetic.cpp 2 KB CPP 文件 2013/3/9 12:58:58 2018/10/8 21:49:08 2018/10/8 21:49:08 3
1 /************************************************************************/
2 /* 跨服战积分算法器,负责各种跨服战积分的计算逻辑实现                    */
3 /************************************************************************/
5 #include "stdafx.h"
16 /*
17 ===============================================================================================================
18 根据实力来计算跨服帮会的加权分
19 帮会实力-(错过的场次*放弃损失的分数)
20 ===============================================================================================================

H:\work\source\成吉思汗\mycode\GLServer\GLData\MPVPPointInfo.cpp 14 KB CPP 文件 2013/3/9 12:58:58 2018/10/8 21:49:08 2018/10/8 21:49:08 2
1 /************************************************************************/
2 /* 跨服战积分信息接口的具体实现                                         */
3 /************************************************************************/
5 #include "stdafx.h"
72 /*
73 =======================================================================================================================
74 获取跨服积分的数据信息
75 =======================================================================================================================
76 */

H:\work\source\成吉思汗\mycode\GLServer\GLData\MPVPPointManager.cpp 11 KB CPP 文件 2013/3/9 12:58:59 2018/10/8 21:49:08 2018/10/8 21:49:08 5
1 /************************************************************************/
2 /* 跨服战积分管理器的实现                                               */
3 /************************************************************************/
5 #include "stdafx.h"
98 /*
99 ===============================================================================================================
100 注册跨服积分的实现
101 ===============================================================================================================
102 */
220 /*
221 ===============================================================================================================
222 获取指定类型跨服战全部积分信息
223 ===============================================================================================================
224 */
243 /*
244 ===============================================================================================================
245 获取指定跨服战当前的赛季开始周
246 ===============================================================================================================
247 */
266 /*
267 ===============================================================================================================
268 获取指定跨服战当前周
269 ===============================================================================================================
270 */

H:\work\source\成吉思汗\mycode\GLServer\GLData\MPVPToplist.cpp 8 KB CPP 文件 2013/3/9 12:58:59 2018/10/8 21:49:08 2018/10/8 21:49:08 2
1 /************************************************************************/
2 /* 跨服帮会战排行榜的具体实现		                                    */
3 /************************************************************************/
5 #include "stdafx.h"
25 /*
26 =======================================================================================================================
27 积分数据加载,从跨服积分管理器中加载需要的信息
28 =======================================================================================================================
29 */

H:\work\source\成吉思汗\mycode\GLServer\GLData\MutiGroupMapServerManager.cpp 18 KB CPP 文件 2013/3/9 12:59:01 2018/10/8 21:49:08 2018/10/8 21:49:08 1
4 Author:Michael		
5 Created:Michael
6 Description :跨服MapServer管理器实现
7 Revision :  2011/06/17 Michael create
9 =============================================================================*/

H:\work\source\成吉思汗\mycode\GLServer\GLData\PVPLeagueMatchManager.cpp 31 KB CPP 文件 2013/3/9 12:59:04 2018/10/8 21:49:08 2018/10/8 21:49:08 3
128 			stMsg.GetLeagueMatch()->m_Begin.m_nTime = stState.m_nCountDownTime;
129 			stMsg.GetLeagueMatch()->m_Begin.m_nScriptID = stState.m_nFlag;
130 			// 取得跨服服务器
131 			int32 nServerNum = 0;
132 			ut_id serverIDs[SERVER_CAPACITY] = {-1};
155 			stMsg.GetLeagueMatch()->m_nType = STRU_GX_LEAGUEMATCH::GX_LEAGUEMATCH_TYPE_MATCHEEND;
156 		
157 			// 取得跨服服务器
158 			int32 nServerNum = 0;
159 			ut_id serverIDs[SERVER_CAPACITY] = {-1};
194 }
196 void SetGuildLeagueMatchResult(Guild *pGuild,uint32 nWinTimes)
197 {// 记录家族在跨服联赛中的结果
198 	if(!pGuild || nWinTimes==0)
199 		return;

H:\work\source\成吉思汗\mycode\GLServer\GLData\TopListManager.cpp 20 KB CPP 文件 2013/3/9 12:59:14 2018/10/8 21:49:08 2018/10/8 21:49:08 1
153 	Register(HONOR_CHARIOT_TOP_LIST_BK,			new TopList,					"Chariot_Honor_bk" );
154 	// add by dragon 战车排行榜 }
156 	// 跨服帮会战排行榜
157 	Register(MPVP_GUILD_CURRENT,			new CurrentMPVPGuildTopList,		"MPVP_Guild_Current" );
158 	Register(MPVP_GUILD_CURRENT_BK,			new TopList,				"MPVP_Guild_Current_bk" );

H:\work\source\成吉思汗\mycode\GLServer\Messages\LWRequestPlayerLoginDispatch.cpp 15 KB CPP 文件 2013/3/9 12:58:55 2018/10/8 21:49:08 2018/10/8 21:49:08 1
227 		ServerConnector *pFindPlayer = g_pServerConnectorManager->GetServerConnector(MapID);
228 		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
230 		// 2010-9-27 对在跨服战场服务器因为服务器宕机掉线的玩家再次登陆进行各自王城的重定位
231 		if (pFindPlayer == NULL)
232 		{

H:\work\source\成吉思汗\mycode\GLServer\Messages\XGBattleDispatch.cpp 96 KB CPP 文件 2013/3/9 12:59:17 2018/10/8 21:49:08 2018/10/8 21:49:08 25
2507 }
2509 /***********************************************************
2510 desc:	跨服战场 XG 服务器消息处理
2511 auth:	rj
2512 date:	2011-2-14
2520 	if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_2V2)
2521 	{
2522 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2523 		static IntegerHashMap mapMPVP2v2SignupRecord;
2524 		if (mapMPVP2v2SignupRecord.GetMaxCount() == 0)
2526 			mapMPVP2v2SignupRecord.InitTable(MAX_WORLD_PLAYER);
2527 		}
2529 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2530 		static IntegerHashMap mapMPVP2v2EnterBattleRecord;
2531 		if (mapMPVP2v2EnterBattleRecord.GetMaxCount() == 0)
2548 		case MPVP_BATTLE_RETSTATE:
2549 			{
2550 				// 记录这次跨服 2v2 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 2v2 的报名。值是当前报名的时间。
2551 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2552 				{
2582 				pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(pKPlayer->GetServerIDByMapID());
2583 				KCheck(pServePlayer_Target);
2585 				// 转发跨服战场进入通知到报名玩家所在 Map
2586 				GXMPVPBattle msg;
2587 				msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2613 				if (uPrevSignupTime)
2614 				{
2615 					// 6 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2616 					if (GET_TIME().GetCTime() - uPrevSignupTime > 360)
2617 					{
2719 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2720 				}
2722 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
2723 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
2724 				msg.SetSignupType(pKMessage->GetSignupType());
2734 				if (NULL != pServePlayer_Target)
2735 				{
2736 					// 转发跨服战场状态到报名玩家所在 Map
2737 					GXMPVPBattle msg;
2738 					msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2752 				if (iServerID)
2753 				{
2754 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
2755 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
2756 					if (NULL != pServePlayer_Target)
2777 				if (NULL != pServePlayer_Target)
2778 				{
2779 					// 转发跨服战场进入响应到报名玩家所在 Map
2780 					GXMPVPBattle msg;
2781 					msg.SetBattleType(MPVP_BATTLE_TYPE_2V2);
2793 	else if (pKMessage->GetBattleType() == MPVP_BATTLE_TYPE_6V6)
2794 	{
2795 		// 报名成功记录，对重复报名进行判定，这个记录与跨服战场 Map 保持同步（并行跨服 Map 不可在其上进行判定），不可放在玩家身上（下线将清除再上线依旧可以报名）
2796 		static IntegerHashMap mapMPVP6v6SignupRecord;
2797 		if (mapMPVP6v6SignupRecord.GetMaxCount() == 0)
2799 			mapMPVP6v6SignupRecord.InitTable(MAX_WORLD_PLAYER);
2800 		}
2802 		// 跨服战场通知进入战场场景保存，和我报名记录分开，使用户在报名战场进入通知后可继续报名（现在的形式）
2803 		static IntegerHashMap mapMPVP6v6EnterBattleRecord;
2804 		if (mapMPVP6v6EnterBattleRecord.GetMaxCount() == 0)
2821 		case MPVP_BATTLE_RETSTATE:
2822 			{
2823 				// 记录这次跨服 6v6 的跨服战场服务器，使这个玩家不可以再进行其他跨服服务器 6v6 的报名。值是当前报名的时间。
2824 				if (pKMessage->GetStateCode() == MPVP_BATTLE_STATECODE_SIGNUPOK)
2825 				{
2856 				if (NULL != pServePlayer_Target)
2857 				{
2858 					// 转发跨服战场进入通知到报名玩家所在 Map
2859 					GXMPVPBattle msg;
2860 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
2890 				if (uPrevSignupTime)
2891 				{
2892 					// 11 分钟超时保护（防止报名完成后跨服服务器当宕机导致 GL 无法清理报名）
2893 					if (GET_TIME().GetCTime() - uPrevSignupTime > 660)
2894 					{
2996 					aSignupPlayers[0].uInherenceLevel = pKPlayer->GetInherenceLevel();
2997 				}
2999 				// 转发报名请求到跨服战场 Map，注意无 PlayerID 设置
3000 				msg.SetSubType(MPVP_BATTLE_SIGNUP);
3001 				msg.SetSignupType(pKMessage->GetSignupType());
3011 				if (NULL != pServePlayer_Target)
3012 				{
3013 					// 转发跨服战场状态到报名玩家所在 Map
3014 					GXMPVPBattle msg;
3015 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);
3029 				if (iServerID)
3030 				{
3031 					// 转发进入请求到跨服战场 Map，注意无 PlayerID 设置
3032 					pServePlayer_Target = g_pServerConnectorManager->GetServerConnector(iServerID);
3033 					if (NULL != pServePlayer_Target)
3054 				if (NULL != pServePlayer_Target)
3055 				{
3056 					// 转发跨服战场进入响应到报名玩家所在 Map
3057 					GXMPVPBattle msg;
3058 					msg.SetBattleType(MPVP_BATTLE_TYPE_6V6);

H:\work\source\成吉思汗\mycode\GLServer\Run\GL.cpp 48 KB CPP 文件 2013/3/9 12:58:45 2018/10/8 21:49:06 2018/10/8 21:49:06 7
415 		ret = g_GlobalValMKPool.Init(MAX_KHAN_DB_GLOBAL_SIZE, WorldInfo.m_GlobalKey, SMPT_WORLD, SLOW_LOG_GL_SHAREMEM, bCreateShareMem);
416 		KCheckEx(ret, "GlobalKey共享内存初始化错误,请先启动DBShare ");
417 		// 跨服联赛  [11/24/2012 sunlei]
418 		ret = g_MPVPLeaguePointMKPool.Init(MAX_MPVP_POINT_POOL_NUM, WorldInfo.m_MPVPLeaguePointKey, SMPT_WORLD, SLOW_LOG_GL_SHAREMEM, bCreateShareMem );
419 		KCheckEx(ret, "MPVPLeaguePoint共享内存初始化错误,请先启动DBShare ");
446 	KCheck(g_pGuildBattleManager);
447 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildBattleManager...OK");
449 	//跨服帮战的管理器
450 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new MultiGuildBattleManager ... ");
451 	g_pMGuildBattleManager = new MGuildBattleManager;
488 	KCheck(g_pPVP6v6BattleManager);
489 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new PVP6v6BattleManager...OK");
491 	//跨服联赛管理器
492 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new CPVPLeagueMatchManager ... ");
493 	g_pPVPLeagueMatchManager = new CPVPLeagueMatchManager();
535 	KCheck(g_pGuildCenter);
536 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new GuildManager...OK");
538 	//跨服战积分管理器
539 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMPVPPointManager ... ");
540 	g_pMPVPPointManager = new MPVPPointManager;
721 	KCheck(g_pSystemParamsManager);
722 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] new g_pSystemParamsManager...OK");
725 	// 跨服管理器
726 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[New] Begin new g_pMutiGroupMapServerManager ... ");
727 	g_pMutiGroupMapServerManager = new MutiGroupMapServerManager;
994 	KCheck(ret);
995 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager->Init()...OK");
998 	//跨服管理器
999 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "[Init] g_pMutiGroupMapServerManager->Init()...OK");
1000 	ret = g_pMutiGroupMapServerManager->Init();
1197 	KSafeDelete(g_pSystemParamsManager);
1198 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pSystemParamsManager delete...OK");
1200 	//跨服管理器
1201 	KSafeDelete(g_pMutiGroupMapServerManager);
1202 	QLogSystem::SLOW_LOG(SLOW_LOG_WORLD, "g_pMutiGroupMapServerManager delete...OK");

H:\work\source\成吉思汗\mycode\GLServer\Run\ServerConnectorManager_GL.cpp 12 KB CPP 文件 2013/3/9 12:59:07 2018/10/8 21:49:08 2018/10/8 21:49:08 3
539 			_NET_TRY
540 			{
541 				// 跨服帮战管理器心跳
542 				ret = g_pMGuildBattleManager->HeartBeat(uTime);
543 				KCheck(ret);
549 			_NET_TRY
550 			{
551 				//处理跨服战积分管理器相关的心跳
552 				ret = g_pMPVPPointManager->HeartBeat(uTime);		
553 				KCheck(ret);
599 			_NET_TRY
600 			{
601 				//处理跨服联赛战管理器相关的心跳
602 				ret = g_pPVPLeagueMatchManager->HeartBeat(uTime);	
603 				KCheck(ret);

H:\work\source\成吉思汗\mycode\MapServer\Connector\ServerConnectorManager_MapServer.cpp 22 KB CPP 文件 2013/3/9 13:01:24 2018/10/8 21:49:11 2018/10/8 21:49:11 4
38 // 		g_pServerConnectorMgr->m_bConnectedGLServer[m_nConnectIdx] = TRUE;
39 // 
40 // 		// 2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
41 // 		SSHandShake msg;
42 // 		msg.SetMapID(g_pServerConnectorMgr->GetCurServerID());
284 	if(g_Config.m_MultiGroupConfig.IsSignUpServer())
285 	{
286 		//只要一组服务器连接正常,跨服房间管理器的心跳仍然执行 
287 		if (GetGLServerActiveCount() > 0)
288 		{
650 				{
651 					AddGroupTmp( connID, g_Config.m_MultiGroupConfig.m_GLServerInfo[i].m_WorldID );
653 					//2010-10-9 by rj 跨服线程连接方式不可以直接在连接成功后即发 SSHandShake，
654 					//当未 AddGroup 创建帮会据点数据等时线程切换发来同步据点数据会找不到据点缓存
655 // 					SSHandShake msg;
726 	if(FALSE == IsGLServerActiveTmp())//处理断线重连
727 	{
728 		//跨服重连机制
729 		if (FALSE == m_ConnectTimer.IsSetTimer())
730 		{

H:\work\source\成吉思汗\mycode\MapServer\GameLogic\MGuildBattle.cpp 28 KB CPP 文件 2013/3/9 13:00:57 2018/10/8 21:49:11 2018/10/8 21:49:11 3
1 /***********************************************************
2 desc:	跨服帮会战场实现
3 auth:	txp
4 date:	2011-6-10
122 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，
123 		// 为这个很少出现的异常进行处理。
124 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，
125 		// 如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
126 		if (FindSignup(pSignupPlayers[i].iWorldID, pSignupPlayers[i].GuildID))
427 		m_MatchList.m_aMatch[m_MatchList.m_nCount].m_bFinished = FALSE;
429 		int32 nLevelFlag=0, nDisLevel = s1.m_nSignupLevel - s2.m_nSignupLevel;
431 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
432 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
433 		KCheck(pMap);

H:\work\source\成吉思汗\mycode\MapServer\GameLogic\MPVP2v2Battle.cpp 35 KB CPP 文件 2013/3/9 13:00:58 2018/10/8 21:49:11 2018/10/8 21:49:11 3
1 /***********************************************************
2 desc:	跨服 2v2 战场实现
3 auth:	crj
4 date:	2010-10-13
249 		{
250 			// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
251 			// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
252 			if (FindSignup(pSignupPlayers[i].uSNID))
253 			{
649 			nLevelFlag = 0;
650 		}
652 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
653 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
654 		KCheck(pMap);

H:\work\source\成吉思汗\mycode\MapServer\GameLogic\MPVP6v6Battle.cpp 30 KB CPP 文件 2013/3/9 13:00:58 2018/10/8 21:49:11 2018/10/8 21:49:11 3
1 /***********************************************************
2 desc:	跨服 6v6 战场实现
3 auth:	txp
4 date:	2011-3-16
154 	{
155 		// 这里进行报名查找，报名主检测是在 GL 做的，但如果 GL 挂了再启动这里需要做一个判定，不用返回错误，记录日志，为这个很少出现的异常进行处理。
156 		// 重启 GL 后如果报名到并行的其他跨服 Map 其实也没有关系，如果重启 GL 后更换了没有报名的队员再次报名则也会进入这里并不给 GL 响应，直到本轮结束。
157 		if (FindSignup(pSignupPlayers[i].uSNID))
158 		{
536 			nLevelFlag = 0;
537 		}
539 		// 通知战场场景信息匹配，战场场景必须在这个跨服战场服务器上
540 		Map	*pMap = g_pMapManager->GetMap((ut_id_map)m_MapList.m_aMap[i]);
541 		KCheck(pMap);

H:\work\source\成吉思汗\mycode\MapServer\GameLogic\MPVPBattleManager.cpp 6 KB CPP 文件 2013/3/9 13:00:58 2018/10/8 21:49:11 2018/10/8 21:49:11 2
1 /***********************************************************
2 desc:	跨服战场管理器
3 auth:	crj
4 date:	2010-10-13
100 	__UNGUARD__ return FALSE;
101 }
103 // 以类型方式获得跨服战场类
104 IMPVPBattle *CMPVPBattleManager::GetMPVPBattleByType(MPVP_BATTLE_TYPE nType)
105 {

H:\work\source\成吉思汗\mycode\MapServer\GameLogic\SignUpMgr.cpp 83 KB CPP 文件 2013/3/9 13:01:26 2018/10/8 21:49:11 2018/10/8 21:49:11 1
4 Author:shangy		
5 Created:shangy    
6 Description :跨服报名管理类
7 Revision :  2011/06/20 shangy create
8 			2011/08/05 Michael Lin Modify

H:\work\source\成吉思汗\mycode\MapServer\Map\MapCore.cpp 39 KB CPP 文件 2018/10/13 18:42:31 2018/10/8 21:49:11 2018/10/8 21:49:11 2
612 			if(	(pSceneData->m_uExtraType & EXTRA_MAPTYPE_FUBENENTRANCE) ||
613 				g_Config.m_ConfigInfo.IsGardenMap(pSceneData->m_MapID) || //家园场景副本入口
614 				pSceneData->m_MapID == g_pFubenManager->GetServerBakSceneID())//  支持跨服副本				
615 			{
616 				//以上场景是副本入口场景 创建副本数据
670 				m_bFirstInit = FALSE;
671 			}
672 			// 2010-9-25 by rj 对跨服报名及战场场景进行计时器设置
673 			else if(pSceneData->m_Type == MAP_TYPE_MBATTLEFIELD)
674 			{

H:\work\source\成吉思汗\mycode\MapServer\Map\MapManager.cpp 64 KB CPP 文件 2018/10/13 18:47:09 2018/10/8 21:49:11 2018/10/8 21:49:11 3
1743 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
1744 		{
1745 			KCheck(FALSE);//跨服服务器上找不到报错
1746 		}
1748 		return INVALID_KHAN_ID;
2026 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2027 	{
2028 		//以下开始通知广播,支持跨服架构
2029 		for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
2030 		{
2058 BOOL FubenManager::BroadcastFubenSceneInfo(void)
2059 {
2060 	//如果不开跨服副本，不广播
2061 	if (g_Config.m_MultiGroupConfig.IsMultMapOpen() == FALSE)
2062 	{

H:\work\source\成吉思汗\mycode\MapServer\Messages\CXBattleDispatch.cpp 16 KB CPP 文件 2013/3/9 12:59:43 2018/10/8 21:49:10 2018/10/8 21:49:10 2
134 }
136 /***********************************************************
137 desc:	跨服战场客户端请请求处理
138 auth:	rj
139 date:	2011-2-14
158 		case MPVP_BATTLE_SIGNUP:
159 			{
160 				// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
161 				int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
162 					(

H:\work\source\成吉思汗\mycode\MapServer\Messages\CXItemDispatch.cpp 69 KB CPP 文件 2013/3/9 12:59:52 2018/10/8 21:49:10 2018/10/8 21:49:10 1
2233 			(int32)pPlayer->GetInherenceLevel() >= pBagItem->GetReqInherenceLevel() && pPlayer->GetLevel() >= pBagItem->GetReqPersonLevel()))
2234 	{
2235 		 // by rj 2010-10-20 对跨服场景使用物品进行许可限制 
2236 		if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0)
2237 		{

H:\work\source\成吉思汗\mycode\MapServer\Messages\GMRoomBattleDispatch.cpp 5 KB CPP 文件 2013/3/9 13:00:16 2018/10/8 21:49:10 2018/10/8 21:49:10 1
53 	else
54 	{
55 		ut_id_map nBackSceneID = g_pFubenManager->GetServerBakSceneID();  //跨服处的副本入口场景
57 		ut_id_map nTarSceneId = pPacket->GetRoomBattle()->u_RoomBattleData.m_SceneID;
58 		

H:\work\source\成吉思汗\mycode\MapServer\Messages\GXBattleDispatch.cpp 63 KB CPP 文件 2013/3/9 13:00:16 2018/10/8 21:49:10 2018/10/8 21:49:10 6
1483 }
1485 /***********************************************************
1486 desc:	跨服战场 GX 服务器消息处理
1487 auth:	rj
1488 date:	2011-2-14
1505 			case MPVP_BATTLE_SIGNUP:
1506 				{
1507 					// 跨服战场管理器进行报名操作，只以 SNID 进行操作
1509 					IMPVPBattle *pMPVPBattle = g_pMPVPBattleManager->GetMPVPBattleByType((MPVP_BATTLE_TYPE)pKMessage->GetBattleType());
1510 					//KCheck(pMPVPBattle);
1573 						return MP_CONTINUE;
1574 					}
1576 					// 跨服战场对用户发来的进入请求进行匹配场景查找，只以 SNID 进行操作
1577 					pMPVPBattle->TellPlayerEnterMap(pKMessage, pConnector);
1578 				}
1619 			case MPVP_BATTLE_RETSTATE:
1620 				{
1621 					// 对 GL 及跨服战场 Map 返回状态进行处理（显示给客户端）
1622 					pMap->GetLuaSystem()->RunScriptFunction
1623 						(
1635 			case MPVP_BATTLE_RES_ENTERSCENE:
1636 				{
1637 					// 对跨服战场返回的进入相应进行脚本调用执行地图切换
1638 					pMap->GetLuaSystem()->RunScriptFunction
1639 						(
1666 }
1668 /***********************************************************
1669 desc:	跨服战场场景通知消息处理
1670 auth:	rj
1671 date:	2011-2-14

H:\work\source\成吉思汗\mycode\MapServer\Messages\GXMapDispatch.cpp 21 KB CPP 文件 2013/3/9 13:00:23 2018/10/8 21:49:10 2018/10/8 21:49:10 2
202 				KCheck(pMapData);
204 				ut_id ServerID = pMapData->m_ServerID;
206 				// 2010-10-9 by rj 根据跨服不同进行不同 ip port 查找
207 				if (0 == g_Config.m_MultiGroupConfig.m_nGroupCount)
208 				{
621 		return MP_CONTINUE;
622 	}
624 	//以下是跨服的副本的处理
626 	//给报名服务器返回创建成功消息			
627 	MGMRoomBattle* Msg = CREATE_MESSAGE_OBJ(MGMRoomBattle,MESSAGE_MGM_ROOMBATTLE);

H:\work\source\成吉思汗\mycode\MapServer\Messages\Delegater\ChangeMapDelegater.cpp 45 KB CPP 文件 2013/3/9 13:00:04 2018/10/8 21:49:10 2018/10/8 21:49:10 2
1575 		pPlayer->ClearMutexState(MS_Fuben);
1576 	}
1578 	// 2010-10-20 by 增加跨服战场设置战场状态标志，需要这个状态才可以防止在战场外拉人出跨服战场场景
1579 	if(pPlayer->GetMap()->GetMapType() == MAP_TYPE_BATTLEFIELD || pPlayer->GetMap()->GetMapType() == MAP_TYPE_MBATTLEFIELD)
1580 	{

H:\work\source\成吉思汗\mycode\MapServer\Messages\Delegater\GXCountryDispatchDelegater.cpp 28 KB CPP 文件 2013/3/9 13:00:18 2018/10/8 21:49:10 2018/10/8 21:49:10 2
225 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
226 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
227 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持（如禁言）
228 				) 
229 				continue;
276 				&&	pMap->GetMapType() != MAP_TYPE_BATTLEFIELD
277 				&&	pMap->GetMapType() != MAP_TYPE_FUBEN
278 				&&	pMap->GetMapType() != MAP_TYPE_MBATTLEFIELD // 2010-10-21 增加跨服战场及报名场景国家处理命令支持
279 				)
280 				continue;

H:\work\source\成吉思汗\mycode\MapServer\Object\Bus.cpp 66 KB CPP 文件 2013/3/9 12:59:40 2018/10/8 21:49:10 2018/10/8 21:49:10 3
805 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
806 		= CaculateMonsterExpRuler::eCALC_TYPE_TEAM;
808 	//如果是跨服副本
809 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
810 	{
810 	{
811 		nValidMemberCount = GetValidOwnerListGroup(MAX_GROUP_MEMBER,apValidMember);
812 		eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
813 	}
814 	else
1091 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1093 	if(Get_OccupantTeamID() != INVALID_KHAN_ID) iFadeoutType = Obj_ItemRuler::FADE_OUT_TEAM;
1095 	//是否是跨服
1096 	BOOL BGroup = FALSE;
1097 	Map* pMap = GetMap();

H:\work\source\成吉思汗\mycode\MapServer\Object\Monster.cpp 91 KB CPP 文件 2013/3/9 13:01:05 2018/10/8 21:49:11 2018/10/8 21:49:11 6
902 		return;
903 	}
905 	//跨服副本
906 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
907 	{
1038 		nExp = (int32) (nBaseExp * fExpParam);
1039 	}
1041 	uint32	auExp[MAX_GROUP_MEMBER];//  for 跨服军团
1042 	int32	_Idx;
1044 	CaculateMonsterExpRuler::eEXP_CALC_TYPE eCalcType 
1053 			if (pMap->m_FubenDataParty.IsRoomType())
1054 			{
1055 				eCalcType = CaculateMonsterExpRuler::eCALC_TYPE_GROUP; //按跨服军团分配
1056 				eGroupType = DamageInfo::GROUP_CORPS;
1057 			}
1802 		return 0;
1803 	}
1805 	//如果是跨服副本
1806 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
1807 	{
2041 	Player *apValidMember[MAX_GROUP_MEMBER];
2042 	uint32 nValidMemberCount = 0;
2044 	// 跨服副本
2045 	if (pMap->GetMapType() == MAP_TYPE_FUBEN && pMap->m_FubenDataParty.IsRoomType())
2046 	{
3150 		return 0;
3151 	}
3153 	//场景类型必须为跨服副本
3154 	Map* pMap = GetMap();
3155 	if (NULL == pMap)

H:\work\source\成吉思汗\mycode\MapServer\Other\GMCommand.cpp 221 KB CPP 文件 2013/3/9 13:00:16 2018/10/8 21:49:10 2018/10/8 21:49:10 1
546 	REGISTER_HANDLER(addchariothonour);	// \gm addchariothonour =100	增加战车荣誉
547 	REGISTER_HANDLER(unlockhorse);		// \gm unlockhorse =objid =horseindex  强制解锁骑乘
548 	REGISTER_HANDLER(addguildwin);		// \gm addguildwin =num 增加跨服帮战胜利次数
550 	REGISTER_HANDLER(getviewgroup);		// \gm getviewgroup	//获取当前的可视组
551 	REGISTER_HANDLER(setviewgroup);		// \gm setviewgroup	=groupnum //设置当前的可视组

H:\work\source\成吉思汗\mycode\MapServer\Other\GuildCacheManager.cpp 19 KB CPP 文件 2013/3/9 13:00:30 2018/10/8 21:49:10 2018/10/8 21:49:10 1
179 	m_aFreeParam[GD_GUILD_MBATTLE_JOINCOUNT] = pGuildInfo->m_nMBattleJoinCount;
180 	m_aFreeParam[GD_GUILD_MBATTLE_FORWARD] = pGuildInfo->m_nMBattleForward;
181 	// 跨服联赛数据 [11/9/2012 sunlei]
182 	m_aFreeParam[GD_GUILD_MLEAGUE_RESULT_REWARD] = pGuildInfo->m_nLMLeagueReward;
183 	m_aFreeParam[GD_GUILD_MLEAGUE_RESULT_WIN] = pGuildInfo->m_nLMLeagueWinTimes;

H:\work\source\成吉思汗\mycode\MapServer\Run\KLDaemonThread.cpp 9 KB CPP 文件 2013/3/9 13:00:43 2018/10/8 21:49:11 2018/10/8 21:49:11 3
160 		}
162 		m_OPSteps = 7;
164 		// 2010-9-23 by rj 跨服 2v2 战场心跳处理
165 		_NET_TRY
166 		{
165 		_NET_TRY
166 		{
167 			// 只有在配置为跨服的 MapServer 上才进行跨服 2v2 战场心跳处理
168 			if(g_Config.m_MultiGroupConfig.m_nGroupCount && g_pMPVPBattleManager)
169 			{

H:\work\source\成吉思汗\mycode\MapServer\Run\MapServer.cpp 36 KB CPP 文件 2018/10/13 18:15:05 2018/10/8 21:49:11 2018/10/8 21:49:11 1
620 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] new g_pTeamGroupMgr...OK");
621 	
622 	// 跨服战场管理器 2010-10-13 by rj
623 	QLogSystem::SLOW_LOG(SLOW_LOG_SERVER, "[New] Begin new g_pMPVPBattleManager ... ");
624 	g_pMPVPBattleManager = new CMPVPBattleManager;

H:\work\source\成吉思汗\mycode\MapServer\Script\LuaFunction_Chat.cpp 63 KB CPP 文件 2013/3/9 13:00:46 2018/10/8 21:49:11 2018/10/8 21:49:11 1
1086 		pMsg->SetCycleCount(nParam);
1087 	g_pServerConnectorMgr->SendMessage_SingleMode(pMsg);
1090 	//世界频道支持跨服
1091 	for( int i = 0 ;i<MAX_SERVER_CONNECTOR_POOL_SIZE; ++i )
1092 	{

H:\work\source\成吉思汗\mycode\MapServer\Script\LuaFunction_Map.cpp 237 KB CPP 文件 2013/3/9 13:00:49 2018/10/8 21:49:11 2018/10/8 21:49:11 16
264 	SelectMap.m_MapDataType = 0;
265 	SelectMap.m_CopyData = * pFD;
266 	SelectMap.m_CopyData.m_bRoom = false;//非跨服房间类型
268 	if (nRoomType == 1)
269 	{
1718 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
1720 	KCheck(szName);
1722 	// 2010-11-2 对发送脚本邮件进行跨服支持
1723 	ut_id_obj selfId = Lua_ValueToNumber(L, 7);
1725 	if (INVALID_KHAN_ID == selfId)
6043 	return 0;
6044 }
6046 // 跨服 2v2 战场场景注册函数 by rj 2010-9-21
6047 int32 LuaFunction_MPVP2v2RegisterMap(Lua_State *L)
6048 {
6069 	LUA_RETURNERROR_1;
6070 }
6072 // 跨服 2v2 战场场景更新战场 UI 面板 by rj 2010-9-28
6073 int32 LuaFunction_SetMPVP2v2BattleDisable(Lua_State *L)
6074 {
6116 	return 0;
6117 }
6119 // 跨服 6v6 战场场景注册函数
6120 int32 LuaFunction_MPVP6v6RegisterMap(Lua_State *L)
6121 {
6142 	LUA_RETURNERROR_1;
6143 }
6145 // 跨服 6v6 战场场景更新战场 UI 面板
6146 int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
6147 {
6189 	return 0;
6190 }
6192 // 跨服 6v6 战场场景注册函数 by rj 2010-10-15
6193 //int32 LuaFunction_MPVP6v6RegisterScene(Lua_State *L)
6194 //{
6216 //}
6217 //
6218 //// 跨服 6v6 战场场景报名查询函数 by rj 2010-10-15
6219 //int32 LuaFunction_MPVP6v6SignupState(Lua_State *L)
6220 //{
6286 //}
6287 //
6288 //// 跨服 6v6 战场场景报名函数 by rj 2010-10-15
6289 //int32 LuaFunction_MPVP6v6Signup(Lua_State *L)
6290 //{
6356 //}
6357 //
6358 //// 跨服 6v6 战场场景查询是否报名函数 by rj 2010-10-15
6359 //int32 LuaFunction_MPVP6v6IsSignup(Lua_State *L)
6360 //{
6390 //}
6391 //
6392 //// 跨服 6v6 战场场景启用战场 UI 面板 by rj 2010-10-15
6393 //int32 LuaFunction_SetMPVP6v6BattleDisable(Lua_State *L)
6394 //{
6437 //}
6438 //
6439 //// 跨服 6v6 战场发送比分更新 by rj 2010-10-15
6440 //int32 LuaFunction_SendMPVP6v6BattleScore(Lua_State *L)
6441 //{
6489 //}
6490 //
6491 //// 跨服 6v6 战场发送金钱更新 by rj 2010-10-15
6492 //int32 LuaFunction_SendMPVP6v6BattleMoney(Lua_State *L)
6493 //{
6534 //}
6535 //
6536 //// 跨服 6v6 战场发送能量更新 by rj 2010-10-15
6537 //int32 LuaFunction_SendMPVP6v6BattlePower(Lua_State *L)
6538 //{
7380 	return 0;
7381 }
7383 // 跨服战场场景注册函数
7384 int32 LuaFunction_MPVPRegisterMap(Lua_State *L)
7385 {
7475 	if(pMap)
7476 	{
7477 		// 进行本地报名判定，可以报名则返回根据算法查找出的跨服服务器 ID
7478 		int32 iRet = pMap->GetLuaSystem()->RunScriptFunction
7479 			(

H:\work\source\成吉思汗\mycode\MapServer\Script\LuaSystem_Function.cpp 158 KB CPP 文件 2013/3/9 13:00:56 2018/10/8 21:49:11 2018/10/8 21:49:11 13
1199 	m_LuaVM.RegisterFunction("AddBattleHonour", (void *) (LuaFunction_AddBattleHonour));							// 增加战功
1200 	m_LuaVM.RegisterFunction("SubBattleHonour", (void *) (LuaFunction_SubBattleHonour));							// 减少战功
1201 	m_LuaVM.RegisterFunction("MPVP2v2RegisterScene", (void *) (LuaFunction_MPVP2v2RegisterMap));					// 跨服 2v2 战场注册场景 
1202 	m_LuaVM.RegisterFunction("SetMPVP2v2BattleDisable", (void *) (LuaFunction_SetMPVP2v2BattleDisable));			// 跨服 2v2 战场名称显示
1203 	m_LuaVM.RegisterFunction("MPVP6v6RegisterScene", (void *) (LuaFunction_MPVP6v6RegisterMap));					// 跨服 6v6 战场注册场景
1204 	m_LuaVM.RegisterFunction("SetMPVP6v6BattleDisable", (void *) (LuaFunction_SetMPVP6v6BattleDisable));			// 跨服 6v6 战场名称显示
1205 	m_LuaVM.RegisterFunction("MPVPRegisterMap", (void *) (LuaFunction_MPVPRegisterMap));							// 跨服战场注册场景
1206 	m_LuaVM.RegisterFunction("MPVPLeagueRegisterMap",(void *)(LuaFunction_MPVPLeagueRegisterMap));					// 跨服联赛战
1207 	m_LuaVM.RegisterFunction("MPVPLeagueSetEnterSceneCutDown",(void *)(LuaFunction_MPVPLeagueSetEnterSceneCutDown));					// 跨服联赛战
1208 	m_LuaVM.RegisterFunction("MPVPLeagueSetMatchResult",(void *)(LuaFunction_MPVPLeagueSetMatchResult));					// 跨服联赛战，战斗结果
1209 	
1210 	m_LuaVM.RegisterFunction("CountryIsFortuneTimeEx", (void *) (LuaFunction_CountryIsFortuneTimeEx));				// 获取特定国家的国运是否进行
1327 	m_LuaVM.RegisterFunction("IsLeague", (void*)(LuaFunction_IsLeague));											// 判断两国是否是弱国联盟
1328 	m_LuaVM.RegisterFunction("CountryLeagueZhaoji", (void*)(LuaFunction_CountryLeagueZhaoji));						// 发送联盟召集令
1329 	m_LuaVM.RegisterFunction("AskEnterMGuildBattleScene",(void*)(LuaFunction_AskEnterMGuildBattleScene)); 			// 请求进入跨服帮会战场
1330 	m_LuaVM.RegisterFunction("MGuildBattleSignup",(void*)(LuaFunction_MGuildBattleSignup)); 						// 跨服帮会战报名
1331 	m_LuaVM.RegisterFunction("MGuildBattleResult",(void*)(LuaFunction_MGuildBattleResult)); 						// 跨服帮会战结果
1332 	m_LuaVM.RegisterFunction("MGuildBattleSeasonWeek",(void*)(LuaFunction_MGuildBattleSeasonWeek)); 				// 跨服帮会战赛季当前周数
1333 	m_LuaVM.RegisterFunction("GetMGuildNumOfBattleCurSeason", (void*)(LuaFunction_GetMGuildNumOfBattleCurSeason));	// 获取跨服帮战当前赛季的场数
1334 	m_LuaVM.RegisterFunction("SetEquipPokerData",(void*)(LuaFunction_SetEquipPokerData));							// 设置装备扑克牌属性
1335 	m_LuaVM.RegisterFunction("SetEquipPokerCount",(void*)(LuaFunction_SetEquipPokerCount));							// 设置装备扑克牌个数

H:\work\source\成吉思汗\mycode\Share\Connector\ConnectorManager.cpp 15 KB CPP 文件 2013/3/9 13:59:20 2018/10/8 21:51:05 2018/10/8 21:51:05 1
327 	return m_pConnectorPool->GetConnector(pid);
328 }
330 // 以跨服方式取得连接
331 Connector *ConnectorManager::GetConnectorForGroupMode(ut_id_connector pid)
332 {

H:\work\source\成吉思汗\mycode\Share\Connector\ConnectorPool.cpp 3 KB CPP 文件 2013/3/9 13:59:20 2018/10/8 21:51:05 2018/10/8 21:51:05 1
69 	return m_apConnectors[ConnectorID];
70 }
72 // 以跨服方式取得连接
73 Connector *ConnectorPool::GetConnectorForGroupMode(ut_id_connector ConnectorID)
74 {

H:\work\source\成吉思汗\mycode\Share\Connector\ServerConnectorManager.cpp 8 KB CPP 文件 2013/3/9 13:59:21 2018/10/8 21:51:05 2018/10/8 21:51:05 1
199 }
200 	
201 // 2010-10-9 by rj 跨服线程连接方式
202 Connector *ServerConnectorManager::ConnectToServerForGroup(const char* ip,uint16 port,ut_id serverid,ut_id_connector& connID)
203 {

H:\work\source\成吉思汗\mycode\Share\Core\Setting.cpp 102 KB CPP 文件 2018/10/13 18:19:20 2018/10/8 21:51:13 2018/10/8 21:51:13 6
350 /*
351 =======================================================================================================================
352  加载跨服配置信息
353 =======================================================================================================================
354 */
364 	KCheckEx(m_MultiGroupConfig.m_nGroupCount >= 0 && m_MultiGroupConfig.m_nGroupCount <= MULTI_GROUP_MAX_COUNT, 
365 		"GroupCount 读入数量必须小于等于 MULTI_GROUP_MAX_COUNT");
367 	// 跨服战场最大场景数量配置 2010-9-23 by rj
368 	m_MultiGroupConfig.m_nMax2v2MapCnt = ini.Get_Property_Int("PvP2v2", "Max_SceneCount");
369 	m_MultiGroupConfig.m_nMax6v6MapCnt = ini.Get_Property_Int("PvP6v6", "Max_SceneCount");
370 	
371 	m_MultiGroupConfig.m_nMaxMGuildMapCnt = ini.Get_Property_Int("MGuild", "Max_SceneCount");
372 	KCheckEx(m_MultiGroupConfig.m_nMaxMGuildMapCnt>0 && m_MultiGroupConfig.m_nMaxMGuildMapCnt<=MGUILD_MAX_MAPCOUNT, "跨服帮战场景数量要小于512");
374 // 	m_MultiGroupConfig.m_nMGuildBeginWeek = ini.Get_Property_Int("MGuild", "BeginWeek");
375 // 	KCheckEx(m_MultiGroupConfig.m_nMGuildBeginWeek>0 && m_MultiGroupConfig.m_nMGuildBeginWeek<=52, "起始周只能在1-52之间");
389 		m_MultiGroupConfig.m_GLServerInfo[_Idx].m_WorldID = ini.Get_Property_Int( szSection, "gl_worldid" );
390 		
391 		// 增加跨服 MAP 回退 MAP ip port 支持 2010-10-19 by rj
393 		char szMapIdString[128] = "", szMapIpString[512] = "", szMapPortString[128] = "", szMapIpString1[512] = "";
395 		ini.GetText(szSection, "backmap_idlist", szMapIdString, 128);
462 		}		
463 	}
465 	//跨服关卡报名服务器开关 
466 	m_MultiGroupConfig.m_SignUpServerToggle = ini.Get_Property_Int( "Room", "SignUpServerToggle" );
467 	m_MultiGroupConfig.m_MapFubenToogle = ini.Get_Property_Int( "Room", "MapFubenToogle" );
1143 	m_ConfigInfo.m_nEmpireOfficerMinLevel = ini.Get_Property_Int("Empire","OfficerMinLevel");
1144 	//[Empire] End
1146 	//added for跨服军团  
1147 	for (int32 _nGIndex = 0; _nGIndex < MAX_GROUP_MEMBER; ++_nGIndex)
1148 	{

H:\work\source\成吉思汗\mycode\Share\DataBase\ArchiveInterface.cpp 406 KB CPP 文件 2013/3/9 13:59:26 2018/10/8 21:51:18 2018/10/8 21:51:18 2
10115 }
10117 /************************************************************************/
10118 /* 跨服战积分相关                                                       */
10119 /************************************************************************/
10121 /*
13476 }
13478 /************************************************************************/
13479 /* 跨服联赛结果
13480 /************************************************************************/
13482 /*

H:\work\source\成吉思汗\mycode\Share\DataBase\SqlStatement.cpp 27 KB CPP 文件 2013/3/9 13:59:28 2018/10/8 21:51:18 2018/10/8 21:51:18 2
248 char	*g_LoadLostItemInfo = "select aid,playerguid,srcplayerguid,srcplayername,guid,world,server,itemclass,creator,dataproperty,data,termendtime,islock,unlocktime,gmoptime from %s where aid>%u order by aid asc" ;
249 char	*g_DelLostItemInfo = "delete from %s where aid=%u";
251 // 跨服战积分相关处理
252 char	*LoadMPVPPointInfo = "select unitid, unitname, world, currentpoint, totalpoint, currentwintimes, currentjointimes, totalwintimes, totaljointimes, mpvptypename, currentweek, startweek, params from %s where valid = 1";
253 char	*SaveMPVPPointInfo = "call proc_save_mpvppoint(%d,\'%s\', %d, %d, %d, %d, %d, %d, %d, \'%s\', %d, %d, %d, 1)";
306 char	*DelMaskInfo	= "update %s set valid=0 where playersnid = %u";
307 char	*SaveMaskInfo	= "call proc_save_maskdata(%u,%u,%d,%d,\'%s\',%d)";
309 // 跨服联赛纪录
310 char	*LoadMPVPLeaguePointInfo = "select worldid, countryid, guildid, guildname, signindex, wintimes from %s where valid = 1";
311 char	*SaveMPVPLeaguePointInfo = "call proc_save_mpvpleague_result(%d,%d,%d,\'%s\', %d, %d)";

H:\work\source\成吉思汗\mycode\Share\Messages\StructRoomBattle.cpp 68 KB CPP 文件 2018/10/12 1:55:54 2018/10/8 21:51:49 2018/10/12 1:55:54 19
4 Author:Michael		
5 Created:Michael    
6 Description :跨服房间相关结构
7 Revision :  2011/06/21 Michael create
9 =============================================================================*/
791 }
794 /************************************************************************/
795 /* 跨服报名候选数据结构定义  		                                    */
796 /************************************************************************/
797 BOOL RoomBattleSignupInfo::IsRoomIDInList(ut_id_room nRoomID) const
931 }
932 /************************************************************************/
933 /* 跨服报名候选数据结构定义 客户端消息结构                              */
934 /************************************************************************/
935 void RoomBattleSignupInfo_CX_Msg::Clear()
972 }
974 /************************************************************************/
975 /* 跨服取消报名结构定义   客户端消息结构	                           */
976 /************************************************************************/
977 void RoomBattleSignupCancel_CX_Msg::Clear()
1002 }
1004 /************************************************************************/
1005 /* 跨服确认进入结构定义    客户端消息结构	                           */
1006 /************************************************************************/
1007 void RoomBattleWaitingEnter_CX_Msg::Clear()
1109 }
1111 /************************************************************************/
1112 /* 跨服玩家确认结构定义    服务器消息结构	                           */
1113 /************************************************************************/
1114 void RoomBattlePlayerEnter_XC_Msg::Clear()
1148 }
1150 /************************************************************************/
1151 /* 跨服军团成员离开    服务器消息结构	                                */
1152 /************************************************************************/
1153 void RoomBattlePlayerLeave_XC_Msg::Clear()
1207 }
1210 /************************************************************************/
1211 /* 跨服确认进入结构定义    服务器消息结构	                           */
1212 /************************************************************************/
1213 void RoomBattleWaitingEnter_XC_Msg::Clear()
1581 }
1582 /************************************************************************/
1583 /* 跨服MapServer信息                  		                            */
1584 /************************************************************************/
1585 float SMutiGroupMapServerInfo::GetUseRate() const
1725 }
1727 /************************************************************************/
1728 /* 跨服关卡消息结构定义 MGP-->GL               		                    */
1729 /************************************************************************/
1730 uint32 MsgMGRoomBattle::GetMsgSize() const
1802 }
1804 /************************************************************************/
1805 /* 跨服关卡消息结构定义 GL-->MGP               		                    */
1806 /************************************************************************/
1807 uint32 MsgGMRoomBattle::GetMsgSize() const
1894 }
1895 /************************************************************************/
1896 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消            */
1897 /************************************************************************/
1898 uint32 MsgXGMRoomBattle_ReplyEnter::GetMsgSize()const
1931 }
1933 /************************************************************************/
1934 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  用于客户端确认进入或取消广播            */
1935 /************************************************************************/
1936 uint32 MsgXGMRoomBattle_ReplyEnter_BROADCAST::GetMsgSize()const
1969 }
1971 /************************************************************************/
1972 /* 跨服关卡消息结构定义 MGP-->GL-->MGP  客户端确认离开，重新返回报名状态 */
1973 /************************************************************************/
1974 uint32 MsgXGMRoomBattle_Leave::GetMsgSize()const
2007 }
2009 /************************************************************************/
2010 /* 跨服关卡消息结构定义 MGP-->GL-->MGP        		                    */
2011 /************************************************************************/
2012 uint32 MsgMGMRoomBattle::GetMsgSize() const
2066 }
2068 /************************************************************************/
2069 /* 跨服关卡消息结构定义 MAP-->GL-->MGP        		                    */
2070 /************************************************************************/
2071 uint32 MsgXGMRoomBattle::GetMsgSize() const
2185 }
2187 /************************************************************************/
2188 /* 跨服关卡消息结构定义 MGP-->GL-->MAP        		                    */
2189 /************************************************************************/
2190 uint32 MsgMGXRoomBattle::GetMsgSize() const
2301 }
2303 /************************************************************************/
2304 /* 跨服关卡消息结构定义 Client-->MAP        		                    */
2305 /************************************************************************/
2306 uint32 MsgCXRoomBattle::GetMsgSize() const
2396 }
2398 /************************************************************************/
2399 /* 跨服关卡消息结构定义 MAP-->Client        		                    */
2400 /************************************************************************/
2401 uint32 MsgXCRoomBattle::GetMsgSize() const

H:\work\source\成吉思汗\mycode\Share\TAB\TabDefine_Map_Misc.cpp 100 KB CPP 文件 2018/10/11 1:56:11 2018/10/8 21:52:15 2018/10/8 21:52:15 2
2382 /*
2383 =======================================================================================================================
2384 跨服关卡 逻辑数据表
2385 =======================================================================================================================
2386 */
2442 /*
2443 =======================================================================================================================
2444 跨服关卡 配置数据表
2445 =======================================================================================================================
2446 */

H:\work\source\成吉思汗\mycode\Share\TAB\TabDefine_Share.cpp 70 KB CPP 文件 2018/10/11 0:04:43 2018/10/8 21:52:15 2018/10/8 21:52:15 2
447 {
448 	__GUARD__
450 	//如果不开跨服副本，默认不读BackScene
451 	if (g_Config.m_MultiGroupConfig.m_nGroupCount <= 0)
452 	{
503 	if (g_Config.m_MultiGroupConfig.m_nGroupCount > 0) 
504 	{
505 		//如果是跨服MapServer确保BackScene有配置
506 		KCheckEx(bFindCurrServerBackScene,"BakSceneInfo.tab表配置错误");
507 	}

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-9377\DBServer\DBConfig.cpp 6 KB CPP 文件 2013/4/11 5:15:49 2018/8/3 20:29:10 2018/8/3 20:29:10 1
9 {
10 }
13 //读取跨服配置表
14 bool CDBConfig::LoadCrossServerConfig()
15 {

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-9377\LogicServer\main.cpp 10 KB CPP 文件 2013/4/11 5:16:29 2018/8/3 20:29:14 2018/8/3 20:29:14 1
281 					GetGlobalLogicEngine()->TraceItem();
282 				}
283 				else if(_tcsncicmp(sCmdBuf, "rkf", 3) == 0)  // 刷新跨服配置
284 				{
285 					GetLogicServer()->ReloadCrossConfig();

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-9377\LogicServer\base\GuildManger.cpp 60 KB CPP 文件 2013/4/11 7:51:03 2018/8/3 20:29:13 2018/8/3 20:29:13 4
400 		}
401 	}
403 	//跨服的占领沙巴克行会
404 	CRanking *crossRanking = RankingMgr.GetRanking(g_szGuildCrossSbkOwn);
405 	if(!crossRanking)
431 		}
432 	}
434 	//跨服的沙巴克
435 	CRanking *cRanking = RankingMgr.GetRanking(g_szGuildCrossPos);
436 	if(!cRanking)
1835 	{
1836 		CRanking *pRanking = RankingMgr.GetRanking(g_szGuildCrossList);
1838 		if( (nWeek == 2) && pRanking)			//每周五清除跨服攻沙列表，即打完跨服沙城的第二天清除
1839 		{
1840 			pRanking->clear();

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-9377\LogicServer\base\TopTitleMgr.cpp 15 KB CPP 文件 2013/4/11 7:51:12 2018/8/3 20:29:14 2018/8/3 20:29:14 4
325 	}
326 	pSSClient->flushProtoPacket(packet);
327 	OutputMsg(rmTip, _T("发消息给Session保存跨服排行榜！"));
328 }
330 void CTopTitleMgr::LoadCsRank()
333 	CDataPacket &packet = pSSClient->allocProtoPacket(jxInterSrvComm::SessionServerProto::cLoadCsRank);
334 	pSSClient->flushProtoPacket(packet);
335 	OutputMsg(rmTip, _T("发消息给Session获取跨服排行榜！"));
336 }
338 void CTopTitleMgr::ClearCsRank(INT_PTR nServerId)
342 	packet << (int)nServerId;
343 	pSSClient->flushProtoPacket(packet);
344 	OutputMsg(rmTip, _T("发消息给Session清除跨服排行榜！ServerId=%d"), nServerId);
345 }
347 void CTopTitleMgr::BroadLogicToSaveCsRank()
439 	if (nActorId <= 0 || nDestServerId <= 0) 
440 		return;
442 	//本服的不需要跨服请求
443 	if (GetLogicServer()->GetServerIndex() == nDestServerId)
444 	{

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-9377\LogicServer\config\LogicServerConfig.cpp 11 KB CPP 文件 2013/4/11 7:51:34 2018/8/3 20:29:14 2018/8/3 20:29:14 2
275 	return true;
276 }
278 //读取跨服配置表
279 bool CLogicServerConfig::LoadCrossServerConfig(CLogicServer *lpLogicServer)
280 {
394 			
396 			closeTable();
398 			//这没有开启跨服
399 			if(!bHasServer)
400 			{

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-9377\LogicServer\entity\Actor.cpp 201 KB CPP 文件 2013/4/11 7:51:53 2018/8/3 20:29:14 2018/8/3 20:29:14 9
2039 	if (!GetLogicServer()->IsCommonServer())
2040 	{
2041 		// 下发跨服开启状态
2042 		bool boStartCS = GetLogicServer()->IsStartCommonServer();
2043 		CActorPacket packet;
2766 		else
2767 		{
2768 			OutputMsg(rmTip, _T("在跨服服务器打包角色[actorId=%d]场景位置相关信息数据"), GetActorId());
2769 			// 将原始服务器的相关信息存盘，不保存跨服服务器的任何场景信息
2770 			// 跨服之后再回去，自动退出副本
2771 			data.nFbHandle = 0;
2772 			// 进入fb前位置
4251 		m_commsrvCityPointPos.SetData(nSceneId, nPosX, nPosY);
4252 	}
4254 	//OutputMsg(rmTip, _T("设置角色跨服服务器回城点位置(%d, %d_%d)"), nSceneId, nPosX, nPosY);
4255 }
4257 void CActor::ReturnCity()
6552 	if (!GetLogicServer()->IsStartCommonServer() && !GetLogicServer()->IsCommonServer())
6553 	{
6554 		OutputMsg(rmTip,  _T("%s 本服没有开启跨服"), __FUNCTION__);
6555 		return false;
6556 	}
6559 	{
6560 		SendTipmsgWithId(tpSceneCanNotCrossTransfer,ttFlyTip);
6561 		OutputMsg(rmTip,  _T("%s 副本中禁止跨服传送，请先退出副本"), __FUNCTION__);
6562 		return false;
6563 	}
6639 		else
6640 		{
6641 			OutputMsg(rmTip, _T("目标服务器[destServerId=%d]没有准备好,跨服失败"), nDestServerId);
6642 			SendTipmsgWithId(tpCrossServerIsClose,ttDialog);
6643 		}
6661 	CDataPacket& DataPacket = AllocPacket(ap);
6662 	DataPacket << (BYTE)enDefaultEntitySystemID << (BYTE)sStartTransmit << nDestServerId;
6663 	if(IsInRawServer() ) //如果在本服的话，就是传到跨服，否则要传到本服
6664 	{
6665 		DataPacket.writeString(GetLogicServer()->GetCommonServerAddr()?GetLogicServer()->GetCommonServerAddr():"");

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-9377\LogicServer\entitysystem\CrossSystem.cpp 19 KB CPP 文件 2013/4/11 7:52:15 2018/8/3 20:29:14 2018/8/3 20:29:14 2
216 	BYTE nType = 0;
217 	packet >> nType;
219 	if(nType == 1)	//跨服boss
220 	{
221 		if(GetLogicServer()->IsCommonServer() == false)
267 		TriggerEvent(cGetCrossWorldState);
268 	}
269 	else if(nType == 3)				//跨服沙城战
270 	{
271 		SendCrossCityOwnMsg();

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-9377\LogicServer\entitysystem\GmCommandHandle.cpp 106 KB CPP 文件 2013/4/11 7:52:22 2018/8/3 20:29:14 2018/8/3 20:29:14 7
151 	{"smf",				GM_LEVEL1,		&CChatSystem::SetActorMsgFilter }, // @sf 设置角色消息过滤器
152 	{"testssb",			GM_LEVEL1,		&CChatSystem::TestSessionBroad }, // @testssb
153 	{"startCs",			GM_LEVEL1,		&CChatSystem::GmStartCommonServer }, // @stopCs 关闭连接到跨服
154 	{"setGuildLeader",	GM_LEVEL1,		&CChatSystem::GmSetGguildLeader },	//@setGuildLeader 帮派名称 帮主名称	设置帮派帮主
155 	
156 	{"monster",			GM_LEVEL1,		&CChatSystem::GmMonster },	//@monster 怪物模型 外形id
157 	{"Circle",			GM_LEVEL1,		&CChatSystem::GmSetActorCircle}, //@circle 转数 [等级]
159 	{"ClearCsRank",		GM_LEVEL1,		&CChatSystem::GmClearCsRank }, //@ClearCsRank destServerId 删除跨服榜单 带destServerId参数指定删除某个服务器的榜单
160 	{"SaveCsRank",		GM_LEVEL1,		&CChatSystem::GmSaveCsRank }, //@SaveCsRank 广播所有逻辑服将雕像榜单数据发到session
161 	{"LoadCsRank",		GM_LEVEL1,		&CChatSystem::GmLoadCsRank }, //@LoadCsRank 广播所有逻辑服重新取下榜单
205 	{"reloadcombatrank", GM_LEVEL1, &CChatSystem::GmReloadCombatRank},		//重新加载战力竞技的排行
206 	{"setholiday",		GM_LEVEL1, &CChatSystem::GmSetHoliday},					//设置节日活动开关 1开， 0关
208 	{"setcrossguild",		GM_LEVEL1, &CChatSystem::GmSetCanCrossGuild},		//设置可以跨服的行会 @setcrossguild 行会名称
210 	{"setlhzsgm",		GM_LEVEL1, &CChatSystem::GmSetLhzsTitle},				//设置头衔  @setlhzsgm 玩家名称 头衔id 是否添加（0 取消 1 添加）
212 	{"SetDepotLock",	GM_LEVEL1, &CChatSystem::GmSetDepotLock},			//设置玩家仓库密码锁 @SetDepotLock 玩家名 密码
221 	{"ResetDmkjYB",	GM_LEVEL1, &CChatSystem::GmResetDmkjYB},		//重置盗梦物品元宝数以及总元宝消耗 @ResetDmkjYB
222 	{"killmonster", GM_LEVEL1, &CChatSystem::GmKillMonster},		//@killmonster 场景名字 怪名字 是否爆装备(1爆，0不爆)
224 	{"rkf", GM_LEVEL1, &CChatSystem::GmSetCrossConfig},		//@reloadcross 加载跨服配置
225 	
226 	{"kfid", GM_LEVEL1, &CChatSystem::GmSetCommonServerId},		//@crossserverid 10000 设置公共服的ID
3254 bool CChatSystem::GmSetCrossConfig(char ** args, INT_PTR nArgsCount, char * sRetMsg)
3255 {
3256 	GetLogicServer()->ReloadCrossConfig(); //重新加载跨服的配置
3258 	return true;
3259 }
3271 	if (IsArgsValid(args, nArgsCount, sRetMsg, 1) == false) return false;
3272 	int nId = atoi(args[0]);
3273 	GetLogicServer()->SetCommonServerId(nId); //设置跨服的ID
3275 	GetLogicServer()->ReloadCrossConfig(); //重新加载跨服的配置
3277 	return true;
3278 }

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-9377\LogicServer\entitysystem\PropertySystem.cpp 44 KB CPP 文件 2013/4/11 7:52:39 2018/8/3 20:29:14 2018/8/3 20:29:14 2
204 			else
205 			{
206 				OutputMsg(rmTip, _T("角色[actorId=%d]在跨服服务器登录，开始初始化场景信息"), pActor->GetActorId());
207 				
208 				// 拉到普通场景
231 				pActor->m_rawsrcScenePos.SetData(pActorData->nScenceID, pActorData->nPosX, pActorData->nPosY);
232 				
233 				// 初始化在跨服服务器上的一些数据 复活点信息应该在进入场景的时候设置吧TODO.
234 				pActor->m_commsrvPosBeforeEnterFB.SetData(nEntrSceneId, nX, nY);
235 			}

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-9377\LogicServer\mgrserv\MgrServClient.cpp 12 KB CPP 文件 2013/4/11 7:52:54 2018/8/3 20:29:14 2018/8/3 20:29:14 1
306 			break;
307 		}
309 	//case MSS_APPLY_ACROSS_SERVER_RET://后台返回的申请跨服结果  Tag = 0 为成功, 1 为失败  数据段为:  申请的角色名
310 	//	{
311 	//		nLen = DecodeBuffer(packet.getOffsetPtr(), TempBuffer, 

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-9377\LogicServer\misc\ActorNameColor.cpp 16 KB CPP 文件 2013/4/11 7:52:55 2018/8/3 20:29:14 2018/8/3 20:29:14 1
131 		}
132 	}
134 	if(GetLogicServer()->IsCommonServer() == true && GetGlobalLogicEngine()->GetGuildMgr().m_SbkWarFlag == 1 )			//跨服沙巴克的时候
135 	{
136 		int myGuildId = ((CActor*)pSelf)->GetProperty<int>(PROP_ACTOR_GUILD_ID);

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-9377\LogicServer\networkdata\NetWorkMsgHandle.cpp 40 KB CPP 文件 2013/4/11 7:52:59 2018/8/3 20:29:14 2018/8/3 20:29:14 3
361 			if(pActor->IsInTransmitStatus() )
362 			{
363 				OutputMsg(rmTip,_T("account=%d玩家正在跨服状态，不踢下线"),nSessionId);
364 			}
365 			else
908 			break;
909 		}
910 	case MSS_APPLY_ACROSS_SERVER_RET://后台返回的申请跨服结果  Tag = 0 为成功, 1 为失败  
911 		{
912 			//未实现
1255 	case MSS_SET_REFRESHCORSS:
1256 		{
1257 			GetLogicServer()->ReloadCrossConfig(); //重新加载跨服的配置
1259 			GetLogicServer()->GetMgrClient()->PostInternalMessage(MCS_RETURN_REFRESHCORSS, 0, 0, uParam4);
1260 			break;

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-9377\LogicServer\skill\SkillResult.cpp 71 KB CPP 文件 2013/4/11 7:53:13 2018/8/3 20:29:15 2018/8/3 20:29:15 1
1391 	CActor *pActor = (CActor*)pParam->pSrcEntity; //玩家的指针
1392 	
1394 	if( !pActor->IsInRawServer() ) return; //不在跨服里是没法使用的
1396 	int nSceneId = pActor->GetCitySceneId();
1397 	if(nSceneId ==0) return; //别传送进了测试场景

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-9377\SessionServer\SessionClient.cpp 26 KB CPP 文件 2013/4/11 5:16:39 2018/8/3 20:29:15 2018/8/3 20:29:15 2
809 		
810 		//如果当前存在一个会话，那么就发消息去删除这么一条消息
811 		//如果在本服登陆，并且在跨服登陆，先踢下跨服的账户
812 		if(nRawServerId == nLoginServerId && m_nCommServerId >0) //如果是在普通服登陆
813 		{

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-9377\SessionServer\SessionServer.cpp 26 KB CPP 文件 2013/4/11 5:16:40 2018/8/3 20:29:15 2018/8/3 20:29:15 1
229 		}
230 		break;	
232 		//踢掉在线的跨服用户
233 	case SSIM_KICK_ONLINE_CROSSSERVER_ACTOR:
234 		{

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-new\DBServer\DBConfig.cpp 6 KB CPP 文件 2013/4/11 5:17:05 2018/8/3 20:29:16 2018/8/3 20:29:16 1
9 {
10 }
13 //读取跨服配置表
14 bool CDBConfig::LoadCrossServerConfig()
15 {

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-new\LogicServer\main.cpp 10 KB CPP 文件 2013/4/11 5:17:45 2018/8/3 20:29:19 2018/8/3 20:29:19 1
281 					GetGlobalLogicEngine()->TraceItem();
282 				}
283 				else if(_tcsncicmp(sCmdBuf, "rkf", 3) == 0)  // 刷新跨服配置
284 				{
285 					GetLogicServer()->ReloadCrossConfig();

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-new\LogicServer\base\GuildManger.cpp 62 KB CPP 文件 2013/4/11 7:59:51 2018/8/3 20:29:18 2018/8/3 20:29:18 4
412 		}
413 	}
415 	//跨服的占领沙巴克行会
416 	CRanking *crossRanking = RankingMgr.GetRanking(g_szGuildCrossSbkOwn);
417 	if(!crossRanking)
443 		}
444 	}
446 	//跨服的沙巴克
447 	CRanking *cRanking = RankingMgr.GetRanking(g_szGuildCrossPos);
448 	if(!cRanking)
1884 	{
1885 		CRanking *pRanking = RankingMgr.GetRanking(g_szGuildCrossList);
1887 		if( (nWeek == 2) && pRanking)			//每周五清除跨服攻沙列表，即打完跨服沙城的第二天清除
1888 		{
1889 			pRanking->clear();

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-new\LogicServer\base\TopTitleMgr.cpp 16 KB CPP 文件 2013/4/11 8:00:01 2018/8/3 20:29:18 2018/8/3 20:29:18 4
330 	}
331 	pSSClient->flushProtoPacket(packet);
332 	OutputMsg(rmTip, _T("发消息给Session保存跨服排行榜！"));
333 }
335 void CTopTitleMgr::LoadCsRank()
338 	CDataPacket &packet = pSSClient->allocProtoPacket(jxInterSrvComm::SessionServerProto::cLoadCsRank);
339 	pSSClient->flushProtoPacket(packet);
340 	OutputMsg(rmTip, _T("发消息给Session获取跨服排行榜！"));
341 }
343 void CTopTitleMgr::ClearCsRank(INT_PTR nServerId)
347 	packet << (int)nServerId;
348 	pSSClient->flushProtoPacket(packet);
349 	OutputMsg(rmTip, _T("发消息给Session清除跨服排行榜！ServerId=%d"), nServerId);
350 }
352 void CTopTitleMgr::BroadLogicToSaveCsRank()
444 	if (nActorId <= 0 || nDestServerId <= 0) 
445 		return;
447 	//本服的不需要跨服请求
448 	if (GetLogicServer()->GetServerIndex() == nDestServerId)
449 	{

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-new\LogicServer\config\LogicServerConfig.cpp 11 KB CPP 文件 2013/4/11 8:00:23 2018/8/3 20:29:18 2018/8/3 20:29:18 2
275 	return true;
276 }
278 //读取跨服配置表
279 bool CLogicServerConfig::LoadCrossServerConfig(CLogicServer *lpLogicServer)
280 {
394 			
396 			closeTable();
398 			//这没有开启跨服
399 			if(!bHasServer)
400 			{

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-new\LogicServer\entity\Actor.cpp 211 KB CPP 文件 2013/4/11 8:00:43 2018/8/3 20:29:18 2018/8/3 20:29:18 9
2127 	if (!GetLogicServer()->IsCommonServer())
2128 	{
2129 		// 下发跨服开启状态
2130 		bool boStartCS = GetLogicServer()->IsStartCommonServer();
2131 		CActorPacket packet;
2855 		else
2856 		{
2857 			OutputMsg(rmTip, _T("在跨服服务器打包角色[actorId=%d]场景位置相关信息数据"), GetActorId());
2858 			// 将原始服务器的相关信息存盘，不保存跨服服务器的任何场景信息
2859 			// 跨服之后再回去，自动退出副本
2860 			data.nFbHandle = 0;
2861 			// 进入fb前位置
4351 		m_commsrvCityPointPos.SetData(nSceneId, nPosX, nPosY);
4352 	}
4354 	//OutputMsg(rmTip, _T("设置角色跨服服务器回城点位置(%d, %d_%d)"), nSceneId, nPosX, nPosY);
4355 }
4357 void CActor::ReturnCity()
6780 	if (!GetLogicServer()->IsStartCommonServer() && !GetLogicServer()->IsCommonServer())
6781 	{
6782 		OutputMsg(rmTip,  _T("%s 本服没有开启跨服"), __FUNCTION__);
6783 		return false;
6784 	}
6787 	{
6788 		SendTipmsgWithId(tpSceneCanNotCrossTransfer,ttFlyTip);
6789 		OutputMsg(rmTip,  _T("%s 副本中禁止跨服传送，请先退出副本"), __FUNCTION__);
6790 		return false;
6791 	}
6867 		else
6868 		{
6869 			OutputMsg(rmTip, _T("目标服务器[destServerId=%d]没有准备好,跨服失败"), nDestServerId);
6870 			SendTipmsgWithId(tpCrossServerIsClose,ttDialog);
6871 		}
6889 	CDataPacket& DataPacket = AllocPacket(ap);
6890 	DataPacket << (BYTE)enDefaultEntitySystemID << (BYTE)sStartTransmit << nDestServerId;
6891 	if(IsInRawServer() ) //如果在本服的话，就是传到跨服，否则要传到本服
6892 	{
6893 		DataPacket.writeString(GetLogicServer()->GetCommonServerAddr()?GetLogicServer()->GetCommonServerAddr():"");

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-new\LogicServer\entitysystem\CrossSystem.cpp 20 KB CPP 文件 2013/4/11 8:01:05 2018/8/3 20:29:18 2018/8/3 20:29:18 2
228 	BYTE nType = 0;
229 	packet >> nType;
231 	if(nType == 1)	//跨服boss
232 	{
233 		if(GetLogicServer()->IsCommonServer() == false)
279 		TriggerEvent(cGetCrossWorldState);
280 	}
281 	else if(nType == 3)				//跨服沙城战
282 	{
283 		SendCrossCityOwnMsg();

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-new\LogicServer\entitysystem\GmCommandHandle.cpp 114 KB CPP 文件 2013/4/11 8:01:12 2018/8/3 20:29:19 2018/8/3 20:29:19 11
151 	{"smf",				GM_LEVEL1,		&CChatSystem::SetActorMsgFilter }, // @sf 设置角色消息过滤器
152 	{"testssb",			GM_LEVEL1,		&CChatSystem::TestSessionBroad }, // @testssb
153 	{"startCs",			GM_LEVEL1,		&CChatSystem::GmStartCommonServer }, // @stopCs 关闭连接到跨服
154 	{"setGuildLeader",	GM_LEVEL1,		&CChatSystem::GmSetGguildLeader },	//@setGuildLeader 帮派名称 帮主名称	设置帮派帮主
155 	
156 	{"monster",			GM_LEVEL1,		&CChatSystem::GmMonster },	//@monster 怪物模型 外形id
157 	{"Circle",			GM_LEVEL1,		&CChatSystem::GmSetActorCircle}, //@circle 转数 [等级]
159 	{"ClearCsRank",		GM_LEVEL1,		&CChatSystem::GmClearCsRank }, //@ClearCsRank destServerId 删除跨服榜单 带destServerId参数指定删除某个服务器的榜单
160 	{"SaveCsRank",		GM_LEVEL1,		&CChatSystem::GmSaveCsRank }, //@SaveCsRank 广播所有逻辑服将雕像榜单数据发到session
161 	{"LoadCsRank",		GM_LEVEL1,		&CChatSystem::GmLoadCsRank }, //@LoadCsRank 广播所有逻辑服重新取下榜单
205 	{"reloadcombatrank", GM_LEVEL1, &CChatSystem::GmReloadCombatRank},		//重新加载战力竞技的排行
206 	{"setholiday",		GM_LEVEL1, &CChatSystem::GmSetHoliday},					//设置节日活动开关 1开， 0关
208 	{"setcrossguild",		GM_LEVEL1, &CChatSystem::GmSetCanCrossGuild},		//设置可以跨服的行会 @setcrossguild 行会名称
210 	{"setlhzsgm",		GM_LEVEL1, &CChatSystem::GmSetLhzsTitle},				//设置头衔  @setlhzsgm 玩家名称 头衔id 是否添加（0 取消 1 添加）
212 	{"SetDepotLock",	GM_LEVEL1, &CChatSystem::GmSetDepotLock},			//设置玩家仓库密码锁 @SetDepotLock 玩家名 密码
221 	{"ResetDmkjYB",	GM_LEVEL1, &CChatSystem::GmResetDmkjYB},		//重置盗梦物品元宝数以及总元宝消耗 @ResetDmkjYB
222 	{"killmonster", GM_LEVEL1, &CChatSystem::GmKillMonster},		//@killmonster 场景名字 怪名字 是否爆装备(1爆，0不爆)
224 	{"rkf", GM_LEVEL1, &CChatSystem::GmSetCrossConfig},		//@reloadcross 加载跨服配置
225 	
226 	{"kfid", GM_LEVEL1, &CChatSystem::GmSetCommonServerId},		//@crossserverid 10000 设置公共服的ID
244 	{"setsavelog", GM_LEVEL1, &GmSetSaveQuestLogFlag},					//设置是否保存任务到日志服务器 @setsavelog 状态(0 关闭 1 开启)
245 	{"setcoinlog", GM_LEVEL1, &GmSetSaveCoinLogFlag},					//设置是否保存任务到日志服务器 @setcoinlog 状态(0 关闭 1 开启)
247 	{"clearkfguild", GM_LEVEL1, &GmClearCrossGuildList},				//gm清除报名跨服的列表 @clearkfguild
248 	{"bmcrosssbk", GM_LEVEL1, &GmSignupCrossSbk},						//gm报名跨服沙城战 @bmcrosssbk 行会名称 状态（0 取消报名 1 报名）
250 	{"setkfownguild", GM_LEVEL1, &GmSetkfOwnGuild},						//设置跨服占领行会 @setkfownguild 行会名称
251 	{"clearkfpos", GM_LEVEL1, &GmClearCrossGuildPos},					//清除跨服的职位 @clearkfpos 职位（1 城主 2 副城主 3 大政令 4 大将军 5 大总管）
252 	{"ClearMagicBag",	GM_LEVEL0,	&CChatSystem::GmClearMagicBag},		//清空魔珠背包 @ClearMagicBag
254 	{"setzjlevel", GM_LEVEL1, &GmSetBuildLevel},						//gm改变行会建筑的等级 @setzjlevel 行会名称 建筑编号(1 主殿 2 行会商店 3 月光宝盒 4 封印兽碑)  改变建筑等级（正 为加 负 为减)
3324 bool CChatSystem::GmSetCrossConfig(char ** args, INT_PTR nArgsCount, char * sRetMsg)
3325 {
3326 	GetLogicServer()->ReloadCrossConfig(); //重新加载跨服的配置
3328 	return true;
3329 }
3341 	if (IsArgsValid(args, nArgsCount, sRetMsg, 1) == false) return false;
3342 	int nId = atoi(args[0]);
3343 	GetLogicServer()->SetCommonServerId(nId); //设置跨服的ID
3345 	GetLogicServer()->ReloadCrossConfig(); //重新加载跨服的配置
3347 	return true;
3348 }

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-new\LogicServer\entitysystem\PropertySystem.cpp 47 KB CPP 文件 2013/4/11 8:01:31 2018/8/3 20:29:19 2018/8/3 20:29:19 2
208 			else
209 			{
210 				OutputMsg(rmTip, _T("角色[actorId=%d]在跨服服务器登录，开始初始化场景信息"), pActor->GetActorId());
211 				
212 				// 拉到普通场景
235 				pActor->m_rawsrcScenePos.SetData(pActorData->nScenceID, pActorData->nPosX, pActorData->nPosY);
236 				
237 				// 初始化在跨服服务器上的一些数据 复活点信息应该在进入场景的时候设置吧TODO.
238 				pActor->m_commsrvPosBeforeEnterFB.SetData(nEntrSceneId, nX, nY);
239 			}

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-new\LogicServer\mgrserv\MgrServClient.cpp 12 KB CPP 文件 2013/4/11 8:01:46 2018/8/3 20:29:19 2018/8/3 20:29:19 1
306 			break;
307 		}
309 	//case MSS_APPLY_ACROSS_SERVER_RET://后台返回的申请跨服结果  Tag = 0 为成功, 1 为失败  数据段为:  申请的角色名
310 	//	{
311 	//		nLen = DecodeBuffer(packet.getOffsetPtr(), TempBuffer, 

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-new\LogicServer\misc\ActorNameColor.cpp 16 KB CPP 文件 2013/4/11 8:01:47 2018/8/3 20:29:19 2018/8/3 20:29:19 1
131 		}
132 	}
134 	if(GetLogicServer()->IsCommonServer() && GetGlobalLogicEngine()->GetGuildMgr().m_SbkWarFlag == 1 )			//跨服沙巴克的时候
135 	{
136 		int myGuildId = ((CActor*)pSelf)->GetProperty<int>(PROP_ACTOR_GUILD_ID);

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-new\LogicServer\networkdata\NetWorkMsgHandle.cpp 41 KB CPP 文件 2013/4/11 8:01:52 2018/8/3 20:29:19 2018/8/3 20:29:19 3
361 			if(pActor->IsInTransmitStatus() )
362 			{
363 				OutputMsg(rmTip,_T("account=%d玩家正在跨服状态，不踢下线"),nSessionId);
364 			}
365 			else
910 			break;
911 		}
912 	case MSS_APPLY_ACROSS_SERVER_RET://后台返回的申请跨服结果  Tag = 0 为成功, 1 为失败  
913 		{
914 			//未实现
1301 	case MSS_SET_REFRESHCORSS:
1302 		{
1303 			GetLogicServer()->ReloadCrossConfig(); //重新加载跨服的配置
1305 			GetLogicServer()->GetMgrClient()->PostInternalMessage(MCS_RETURN_REFRESHCORSS, 0, 0, uParam4);
1306 			break;

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-new\LogicServer\skill\SkillResult.cpp 77 KB CPP 文件 2013/4/11 8:02:06 2018/8/3 20:29:19 2018/8/3 20:29:19 1
1394 	CActor *pActor = (CActor*)pParam->pSrcEntity; //玩家的指针
1395 	
1397 	if( !pActor->IsInRawServer() ) return; //不在跨服里是没法使用的
1399 	int nSceneId = pActor->GetCitySceneId();
1400 	if(nSceneId ==0) return; //别传送进了测试场景

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-new\SessionServer\SessionClient.cpp 26 KB CPP 文件 2013/4/11 5:17:54 2018/8/3 20:29:19 2018/8/3 20:29:19 2
809 		
810 		//如果当前存在一个会话，那么就发消息去删除这么一条消息
811 		//如果在本服登陆，并且在跨服登陆，先踢下跨服的账户
812 		if(nRawServerId == nLoginServerId && m_nCommServerId >0) //如果是在普通服登陆
813 		{

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-new\SessionServer\SessionServer.cpp 26 KB CPP 文件 2013/4/11 5:17:55 2018/8/3 20:29:19 2018/8/3 20:29:19 1
229 		}
230 		break;	
232 		//踢掉在线的跨服用户
233 	case SSIM_KICK_ONLINE_CROSSSERVER_ACTOR:
234 		{

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-vspk\DBServer\DBConfig.cpp 6 KB CPP 文件 2013/4/11 5:18:21 2018/8/3 20:29:20 2018/8/3 20:29:20 1
9 {
10 }
13 //读取跨服配置表
14 bool CDBConfig::LoadCrossServerConfig()
15 {

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-vspk\LogicServer\main.cpp 10 KB CPP 文件 2013/4/11 5:19:01 2018/8/3 20:29:23 2018/8/3 20:29:23 1
281 					GetGlobalLogicEngine()->TraceItem();
282 				}
283 				else if(_tcsncicmp(sCmdBuf, "rkf", 3) == 0)  // 刷新跨服配置
284 				{
285 					GetLogicServer()->ReloadCrossConfig();

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-vspk\LogicServer\base\GuildManger.cpp 62 KB CPP 文件 2013/4/11 8:05:59 2018/8/3 20:29:22 2018/8/3 20:29:22 4
412 		}
413 	}
415 	//跨服的占领沙巴克行会
416 	CRanking *crossRanking = RankingMgr.GetRanking(g_szGuildCrossSbkOwn);
417 	if(!crossRanking)
443 		}
444 	}
446 	//跨服的沙巴克
447 	CRanking *cRanking = RankingMgr.GetRanking(g_szGuildCrossPos);
448 	if(!cRanking)
1884 	{
1885 		CRanking *pRanking = RankingMgr.GetRanking(g_szGuildCrossList);
1887 		if( (nWeek == 2) && pRanking)			//每周五清除跨服攻沙列表，即打完跨服沙城的第二天清除
1888 		{
1889 			pRanking->clear();

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-vspk\LogicServer\base\TopTitleMgr.cpp 16 KB CPP 文件 2013/4/11 8:06:09 2018/8/3 20:29:22 2018/8/3 20:29:22 4
330 	}
331 	pSSClient->flushProtoPacket(packet);
332 	OutputMsg(rmTip, _T("发消息给Session保存跨服排行榜！"));
333 }
335 void CTopTitleMgr::LoadCsRank()
338 	CDataPacket &packet = pSSClient->allocProtoPacket(jxInterSrvComm::SessionServerProto::cLoadCsRank);
339 	pSSClient->flushProtoPacket(packet);
340 	OutputMsg(rmTip, _T("发消息给Session获取跨服排行榜！"));
341 }
343 void CTopTitleMgr::ClearCsRank(INT_PTR nServerId)
347 	packet << (int)nServerId;
348 	pSSClient->flushProtoPacket(packet);
349 	OutputMsg(rmTip, _T("发消息给Session清除跨服排行榜！ServerId=%d"), nServerId);
350 }
352 void CTopTitleMgr::BroadLogicToSaveCsRank()
444 	if (nActorId <= 0 || nDestServerId <= 0) 
445 		return;
447 	//本服的不需要跨服请求
448 	if (GetLogicServer()->GetServerIndex() == nDestServerId)
449 	{

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-vspk\LogicServer\config\LogicServerConfig.cpp 11 KB CPP 文件 2013/4/11 8:06:31 2018/8/3 20:29:22 2018/8/3 20:29:22 2
275 	return true;
276 }
278 //读取跨服配置表
279 bool CLogicServerConfig::LoadCrossServerConfig(CLogicServer *lpLogicServer)
280 {
394 			
396 			closeTable();
398 			//这没有开启跨服
399 			if(!bHasServer)
400 			{

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-vspk\LogicServer\entity\Actor.cpp 209 KB CPP 文件 2013/4/11 8:06:51 2018/8/3 20:29:22 2018/8/3 20:29:22 9
2127 	if (!GetLogicServer()->IsCommonServer())
2128 	{
2129 		// 下发跨服开启状态
2130 		bool boStartCS = GetLogicServer()->IsStartCommonServer();
2131 		CActorPacket packet;
2855 		else
2856 		{
2857 			OutputMsg(rmTip, _T("在跨服服务器打包角色[actorId=%d]场景位置相关信息数据"), GetActorId());
2858 			// 将原始服务器的相关信息存盘，不保存跨服服务器的任何场景信息
2859 			// 跨服之后再回去，自动退出副本
2860 			data.nFbHandle = 0;
2861 			// 进入fb前位置
4351 		m_commsrvCityPointPos.SetData(nSceneId, nPosX, nPosY);
4352 	}
4354 	//OutputMsg(rmTip, _T("设置角色跨服服务器回城点位置(%d, %d_%d)"), nSceneId, nPosX, nPosY);
4355 }
4357 void CActor::ReturnCity()
6780 	if (!GetLogicServer()->IsStartCommonServer() && !GetLogicServer()->IsCommonServer())
6781 	{
6782 		OutputMsg(rmTip,  _T("%s 本服没有开启跨服"), __FUNCTION__);
6783 		return false;
6784 	}
6787 	{
6788 		SendTipmsgWithId(tpSceneCanNotCrossTransfer,ttFlyTip);
6789 		OutputMsg(rmTip,  _T("%s 副本中禁止跨服传送，请先退出副本"), __FUNCTION__);
6790 		return false;
6791 	}
6867 		else
6868 		{
6869 			OutputMsg(rmTip, _T("目标服务器[destServerId=%d]没有准备好,跨服失败"), nDestServerId);
6870 			SendTipmsgWithId(tpCrossServerIsClose,ttDialog);
6871 		}
6889 	CDataPacket& DataPacket = AllocPacket(ap);
6890 	DataPacket << (BYTE)enDefaultEntitySystemID << (BYTE)sStartTransmit << nDestServerId;
6891 	if(IsInRawServer() ) //如果在本服的话，就是传到跨服，否则要传到本服
6892 	{
6893 		DataPacket.writeString(GetLogicServer()->GetCommonServerAddr()?GetLogicServer()->GetCommonServerAddr():"");

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-vspk\LogicServer\entitysystem\CrossSystem.cpp 20 KB CPP 文件 2013/4/11 8:07:12 2018/8/3 20:29:23 2018/8/3 20:29:23 2
228 	BYTE nType = 0;
229 	packet >> nType;
231 	if(nType == 1)	//跨服boss
232 	{
233 		if(GetLogicServer()->IsCommonServer() == false)
279 		TriggerEvent(cGetCrossWorldState);
280 	}
281 	else if(nType == 3)				//跨服沙城战
282 	{
283 		SendCrossCityOwnMsg();

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-vspk\LogicServer\entitysystem\GmCommandHandle.cpp 113 KB CPP 文件 2013/4/11 8:07:19 2018/8/3 20:29:23 2018/8/3 20:29:23 11
151 	{"smf",				GM_LEVEL1,		&CChatSystem::SetActorMsgFilter }, // @sf 设置角色消息过滤器
152 	{"testssb",			GM_LEVEL1,		&CChatSystem::TestSessionBroad }, // @testssb
153 	{"startCs",			GM_LEVEL1,		&CChatSystem::GmStartCommonServer }, // @stopCs 关闭连接到跨服
154 	{"setGuildLeader",	GM_LEVEL1,		&CChatSystem::GmSetGguildLeader },	//@setGuildLeader 帮派名称 帮主名称	设置帮派帮主
155 	
156 	{"monster",			GM_LEVEL1,		&CChatSystem::GmMonster },	//@monster 怪物模型 外形id
157 	{"Circle",			GM_LEVEL1,		&CChatSystem::GmSetActorCircle}, //@circle 转数 [等级]
159 	{"ClearCsRank",		GM_LEVEL1,		&CChatSystem::GmClearCsRank }, //@ClearCsRank destServerId 删除跨服榜单 带destServerId参数指定删除某个服务器的榜单
160 	{"SaveCsRank",		GM_LEVEL1,		&CChatSystem::GmSaveCsRank }, //@SaveCsRank 广播所有逻辑服将雕像榜单数据发到session
161 	{"LoadCsRank",		GM_LEVEL1,		&CChatSystem::GmLoadCsRank }, //@LoadCsRank 广播所有逻辑服重新取下榜单
205 	{"reloadcombatrank", GM_LEVEL1, &CChatSystem::GmReloadCombatRank},		//重新加载战力竞技的排行
206 	{"setholiday",		GM_LEVEL1, &CChatSystem::GmSetHoliday},					//设置节日活动开关 1开， 0关
208 	{"setcrossguild",		GM_LEVEL1, &CChatSystem::GmSetCanCrossGuild},		//设置可以跨服的行会 @setcrossguild 行会名称
210 	{"setlhzsgm",		GM_LEVEL1, &CChatSystem::GmSetLhzsTitle},				//设置头衔  @setlhzsgm 玩家名称 头衔id 是否添加（0 取消 1 添加）
212 	{"SetDepotLock",	GM_LEVEL1, &CChatSystem::GmSetDepotLock},			//设置玩家仓库密码锁 @SetDepotLock 玩家名 密码
221 	{"ResetDmkjYB",	GM_LEVEL1, &CChatSystem::GmResetDmkjYB},		//重置盗梦物品元宝数以及总元宝消耗 @ResetDmkjYB
222 	{"killmonster", GM_LEVEL1, &CChatSystem::GmKillMonster},		//@killmonster 场景名字 怪名字 是否爆装备(1爆，0不爆)
224 	{"rkf", GM_LEVEL1, &CChatSystem::GmSetCrossConfig},		//@reloadcross 加载跨服配置
225 	
226 	{"kfid", GM_LEVEL1, &CChatSystem::GmSetCommonServerId},		//@crossserverid 10000 设置公共服的ID
244 	{"setsavelog", GM_LEVEL1, &GmSetSaveQuestLogFlag},					//设置是否保存任务到日志服务器 @setsavelog 状态(0 关闭 1 开启)
245 	{"setcoinlog", GM_LEVEL1, &GmSetSaveCoinLogFlag},					//设置是否保存任务到日志服务器 @setcoinlog 状态(0 关闭 1 开启)
247 	{"clearkfguild", GM_LEVEL1, &GmClearCrossGuildList},				//gm清除报名跨服的列表 @clearkfguild
248 	{"bmcrosssbk", GM_LEVEL1, &GmSignupCrossSbk},						//gm报名跨服沙城战 @bmcrosssbk 行会名称 状态（0 取消报名 1 报名）
250 	{"setkfownguild", GM_LEVEL1, &GmSetkfOwnGuild},						//设置跨服占领行会 @setkfownguild 行会名称
251 	{"clearkfpos", GM_LEVEL1, &GmClearCrossGuildPos},					//清除跨服的职位 @clearkfpos 职位（1 城主 2 副城主 3 大政令 4 大将军 5 大总管）
252 	{"ClearMagicBag",	GM_LEVEL0,	&CChatSystem::GmClearMagicBag},		//清空魔珠背包 @ClearMagicBag
254 	{"setzjlevel", GM_LEVEL1, &GmSetBuildLevel},						//gm改变行会建筑的等级 @setzjlevel 行会名称 建筑编号(1 主殿 2 行会商店 3 月光宝盒 4 封印兽碑)  改变建筑等级（正 为加 负 为减)
3323 bool CChatSystem::GmSetCrossConfig(char ** args, INT_PTR nArgsCount, char * sRetMsg)
3324 {
3325 	GetLogicServer()->ReloadCrossConfig(); //重新加载跨服的配置
3327 	return true;
3328 }
3340 	if (IsArgsValid(args, nArgsCount, sRetMsg, 1) == false) return false;
3341 	int nId = atoi(args[0]);
3342 	GetLogicServer()->SetCommonServerId(nId); //设置跨服的ID
3344 	GetLogicServer()->ReloadCrossConfig(); //重新加载跨服的配置
3346 	return true;
3347 }

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-vspk\LogicServer\entitysystem\PropertySystem.cpp 46 KB CPP 文件 2013/4/11 8:07:38 2018/8/3 20:29:23 2018/8/3 20:29:23 2
208 			else
209 			{
210 				OutputMsg(rmTip, _T("角色[actorId=%d]在跨服服务器登录，开始初始化场景信息"), pActor->GetActorId());
211 				
212 				// 拉到普通场景
235 				pActor->m_rawsrcScenePos.SetData(pActorData->nScenceID, pActorData->nPosX, pActorData->nPosY);
236 				
237 				// 初始化在跨服服务器上的一些数据 复活点信息应该在进入场景的时候设置吧TODO.
238 				pActor->m_commsrvPosBeforeEnterFB.SetData(nEntrSceneId, nX, nY);
239 			}

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-vspk\LogicServer\mgrserv\MgrServClient.cpp 12 KB CPP 文件 2013/4/11 8:07:53 2018/8/3 20:29:23 2018/8/3 20:29:23 1
306 			break;
307 		}
309 	//case MSS_APPLY_ACROSS_SERVER_RET://后台返回的申请跨服结果  Tag = 0 为成功, 1 为失败  数据段为:  申请的角色名
310 	//	{
311 	//		nLen = DecodeBuffer(packet.getOffsetPtr(), TempBuffer, 

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-vspk\LogicServer\misc\ActorNameColor.cpp 16 KB CPP 文件 2013/4/11 8:07:54 2018/8/3 20:29:23 2018/8/3 20:29:23 1
131 		}
132 	}
134 	if(GetLogicServer()->IsCommonServer() && GetGlobalLogicEngine()->GetGuildMgr().m_SbkWarFlag == 1 )			//跨服沙巴克的时候
135 	{
136 		int myGuildId = ((CActor*)pSelf)->GetProperty<int>(PROP_ACTOR_GUILD_ID);

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-vspk\LogicServer\networkdata\NetWorkMsgHandle.cpp 41 KB CPP 文件 2013/4/11 8:07:58 2018/8/3 20:29:23 2018/8/3 20:29:23 3
361 			if(pActor->IsInTransmitStatus() )
362 			{
363 				OutputMsg(rmTip,_T("account=%d玩家正在跨服状态，不踢下线"),nSessionId);
364 			}
365 			else
910 			break;
911 		}
912 	case MSS_APPLY_ACROSS_SERVER_RET://后台返回的申请跨服结果  Tag = 0 为成功, 1 为失败  
913 		{
914 			//未实现
1301 	case MSS_SET_REFRESHCORSS:
1302 		{
1303 			GetLogicServer()->ReloadCrossConfig(); //重新加载跨服的配置
1305 			GetLogicServer()->GetMgrClient()->PostInternalMessage(MCS_RETURN_REFRESHCORSS, 0, 0, uParam4);
1306 			break;

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-vspk\LogicServer\skill\SkillResult.cpp 77 KB CPP 文件 2013/4/11 8:08:13 2018/8/3 20:29:23 2018/8/3 20:29:23 1
1394 	CActor *pActor = (CActor*)pParam->pSrcEntity; //玩家的指针
1395 	
1397 	if( !pActor->IsInRawServer() ) return; //不在跨服里是没法使用的
1399 	int nSceneId = pActor->GetCitySceneId();
1400 	if(nSceneId ==0) return; //别传送进了测试场景

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-vspk\SessionServer\SessionClient.cpp 26 KB CPP 文件 2013/4/11 5:19:11 2018/8/3 20:29:23 2018/8/3 20:29:23 2
809 		
810 		//如果当前存在一个会话，那么就发消息去删除这么一条消息
811 		//如果在本服登陆，并且在跨服登陆，先踢下跨服的账户
812 		if(nRawServerId == nLoginServerId && m_nCommServerId >0) //如果是在普通服登陆
813 		{

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server-vspk\SessionServer\SessionServer.cpp 26 KB CPP 文件 2013/4/11 5:19:12 2018/8/3 20:29:23 2018/8/3 20:29:23 1
229 		}
230 		break;	
232 		//踢掉在线的跨服用户
233 	case SSIM_KICK_ONLINE_CROSSSERVER_ACTOR:
234 		{

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server\DBCenterServer\DBDataCenterClient.cpp 10 KB CPP 文件 2013/4/11 5:06:27 2018/8/3 20:29:37 2018/8/3 20:29:37 1
192 	*/
193 	
194 	//更新有多少个连接连接到跨服
195 	case DbServerProto::DB2DC_UpdateLogicClientList:
196 		OnRecvUpdateDBServerLogicClientList(inPacket);

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server\DBServer\DBConfig.cpp 6 KB CPP 文件 2013/4/11 5:06:31 2018/8/3 20:29:37 2018/8/3 20:29:37 1
9 {
10 }
13 //读取跨服配置表
14 bool CDBConfig::LoadCrossServerConfig()
15 {

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server\LogicServer\main.cpp 10 KB CPP 文件 2013/4/11 5:07:37 2018/8/3 20:29:44 2018/8/3 20:29:44 1
281 					GetGlobalLogicEngine()->TraceItem();
282 				}
283 				else if(_tcsncicmp(sCmdBuf, "rkf", 3) == 0)  // 刷新跨服配置
284 				{
285 					GetLogicServer()->ReloadCrossConfig();

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server\LogicServer\base\GuildManger.cpp 62 KB CPP 文件 2013/4/11 7:34:35 2018/8/3 20:29:43 2018/8/3 20:29:43 4
412 		}
413 	}
415 	//跨服的占领沙巴克行会
416 	CRanking *crossRanking = RankingMgr.GetRanking(g_szGuildCrossSbkOwn);
417 	if(!crossRanking)
443 		}
444 	}
446 	//跨服的沙巴克
447 	CRanking *cRanking = RankingMgr.GetRanking(g_szGuildCrossPos);
448 	if(!cRanking)
1884 	{
1885 		CRanking *pRanking = RankingMgr.GetRanking(g_szGuildCrossList);
1887 		if( (nWeek == 2) && pRanking)			//每周五清除跨服攻沙列表，即打完跨服沙城的第二天清除
1888 		{
1889 			pRanking->clear();

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server\LogicServer\base\TopTitleMgr.cpp 16 KB CPP 文件 2013/4/11 7:34:44 2018/8/3 20:29:43 2018/8/3 20:29:43 4
330 	}
331 	pSSClient->flushProtoPacket(packet);
332 	OutputMsg(rmTip, _T("发消息给Session保存跨服排行榜！"));
333 }
335 void CTopTitleMgr::LoadCsRank()
338 	CDataPacket &packet = pSSClient->allocProtoPacket(jxInterSrvComm::SessionServerProto::cLoadCsRank);
339 	pSSClient->flushProtoPacket(packet);
340 	OutputMsg(rmTip, _T("发消息给Session获取跨服排行榜！"));
341 }
343 void CTopTitleMgr::ClearCsRank(INT_PTR nServerId)
347 	packet << (int)nServerId;
348 	pSSClient->flushProtoPacket(packet);
349 	OutputMsg(rmTip, _T("发消息给Session清除跨服排行榜！ServerId=%d"), nServerId);
350 }
352 void CTopTitleMgr::BroadLogicToSaveCsRank()
444 	if (nActorId <= 0 || nDestServerId <= 0) 
445 		return;
447 	//本服的不需要跨服请求
448 	if (GetLogicServer()->GetServerIndex() == nDestServerId)
449 	{

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server\LogicServer\battle\SkillResult.cpp 71 KB CPP 文件 2013/4/11 7:34:49 2018/8/3 20:29:43 2018/8/3 20:29:43 1
1391 	CActor *pActor = (CActor*)pParam->pSrcEntity; //玩家的指针
1392 	
1394 	if( !pActor->IsInRawServer() ) return; //不在跨服里是没法使用的
1396 	int nSceneId = pActor->GetCitySceneId();
1397 	if(nSceneId ==0) return; //别传送进了测试场景

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server\LogicServer\config\LogicServerConfig - 副本.cpp 11 KB CPP 文件 2013/4/11 7:35:11 2018/8/3 20:29:43 2018/8/3 20:29:43 2
290 	return true;
291 }
293 //读取跨服配置表
294 bool CLogicServerConfig::LoadCrossServerConfig(CLogicServer *lpLogicServer)
295 {
409 			
411 			closeTable();
413 			//这没有开启跨服
414 			if(!bHasServer)
415 			{

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server\LogicServer\config\LogicServerConfig.cpp 11 KB CPP 文件 2013/4/11 7:35:11 2018/8/3 20:29:43 2018/8/3 20:29:43 2
275 	return true;
276 }
278 //读取跨服配置表
279 bool CLogicServerConfig::LoadCrossServerConfig(CLogicServer *lpLogicServer)
280 {
394 			
396 			closeTable();
398 			//这没有开启跨服
399 			if(!bHasServer)
400 			{

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server\LogicServer\entity\Actor.cpp 211 KB CPP 文件 2013/4/11 7:35:31 2018/8/3 20:29:43 2018/8/3 20:29:43 9
2127 	if (!GetLogicServer()->IsCommonServer())
2128 	{
2129 		// 下发跨服开启状态
2130 		bool boStartCS = GetLogicServer()->IsStartCommonServer();
2131 		CActorPacket packet;
2855 		else
2856 		{
2857 			OutputMsg(rmTip, _T("在跨服服务器打包角色[actorId=%d]场景位置相关信息数据"), GetActorId());
2858 			// 将原始服务器的相关信息存盘，不保存跨服服务器的任何场景信息
2859 			// 跨服之后再回去，自动退出副本
2860 			data.nFbHandle = 0;
2861 			// 进入fb前位置
4351 		m_commsrvCityPointPos.SetData(nSceneId, nPosX, nPosY);
4352 	}
4354 	//OutputMsg(rmTip, _T("设置角色跨服服务器回城点位置(%d, %d_%d)"), nSceneId, nPosX, nPosY);
4355 }
4357 void CActor::ReturnCity()
6780 	if (!GetLogicServer()->IsStartCommonServer() && !GetLogicServer()->IsCommonServer())
6781 	{
6782 		OutputMsg(rmTip,  _T("%s 本服没有开启跨服"), __FUNCTION__);
6783 		return false;
6784 	}
6787 	{
6788 		SendTipmsgWithId(tpSceneCanNotCrossTransfer,ttFlyTip);
6789 		OutputMsg(rmTip,  _T("%s 副本中禁止跨服传送，请先退出副本"), __FUNCTION__);
6790 		return false;
6791 	}
6867 		else
6868 		{
6869 			OutputMsg(rmTip, _T("目标服务器[destServerId=%d]没有准备好,跨服失败"), nDestServerId);
6870 			SendTipmsgWithId(tpCrossServerIsClose,ttDialog);
6871 		}
6889 	CDataPacket& DataPacket = AllocPacket(ap);
6890 	DataPacket << (BYTE)enDefaultEntitySystemID << (BYTE)sStartTransmit << nDestServerId;
6891 	if(IsInRawServer() ) //如果在本服的话，就是传到跨服，否则要传到本服
6892 	{
6893 		DataPacket.writeString(GetLogicServer()->GetCommonServerAddr()?GetLogicServer()->GetCommonServerAddr():"");

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server\LogicServer\entitysystem\CrossSystem.cpp 20 KB CPP 文件 2013/4/11 7:35:52 2018/8/3 20:29:44 2018/8/3 20:29:44 2
228 	BYTE nType = 0;
229 	packet >> nType;
231 	if(nType == 1)	//跨服boss
232 	{
233 		if(GetLogicServer()->IsCommonServer() == false)
279 		TriggerEvent(cGetCrossWorldState);
280 	}
281 	else if(nType == 3)				//跨服沙城战
282 	{
283 		SendCrossCityOwnMsg();

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server\LogicServer\entitysystem\GmCommandHandle.cpp 114 KB CPP 文件 2013/4/11 7:35:59 2018/8/3 20:29:44 2018/8/3 20:29:44 11
151 	{"smf",				GM_LEVEL1,		&CChatSystem::SetActorMsgFilter }, // @sf 设置角色消息过滤器
152 	{"testssb",			GM_LEVEL1,		&CChatSystem::TestSessionBroad }, // @testssb
153 	{"startCs",			GM_LEVEL1,		&CChatSystem::GmStartCommonServer }, // @stopCs 关闭连接到跨服
154 	{"setGuildLeader",	GM_LEVEL1,		&CChatSystem::GmSetGguildLeader },	//@setGuildLeader 帮派名称 帮主名称	设置帮派帮主
155 	
156 	{"monster",			GM_LEVEL1,		&CChatSystem::GmMonster },	//@monster 怪物模型 外形id
157 	{"Circle",			GM_LEVEL1,		&CChatSystem::GmSetActorCircle}, //@circle 转数 [等级]
159 	{"ClearCsRank",		GM_LEVEL1,		&CChatSystem::GmClearCsRank }, //@ClearCsRank destServerId 删除跨服榜单 带destServerId参数指定删除某个服务器的榜单
160 	{"SaveCsRank",		GM_LEVEL1,		&CChatSystem::GmSaveCsRank }, //@SaveCsRank 广播所有逻辑服将雕像榜单数据发到session
161 	{"LoadCsRank",		GM_LEVEL1,		&CChatSystem::GmLoadCsRank }, //@LoadCsRank 广播所有逻辑服重新取下榜单
205 	{"reloadcombatrank", GM_LEVEL1, &CChatSystem::GmReloadCombatRank},		//重新加载战力竞技的排行
206 	{"setholiday",		GM_LEVEL1, &CChatSystem::GmSetHoliday},					//设置节日活动开关 1开， 0关
208 	{"setcrossguild",		GM_LEVEL1, &CChatSystem::GmSetCanCrossGuild},		//设置可以跨服的行会 @setcrossguild 行会名称
210 	{"setlhzsgm",		GM_LEVEL1, &CChatSystem::GmSetLhzsTitle},				//设置头衔  @setlhzsgm 玩家名称 头衔id 是否添加（0 取消 1 添加）
212 	{"SetDepotLock",	GM_LEVEL1, &CChatSystem::GmSetDepotLock},			//设置玩家仓库密码锁 @SetDepotLock 玩家名 密码
221 	{"ResetDmkjYB",	GM_LEVEL1, &CChatSystem::GmResetDmkjYB},		//重置盗梦物品元宝数以及总元宝消耗 @ResetDmkjYB
222 	{"killmonster", GM_LEVEL1, &CChatSystem::GmKillMonster},		//@killmonster 场景名字 怪名字 是否爆装备(1爆，0不爆)
224 	{"rkf", GM_LEVEL1, &CChatSystem::GmSetCrossConfig},		//@reloadcross 加载跨服配置
225 	
226 	{"kfid", GM_LEVEL1, &CChatSystem::GmSetCommonServerId},		//@crossserverid 10000 设置公共服的ID
244 	{"setsavelog", GM_LEVEL1, &GmSetSaveQuestLogFlag},					//设置是否保存任务到日志服务器 @setsavelog 状态(0 关闭 1 开启)
245 	{"setcoinlog", GM_LEVEL1, &GmSetSaveCoinLogFlag},					//设置是否保存任务到日志服务器 @setcoinlog 状态(0 关闭 1 开启)
247 	{"clearkfguild", GM_LEVEL1, &GmClearCrossGuildList},				//gm清除报名跨服的列表 @clearkfguild
248 	{"bmcrosssbk", GM_LEVEL1, &GmSignupCrossSbk},						//gm报名跨服沙城战 @bmcrosssbk 行会名称 状态（0 取消报名 1 报名）
250 	{"setkfownguild", GM_LEVEL1, &GmSetkfOwnGuild},						//设置跨服占领行会 @setkfownguild 行会名称
251 	{"clearkfpos", GM_LEVEL1, &GmClearCrossGuildPos},					//清除跨服的职位 @clearkfpos 职位（1 城主 2 副城主 3 大政令 4 大将军 5 大总管）
252 	{"ClearMagicBag",	GM_LEVEL0,	&CChatSystem::GmClearMagicBag},		//清空魔珠背包 @ClearMagicBag
254 	{"setzjlevel", GM_LEVEL1, &GmSetBuildLevel},						//gm改变行会建筑的等级 @setzjlevel 行会名称 建筑编号(1 主殿 2 行会商店 3 月光宝盒 4 封印兽碑)  改变建筑等级（正 为加 负 为减)
3324 bool CChatSystem::GmSetCrossConfig(char ** args, INT_PTR nArgsCount, char * sRetMsg)
3325 {
3326 	GetLogicServer()->ReloadCrossConfig(); //重新加载跨服的配置
3328 	return true;
3329 }
3341 	if (IsArgsValid(args, nArgsCount, sRetMsg, 1) == false) return false;
3342 	int nId = atoi(args[0]);
3343 	GetLogicServer()->SetCommonServerId(nId); //设置跨服的ID
3345 	GetLogicServer()->ReloadCrossConfig(); //重新加载跨服的配置
3347 	return true;
3348 }

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server\LogicServer\entitysystem\PropertySystem.cpp 47 KB CPP 文件 2013/4/11 7:36:18 2018/8/3 20:29:44 2018/8/3 20:29:44 2
208 			else
209 			{
210 				OutputMsg(rmTip, _T("角色[actorId=%d]在跨服服务器登录，开始初始化场景信息"), pActor->GetActorId());
211 				
212 				// 拉到普通场景
235 				pActor->m_rawsrcScenePos.SetData(pActorData->nScenceID, pActorData->nPosX, pActorData->nPosY);
236 				
237 				// 初始化在跨服服务器上的一些数据 复活点信息应该在进入场景的时候设置吧TODO.
238 				pActor->m_commsrvPosBeforeEnterFB.SetData(nEntrSceneId, nX, nY);
239 			}

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server\LogicServer\mgrserv\MgrServClient.cpp 12 KB CPP 文件 2013/4/11 7:36:35 2018/8/3 20:29:44 2018/8/3 20:29:44 1
306 			break;
307 		}
309 	//case MSS_APPLY_ACROSS_SERVER_RET://后台返回的申请跨服结果  Tag = 0 为成功, 1 为失败  数据段为:  申请的角色名
310 	//	{
311 	//		nLen = DecodeBuffer(packet.getOffsetPtr(), TempBuffer, 

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server\LogicServer\misc\ActorNameColor.cpp 16 KB CPP 文件 2013/4/11 7:36:35 2018/8/3 20:29:44 2018/8/3 20:29:44 1
131 		}
132 	}
134 	if(GetLogicServer()->IsCommonServer() && GetGlobalLogicEngine()->GetGuildMgr().m_SbkWarFlag == 1 )			//跨服沙巴克的时候
135 	{
136 		int myGuildId = ((CActor*)pSelf)->GetProperty<int>(PROP_ACTOR_GUILD_ID);

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server\LogicServer\networkdata\NetWorkMsgHandle.cpp 41 KB CPP 文件 2013/4/11 7:36:40 2018/8/3 20:29:44 2018/8/3 20:29:44 3
361 			if(pActor->IsInTransmitStatus() )
362 			{
363 				OutputMsg(rmTip,_T("account=%d玩家正在跨服状态，不踢下线"),nSessionId);
364 			}
365 			else
910 			break;
911 		}
912 	case MSS_APPLY_ACROSS_SERVER_RET://后台返回的申请跨服结果  Tag = 0 为成功, 1 为失败  
913 		{
914 			//未实现
1301 	case MSS_SET_REFRESHCORSS:
1302 		{
1303 			GetLogicServer()->ReloadCrossConfig(); //重新加载跨服的配置
1305 			GetLogicServer()->GetMgrClient()->PostInternalMessage(MCS_RETURN_REFRESHCORSS, 0, 0, uParam4);
1306 			break;

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server\LogicServer\skill\SkillResult.cpp 77 KB CPP 文件 2013/4/11 7:36:57 2018/8/3 20:29:44 2018/8/3 20:29:44 1
1394 	CActor *pActor = (CActor*)pParam->pSrcEntity; //玩家的指针
1395 	
1397 	if( !pActor->IsInRawServer() ) return; //不在跨服里是没法使用的
1399 	int nSceneId = pActor->GetCitySceneId();
1400 	if(nSceneId ==0) return; //别传送进了测试场景

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server\SessionServer\SessionClient.cpp 26 KB CPP 文件 2013/4/11 5:09:55 2018/8/3 20:29:45 2018/8/3 20:29:45 2
811 		
812 		//如果当前存在一个会话，那么就发消息去删除这么一条消息
813 		//如果在本服登陆，并且在跨服登陆，先踢下跨服的账户
814 		if(nRawServerId == nLoginServerId && m_nCommServerId >0) //如果是在普通服登陆
815 		{

H:\work\source\烈火战神\[src.cool]烈火战神\code\Dragon\server\SessionServer\SessionServer.cpp 26 KB CPP 文件 2013/4/11 5:09:56 2018/8/3 20:29:45 2018/8/3 20:29:45 1
229 		}
230 		break;	
232 		//踢掉在线的跨服用户
233 	case SSIM_KICK_ONLINE_CROSSSERVER_ACTOR:
234 		{

H:\work\source\烈火战神\[src.cool]烈火战神\code\JianXiaoJiangHu\server-out\LogicServer\base\TopTitleMgr.cpp 17 KB CPP 文件 2013/4/11 9:10:58 2018/8/3 20:29:59 2018/8/3 20:29:59 4
271 	CDataPacket &packet = pSSClient->allocProtoPacket(jxInterSrvComm::SessionServerProto::cLoadBattlePowerTopRank);
272 	pSSClient->flushProtoPacket(packet);
273 	OutputMsg(rmTip, _T("发消息给Session获取跨服战力排行榜！"));
274 }
276 void CTopTitleMgr::ClearCsRank(INT_PTR nServerId)
280 	packet << (int)nServerId;
281 	pSSClient->flushProtoPacket(packet);
282 	OutputMsg(rmTip, _T("发消息给Session清除跨服战力排行榜！ServerId=%d"), nServerId);
283 }
285 void CTopTitleMgr::BroadToSaveBattlePowerTopRank()
320 			m_topBPRank.add(data);
321 		}
322 		//设置跨服战力排行第一玩家ID
323 		SetTopBPRankActor();
325 		//设置NPC雕像
403 	if (nActorId <= 0 || nDestServerId <= 0) 
404 		return;
406 	//本服的不需要跨服请求
407 	if (GetLogicServer()->GetServerIndex() == nDestServerId)
408 	{

H:\work\source\烈火战神\[src.cool]烈火战神\code\JianXiaoJiangHu\server-out\LogicServer\entity\Actor.cpp 125 KB CPP 文件 2013/4/11 9:11:49 2018/8/3 20:30:00 2018/8/3 20:30:00 7
1551 	if (!GetLogicServer()->IsCommonServer())
1552 	{
1553 		// 下发跨服开启状态
1554 		bool boStartCS = GetLogicServer()->IsStartCommonServer();
1555 		CActorPacket packet;
2079 		else
2080 		{
2081 			OutputMsg(rmTip, _T("在跨服服务器打包角色[actorId=%d]场景位置相关信息数据"), GetActorId());
2082 			// 将原始服务器的相关信息存盘，不保存跨服服务器的任何场景信息
2083 			// 跨服之后再回去，自动退出副本
2084 			data.nFbHandle = 0;
2085 			// 进入fb前位置
3119 		m_commsrvCityPointPos.SetData(nSceneId, nPosX, nPosY);
3120 	}
3122 	OutputMsg(rmTip, _T("设置角色跨服服务器回城点位置(%d, %d_%d)"), nSceneId, nPosX, nPosY);
3123 }
3125 void CActor::ReturnCity()
4175 	if (!GetLogicServer()->IsStartCommonServer() && !GetLogicServer()->IsCommonServer())
4176 	{
4177 		OutputMsg(rmTip,  _T("%s 本服没有开启跨服"), __FUNCTION__);
4178 		return false;
4179 	}
4181 	if (pFB->IsFb())
4182 	{
4183 		OutputMsg(rmTip,  _T("%s 副本中禁止跨服传送，请先退出副本"), __FUNCTION__);
4184 		return false;
4185 	}

H:\work\source\烈火战神\[src.cool]烈火战神\code\JianXiaoJiangHu\server-out\LogicServer\entitysystem\GmCommandHandle.cpp 66 KB CPP 文件 2013/4/11 9:12:12 2018/8/3 20:30:00 2018/8/3 20:30:00 2
144 	{"smf",				GM_LEVEL1,		&CChatSystem::SetActorMsgFilter }, // @sf 设置角色消息过滤器
145 	{"testssb",			GM_LEVEL1,		&CChatSystem::TestSessionBroad }, // @testssb
146 	{"startCs",			GM_LEVEL1,		&CChatSystem::GmStartCommonServer }, // @stopCs 关闭连接到跨服
147 	{"setGuildLeader",	GM_LEVEL1,		&CChatSystem::GmSetGguildLeader },	//@setGuildLeader 帮派名称 帮主名称	设置帮派帮主
148 	{"TestFunc",		GM_LEVEL1,		&CChatSystem::GmTestFunc }, //@TestFunc 测试函数
147 	{"setGuildLeader",	GM_LEVEL1,		&CChatSystem::GmSetGguildLeader },	//@setGuildLeader 帮派名称 帮主名称	设置帮派帮主
148 	{"TestFunc",		GM_LEVEL1,		&CChatSystem::GmTestFunc }, //@TestFunc 测试函数
150 	{"ClearCsRank",		GM_LEVEL1,		&CChatSystem::GmClearCsRank }, //@ClearCsRank destServerId 删除跨服榜单 带destServerId参数指定删除某个服务器的榜单
151 	{"SaveCsRank",		GM_LEVEL1,		&CChatSystem::GmSaveCsRank }, //@SaveCsRank 广播所有逻辑服将雕像榜单数据发到session
152 	{"LoadCsRank",		GM_LEVEL1,		&CChatSystem::GmLoadCsRank }, //@LoadCsRank 广播所有逻辑服重新取下榜单

H:\work\source\烈火战神\[src.cool]烈火战神\code\JianXiaoJiangHu\server-out\LogicServer\entitysystem\PropertySystem.cpp 33 KB CPP 文件 2013/4/11 9:12:27 2018/8/3 20:30:00 2018/8/3 20:30:00 2
140 			else
141 			{
142 				OutputMsg(rmTip, _T("角色[actorId=%d]在跨服服务器登录，开始初始化场景信息"), pActor->GetActorId());
143 				
144 				// 拉到普通场景
167 				pActor->m_rawsrcScenePos.SetData(pActorData->nScenceID, pActorData->nPosX, pActorData->nPosY);
168 				
169 				// 初始化在跨服服务器上的一些数据 复活点信息应该在进入场景的时候设置吧TODO.
170 				pActor->m_commsrvPosBeforeEnterFB.SetData(nEntrSceneId, nX, nY);
171 			}

H:\work\source\烈火战神\[src.cool]烈火战神\code\JianXiaoJiangHu\server-out\LogicServer\mgrserv\MgrServClient.cpp 9 KB CPP 文件 2013/4/11 9:12:41 2018/8/3 20:30:00 2018/8/3 20:30:00 1
220 			break;
222 		}
223 	//case MSS_APPLY_ACROSS_SERVER_RET://后台返回的申请跨服结果  Tag = 0 为成功, 1 为失败  数据段为:  申请的角色名
224 	//	{
225 	//		nLen = DecodeBuffer(packet.getOffsetPtr(), TempBuffer, 

H:\work\source\烈火战神\[src.cool]烈火战神\code\JianXiaoJiangHu\server-out\LogicServer\networkdata\NetWorkMsgHandle.cpp 26 KB CPP 文件 2013/4/11 9:12:46 2018/8/3 20:30:00 2018/8/3 20:30:00 2
345 			if(pActor->IsInTransmitStatus() )
346 			{
347 				OutputMsg(rmTip,_T("account=%d玩家正在跨服状态，不踢下线"),nSessionId);
348 			}
349 			else
762 			break;
763 		}
764 	case MSS_APPLY_ACROSS_SERVER_RET://后台返回的申请跨服结果  Tag = 0 为成功, 1 为失败  
765 		{
766 			//未实现

H:\work\source\烈火战神\[src.cool]烈火战神\code\JianXiaoJiangHu\server\LogicServer\LogicServer.cpp 10 KB CPP 文件 2013/4/11 5:41:09 2018/8/3 20:30:29 2018/8/3 20:30:29 1
263 	//最后启动逻辑管理器
264 	s_pLogicEngine->StartEngine();
266 	//获取跨服进入标志
267 	GetCommonServerEnterFlag();
269 	return TRUE;

H:\work\source\烈火战神\[src.cool]烈火战神\code\JianXiaoJiangHu\server\LogicServer\base\TopTitleMgr.cpp 17 KB CPP 文件 2013/4/11 8:46:39 2018/8/3 20:30:28 2018/8/3 20:30:28 4
271 	CDataPacket &packet = pSSClient->allocProtoPacket(jxInterSrvComm::SessionServerProto::cLoadBattlePowerTopRank);
272 	pSSClient->flushProtoPacket(packet);
273 	OutputMsg(rmTip, _T("发消息给Session获取跨服战力排行榜！"));
274 }
276 void CTopTitleMgr::ClearCsRank(INT_PTR nServerId)
280 	packet << (int)nServerId;
281 	pSSClient->flushProtoPacket(packet);
282 	OutputMsg(rmTip, _T("发消息给Session清除跨服战力排行榜！ServerId=%d"), nServerId);
283 }
285 void CTopTitleMgr::BroadToSaveBattlePowerTopRank()
320 			m_topBPRank.add(data);
321 		}
322 		//设置跨服战力排行第一玩家ID
323 		SetTopBPRankActor();
325 		//设置NPC雕像
403 	if (nActorId <= 0 || nDestServerId <= 0) 
404 		return;
406 	//本服的不需要跨服请求
407 	if (GetLogicServer()->GetServerIndex() == nDestServerId)
408 	{

H:\work\source\烈火战神\[src.cool]烈火战神\code\JianXiaoJiangHu\server\LogicServer\entity\Actor.cpp 134 KB CPP 文件 2013/4/11 8:47:29 2018/8/3 20:30:28 2018/8/3 20:30:28 8
1593 	if (!GetLogicServer()->IsCommonServer())
1594 	{
1595 		// 下发跨服开启状态
1596 		bool boStartCS = GetLogicServer()->IsStartCommonServer();
1597 		CActorPacket packet;
2150 		else
2151 		{
2152 			OutputMsg(rmTip, _T("在跨服服务器打包角色[actorId=%d]场景位置相关信息数据"), GetActorId());
2153 			// 将原始服务器的相关信息存盘，不保存跨服服务器的任何场景信息
2154 			// 跨服之后再回去，自动退出副本
2155 			data.nFbHandle = 0;
2156 			// 进入fb前位置
3205 		m_commsrvCityPointPos.SetData(nSceneId, nPosX, nPosY);
3206 	}
3208 	OutputMsg(rmTip, _T("设置角色跨服服务器回城点位置(%d, %d_%d)"), nSceneId, nPosX, nPosY);
3209 }
3211 void CActor::ReturnCity()
4598 	if (!GetLogicServer()->IsStartCommonServer() && !GetLogicServer()->IsCommonServer())
4599 	{
4600 		OutputMsg(rmTip,  _T("%s 本服没有开启跨服"), __FUNCTION__);
4601 		return false;
4602 	}
4604 	if (!GetLogicServer()->IsEnterCommonServer() && !GetLogicServer()->IsCommonServer())
4605 	{
4606 		OutputMsg(rmTip,  _T("%s 本服没有开启跨服进入"), __FUNCTION__);
4607 		return false;
4608 	}
4610 	if (pFB->IsFb())
4611 	{
4612 		OutputMsg(rmTip,  _T("%s 副本中禁止跨服传送，请先退出副本"), __FUNCTION__);
4613 		return false;
4614 	}

H:\work\source\烈火战神\[src.cool]烈火战神\code\JianXiaoJiangHu\server\LogicServer\entitysystem\GmCommandHandle.cpp 68 KB CPP 文件 2013/4/11 8:47:51 2018/8/3 20:30:29 2018/8/3 20:30:29 5
145 	{"smf",				GM_LEVEL1,		&CChatSystem::SetActorMsgFilter }, // @sf 设置角色消息过滤器
146 	{"testssb",			GM_LEVEL1,		&CChatSystem::TestSessionBroad }, // @testssb
147 	{"startCs",			GM_LEVEL1,		&CChatSystem::GmStartCommonServer }, // @stopCs 关闭连接到跨服 0关闭 1开启
148 	{"EnterCs",			GM_LEVEL1,		&CChatSystem::GmSetEnterCommonServer }, // @stopCs 关闭进入跨服 0关闭 1开启
149 	{"setGuildLeader",	GM_LEVEL1,		&CChatSystem::GmSetGguildLeader },	//@setGuildLeader 帮派名称 帮主名称	设置帮派帮主
150 	{"TestFunc",		GM_LEVEL1,		&CChatSystem::GmTestFunc }, //@TestFunc 测试函数
149 	{"setGuildLeader",	GM_LEVEL1,		&CChatSystem::GmSetGguildLeader },	//@setGuildLeader 帮派名称 帮主名称	设置帮派帮主
150 	{"TestFunc",		GM_LEVEL1,		&CChatSystem::GmTestFunc }, //@TestFunc 测试函数
152 	{"ClearCsRank",		GM_LEVEL1,		&CChatSystem::GmClearCsRank }, //@ClearCsRank destServerId 删除跨服榜单 带destServerId参数指定删除某个服务器的榜单
153 	{"SaveCsRank",		GM_LEVEL1,		&CChatSystem::GmSaveCsRank }, //@SaveCsRank 广播所有逻辑服将雕像榜单数据发到session
154 	{"LoadCsRank",		GM_LEVEL1,		&CChatSystem::GmLoadCsRank }, //@LoadCsRank 广播所有逻辑服重新取下榜单
2076 	if (!GetLogicServer()->IsStartCommonServer() && !GetLogicServer()->IsCommonServer())
2077 	{
2078 		strcpy(sRetMsg, "本服没有开启跨服！");
2079 		return false;
2080 	}
2083 	if (pFB->IsFb())
2084 	{
2085 		strcpy(sRetMsg, "副本中禁止跨服传送，请先退出副本！");
2086 		return false;
2087 	}

H:\work\source\烈火战神\[src.cool]烈火战神\code\JianXiaoJiangHu\server\LogicServer\entitysystem\PropertySystem.cpp 36 KB CPP 文件 2013/4/11 8:48:03 2018/8/3 20:30:29 2018/8/3 20:30:29 2
141 			else
142 			{
143 				OutputMsg(rmTip, _T("角色[actorId=%d]在跨服服务器登录，开始初始化场景信息"), pActor->GetActorId());
144 				
145 				// 拉到普通场景
168 				pActor->m_rawsrcScenePos.SetData(pActorData->nScenceID, pActorData->nPosX, pActorData->nPosY);
169 				
170 				// 初始化在跨服服务器上的一些数据 复活点信息应该在进入场景的时候设置吧TODO.
171 				pActor->m_commsrvPosBeforeEnterFB.SetData(nEntrSceneId, nX, nY);
172 			}

H:\work\source\烈火战神\[src.cool]烈火战神\code\JianXiaoJiangHu\server\LogicServer\mgrserv\MgrServClient.cpp 9 KB CPP 文件 2013/4/11 8:48:16 2018/8/3 20:30:29 2018/8/3 20:30:29 1
220 			break;
222 		}
223 	//case MSS_APPLY_ACROSS_SERVER_RET://后台返回的申请跨服结果  Tag = 0 为成功, 1 为失败  数据段为:  申请的角色名
224 	//	{
225 	//		nLen = DecodeBuffer(packet.getOffsetPtr(), TempBuffer, 

H:\work\source\烈火战神\[src.cool]烈火战神\code\JianXiaoJiangHu\server\LogicServer\networkdata\NetWorkMsgHandle.cpp 26 KB CPP 文件 2013/4/11 8:48:21 2018/8/3 20:30:29 2018/8/3 20:30:29 2
345 			if(pActor->IsInTransmitStatus() )
346 			{
347 				OutputMsg(rmTip,_T("account=%d玩家正在跨服状态，不踢下线"),nSessionId);
348 			}
349 			else
762 			break;
763 		}
764 	case MSS_APPLY_ACROSS_SERVER_RET://后台返回的申请跨服结果  Tag = 0 为成功, 1 为失败  
765 		{
766 			//未实现

H:\work\source\烈火战神\[src.cool]烈火战神\code\Phoenix\server\DBServer\DBConfig.cpp 6 KB CPP 文件 2013/4/11 6:02:40 2018/8/3 20:30:45 2018/8/3 20:30:45 1
9 {
10 }
13 //读取跨服配置表
14 bool CDBConfig::LoadCrossServerConfig()
15 {

H:\work\source\烈火战神\[src.cool]烈火战神\code\Phoenix\server\LogicServer\main.cpp 10 KB CPP 文件 2013/4/11 6:03:01 2018/8/3 20:30:46 2018/8/3 20:30:46 1
281 					GetGlobalLogicEngine()->TraceItem();
282 				}
283 				else if(_tcsncicmp(sCmdBuf, "rkf", 3) == 0)  // 刷新跨服配置
284 				{
285 					GetLogicServer()->ReloadCrossConfig();

H:\work\source\烈火战神\[src.cool]烈火战神\code\Phoenix\server\LogicServer\base\GuildManger.cpp 62 KB CPP 文件 2013/4/11 9:24:12 2018/8/3 20:30:46 2018/8/3 20:30:46 4
412 		}
413 	}
415 	//跨服的占领沙巴克行会
416 	CRanking *crossRanking = RankingMgr.GetRanking(g_szGuildCrossSbkOwn);
417 	if(!crossRanking)
443 		}
444 	}
446 	//跨服的沙巴克
447 	CRanking *cRanking = RankingMgr.GetRanking(g_szGuildCrossPos);
448 	if(!cRanking)
1884 	{
1885 		CRanking *pRanking = RankingMgr.GetRanking(g_szGuildCrossList);
1887 		if( (nWeek == 2) && pRanking)			//每周五清除跨服攻沙列表，即打完跨服沙城的第二天清除
1888 		{
1889 			pRanking->clear();

H:\work\source\烈火战神\[src.cool]烈火战神\code\Phoenix\server\LogicServer\base\TopTitleMgr.cpp 16 KB CPP 文件 2013/4/11 9:24:25 2018/8/3 20:30:46 2018/8/3 20:30:46 4
330 	}
331 	pSSClient->flushProtoPacket(packet);
332 	OutputMsg(rmTip, _T("发消息给Session保存跨服排行榜！"));
333 }
335 void CTopTitleMgr::LoadCsRank()
338 	CDataPacket &packet = pSSClient->allocProtoPacket(jxInterSrvComm::SessionServerProto::cLoadCsRank);
339 	pSSClient->flushProtoPacket(packet);
340 	OutputMsg(rmTip, _T("发消息给Session获取跨服排行榜！"));
341 }
343 void CTopTitleMgr::ClearCsRank(INT_PTR nServerId)
347 	packet << (int)nServerId;
348 	pSSClient->flushProtoPacket(packet);
349 	OutputMsg(rmTip, _T("发消息给Session清除跨服排行榜！ServerId=%d"), nServerId);
350 }
352 void CTopTitleMgr::BroadLogicToSaveCsRank()
444 	if (nActorId <= 0 || nDestServerId <= 0) 
445 		return;
447 	//本服的不需要跨服请求
448 	if (GetLogicServer()->GetServerIndex() == nDestServerId)
449 	{

H:\work\source\烈火战神\[src.cool]烈火战神\code\Phoenix\server\LogicServer\config\LogicServerConfig.cpp 11 KB CPP 文件 2013/4/11 9:25:08 2018/8/3 20:30:46 2018/8/3 20:30:46 2
275 	return true;
276 }
278 //读取跨服配置表
279 bool CLogicServerConfig::LoadCrossServerConfig(CLogicServer *lpLogicServer)
280 {
394 			
396 			closeTable();
398 			//这没有开启跨服
399 			if(!bHasServer)
400 			{

H:\work\source\烈火战神\[src.cool]烈火战神\code\Phoenix\server\LogicServer\entity\Actor.cpp 211 KB CPP 文件 2013/4/11 9:25:36 2018/8/3 20:30:46 2018/8/3 20:30:46 9
2127 	if (!GetLogicServer()->IsCommonServer())
2128 	{
2129 		// 下发跨服开启状态
2130 		bool boStartCS = GetLogicServer()->IsStartCommonServer();
2131 		CActorPacket packet;
2855 		else
2856 		{
2857 			OutputMsg(rmTip, _T("在跨服服务器打包角色[actorId=%d]场景位置相关信息数据"), GetActorId());
2858 			// 将原始服务器的相关信息存盘，不保存跨服服务器的任何场景信息
2859 			// 跨服之后再回去，自动退出副本
2860 			data.nFbHandle = 0;
2861 			// 进入fb前位置
4351 		m_commsrvCityPointPos.SetData(nSceneId, nPosX, nPosY);
4352 	}
4354 	//OutputMsg(rmTip, _T("设置角色跨服服务器回城点位置(%d, %d_%d)"), nSceneId, nPosX, nPosY);
4355 }
4357 void CActor::ReturnCity()
6780 	if (!GetLogicServer()->IsStartCommonServer() && !GetLogicServer()->IsCommonServer())
6781 	{
6782 		OutputMsg(rmTip,  _T("%s 本服没有开启跨服"), __FUNCTION__);
6783 		return false;
6784 	}
6787 	{
6788 		SendTipmsgWithId(tpSceneCanNotCrossTransfer,ttFlyTip);
6789 		OutputMsg(rmTip,  _T("%s 副本中禁止跨服传送，请先退出副本"), __FUNCTION__);
6790 		return false;
6791 	}
6867 		else
6868 		{
6869 			OutputMsg(rmTip, _T("目标服务器[destServerId=%d]没有准备好,跨服失败"), nDestServerId);
6870 			SendTipmsgWithId(tpCrossServerIsClose,ttDialog);
6871 		}
6889 	CDataPacket& DataPacket = AllocPacket(ap);
6890 	DataPacket << (BYTE)enDefaultEntitySystemID << (BYTE)sStartTransmit << nDestServerId;
6891 	if(IsInRawServer() ) //如果在本服的话，就是传到跨服，否则要传到本服
6892 	{
6893 		DataPacket.writeString(GetLogicServer()->GetCommonServerAddr()?GetLogicServer()->GetCommonServerAddr():"");

H:\work\source\烈火战神\[src.cool]烈火战神\code\Phoenix\server\LogicServer\entitysystem\CrossSystem.cpp 20 KB CPP 文件 2013/4/11 9:26:11 2018/8/3 20:30:46 2018/8/3 20:30:46 2
228 	BYTE nType = 0;
229 	packet >> nType;
231 	if(nType == 1)	//跨服boss
232 	{
233 		if(GetLogicServer()->IsCommonServer() == false)
279 		TriggerEvent(cGetCrossWorldState);
280 	}
281 	else if(nType == 3)				//跨服沙城战
282 	{
283 		SendCrossCityOwnMsg();

H:\work\source\烈火战神\[src.cool]烈火战神\code\Phoenix\server\LogicServer\entitysystem\GmCommandHandle.cpp 114 KB CPP 文件 2013/4/11 9:26:24 2018/8/3 20:30:46 2018/8/3 20:30:46 11
151 	{"smf",				GM_LEVEL1,		&CChatSystem::SetActorMsgFilter }, // @sf 设置角色消息过滤器
152 	{"testssb",			GM_LEVEL1,		&CChatSystem::TestSessionBroad }, // @testssb
153 	{"startCs",			GM_LEVEL1,		&CChatSystem::GmStartCommonServer }, // @stopCs 关闭连接到跨服
154 	{"setGuildLeader",	GM_LEVEL1,		&CChatSystem::GmSetGguildLeader },	//@setGuildLeader 帮派名称 帮主名称	设置帮派帮主
155 	
156 	{"monster",			GM_LEVEL1,		&CChatSystem::GmMonster },	//@monster 怪物模型 外形id
157 	{"Circle",			GM_LEVEL1,		&CChatSystem::GmSetActorCircle}, //@circle 转数 [等级]
159 	{"ClearCsRank",		GM_LEVEL1,		&CChatSystem::GmClearCsRank }, //@ClearCsRank destServerId 删除跨服榜单 带destServerId参数指定删除某个服务器的榜单
160 	{"SaveCsRank",		GM_LEVEL1,		&CChatSystem::GmSaveCsRank }, //@SaveCsRank 广播所有逻辑服将雕像榜单数据发到session
161 	{"LoadCsRank",		GM_LEVEL1,		&CChatSystem::GmLoadCsRank }, //@LoadCsRank 广播所有逻辑服重新取下榜单
205 	{"reloadcombatrank", GM_LEVEL1, &CChatSystem::GmReloadCombatRank},		//重新加载战力竞技的排行
206 	{"setholiday",		GM_LEVEL1, &CChatSystem::GmSetHoliday},					//设置节日活动开关 1开， 0关
208 	{"setcrossguild",		GM_LEVEL1, &CChatSystem::GmSetCanCrossGuild},		//设置可以跨服的行会 @setcrossguild 行会名称
210 	{"setlhzsgm",		GM_LEVEL1, &CChatSystem::GmSetLhzsTitle},				//设置头衔  @setlhzsgm 玩家名称 头衔id 是否添加（0 取消 1 添加）
212 	{"SetDepotLock",	GM_LEVEL1, &CChatSystem::GmSetDepotLock},			//设置玩家仓库密码锁 @SetDepotLock 玩家名 密码
221 	{"ResetDmkjYB",	GM_LEVEL1, &CChatSystem::GmResetDmkjYB},		//重置盗梦物品元宝数以及总元宝消耗 @ResetDmkjYB
222 	{"killmonster", GM_LEVEL1, &CChatSystem::GmKillMonster},		//@killmonster 场景名字 怪名字 是否爆装备(1爆，0不爆)
224 	{"rkf", GM_LEVEL1, &CChatSystem::GmSetCrossConfig},		//@reloadcross 加载跨服配置
225 	
226 	{"kfid", GM_LEVEL1, &CChatSystem::GmSetCommonServerId},		//@crossserverid 10000 设置公共服的ID
244 	{"setsavelog", GM_LEVEL1, &GmSetSaveQuestLogFlag},					//设置是否保存任务到日志服务器 @setsavelog 状态(0 关闭 1 开启)
245 	{"setcoinlog", GM_LEVEL1, &GmSetSaveCoinLogFlag},					//设置是否保存任务到日志服务器 @setcoinlog 状态(0 关闭 1 开启)
247 	{"clearkfguild", GM_LEVEL1, &GmClearCrossGuildList},				//gm清除报名跨服的列表 @clearkfguild
248 	{"bmcrosssbk", GM_LEVEL1, &GmSignupCrossSbk},						//gm报名跨服沙城战 @bmcrosssbk 行会名称 状态（0 取消报名 1 报名）
250 	{"setkfownguild", GM_LEVEL1, &GmSetkfOwnGuild},						//设置跨服占领行会 @setkfownguild 行会名称
251 	{"clearkfpos", GM_LEVEL1, &GmClearCrossGuildPos},					//清除跨服的职位 @clearkfpos 职位（1 城主 2 副城主 3 大政令 4 大将军 5 大总管）
252 	{"ClearMagicBag",	GM_LEVEL0,	&CChatSystem::GmClearMagicBag},		//清空魔珠背包 @ClearMagicBag
254 	{"setzjlevel", GM_LEVEL1, &GmSetBuildLevel},						//gm改变行会建筑的等级 @setzjlevel 行会名称 建筑编号(1 主殿 2 行会商店 3 月光宝盒 4 封印兽碑)  改变建筑等级（正 为加 负 为减)
3324 bool CChatSystem::GmSetCrossConfig(char ** args, INT_PTR nArgsCount, char * sRetMsg)
3325 {
3326 	GetLogicServer()->ReloadCrossConfig(); //重新加载跨服的配置
3328 	return true;
3329 }
3341 	if (IsArgsValid(args, nArgsCount, sRetMsg, 1) == false) return false;
3342 	int nId = atoi(args[0]);
3343 	GetLogicServer()->SetCommonServerId(nId); //设置跨服的ID
3345 	GetLogicServer()->ReloadCrossConfig(); //重新加载跨服的配置
3347 	return true;
3348 }

H:\work\source\烈火战神\[src.cool]烈火战神\code\Phoenix\server\LogicServer\entitysystem\PropertySystem.cpp 47 KB CPP 文件 2013/4/11 9:26:48 2018/8/3 20:30:46 2018/8/3 20:30:46 2
208 			else
209 			{
210 				OutputMsg(rmTip, _T("角色[actorId=%d]在跨服服务器登录，开始初始化场景信息"), pActor->GetActorId());
211 				
212 				// 拉到普通场景
235 				pActor->m_rawsrcScenePos.SetData(pActorData->nScenceID, pActorData->nPosX, pActorData->nPosY);
236 				
237 				// 初始化在跨服服务器上的一些数据 复活点信息应该在进入场景的时候设置吧TODO.
238 				pActor->m_commsrvPosBeforeEnterFB.SetData(nEntrSceneId, nX, nY);
239 			}

H:\work\source\烈火战神\[src.cool]烈火战神\code\Phoenix\server\LogicServer\mgrserv\MgrServClient.cpp 12 KB CPP 文件 2013/4/11 9:27:24 2018/8/3 20:30:46 2018/8/3 20:30:46 1
306 			break;
307 		}
309 	//case MSS_APPLY_ACROSS_SERVER_RET://后台返回的申请跨服结果  Tag = 0 为成功, 1 为失败  数据段为:  申请的角色名
310 	//	{
311 	//		nLen = DecodeBuffer(packet.getOffsetPtr(), TempBuffer, 

H:\work\source\烈火战神\[src.cool]烈火战神\code\Phoenix\server\LogicServer\misc\ActorNameColor.cpp 16 KB CPP 文件 2013/4/11 9:27:26 2018/8/3 20:30:46 2018/8/3 20:30:46 1
131 		}
132 	}
134 	if(GetLogicServer()->IsCommonServer() && GetGlobalLogicEngine()->GetGuildMgr().m_SbkWarFlag == 1 )			//跨服沙巴克的时候
135 	{
136 		int myGuildId = ((CActor*)pSelf)->GetProperty<int>(PROP_ACTOR_GUILD_ID);

H:\work\source\烈火战神\[src.cool]烈火战神\code\Phoenix\server\LogicServer\networkdata\NetWorkMsgHandle.cpp 41 KB CPP 文件 2013/4/11 9:27:35 2018/8/3 20:30:46 2018/8/3 20:30:46 3
361 			if(pActor->IsInTransmitStatus() )
362 			{
363 				OutputMsg(rmTip,_T("account=%d玩家正在跨服状态，不踢下线"),nSessionId);
364 			}
365 			else
910 			break;
911 		}
912 	case MSS_APPLY_ACROSS_SERVER_RET://后台返回的申请跨服结果  Tag = 0 为成功, 1 为失败  
913 		{
914 			//未实现
1301 	case MSS_SET_REFRESHCORSS:
1302 		{
1303 			GetLogicServer()->ReloadCrossConfig(); //重新加载跨服的配置
1305 			GetLogicServer()->GetMgrClient()->PostInternalMessage(MCS_RETURN_REFRESHCORSS, 0, 0, uParam4);
1306 			break;

H:\work\source\烈火战神\[src.cool]烈火战神\code\Phoenix\server\LogicServer\skill\SkillResult.cpp 77 KB CPP 文件 2013/4/11 9:28:01 2018/8/3 20:30:47 2018/8/3 20:30:47 1
1394 	CActor *pActor = (CActor*)pParam->pSrcEntity; //玩家的指针
1395 	
1397 	if( !pActor->IsInRawServer() ) return; //不在跨服里是没法使用的
1399 	int nSceneId = pActor->GetCitySceneId();
1400 	if(nSceneId ==0) return; //别传送进了测试场景

H:\work\source\烈火战神\[src.cool]烈火战神\diablotcgp\trunk\Diablo\server\DBServer\DBConfig.cpp 6 KB CPP 文件 2013/4/11 2:21:18 2018/8/3 20:30:58 2018/8/3 20:30:58 1
9 {
10 }
13 //读取跨服配置表
14 bool CDBConfig::LoadCrossServerConfig()
15 {

H:\work\source\烈火战神\[src.cool]烈火战神\diablotcgp\trunk\Diablo\server\LogicServer\main.cpp 10 KB CPP 文件 2013/4/11 2:21:42 2018/8/3 20:31:00 2018/8/3 20:31:00 1
281 					GetGlobalLogicEngine()->TraceItem();
282 				}
283 				else if(_tcsncicmp(sCmdBuf, "rkf", 3) == 0)  // 刷新跨服配置
284 				{
285 					GetLogicServer()->ReloadCrossConfig();

H:\work\source\烈火战神\[src.cool]烈火战神\diablotcgp\trunk\Diablo\server\LogicServer\base\GuildManger.cpp 61 KB CPP 文件 2013/4/11 2:27:17 2018/8/3 20:30:59 2018/8/3 20:30:59 4
400 		}
401 	}
403 	//跨服的占领沙巴克行会
404 	CRanking *crossRanking = RankingMgr.GetRanking(g_szGuildCrossSbkOwn);
405 	if(!crossRanking)
431 		}
432 	}
434 	//跨服的沙巴克
435 	CRanking *cRanking = RankingMgr.GetRanking(g_szGuildCrossPos);
436 	if(!cRanking)
1837 	{
1838 		CRanking *pRanking = RankingMgr.GetRanking(g_szGuildCrossList);
1840 		if( (nWeek == 2) && pRanking)			//每周五清除跨服攻沙列表，即打完跨服沙城的第二天清除
1841 		{
1842 			pRanking->clear();

H:\work\source\烈火战神\[src.cool]烈火战神\diablotcgp\trunk\Diablo\server\LogicServer\base\TopTitleMgr.cpp 15 KB CPP 文件 2013/4/11 2:27:26 2018/8/3 20:30:59 2018/8/3 20:30:59 4
325 	}
326 	pSSClient->flushProtoPacket(packet);
327 	OutputMsg(rmTip, _T("发消息给Session保存跨服排行榜！"));
328 }
330 void CTopTitleMgr::LoadCsRank()
333 	CDataPacket &packet = pSSClient->allocProtoPacket(jxInterSrvComm::SessionServerProto::cLoadCsRank);
334 	pSSClient->flushProtoPacket(packet);
335 	OutputMsg(rmTip, _T("发消息给Session获取跨服排行榜！"));
336 }
338 void CTopTitleMgr::ClearCsRank(INT_PTR nServerId)
342 	packet << (int)nServerId;
343 	pSSClient->flushProtoPacket(packet);
344 	OutputMsg(rmTip, _T("发消息给Session清除跨服排行榜！ServerId=%d"), nServerId);
345 }
347 void CTopTitleMgr::BroadLogicToSaveCsRank()
439 	if (nActorId <= 0 || nDestServerId <= 0) 
440 		return;
442 	//本服的不需要跨服请求
443 	if (GetLogicServer()->GetServerIndex() == nDestServerId)
444 	{

H:\work\source\烈火战神\[src.cool]烈火战神\diablotcgp\trunk\Diablo\server\LogicServer\config\LogicServerConfig.cpp 11 KB CPP 文件 2013/4/11 2:27:48 2018/8/3 20:31:00 2018/8/3 20:31:00 2
275 	return true;
276 }
278 //读取跨服配置表
279 bool CLogicServerConfig::LoadCrossServerConfig(CLogicServer *lpLogicServer)
280 {
394 			
396 			closeTable();
398 			//这没有开启跨服
399 			if(!bHasServer)
400 			{

H:\work\source\烈火战神\[src.cool]烈火战神\diablotcgp\trunk\Diablo\server\LogicServer\entity\Actor.cpp 205 KB CPP 文件 2013/4/11 2:28:07 2018/8/3 20:31:00 2018/8/3 20:31:00 9
2048 	if (!GetLogicServer()->IsCommonServer())
2049 	{
2050 		// 下发跨服开启状态
2051 		bool boStartCS = GetLogicServer()->IsStartCommonServer();
2052 		CActorPacket packet;
2775 		else
2776 		{
2777 			OutputMsg(rmTip, _T("在跨服服务器打包角色[actorId=%d]场景位置相关信息数据"), GetActorId());
2778 			// 将原始服务器的相关信息存盘，不保存跨服服务器的任何场景信息
2779 			// 跨服之后再回去，自动退出副本
2780 			data.nFbHandle = 0;
2781 			// 进入fb前位置
4278 		m_commsrvCityPointPos.SetData(nSceneId, nPosX, nPosY);
4279 	}
4281 	//OutputMsg(rmTip, _T("设置角色跨服服务器回城点位置(%d, %d_%d)"), nSceneId, nPosX, nPosY);
4282 }
4284 void CActor::ReturnCity()
6698 	if (!GetLogicServer()->IsStartCommonServer() && !GetLogicServer()->IsCommonServer())
6699 	{
6700 		OutputMsg(rmTip,  _T("%s 本服没有开启跨服"), __FUNCTION__);
6701 		return false;
6702 	}
6705 	{
6706 		SendTipmsgWithId(tpSceneCanNotCrossTransfer,ttFlyTip);
6707 		OutputMsg(rmTip,  _T("%s 副本中禁止跨服传送，请先退出副本"), __FUNCTION__);
6708 		return false;
6709 	}
6785 		else
6786 		{
6787 			OutputMsg(rmTip, _T("目标服务器[destServerId=%d]没有准备好,跨服失败"), nDestServerId);
6788 			SendTipmsgWithId(tpCrossServerIsClose,ttDialog);
6789 		}
6807 	CDataPacket& DataPacket = AllocPacket(ap);
6808 	DataPacket << (BYTE)enDefaultEntitySystemID << (BYTE)sStartTransmit << nDestServerId;
6809 	if(IsInRawServer() ) //如果在本服的话，就是传到跨服，否则要传到本服
6810 	{
6811 		DataPacket.writeString(GetLogicServer()->GetCommonServerAddr()?GetLogicServer()->GetCommonServerAddr():"");

H:\work\source\烈火战神\[src.cool]烈火战神\diablotcgp\trunk\Diablo\server\LogicServer\entitysystem\CrossSystem.cpp 19 KB CPP 文件 2013/4/11 2:28:28 2018/8/3 20:31:00 2018/8/3 20:31:00 2
228 	BYTE nType = 0;
229 	packet >> nType;
231 	if(nType == 1)	//跨服boss
232 	{
233 		if(GetLogicServer()->IsCommonServer() == false)
279 		TriggerEvent(cGetCrossWorldState);
280 	}
281 	else if(nType == 3)				//跨服沙城战
282 	{
283 		SendCrossCityOwnMsg();

H:\work\source\烈火战神\[src.cool]烈火战神\diablotcgp\trunk\Diablo\server\LogicServer\entitysystem\GmCommandHandle.cpp 109 KB CPP 文件 2013/4/11 2:28:35 2018/8/3 20:31:00 2018/8/3 20:31:00 11
151 	{"smf",				GM_LEVEL1,		&CChatSystem::SetActorMsgFilter }, // @sf 设置角色消息过滤器
152 	{"testssb",			GM_LEVEL1,		&CChatSystem::TestSessionBroad }, // @testssb
153 	{"startCs",			GM_LEVEL1,		&CChatSystem::GmStartCommonServer }, // @stopCs 关闭连接到跨服
154 	{"setGuildLeader",	GM_LEVEL1,		&CChatSystem::GmSetGguildLeader },	//@setGuildLeader 帮派名称 帮主名称	设置帮派帮主
155 	
156 	{"monster",			GM_LEVEL1,		&CChatSystem::GmMonster },	//@monster 怪物模型 外形id
157 	{"Circle",			GM_LEVEL1,		&CChatSystem::GmSetActorCircle}, //@circle 转数 [等级]
159 	{"ClearCsRank",		GM_LEVEL1,		&CChatSystem::GmClearCsRank }, //@ClearCsRank destServerId 删除跨服榜单 带destServerId参数指定删除某个服务器的榜单
160 	{"SaveCsRank",		GM_LEVEL1,		&CChatSystem::GmSaveCsRank }, //@SaveCsRank 广播所有逻辑服将雕像榜单数据发到session
161 	{"LoadCsRank",		GM_LEVEL1,		&CChatSystem::GmLoadCsRank }, //@LoadCsRank 广播所有逻辑服重新取下榜单
205 	{"reloadcombatrank", GM_LEVEL1, &CChatSystem::GmReloadCombatRank},		//重新加载战力竞技的排行
206 	{"setholiday",		GM_LEVEL1, &CChatSystem::GmSetHoliday},					//设置节日活动开关 1开， 0关
208 	{"setcrossguild",		GM_LEVEL1, &CChatSystem::GmSetCanCrossGuild},		//设置可以跨服的行会 @setcrossguild 行会名称
210 	{"setlhzsgm",		GM_LEVEL1, &CChatSystem::GmSetLhzsTitle},				//设置头衔  @setlhzsgm 玩家名称 头衔id 是否添加（0 取消 1 添加）
212 	{"SetDepotLock",	GM_LEVEL1, &CChatSystem::GmSetDepotLock},			//设置玩家仓库密码锁 @SetDepotLock 玩家名 密码
221 	{"ResetDmkjYB",	GM_LEVEL1, &CChatSystem::GmResetDmkjYB},		//重置盗梦物品元宝数以及总元宝消耗 @ResetDmkjYB
222 	{"killmonster", GM_LEVEL1, &CChatSystem::GmKillMonster},		//@killmonster 场景名字 怪名字 是否爆装备(1爆，0不爆)
224 	{"rkf", GM_LEVEL1, &CChatSystem::GmSetCrossConfig},		//@reloadcross 加载跨服配置
225 	
226 	{"kfid", GM_LEVEL1, &CChatSystem::GmSetCommonServerId},		//@crossserverid 10000 设置公共服的ID
244 	{"setsavelog", GM_LEVEL1, &GmSetSaveQuestLogFlag},					//设置是否保存任务到日志服务器 @setsavelog 状态(0 关闭 1 开启)
245 	{"setcoinlog", GM_LEVEL1, &GmSetSaveCoinLogFlag},					//设置是否保存任务到日志服务器 @setcoinlog 状态(0 关闭 1 开启)
247 	{"clearkfguild", GM_LEVEL1, &GmClearCrossGuildList},				//gm清除报名跨服的列表 @clearkfguild
248 	{"bmcrosssbk", GM_LEVEL1, &GmSignupCrossSbk},						//gm报名跨服沙城战 @bmcrosssbk 行会名称 状态（0 取消报名 1 报名）
250 	{"setkfownguild", GM_LEVEL1, &GmSetkfOwnGuild},						//设置跨服占领行会 @setkfownguild 行会名称
251 	{"clearkfpos", GM_LEVEL1, &GmClearCrossGuildPos},					//清除跨服的职位 @clearkfpos 职位（1 城主 2 副城主 3 大政令 4 大将军 5 大总管）
252 };
255 bool CChatSystem::GmGetDBSendPacketCount(char **args, INT_PTR nArgsCount, char *sRetMsg)
3272 bool CChatSystem::GmSetCrossConfig(char ** args, INT_PTR nArgsCount, char * sRetMsg)
3273 {
3274 	GetLogicServer()->ReloadCrossConfig(); //重新加载跨服的配置
3276 	return true;
3277 }
3289 	if (IsArgsValid(args, nArgsCount, sRetMsg, 1) == false) return false;
3290 	int nId = atoi(args[0]);
3291 	GetLogicServer()->SetCommonServerId(nId); //设置跨服的ID
3293 	GetLogicServer()->ReloadCrossConfig(); //重新加载跨服的配置
3295 	return true;
3296 }

H:\work\source\烈火战神\[src.cool]烈火战神\diablotcgp\trunk\Diablo\server\LogicServer\entitysystem\PropertySystem.cpp 45 KB CPP 文件 2013/4/11 2:28:53 2018/8/3 20:31:00 2018/8/3 20:31:00 2
205 			else
206 			{
207 				OutputMsg(rmTip, _T("角色[actorId=%d]在跨服服务器登录，开始初始化场景信息"), pActor->GetActorId());
208 				
209 				// 拉到普通场景
232 				pActor->m_rawsrcScenePos.SetData(pActorData->nScenceID, pActorData->nPosX, pActorData->nPosY);
233 				
234 				// 初始化在跨服服务器上的一些数据 复活点信息应该在进入场景的时候设置吧TODO.
235 				pActor->m_commsrvPosBeforeEnterFB.SetData(nEntrSceneId, nX, nY);
236 			}

H:\work\source\烈火战神\[src.cool]烈火战神\diablotcgp\trunk\Diablo\server\LogicServer\mgrserv\MgrServClient.cpp 12 KB CPP 文件 2013/4/11 2:29:08 2018/8/3 20:31:00 2018/8/3 20:31:00 1
306 			break;
307 		}
309 	//case MSS_APPLY_ACROSS_SERVER_RET://后台返回的申请跨服结果  Tag = 0 为成功, 1 为失败  数据段为:  申请的角色名
310 	//	{
311 	//		nLen = DecodeBuffer(packet.getOffsetPtr(), TempBuffer, 

H:\work\source\烈火战神\[src.cool]烈火战神\diablotcgp\trunk\Diablo\server\LogicServer\misc\ActorNameColor.cpp 16 KB CPP 文件 2013/4/11 2:29:08 2018/8/3 20:31:00 2018/8/3 20:31:00 1
131 		}
132 	}
134 	if(GetLogicServer()->IsCommonServer() && GetGlobalLogicEngine()->GetGuildMgr().m_SbkWarFlag == 1 )			//跨服沙巴克的时候
135 	{
136 		int myGuildId = ((CActor*)pSelf)->GetProperty<int>(PROP_ACTOR_GUILD_ID);

H:\work\source\烈火战神\[src.cool]烈火战神\diablotcgp\trunk\Diablo\server\LogicServer\networkdata\NetWorkMsgHandle.cpp 40 KB CPP 文件 2013/4/11 2:29:13 2018/8/3 20:31:00 2018/8/3 20:31:00 3
361 			if(pActor->IsInTransmitStatus() )
362 			{
363 				OutputMsg(rmTip,_T("account=%d玩家正在跨服状态，不踢下线"),nSessionId);
364 			}
365 			else
908 			break;
909 		}
910 	case MSS_APPLY_ACROSS_SERVER_RET://后台返回的申请跨服结果  Tag = 0 为成功, 1 为失败  
911 		{
912 			//未实现
1269 	case MSS_SET_REFRESHCORSS:
1270 		{
1271 			GetLogicServer()->ReloadCrossConfig(); //重新加载跨服的配置
1273 			GetLogicServer()->GetMgrClient()->PostInternalMessage(MCS_RETURN_REFRESHCORSS, 0, 0, uParam4);
1274 			break;

H:\work\source\烈火战神\[src.cool]烈火战神\diablotcgp\trunk\Diablo\server\LogicServer\skill\SkillResult.cpp 71 KB CPP 文件 2013/4/11 2:29:27 2018/8/3 20:31:00 2018/8/3 20:31:00 1
1391 	CActor *pActor = (CActor*)pParam->pSrcEntity; //玩家的指针
1392 	
1394 	if( !pActor->IsInRawServer() ) return; //不在跨服里是没法使用的
1396 	int nSceneId = pActor->GetCitySceneId();
1397 	if(nSceneId ==0) return; //别传送进了测试场景

H:\work\source\烈焰\lieyan\server_src\src\gameserver\BattleCommClient.cpp 33 KB CPP 文件 2014/3/18 12:28:24 2018/8/6 23:30:32 2018/8/6 23:30:32 5
161 	{
162 		Disconnect();
163 		Log.Error("RemoteConsole", "跨服战非法IP：%s 尝试连接", strIP.c_str());
164 		return;
165 	}
184 {
185 #ifndef BATTLESERVER
186 	//	发送跨服战ID给gameserver
187 	BattleCommClinetSocket* pBattleCommClinetSocket = sBattleCommHandler.pSocket;
188 	if(pBattleCommClinetSocket)
219 	if(objmgr.GetBattlePlayerID(nAccountID) == 1)
220 	{
221 		//该帐号在游戏服务器上，跨服战的数据不保存，不该出现
222 		return;
223 	}
726 	else
727 	{
728 		//从内存中拿数据发送到跨服战服务器
729 		WorldPacket data(BSMSG_BATTLESERVER_LOADPLAYERINFO, 1024);
730 		data << nServerID << nNewAccount << nGuidID;
740 {
741 #ifndef BATTLESERVER
742 	//	传送数据给跨服战
743 	WorldPacket data(BSMSG_BATTLESERVER_LOADPLAYERINFO, 1024);
744 	uint32 field_index = 1;

H:\work\source\烈焰\lieyan\server_src\src\gameserver\BattleServerHandler.cpp 2 KB CPP 文件 2014/3/18 12:28:24 2018/8/6 23:30:32 2018/8/6 23:30:32 1
10 		WorldPacket data(NEW_SC_CS_MSG_BATTLE_ENTERSERVER,6);
11 		data << (int8)(0);
12 		data << uint32(1);	//跨服服务器没有开启
13 		_player->SendPacket(&data);
14 		return;

H:\work\source\烈焰\lieyan\server_src\src\gameserver\ItemHandler.cpp 93 KB CPP 文件 2014/3/18 12:28:22 2018/8/6 23:30:32 2018/8/6 23:30:32 1
299 		bool Discardflag = false;
300 #ifdef BATTLESERVER
301 		//	跨服战中扔物品
302 		pDiscardItem->nOldItem = pItem->nOldItem;
303 		if(pDiscardItem->newsceneitemguid < 0x80000000)

H:\work\source\烈焰\lieyan\server_src\src\gameserver\Master.cpp 20 KB CPP 文件 2015/12/18 2:11:04 2018/8/6 23:30:32 2018/8/6 23:30:32 1
291 	new HttpClient();
292     ThreadPool.ExecuteTask(HttpClient::getSingletonPtr());
294 	//	add by xst 跨服战
295 	new BattleCommHandler();
296 	sBattleCommHandler.StartUp();

H:\work\source\烈焰\lieyan\server_src\src\gameserver\ObjectMgr.cpp 50 KB CPP 文件 2014/3/18 12:28:24 2018/8/6 23:30:32 2018/8/6 23:30:32 1
667 	if(isBattle == false && guidhigh == HIGHGUID_TYPE_ITEM)
668 	{ 
669 		//表示该道具是跨服战出品
670 		ret |= 0x80000000; 
671 	}

H:\work\source\烈焰\lieyan\server_src\src\gameserver\Player.cpp 334 KB CPP 文件 2015/12/18 2:15:58 2018/8/6 23:30:32 2018/8/6 23:30:32 3
516 	m_update_ranked_data = NULL;
518 	m_partnerInfo = NULL;
520 	//	跨服战
521 	m_vecDeleteItem.clear();
522 	m_nOldPlayerID = 0;
2599 	sendData << (uint32) m_lastrefreshtime;
2600 	sendData << (uint32) nOldGuidID;
2602 	// 跨服战资源消耗
2603 	sendData << (int32) (m_uint32Values[ PLAYER_FIELD_COINAGE] - m_nOldCash[0]);// 金币
2604 	sendData << (int32) (m_uint32Values[ PLAYER_FIELD_BINGGOLD] - m_nOldCash[1]);// 绑定金币
4624 		}
4625 	}
4627 	// 跨服战资金
4628 	m_nOldCash[0] = m_uint32Values[ PLAYER_FIELD_COINAGE];   // 金币
4629 	m_nOldCash[1] = m_uint32Values[ PLAYER_FIELD_BINGGOLD];	 // 绑定金币

H:\work\source\烈焰\lieyan\server_src\src\gameserver\ScriptsCommand.cpp 45 KB CPP 文件 2014/3/18 12:28:22 2018/8/6 23:30:32 2018/8/6 23:30:32 1
1852 		WorldPacket data(NEW_SC_CS_MSG_BATTLE_ENTERSERVER,6);
1853 		data << (int8)(0);
1854 		data << uint32(1);	//跨服服务器没有开启
1855 		SendPacketToBuf(&data);
1856 		return;

H:\work\source\烈焰\lieyan\server_src\src\gameserver\WorldSession.cpp 137 KB CPP 文件 2014/3/18 12:28:22 2018/8/6 23:30:32 2018/8/6 23:30:32 3
413 		_player->load_health = _player->GetHealth();
414 		_player->load_mana = _player->GetPower(0);
416 		//	跨服战
417 #ifdef BATTLESERVER	
417 #ifdef BATTLESERVER	
418 		//	保存跨服战数据给游戏服务器
419 		sBattleCommHandler.SendUpdatePlayerInfoToGameServer(this);
420 		Guild* pGuild = _player->GetGuild();
1232 void WorldSession::HandlePlayerLoginBattleServer(WorldPacket & recvPacket)
1233 {
1234 	//	从跨服服务器发送消息给世界服务器拉取角色信息
1235 	uint64  lPlayerID = 1;
1236 	uint32	nGuidID = 0;

H:\work\source\烈焰\lieyan\server_src\src\gameserver\WorldSocket.cpp 26 KB CPP 文件 2014/3/18 12:28:22 2018/8/6 23:30:32 2018/8/6 23:30:32 1
1044 		OutPacket(NEW_CS_SC_MSG_BATTLE_LOGIN_PLAYER, 2, "\x00\x00");
1045 		if( sWorld.m_useIrc )
1046 			Log.Success("登陆", "有玩家登陆跨服战上来acc:%u...",accnum);
1047 	}
1048 #endif

H:\work\source\神仙传《www.zztri.com》\神仙传\GAME\Project1\ZoneClientEditor\Source\Gameplay\ClientGameplayState.cpp 30 KB CPP 文件 2010/3/23 20:40:12 2018/5/9 22:13:27 2018/5/9 22:13:27 1
178 	//配方数据
179 	g_PrescriptionRepository.read();
180 	//跨服寻径
181 	g_StrideRepository.read();
182 	//宠物数据

H:\work\source\神仙传《www.zztri.com》\神仙传\GAME\Project1\ZoneClientEditor\Source\Gameplay\Data\RouteRepository.cpp 15 KB CPP 文件 2010/3/22 9:23:20 2018/5/9 22:13:27 2018/5/9 22:13:27 1
324 }
325 #endif
327 //跨服寻径
328 StrideRepository g_StrideRepository;
330 StrideRepository::StrideRepository()

H:\work\source\神仙传《www.zztri.com》\神仙传\GAME\Project1\ZoneClientEditor\Source\Gameplay\GameObjects\PlayerScript.cpp 32 KB CPP 文件 2010/3/28 23:55:01 2018/5/9 22:13:27 2018/5/9 22:13:27 1
605 }
607 // ----------------------------------------------------------------------------
608 // 取消跨服寻径
609 ConsoleFunction(clearStrideServerPath, void, 1, 1, "clearStrideServerPath()")
610 {

H:\work\source\神仙传《www.zztri.com》\神仙传\GAME\Project1\ZoneClientEditor\Source\NetWork\UserPacketProcess.cpp 46 KB CPP 文件 2010/4/5 17:14:25 2018/5/9 22:13:28 2018/5/9 22:13:28 1
746 		break;
747 	case CHAT_MSG_TYPE_WORLD:
748 		strChannel = "跨服";
749 		break;
750 	case CHAT_MSG_TYPE_WORLDPLUS:

H:\work\source\神仙传《www.zztri.com》\神仙传\GAME\Project1\ZoneClientEditor\Source\UI\guiBigViewMap.cpp 19 KB CPP 文件 2010/3/22 9:23:38 2018/5/9 22:13:28 2018/5/9 22:13:28 1
380 void GuiBigViewMap::moveToPos3D(S32 mapId,Point3F &pos3D,Point2I pos2D)
381 {
382 	//899999999大地图跨服专用ID
383 	RouteData* pData =  g_RouteRepository.getRouteData(899999999);
384 	if(NULL == pData)

H:\work\source\神仙传《www.zztri.com》\神仙传\GAME\Project1\ZoneClientEditor\Source\UI\guiMessageList.cpp 9 KB CPP 文件 2010/3/22 9:23:40 2018/5/9 22:13:28 2018/5/9 22:13:28 1
104 		AddEntry(nChannel,"<i s='gameres/gui/images/GUIWindow15_1_038.png' />", msg,TYPE_SYS,reserveID,name);
105 		break;
106 	case CHAT_MSG_TYPE_WORLD:// 跨服
107 		AddEntry(nChannel,"",msg,TYPE_CHANNEL,reserveID,name);
108 		break;

H:\work\source\笑傲仙侠\[src.cool]笑傲仙侠\server\J2Fresh\ServerFresh\CenterServer\src\ZWSqlDef.cpp 79 KB CPP 文件 2015/3/14 1:49:12 2018/8/15 23:55:14 2018/8/15 23:55:14 1
1998 char* DetelePaoShang = 
1999 "DELETE FROM t_char_pao_shang WHERE CharId = %d";
2000 // 跨服
2001 char*		loadCharGameInfo	=
2002 "SELECT * FROM t_char_kf_game_info";

H:\work\source\笑傲仙侠\[src.cool]笑傲仙侠\server\J2Fresh\ServerFresh\GameServer\src\KuaFuCharManager.cpp 14 KB CPP 文件 2015/3/14 1:48:29 2018/8/15 23:55:28 2018/8/15 23:55:28 4
52 		Json::FastWriter write;
53 		std::string fieldVal = write.write(charAllData);
55 		gamelog("角色 : %s 的跨服json数据 : %s",
56 			INpChar->GetName().c_str(), fieldVal.c_str());
58 		CZWNetData* pNetData = ZW_GAMESERVER_SINGLTON.PopBuf(fieldVal.size() + 1024, ZW_SERVER_TYPE_KUAFU );
66 			pNetData->push(INpChar->GetHeadIconId()); // 头像编号
67 			pNetData->pushUTF(userData.regTime); // 注册时间
69 			pNetData->push(newCharId); // 跨服角色编号
70 			pNetData->push(newCharId); // 跨服用户编号
71 			pNetData->pushUTF(CZWStringUtil::toString(newCharId)); // 跨服用户名
72 			pNetData->pushUTF(userData.userToken); // 令牌
73 			pNetData->push(userData.userTick); // 时间戳

H:\work\source\笑傲仙侠\[src.cool]笑傲仙侠\server\J2Fresh\ServerFresh\GameServer\src\KuaFuManager.cpp 10 KB CPP 文件 2015/3/14 1:48:29 2018/8/15 23:55:28 2018/8/15 23:55:28 12
76 {
77 	enum {
78 		EErrorCode_CannotEnterFromHDMap = 1, // 不能从活动地图传入跨服
79 		EErrorCode_CannotEnterFromCopy = 2, // 副本中不能传入跨服
80 		EErrorCode_OnlyFromLineOne = 3,	// 只能从1线进入跨服
81 		EErrorCode_CannotEnterInPK, // PK中不能进入跨服
82 		EErrorCode_CannotEnterKFHD,
83 		EErrorCode_AlreadyInKF,
83 		EErrorCode_AlreadyInKF,
84 	};
86 	return ZW_OK; // 临时屏蔽跨服
88 	// 已在跨服中
89 	if (ZW_GLOBAL_CONFIG_SINGLETON.CheckIsKuaFuServer())
90 	{
191 	if (pChar!= NULL)
192 	{
193 		// 通知客服端可以登录跨服
194 		CZWNetData* pNetData = ZW_GAMESERVER_SINGLTON.PopBuf();
195 		if (pNetData != NULL)
195 		if (pNetData != NULL)
196 		{
197 			pNetData->pushUTF( m_kuaFuServerInfo.kfLogonServerIP); // string 跨服登录服务器IP
198 			pNetData->push( m_kuaFuServerInfo.kfLogonServerPort); // int_32 跨服登录服务器端口
199 			pNetData->push(kfCharID); // int_32 跨服中角色编号
200 			pNetData->setProc(GS_CL_RESPONT_ENTER_KF);
201 			pNetData->setPackSize( pNetData->offset() );
326 	case CL_GS_LOGOUT:
327 		{
328 			gamelog("跨服中请求退出");
329 			return true;
330 		}
369 			return true;
370 		}
371 		// 跨服相关
372 	case CL_GS_REQUEST_LEAVE_KF:
373 		{

H:\work\source\笑傲仙侠\[src.cool]笑傲仙侠\server\J2Fresh\ServerFresh\GameServer\src\Main.cpp 17 KB CPP 文件 2015/3/14 1:48:29 2018/8/15 23:55:28 2018/8/15 23:55:28 1
312 	//初始化排行榜数据
313 	//ZW_GAME_RANK_MANAGER_SINGLETON.Initialize();
315 	//启动跨服线程
316 	//ZW_KUAFU_THREAD_SINGLETON.Initialize();
317 	//ZW_KUAFU_THREAD_SINGLETON.Start();

H:\work\source\笑傲仙侠\[src.cool]笑傲仙侠\server\J2Fresh\ServerFresh\GameServer\src\MatchManager.cpp 41 KB CPP 文件 2015/3/14 1:48:29 2018/8/15 23:55:28 2018/8/15 23:55:28 2
1458 	INpChar->SetNeedToSyncBaseData();
1459 	
1460 	// 如果是跨服服务器则退出跨服回到原服
1461 	if(!ZW_GLOBAL_CONFIG_SINGLETON.CheckIsKuaFuServer())
1462 	{

H:\work\source\笑傲仙侠\[src.cool]笑傲仙侠\server\J2Fresh\ServerFresh\GameServer\src\WuDaoHuiRank.cpp 40 KB CPP 文件 2015/3/14 1:48:29 2018/8/15 23:55:28 2018/8/15 23:55:28 2
1017 					pNetData->setProc( GS_KFS_SYNC_WUDAOHUI_RANK );
1018 					pNetData->setPackSize( pNetData->offset() );
1020 					gamelog("发送武道会跨服排行数据, 数量 : %d, 数据包大小: %d, 分配网络包大小: %d",
1021 						count, pNetData->offset(), packetSize);
1023 					ZW_GAMESERVER_SINGLTON.SendMsgBase( pNetData);
1037 				pNetData->setProc( GS_KFS_SYNC_WUDAOHUI_RANK );
1038 				pNetData->setPackSize( pNetData->offset() );
1040 				gamelog("发送武道会跨服排行数据, 数量 : %d, 数据包大小: %d, 分配网络包大小: %d",
1041 					count, pNetData->offset(), packetSize);
1043 				ZW_GAMESERVER_SINGLTON.SendMsgBase( pNetData);

H:\work\source\笑傲仙侠\[src.cool]笑傲仙侠\server\J2Fresh\ServerFresh\GameServer\src\ZWGameServerBase.cpp 17 KB CPP 文件 2015/3/14 1:48:29 2018/8/15 23:55:29 2018/8/15 23:55:29 1
168 	serverInfo.m_nGateID = m_GameServerConfig.GetGateID();// 该线号对应的GateID号
169 	serverInfo.m_IsKFServer = ZW_GLOBAL_CONFIG_SINGLETON.CheckIsKuaFuServer() ? 1:0;
171 	// 发送服务器信息 等待跨服服务器返回 
172 	CZWNetData* pBuf_KuaFu = m_pKuaFuClientSession->GetEndPoint()->PopBuf( 100 );
173 	pBuf_KuaFu->setProc( GS_KFS_REQUEST_REGISTER_SERVER );

H:\work\source\笑傲仙侠\[src.cool]笑傲仙侠\server\J2Fresh\ServerFresh\GameServer\src\ZWGameServerSession.cpp 8 KB CPP 文件 2015/3/14 1:48:29 2018/8/15 23:55:29 2018/8/15 23:55:29 1
335 		return;
336 	}
338 	gamelog("CZWKuaFuClientSession::OnDisConnect..与跨服服务器的链接断开 \n");
339 	m_pEndPoint->Close();
340 	m_pSink->OnSessionLeave( this );

H:\work\source\笑傲仙侠\[src.cool]笑傲仙侠\server\J2Fresh\ServerFresh\GameServer\src\ZWObj_Char.cpp 921 KB CPP 文件 2015/3/14 1:48:29 2018/8/15 23:55:29 2018/8/15 23:55:29 5
855 		SetBattle(BattleFromSecondAttr() );
856 		BroadcastDynamicObjBasicDataCharSelf();
858 		printf("进入跨服服务器，地图 : %d, 坐标 <%d:%d>",
859 			GetMapId(), GetPosition().m_nX, GetPosition().m_nY);
860 	}
1440 			return;
1441 		}
1443 		// 是否在跨服中
1444 		if(ZW_GLOBAL_CONFIG_SINGLETON.CheckIsKuaFuServer() && 
1445 			!ZW_KUAFUMANAGER_INSTANCE.IsValidProcInKuaFu(procId))
16981 			!(IS_COPYMAP_SCENEID(mapid)))
16982 		{
16983 			// 提示是否退出跨服服务器
16984 			std::string AnnounceInfo = ZW_LANGUAGE_PARSE_SINGLETON.GetUTFString(336);
16985 			this->AnnounceCharTiShiInfo(3,AnnounceInfo);
20217 	m_CharData.charBaseInfo.X = X;
20218 	m_CharData.charBaseInfo.Y = Y;
20220 	printf("跨服修正后，地图： %d 坐标 : (%d, %d)",
20221 		m_CharData.charBaseInfo.MapId, m_CharData.charBaseInfo.X, m_CharData.charBaseInfo.Y);
20224 	this->SetName( m_CharData.charBaseInfo.charName );
25885 				case 1:
25886 					{
25887 						// 请求跨服
25888 						ZW_KUAFUMANAGER_INSTANCE.OnEnterKuaFuServer(this, NULL);
25889 						break;

H:\work\source\笑傲仙侠\[src.cool]笑傲仙侠\server\J2Fresh\ServerFresh\GameServer\src\ZWProtocolRegister.cpp 50 KB CPP 文件 2015/3/14 1:48:29 2018/8/15 23:55:29 2018/8/15 23:55:29 2
583     m_dataHandlerTable[CL_GS_REQUEST_BUY_AUTO_FLASH_GOODS] = &CZWObj_Char::OnSMSDOperator;
584     m_dataHandlerTable[CL_GS_REQUEST_FREE_REFREAH_SMSD] = &CZWObj_Char::OnSMSDOperator;
586     //跨服查看相关
587     m_dataHandlerTable[CS_GS_RESONSE_PLAY_IS_NOT_ONLINE] =&CZWObj_Char::OnTargetIsNotOnlineFromCS;
588     m_dataHandlerTable[CS_GS_REQUEST_GET_YOUR_POSTION] =&CZWObj_Char::OnGetYourInfoFromOtherLineOperatorFromCS;
754 	m_dataHandlerTable[CL_GS_BA_BU_TIAN_LONG_ENTER]			= &CZWObj_Char::OnBaBuTianLongOperator;
755 	m_dataHandlerTable[CL_GS_ASK_BA_BU_TIAN_LONG_INFO]		= &CZWObj_Char::OnBaBuTianLongOperator;
757 	// 跨服
758 	m_dataHandlerTable[CL_GS_REQUEST_ENTER_KF] = &CZWObj_Char::OnKuaFuOperator;
759 	m_dataHandlerTable[CL_GS_REQUEST_LEAVE_KF] = &CZWObj_Char::OnKuaFuOperator;

H:\work\source\笑傲仙侠\[src.cool]笑傲仙侠\server\J2Fresh\ServerFresh\GameServer\src\ZWSqlDef.cpp 80 KB CPP 文件 2015/3/14 1:48:29 2018/8/15 23:55:29 2018/8/15 23:55:29 1
2021 char* DetelePaoShang = 
2022 "DELETE FROM t_char_pao_shang WHERE CharId = %d";
2023 // 跨服
2024 char*		loadCharGameInfo	=
2025 "SELECT * FROM t_char_kf_game_info";

H:\work\source\笑傲仙侠\[src.cool]笑傲仙侠\server\project\GameServer\src\ProtocolRegister.cpp 16 KB CPP 文件 2015/3/14 1:51:45 2018/8/15 23:55:35 2018/8/15 23:55:35 1
235     // 客户端购买血缸或蓝缸的量
236     m_dataHandlerTable[CL_GS_BUG_HPMP_REP_VALUE] = &CObj_Char::OnBuyHPMPRepValue;
239     //跨服查看相关
240     m_dataHandlerTable[CS_GS_RESONSE_PLAY_IS_NOT_ONLINE] =&CObj_Char::OnTargetIsNotOnlineFromCS;
241     m_dataHandlerTable[CS_GS_REQUEST_GET_YOUR_POSTION] =&CObj_Char::OnGetYourInfoFromOtherLineOperatorFromCS;

H:\work\source\笑傲仙侠\[src.cool]笑傲仙侠\server\project_bus\GameServer\src\ProtocolRegister.cpp 16 KB CPP 文件 2015/3/14 1:34:40 2018/8/15 23:55:39 2018/8/15 23:55:39 1
235     // 客户端购买血缸或蓝缸的量
236     m_dataHandlerTable[CL_GS_BUG_HPMP_REP_VALUE] = &CObj_Char::OnBuyHPMPRepValue;
239     //跨服查看相关
240     m_dataHandlerTable[CS_GS_RESONSE_PLAY_IS_NOT_ONLINE] =&CObj_Char::OnTargetIsNotOnlineFromCS;
241     m_dataHandlerTable[CS_GS_REQUEST_GET_YOUR_POSTION] =&CObj_Char::OnGetYourInfoFromOtherLineOperatorFromCS;

H:\work\source\笑傲仙侠\[src.cool]笑傲仙侠\server\XaxxFresh\Server\CenterServer\src\ZWCenterServer.cpp 64 KB CPP 文件 2015/3/14 1:37:21 2018/8/15 23:55:43 2018/8/15 23:55:43 4
375 			}
376 			break;
377 // 		case KF_GS_CS_TRANSMIT_CHAR_INFO: //游戏服务器传送信息到跨服服务器
378 // 			{
379 // 				ZW_OPETATOR_SINGLTON.OnTransmitCharInfoToKFServer( pNetData );
380 // 			}
381 // 			break;
382 // 		case KF_KF_CS_TRANSMIT_CHAR_INFO_COMPELETED: //跨服服务器返回传送信息已经接受完成
383 // 			{
384 // 				ZW_OPETATOR_SINGLTON.OnTransmitCharInfoToKFServerRet(pNetData);
385 // 			}
386 // 			break;
387 // 		case KF_KF_CS_SAVE_KF_DATA_INFO: //跨服服务器请求保存跨服背包信息
388 // 			{
389 // 				ZW_OPETATOR_SINGLTON.OnSaveKFBagInfo(pNetData);

H:\work\source\笑傲仙侠\[src.cool]笑傲仙侠\server\XaxxFresh\Server\GameServer\src\ZWGameDBOperator.cpp 108 KB CPP 文件 2015/3/14 1:36:52 2018/8/15 23:55:45 2018/8/15 23:55:45 4
598 			break;
599 		}
600 	case ZW_CHAR_BAG_TYPE_KUAFU: //跨服背包
601 		{
602 			pLoadItem = LoadKFBagItem;
789 			break;
790 		}
791 	case ZW_CHAR_BAG_TYPE_KUAFU: //跨服背包
792 		{
793 			pLoadEquip = LoadKFBagEquip;
983 }
985 //-=================
986 //跨服背包相关
987 void CZWGameDBOperator::FetchKFBagInfo( CharID_t CharId, ZWItemList& itemList )
987 void CZWGameDBOperator::FetchKFBagInfo( CharID_t CharId, ZWItemList& itemList )
988 {// 要从跨服背包物品表和装备
989 	this->FetchCharItemInfo( CharId, itemList, ZW_CHAR_BAG_TYPE_KUAFU );
990 	this->FetchCharEquipInfo( CharId, itemList, 0, ZW_CHAR_BAG_TYPE_KUAFU );

H:\work\source\笑傲仙侠\[src.cool]笑傲仙侠\server\XaxxFresh\Server\GameServer\src\ZWGameServer.cpp 65 KB CPP 文件 2015/3/14 1:36:52 2018/8/15 23:55:45 2018/8/15 23:55:45 1
1814 	return ZW_OK;
1815 }
1817 //跨服角色信息保存成功
1818 int_32 CZWGameServer::OnKFCharInfoTransmitCompeleted(CZWNetData* pNetData)
1819 {

H:\work\source\笑傲仙侠\[src.cool]笑傲仙侠\server\XaxxFresh\Server\GameServer\src\ZWObj_Char.cpp 815 KB CPP 文件 2015/3/14 1:36:52 2018/8/15 23:55:45 2018/8/15 23:55:45 14
513 	//玩家消费元宝赢好礼数据
514 	m_CharConSumeActivity.LoadConSumeActivityData();
516 	//玩家跨服奖励数据
517 	LoadKFAwardInfo();
519 	LoadItemBuffData();
4747 	return ZW_OK;
4748 }
4750 // 跨服背包操作
4751 int_32 CZWObj_Char::OnKFBagOperator(CZWNetData* data)
4752 {
4753 /*	enum ERR_DEPOT_OP
4754 	{
4755 		ERR_DEPOT_ITEM_NOT_EXIST		= 1,	// 跨服背包中物品不存在
4756 		ERR_ITEM_NOT_EXIST				= 2,	// 背包中物品不存在
4756 		ERR_ITEM_NOT_EXIST				= 2,	// 背包中物品不存在
4757 		ERR_DEPOT_IS_FULL				= 3,	// 跨服背包满了
4758 		ERR_ITEM_BAG_IS_FULL			= 4,	// 背包满了
4759 		ERR_IN_EXCHANGE					= 5,	// 交易中
4760 		ERR_CAN_NOT_MOVE_ITEM			= 6,	// 物品不能移动
4761 		ERR_CAN_NOT_DESTORY_ITEM		= 7,	// 物品不能销毁
4762 		ERR_CAN_NOT_PUT_IN				= 8,	// 该类物品不能放入跨服背包
4763 	};
4765 	ProcID_t ProcId = data->getProc();
4766 	switch( ProcId )
4767 	{
4768 	case CL_GS_GET_KF_BAG_INFO:			// 获取跨服背包信息
4769 		{
4770 			// 通知随时背包物品装备信息
4778 			break;
4779 		}
4780 	case CL_GS_ADD_ITEM_TO_KF_BAG:		// 存物品到跨服背包，绑定物品可以放入跨服背包
4781 		{
4782 			int_32 nIndexInItemBag = -1;
4864 			break;
4865 		}
4866 	case CL_GS_GET_ITEM_FROM_KF_BAG:		// 从跨服背包中取物品
4867 		{
4868 			int_32 nIndexInDepot = -1;
4941 			break;
4942 		}
4943 	case CL_GS_BATCH_KF_BAG:				// 从跨服背包中批量取物品
4944 		{
4944 		{
4945 			byte_8 ComeFrom = 0;	//0或4，表示来源是背包或者跨服背包
4946 			int_32 nIndex = -1;
4947 			data->pop( ComeFrom );
4995 					break;
4996 				}
4997 			case ZW_CHAR_BAG_TYPE_KUAFU:	// 跨服背包
4998 				{
4999 					CZWItem* pItemInDepot = m_CharKFBag.GetItem( nIndex );
12915 	}
12916 }
12918 // 通知跨服背包的脏数据
12919 void CZWObj_Char::UpdateKFBagChange()
12920 {
12926 		outbuf->push( nSize );
12927 		PackageBagItemChange( outbuf, DirtyDepotList );
12928 		outbuf->setProc( static_cast<int_32>(GS_CL_NOTIFY_KF_BAG_ITEM_CHANGE) ); // 跨服背包
12929 		outbuf->setPackSize( outbuf->offset() );
12931 		ZW_GAMESERVER_SINGLTON.Dispatch( this->GetNodePos(), outbuf );

H:\work\source\笑傲仙侠\[src.cool]笑傲仙侠\server\XaxxFresh\Server\GameServer\src\ZWProtocolRegister.cpp 36 KB CPP 文件 2015/3/14 1:36:52 2018/8/15 23:55:45 2018/8/15 23:55:45 2
408     m_dataHandlerTable[CL_GS_MOVE_ITEM_IN_DEPOT] = &CZWObj_Char::OnDepotOperator;
409 	m_dataHandlerTable[CL_GS_DESTORY_DEPOT_ITEM] = &CZWObj_Char::OnDepotOperator;
411     //跨服背包相关
412     //m_dataHandlerTable[CL_GS_GET_KF_BAG_INFO] = &CZWObj_Char::OnKFBagOperator;
413     //m_dataHandlerTable[CL_GS_ADD_ITEM_TO_KF_BAG] = &CZWObj_Char::OnKFBagOperator;
485     // 请求VIP信息
486     //m_dataHandlerTable[CL_GS_REQUEST_VIP_LEVEL_INFO] = &CZWObj_Char::OnVIPOperator;
488     //跨服查看相关
489     m_dataHandlerTable[CS_GS_RESONSE_PLAY_IS_NOT_ONLINE] =&CZWObj_Char::OnTargetIsNotOnlineFromCS;
490     m_dataHandlerTable[CS_GS_REQUEST_GET_YOUR_POSTION] =&CZWObj_Char::OnGetYourInfoFromOtherLineOperatorFromCS;

H:\work\source\红途\红途整套www.so165.com\红途整套\server\server\ScenesServer\CartoonPet.cpp 9 KB CPP 文件 2010/10/11 14:43:24 2018/9/25 17:38:49 2018/9/25 17:38:49 1
390 }
392 /*
393  * \brief 主人跨服时，保存其收养的宝宝的临时数据
394  * 
395  * \param dest 保存地址

H:\work\source\红途\红途整套www.so165.com\红途整套\server\server\ScenesServer\GuardNpc.cpp 12 KB CPP 文件 2010/10/11 14:43:22 2018/9/25 17:38:49 2018/9/25 17:38:49 1
472 }
474 /*
475  * \brief 保存护卫NPC的数据到指定位置（跨服时用）
476  *
477  * \param dest 目的地址

H:\work\source\红途\红途整套www.so165.com\红途整套\server\server\ScenesServer\Scene.cpp 70 KB CPP 文件 2010/10/11 14:43:26 2018/9/25 17:38:49 2018/9/25 17:38:49 1
499  * \param deathBackto 是否是死亡回城
500  * \param ignoreWar 忽略跳转中的国战处理部分
501  * \return 0 跳场景失败，1 在本服跳场景， 2跨服跳场景
502  */
503 int Scene::changeMap(SceneUser *pUser , bool deathBackto, bool ignoreWar)

H:\work\source\红途\红途整套www.so165.com\红途整套\server\server\ScenesServer\SessionClient.cpp 135 KB CPP 文件 2010/10/11 14:43:23 2018/9/25 17:38:49 2018/9/25 17:38:49 1
2396 				pUser->charbase.mapid = rev->temp_id;
2397 				strncpy(pUser->charbase.mapName, (char *)rev->map_name, MAX_NAMESIZE);
2398 				Zebra::logger->trace("%s(%d)跨服切换场景(%s-->%s)",pUser->name,pUser->id,pUser->scene->name,pUser->charbase.mapName);
2399 				pUser->charbase.x = rev->x;
2400 				pUser->charbase.y = rev->y;

H:\work\source\蛋清OL\[src.cool]蛋清OL\源代码\server\Gateway\SaveDataState.cpp 4 KB CPP 文件 2007/12/17 9:49:27 2018/9/18 17:11:42 2018/9/18 17:11:42 1
100 			else
101 			{
102 				SERVERLOG::DebugLog(player->getUserName(), player->getCharactorName(), player->getUserID(), "跨服务器传送时保存数据完毕");
104 				player->changeState(eusTransfer);
105 				msg.isInSameServer=false;

H:\work\source\蛋清OL\[src.cool]蛋清OL\源代码\server\Gateway\TransferState.cpp 3 KB CPP 文件 2007/12/17 9:49:27 2018/9/18 17:11:42 2018/9/18 17:11:42 2
26 	UserInformation *player=UserManager::instance()->get(userID);
27 	LOGASSERT(player!=NULL);
28 	SERVERLOG::DebugLog(player->getUserName(), player->getCharactorName(), player->getUserID(), "跨服务器传关");
29 	return true;
30 }
73 	UserInformation *player=UserManager::instance()->get(userID);
74 	LOGASSERT(player!=NULL);
76 	SERVERLOG::DebugLog(player->getUserName(), player->getCharactorName(), player->getUserID(), "跨服务器传送成功完成");
78 	player->changeState(eusNull);
79 	return true;

H:\work\source\蛋清OL\[src.cool]蛋清OL\源代码\server\NetUserManager\SaveDataState.cpp 3 KB CPP 文件 2007/12/17 9:49:18 2018/9/18 17:11:43 2018/9/18 17:11:43 1
77 			else
78 			{
79 				LOG::DebugLog::LoginFlow(player->getCharactorName(), userID, 34, "跨服务器传送时保存数据完毕");
81 				player->changeState(eusTransfer);
82 				msg.isInSameServer=false;

H:\work\source\蛋清OL\[src.cool]蛋清OL\源代码\server\NetUserManager\TransferState.cpp 3 KB CPP 文件 2007/12/17 9:49:18 2018/9/18 17:11:43 2018/9/18 17:11:43 2
25 	NetPlayerInfo *player=NetPlayerManager::instance()->get(userID);
26 	LOGASSERT(player!=NULL);
27 	LOG::DebugLog::LoginFlow(player->getCharactorName(), userID, 26, "跨服务器传关");
28 	return true;
29 }
74 	LOGASSERT(player!=NULL);
76 	player->changeState(eusNull);
77 	LOG::DebugLog::LoginFlow(player->getCharactorName(), userID, 29, "跨服务器传送成功完成");
78 	return true;
79 }

H:\work\source\蛋清OL\[src.cool]蛋清OL\源代码\server\WorldServer\InSceneState.cpp 9 KB CPP 文件 2007/12/17 9:49:40 2018/9/18 17:11:46 2018/9/18 17:11:46 1
129 			return true;
130 		}
131 		SERVERLOG::DebugLog(user->getUserName(), user->getCharactorName(),userID,  "跨服务器传送 ");
133 		//todo 如果是未选中实例场景,则下面函数中会自动为其选择一个线
134 		int errorResult;

H:\work\source\蛋清OL\[src.cool]蛋清OL\源代码\server\WorldServer\TransferState.cpp 3 KB CPP 文件 2007/12/17 9:49:41 2018/9/18 17:11:47 2018/9/18 17:11:47 2
43 	{
44 		user->changeState(eusLogged);
45 		SERVERLOG::DebugLog(user->getUserName(), user->getCharactorName(), userID, "跨服务器传送时收到目标场景服务器的通知反馈");
47 		msg_S2c_LoginKey keyMsg;
49 		SceneServerInfo *serverInfo=SceneServerManager::getSingletonPtr()->getServerInfo(user->getSceneServerID());
71 		block[1].data=&keyMsg;
72 		block[1].length=sizeof(keyMsg);
74 		SERVERLOG::DebugLog(user->getUserName(), user->getCharactorName(), userID, "跨服务器传送时,返回客户端目标场景信息");
75 		return MessageSend::toScene(user->getLastSceneServerID(), block, 2);
76 	}

H:\work\source\超神传\超神传源码资源\vxServer\Server\Packets\CGRequestArenaApplyResponseHandler.cpp 3 KB CPP 文件 2012/6/4 9:51:14 2014/3/11 22:55:52 2014/3/11 22:55:52 1
33 				if (pMember)
34 				{
35 					//组队还未完成跨服同步 暂时不考虑
36 					//pWorldMsg->setCombatScore(pMember->GetCombatScore(),i);
37 					pWorldMsg->setTeamerGUID(pMember->m_GUID,i);

H:\work\source\超神传\超神传源码资源\vxServer\Server\Scene\CopySceneManager.cpp 18 KB CPP 文件 2012/6/7 11:34:00 2014/3/11 22:55:52 2014/3/11 22:55:52 2
302 	return NULL;
303 }
305 //暂时不考虑跨服 
306 //到这里有2种 一种是已经存在了请求进入 另一种是不存在创建进入
307 //还有一种是不允许主动开启的副本 如果不存在 直接返回false
477 	return FALSE;
478 }
480 ////由于是跨服 得不到玩家对象 因此有些check无法判断 只能完全相信数据来源
481 //BOOL CopySceneManager::CheckCanEnterOtherServer(SceneID_t SceneID, GUID_t PlayerGUID, int nTeamid ,int nGuildID,int nLevel,int nClass,int nSex  ,int nLeader,int nGuilder,int nFirst)
482 //{

H:\work\source\超神传\超神传源码资源\vxServer\Server\Script\VxLuaFn.cpp 95 KB CPP 文件 2012/6/7 16:31:34 2014/3/11 22:55:53 2014/3/11 22:55:53 1
1810 				if (pMember)
1811 				{
1812 					//组队还未完成跨服同步 暂时不考虑
1813 					//pWorldMsg->setCombatScore(pMember->GetCombatScore(),i);
1814 					pWorldMsg->setTeamerGUID(pMember->m_GUID,i);

H:\work\source\辉煌\[src.cool]辉煌OL\code\Server\GameServer\mapgroupkernel\Item.cpp 76 KB CPP 文件 2010/1/6 16:09:06 2018/9/26 20:24:34 2018/9/26 20:24:34 1
2201 }
2203 //////////////////////////////////////////////////////////////////////////
2204 //是否是传送旗(已记录)，包括普通和超级， (超级就是可以跨服传送的)
2205 bool CItem::IsPointTransmissionLater()
2206 {

H:\work\source\辉煌\[src.cool]辉煌OL\code\Server\GameServer\worldkernel\WorldKernel.cpp 89 KB CPP 文件 2010/1/6 16:09:02 2018/9/26 20:24:40 2018/9/26 20:24:40 1
2701 	return m_Msgsock.SendPacket((LPCTSTR)&msg, msg.unMsgSize, true);
2702 }
2704 //系统公告以及跨服聊天的处理
2705 bool CWorldKernel::SendMsgGame(OBJID idAccount,LPCTSTR pTragetName,WORD wMsgType,LPCTSTR pName,LPCTSTR pBuf,WORD wServerId,BOOL bIsBack)
2706 {

