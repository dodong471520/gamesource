I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\ZoneServerLogic\ZoneServiceProvider.h 23 KB H 文件 2014/2/25 0:20:22 2018/10/23 20:07:19 2018/10/23 20:07:19 3
596 	*/
597 	virtual IStarTrekServer *			GetStarTrekServer(void);
599 	/** 取得跨服组队撮合服务器
600 	@param   
601 	@param   
980 	// 仇恨服务器
981 	IEnmityServer *						m_pEnmityServer; 
983 	// 跨服服务器
984 	IStarTrekServer *					m_pStarTrekServer;
984 	IStarTrekServer *					m_pStarTrekServer;
986 	// 跨服组队撮合服务器
987 	IMatchServer *						m_pMatchServer;
989 	// 国战服务器

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\ZoneServer\ZoneServiceProvider.h 23 KB H 文件 2014/2/25 0:12:52 2018/10/23 20:07:11 2018/10/23 20:07:11 3
575 	*/
576 	virtual IStarTrekServer *			GetStarTrekServer(void);
578 	/** 取得跨服组队撮合服务器
579 	@param   
580 	@param   
1005 	// 仇恨服务器
1006 	IEnmityServer *						m_pEnmityServer; 
1008 	// 跨服服务器
1009 	IStarTrekServer *					m_pStarTrekServer;
1009 	IStarTrekServer *					m_pStarTrekServer;
1011 	// 跨服组队撮合服务器
1012 	IMatchServer *						m_pMatchServer;
1014 	// 国战服务器

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\ZoneServerLogic\ZoneServiceProvider.h 23 KB H 文件 2014/2/25 14:30:21 2018/10/23 19:46:15 2018/10/23 19:46:15 3
596 	*/
597 	virtual IStarTrekServer *			GetStarTrekServer(void);
599 	/** 取得跨服组队撮合服务器
600 	@param   
601 	@param   
980 	// 仇恨服务器
981 	IEnmityServer *						m_pEnmityServer; 
983 	// 跨服服务器
984 	IStarTrekServer *					m_pStarTrekServer;
984 	IStarTrekServer *					m_pStarTrekServer;
986 	// 跨服组队撮合服务器
987 	IMatchServer *						m_pMatchServer;
989 	// 国战服务器

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\ZoneServer\ZoneServiceProvider.h 23 KB H 文件 2014/2/25 14:29:39 2018/10/23 19:46:01 2018/10/23 19:46:01 3
575 	*/
576 	virtual IStarTrekServer *			GetStarTrekServer(void);
578 	/** 取得跨服组队撮合服务器
579 	@param   
580 	@param   
1005 	// 仇恨服务器
1006 	IEnmityServer *						m_pEnmityServer; 
1008 	// 跨服服务器
1009 	IStarTrekServer *					m_pStarTrekServer;
1009 	IStarTrekServer *					m_pStarTrekServer;
1011 	// 跨服组队撮合服务器
1012 	IMatchServer *						m_pMatchServer;
1014 	// 国战服务器

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\ZoneManager\ZoneMatron.h 4 KB H 文件 2014/2/25 0:12:07 2018/10/23 20:07:02 2018/10/23 20:07:02 1
106 	*/
107 	virtual bool				CanArena();
109 	/** 是否允许跨服传送
110 	@param   
111 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\ZoneManager\ZoneMatron.h 4 KB H 文件 2014/2/25 14:29:17 2018/10/23 19:45:54 2018/10/23 19:45:54 1
106 	*/
107 	virtual bool				CanArena();
109 	/** 是否允许跨服传送
110 	@param   
111 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\CountryService\WorldWar.h 15 KB H 文件 2014/2/25 0:21:49 2018/10/23 20:08:54 2018/10/23 20:08:54 44
5 ** 日  期:	2011-03-26
6 ** 版  本:	1.0
7 ** 描  述:	跨服国战系统部件
8 ** 应  用:  	
9 	
23 #include "BridgeConnector/IBridgeConnector.h"
24 using namespace Bridge;
26 // 列表中的跨服国战成员信息数据结构
27 struct SCountryWorldWarInfoNode: public SCountryWorldWarInfo
28 {
39 	}
41 };
43 // 跨服国战列表，以ID 为关键字
44 typedef map<DWORD,SCountryWorldWarInfoNode> TMAP_CountryWorldWar;
44 typedef map<DWORD,SCountryWorldWarInfoNode> TMAP_CountryWorldWar;
46 // 跨服国家边境连通信息列表，以(游戏世界ID,国家ID,类型)组合编号 为关键字
47 typedef map<DWORD,SCountryWorldLinkInfo> TMAP_CountryWorldLink;
47 typedef map<DWORD,SCountryWorldLinkInfo> TMAP_CountryWorldLink;
49 // 跨服国战数据检查处理
50 class CDBCheckBadWorldWar:public IDBRetSink, public DBSVR::IDBMsgSink
51 {
72 	*/	
73 	virtual void	OnReturn(int nCmdID, int nDBRetCode, char * pszDBRetDesc, int nQueueIndex, char * pOutData, int nOutLen);
75 	/** 数据库请求返回回调方法 GAMEDB_REQUEST_MAPRECOVER_READ   读出检查跨服国战信息
76 	@retval buffer 
77 	*/	
86 	void OnDBRet_ReadCheckBadCountryWorldWar(DBSVR::TDBSvrMsg* pstMsg);
87 };
89 // 跨服国战系统部件
90 class CWorldWar: public IWorldWar, public TimerHandler,public IDBRetSink,
91 	public DBSVR::IDBMsgSink
94 	enum
95 	{
96 		ETimerEventID_DB_Read = 0,		// 查询跨服国战
97 	};
99 public:
165 	virtual	bool				OnStopServiceSaveData(void);
168 	/** 取得地图信息
169 	@param   DWORD dwID:	跨服国战ID
170 	@return  SCountryWorldWarInfo 
171 	*/
192 	virtual SCountryWorldWarInfo * GetListData(void);
194 	/** 设定状态 
195 	@param   DWORD dwID:	跨服国战ID
196 	@param   DWORD dwState :状态 EMCountryWorldWarState
197 	@return  bool 成功否
198 	*/
199 	virtual	bool SetState(DWORD dwID,DWORD dwState);
201 	/** 跨服国战变化
202 	@param   DWORD dwID:	跨服国战ID
203 	@return  bool 成功否
204 	*/
204 	*/
205 	virtual	bool OnWorldWarInfoChanged(DWORD dwID);
207 	/** 加入跨服国战信息
208 	@param   DWORD dwStartTime			: 开始时间
209 	@param   DWORD dwFightTime			: 开战时间
209 	@param   DWORD dwFightTime			: 开战时间
210 	@param   DWORD dwEndTime			: 结束时间
211 	@param   DWORD dwType;				: 跨服国战类型 EMWarItemType
212 	@param   DWORD dwWarSceneID			: 战争场情景ID
213 	@param   DWORD dwAttackWorldID;		: 进攻国家所在游戏世界ID
218 	*/
219 	virtual bool AddWorldCountryWar(DWORD dwStartTime,DWORD dwFightTime,DWORD dwEndTime,DWORD dwType,DWORD dwWarSceneID,DWORD dwAttackWorldID,DWORD dwAttackCountryID,DWORD dwDefendWorldID,DWORD dwDefendCountryID);
221 	/** 加入跨服国战盟国信息
222 	@param   DWORD dwMyWorldID;		: 本国家所在游戏世界ID
223 	@param   DWORD dwMyCountryID;	: 本国家ID
227 	*/
228 	virtual bool AddWarFriend(DWORD dwMyWorldID,DWORD dwMyCountryID,DWORD dwWorldID,DWORD dwCountryID);
230 	// 检查是否能发起跨服国战
231 	virtual bool CheckCountryWorldWar(DWORD dwFromWorldID,DWORD dwFromCountryID,DWORD dwWorldID,DWORD dwCountryID);
231 	virtual bool CheckCountryWorldWar(DWORD dwFromWorldID,DWORD dwFromCountryID,DWORD dwWorldID,DWORD dwCountryID);
233 	/** 取得跨服国家边境连通信息
234 	@return  SCountryWorldLinkInfo * 边境连通信息
235 	*/
235 	*/
236 	virtual	SCountryWorldLinkInfo *	GetCountryWorldLinkInfo(DWORD dwWorldID,DWORD dwCountryID,DWORD dwType);
238 	/** 取得跨服国家边境连通信息
239 	@return  SCountryWorldLinkInfo * 边境连通信息
240 	*/
240 	*/
241 	virtual	SCountryWorldLinkInfo *	GetCountryWorldLinkInfoByID(DWORD dwID);
243 	/** 跨服边境连通信息变化,保存入数据库
244 	@param   DWORD dwID:	边境连通信息ID
245 	@return  bool 成功否
246 	*/
247 	virtual	bool OnWorldLinkInfoChanged(DWORD dwID);
249 	/** 加入跨服边境连通信息
250 	@return   bool 成功否
251 	*/
263 	//   取得列表当前指向的数据
264 	virtual SCountryWorldLinkInfo * Link_GetListData(void);
266 	// 取得跨服国家边境连通编号以(游戏世界ID,国家ID,类型)组合编号 为关键字
267 	virtual DWORD GetCountryWorldLinkKey(DWORD dwWorldID,DWORD dwCountryID,DWORD dwType);
269 	// 请求同步所有服务器数据
269 	// 请求同步所有服务器数据
270 	virtual bool UpdateAllServerData(void);
272 	// 检查所有跨服国战记录有效性
273 	virtual bool CheckAllBadWorldCountryWar(void);
274 	//////////////////////////TimerHandler///////////////////////////
295 	virtual void	OnReturn(int nCmdID, int nDBRetCode, char * pszDBRetDesc, int nQueueIndex, char * pOutData, int nOutLen);
297 public:
299 	/** 加入跨服国战信息
300 	@return
301 	*/
304 	// 是否保存
305 	bool			IsDataSaved();
307 	/** 场景服 发送给 国家社会服 请求社会服跨服国战数据消息
308 	@name  : 处理发上来的执行请求 
309 	@param endpointId : 发送过来的端ID
313 	*/
314 	void			OnBuildServerSelf(ulong endpointId, ulong actionId, SGameMsgHead* head,void* data, size_t len);
316 	/** 客户端 发送给 国家社会服 请求社会服跨服国战数据消息
317 	@name  : 处理发上来的执行请求 
318 	@param endpointId : 发送过来的端ID
322 	*/
323 	void			OnBuildClientSelf(ulong endpointId, ulong actionId, SGameMsgHead* head,void* data, size_t len);
325 	// 跨服 更新国战记录信息
326 	void			OnBridgeMsgUpdateWarInfo(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
326 	void			OnBridgeMsgUpdateWarInfo(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
327 	// 跨服 向公共服请求数据
328 	void			OnBridgeMsgRequestWarInfo(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
330 	/** 社会服务器发送场景服数据
351 	//////////////////////////////////////////////////////////////////////////
352 	/**
353 	@purpose          : 读出检查跨服国战信息
354 	@return		      : void
355 	*/
356 	void ReadCheckBadWorldWar();
358 	/**
359 	@purpose          : 查询跨服国战信息
360 	@param	 DB_Param_Read_WorldCountryWar param: 查询跨服国战信息  : 传入参数结构
361 	@return		      : void
362 	*/
363 	void ReadWorldWar(DB_Param_Read_WorldCountryWar &param);
365 	/**
366 	@purpose          : 添加或修改跨服国战信息
367 	@param	 DB_Param_Add_WorldCountryWar param: 添加或修改跨服国战信息 : 传入参数结构
368 	@return		      : void
369 	*/
370 	void AddWorldWar(DB_Param_Add_WorldCountryWar &param);
372 	/**
373 	@purpose          : 查询跨服国家边境连通信息
374 	@param	 DB_Param_Read_WorldCountryLink param: 查询跨服国家边境连通信息  : 传入参数结构
375 	@return		      : void
376 	*/
377 	void ReadWorldLink(DB_Param_Read_WorldCountryLink &param);
379 	/**
380 	@purpose          : 添加或修改跨服国家边境连通信息
381 	@param	 DB_Param_Add_WorldCountryLink param: 添加或修改跨服国家边境连通信息 : 传入参数结构
382 	@return		      : void
383 	*/
383 	*/
384 	void AddWorldLink(DB_Param_Add_WorldCountryLink &param);
386 	/** 数据库请求返回回调方法 GAMEDB_REQUEST_MAPRECOVER_READ   查询跨服国战信息
387 	@retval buffer 
388 	*/	
388 	*/	
389 	void OnDBReturn_ReadWorldWar(int nCmdID, int nDBRetCode, char * pszDBRetDesc, int nQueueIndex, char * pOutData, int nOutLen);
392 	/** 数据库请求返回回调方法 GAMEDB_REQUEST_MAPRECOVER_ADD  添加跨服国战信息
393 	@retval buffer 
394 	*/	
399 	*/	
400 	void OnDBReturn_SaveWorldWar(int nCmdID, int nDBRetCode, char * pszDBRetDesc, int nQueueIndex, char * pOutData, int nOutLen);
402 	/** 数据库请求返回回调方法 GAMEDB_REQUEST_WORLDCOUNTRY_LINK_READ   查询跨服国家边境连通信息
403 	@retval buffer 
404 	*/	
404 	*/	
405 	void OnDBReturn_ReadWorldLink(int nCmdID, int nDBRetCode, char * pszDBRetDesc, int nQueueIndex, char * pOutData, int nOutLen);
407 	/** 数据库请求返回回调方法 GAMEDB_REQUEST_WORLDCOUNTRY_LINK_ADD  添加跨服国家边境连通信息
408 	@retval buffer 
409 	*/	
420 	*/
421 	void OnDataChanged();
423 	// 检查国家在跨服国战中的参战类型
424 	DWORD CheckCountryWorldWarType(DWORD dwWorldID,DWORD dwCountryID,SCountryWorldWarInfo &node);
427 	//新DB接口
437 	// 检查数据库返回对接口类
438 	CDBCheckBadWorldWar m_DbCheckBadRet;
440 	// 跨服国家边境连通信息列表，以(游戏世界ID,国家ID,类型)组合编号 为关键字
441 	TMAP_CountryWorldLink m_mapWorldLink;
442 	// 列表当前指针
444 	// 是否列表结尾了
445 	bool	m_bEndList1;
447 	// 跨服国战对象列表
448 	TMAP_CountryWorldWar m_mapWorldWar;
448 	TMAP_CountryWorldWar m_mapWorldWar;
450 	// 新增的跨服国战对象临时列表
451 	TMAP_CountryWorldWar m_mapTempWorldWar;
452 	// 列表当前指针

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\CountryService\WorldWar.h 15 KB H 文件 2014/2/25 14:31:03 2018/10/23 19:46:35 2018/10/23 19:46:35 44
5 ** 日  期:	2011-03-26
6 ** 版  本:	1.0
7 ** 描  述:	跨服国战系统部件
8 ** 应  用:  	
9 	
23 #include "BridgeConnector/IBridgeConnector.h"
24 using namespace Bridge;
26 // 列表中的跨服国战成员信息数据结构
27 struct SCountryWorldWarInfoNode: public SCountryWorldWarInfo
28 {
39 	}
41 };
43 // 跨服国战列表，以ID 为关键字
44 typedef map<DWORD,SCountryWorldWarInfoNode> TMAP_CountryWorldWar;
44 typedef map<DWORD,SCountryWorldWarInfoNode> TMAP_CountryWorldWar;
46 // 跨服国家边境连通信息列表，以(游戏世界ID,国家ID,类型)组合编号 为关键字
47 typedef map<DWORD,SCountryWorldLinkInfo> TMAP_CountryWorldLink;
47 typedef map<DWORD,SCountryWorldLinkInfo> TMAP_CountryWorldLink;
49 // 跨服国战数据检查处理
50 class CDBCheckBadWorldWar:public IDBRetSink, public DBSVR::IDBMsgSink
51 {
72 	*/	
73 	virtual void	OnReturn(int nCmdID, int nDBRetCode, char * pszDBRetDesc, int nQueueIndex, char * pOutData, int nOutLen);
75 	/** 数据库请求返回回调方法 GAMEDB_REQUEST_MAPRECOVER_READ   读出检查跨服国战信息
76 	@retval buffer 
77 	*/	
86 	void OnDBRet_ReadCheckBadCountryWorldWar(DBSVR::TDBSvrMsg* pstMsg);
87 };
89 // 跨服国战系统部件
90 class CWorldWar: public IWorldWar, public TimerHandler,public IDBRetSink,
91 	public DBSVR::IDBMsgSink
94 	enum
95 	{
96 		ETimerEventID_DB_Read = 0,		// 查询跨服国战
97 	};
99 public:
165 	virtual	bool				OnStopServiceSaveData(void);
168 	/** 取得地图信息
169 	@param   DWORD dwID:	跨服国战ID
170 	@return  SCountryWorldWarInfo 
171 	*/
192 	virtual SCountryWorldWarInfo * GetListData(void);
194 	/** 设定状态 
195 	@param   DWORD dwID:	跨服国战ID
196 	@param   DWORD dwState :状态 EMCountryWorldWarState
197 	@return  bool 成功否
198 	*/
199 	virtual	bool SetState(DWORD dwID,DWORD dwState);
201 	/** 跨服国战变化
202 	@param   DWORD dwID:	跨服国战ID
203 	@return  bool 成功否
204 	*/
204 	*/
205 	virtual	bool OnWorldWarInfoChanged(DWORD dwID);
207 	/** 加入跨服国战信息
208 	@param   DWORD dwStartTime			: 开始时间
209 	@param   DWORD dwFightTime			: 开战时间
209 	@param   DWORD dwFightTime			: 开战时间
210 	@param   DWORD dwEndTime			: 结束时间
211 	@param   DWORD dwType;				: 跨服国战类型 EMWarItemType
212 	@param   DWORD dwWarSceneID			: 战争场情景ID
213 	@param   DWORD dwAttackWorldID;		: 进攻国家所在游戏世界ID
218 	*/
219 	virtual bool AddWorldCountryWar(DWORD dwStartTime,DWORD dwFightTime,DWORD dwEndTime,DWORD dwType,DWORD dwWarSceneID,DWORD dwAttackWorldID,DWORD dwAttackCountryID,DWORD dwDefendWorldID,DWORD dwDefendCountryID);
221 	/** 加入跨服国战盟国信息
222 	@param   DWORD dwMyWorldID;		: 本国家所在游戏世界ID
223 	@param   DWORD dwMyCountryID;	: 本国家ID
227 	*/
228 	virtual bool AddWarFriend(DWORD dwMyWorldID,DWORD dwMyCountryID,DWORD dwWorldID,DWORD dwCountryID);
230 	// 检查是否能发起跨服国战
231 	virtual bool CheckCountryWorldWar(DWORD dwFromWorldID,DWORD dwFromCountryID,DWORD dwWorldID,DWORD dwCountryID);
231 	virtual bool CheckCountryWorldWar(DWORD dwFromWorldID,DWORD dwFromCountryID,DWORD dwWorldID,DWORD dwCountryID);
233 	/** 取得跨服国家边境连通信息
234 	@return  SCountryWorldLinkInfo * 边境连通信息
235 	*/
235 	*/
236 	virtual	SCountryWorldLinkInfo *	GetCountryWorldLinkInfo(DWORD dwWorldID,DWORD dwCountryID,DWORD dwType);
238 	/** 取得跨服国家边境连通信息
239 	@return  SCountryWorldLinkInfo * 边境连通信息
240 	*/
240 	*/
241 	virtual	SCountryWorldLinkInfo *	GetCountryWorldLinkInfoByID(DWORD dwID);
243 	/** 跨服边境连通信息变化,保存入数据库
244 	@param   DWORD dwID:	边境连通信息ID
245 	@return  bool 成功否
246 	*/
247 	virtual	bool OnWorldLinkInfoChanged(DWORD dwID);
249 	/** 加入跨服边境连通信息
250 	@return   bool 成功否
251 	*/
263 	//   取得列表当前指向的数据
264 	virtual SCountryWorldLinkInfo * Link_GetListData(void);
266 	// 取得跨服国家边境连通编号以(游戏世界ID,国家ID,类型)组合编号 为关键字
267 	virtual DWORD GetCountryWorldLinkKey(DWORD dwWorldID,DWORD dwCountryID,DWORD dwType);
269 	// 请求同步所有服务器数据
269 	// 请求同步所有服务器数据
270 	virtual bool UpdateAllServerData(void);
272 	// 检查所有跨服国战记录有效性
273 	virtual bool CheckAllBadWorldCountryWar(void);
274 	//////////////////////////TimerHandler///////////////////////////
295 	virtual void	OnReturn(int nCmdID, int nDBRetCode, char * pszDBRetDesc, int nQueueIndex, char * pOutData, int nOutLen);
297 public:
299 	/** 加入跨服国战信息
300 	@return
301 	*/
304 	// 是否保存
305 	bool			IsDataSaved();
307 	/** 场景服 发送给 国家社会服 请求社会服跨服国战数据消息
308 	@name  : 处理发上来的执行请求 
309 	@param endpointId : 发送过来的端ID
313 	*/
314 	void			OnBuildServerSelf(ulong endpointId, ulong actionId, SGameMsgHead* head,void* data, size_t len);
316 	/** 客户端 发送给 国家社会服 请求社会服跨服国战数据消息
317 	@name  : 处理发上来的执行请求 
318 	@param endpointId : 发送过来的端ID
322 	*/
323 	void			OnBuildClientSelf(ulong endpointId, ulong actionId, SGameMsgHead* head,void* data, size_t len);
325 	// 跨服 更新国战记录信息
326 	void			OnBridgeMsgUpdateWarInfo(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
326 	void			OnBridgeMsgUpdateWarInfo(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
327 	// 跨服 向公共服请求数据
328 	void			OnBridgeMsgRequestWarInfo(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
330 	/** 社会服务器发送场景服数据
351 	//////////////////////////////////////////////////////////////////////////
352 	/**
353 	@purpose          : 读出检查跨服国战信息
354 	@return		      : void
355 	*/
356 	void ReadCheckBadWorldWar();
358 	/**
359 	@purpose          : 查询跨服国战信息
360 	@param	 DB_Param_Read_WorldCountryWar param: 查询跨服国战信息  : 传入参数结构
361 	@return		      : void
362 	*/
363 	void ReadWorldWar(DB_Param_Read_WorldCountryWar &param);
365 	/**
366 	@purpose          : 添加或修改跨服国战信息
367 	@param	 DB_Param_Add_WorldCountryWar param: 添加或修改跨服国战信息 : 传入参数结构
368 	@return		      : void
369 	*/
370 	void AddWorldWar(DB_Param_Add_WorldCountryWar &param);
372 	/**
373 	@purpose          : 查询跨服国家边境连通信息
374 	@param	 DB_Param_Read_WorldCountryLink param: 查询跨服国家边境连通信息  : 传入参数结构
375 	@return		      : void
376 	*/
377 	void ReadWorldLink(DB_Param_Read_WorldCountryLink &param);
379 	/**
380 	@purpose          : 添加或修改跨服国家边境连通信息
381 	@param	 DB_Param_Add_WorldCountryLink param: 添加或修改跨服国家边境连通信息 : 传入参数结构
382 	@return		      : void
383 	*/
383 	*/
384 	void AddWorldLink(DB_Param_Add_WorldCountryLink &param);
386 	/** 数据库请求返回回调方法 GAMEDB_REQUEST_MAPRECOVER_READ   查询跨服国战信息
387 	@retval buffer 
388 	*/	
388 	*/	
389 	void OnDBReturn_ReadWorldWar(int nCmdID, int nDBRetCode, char * pszDBRetDesc, int nQueueIndex, char * pOutData, int nOutLen);
392 	/** 数据库请求返回回调方法 GAMEDB_REQUEST_MAPRECOVER_ADD  添加跨服国战信息
393 	@retval buffer 
394 	*/	
399 	*/	
400 	void OnDBReturn_SaveWorldWar(int nCmdID, int nDBRetCode, char * pszDBRetDesc, int nQueueIndex, char * pOutData, int nOutLen);
402 	/** 数据库请求返回回调方法 GAMEDB_REQUEST_WORLDCOUNTRY_LINK_READ   查询跨服国家边境连通信息
403 	@retval buffer 
404 	*/	
404 	*/	
405 	void OnDBReturn_ReadWorldLink(int nCmdID, int nDBRetCode, char * pszDBRetDesc, int nQueueIndex, char * pOutData, int nOutLen);
407 	/** 数据库请求返回回调方法 GAMEDB_REQUEST_WORLDCOUNTRY_LINK_ADD  添加跨服国家边境连通信息
408 	@retval buffer 
409 	*/	
420 	*/
421 	void OnDataChanged();
423 	// 检查国家在跨服国战中的参战类型
424 	DWORD CheckCountryWorldWarType(DWORD dwWorldID,DWORD dwCountryID,SCountryWorldWarInfo &node);
427 	//新DB接口
437 	// 检查数据库返回对接口类
438 	CDBCheckBadWorldWar m_DbCheckBadRet;
440 	// 跨服国家边境连通信息列表，以(游戏世界ID,国家ID,类型)组合编号 为关键字
441 	TMAP_CountryWorldLink m_mapWorldLink;
442 	// 列表当前指针
444 	// 是否列表结尾了
445 	bool	m_bEndList1;
447 	// 跨服国战对象列表
448 	TMAP_CountryWorldWar m_mapWorldWar;
448 	TMAP_CountryWorldWar m_mapWorldWar;
450 	// 新增的跨服国战对象临时列表
451 	TMAP_CountryWorldWar m_mapTempWorldWar;
452 	// 列表当前指针

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\MatchService\WarService.h 17 KB H 文件 2014/2/25 0:23:14 2018/10/23 20:09:05 2018/10/23 20:09:05 40
107 struct SMathcWorldCountryLinkNode
108 {
109 	DWORD dwID;							// 跨服国家连通信息ID，(游戏世界ID,国家ID,类型)组合编号
110 	DWORD dwWorldID;					// 国家所在游戏世界ID
111 	DWORD dwCountryID;					// 国家ID
110 	DWORD dwWorldID;					// 国家所在游戏世界ID
111 	DWORD dwCountryID;					// 国家ID
112 	DWORD dwType;						// 跨服国家边境类型
113 	// 国家基本信息
114 	DWORD nLevel;						// 国家发展等级
147 struct SMatchWorldCountryLinkResultInfo
148 {
149 	DWORD dwID;					// 撮合的跨服国家连通信息ID，(游戏世界ID,国家ID,类型)组合编号
150 	DWORD dwWorldID;			// 撮合的国家所在游戏世界ID
151 	DWORD dwCountryID;			// 撮合的国家ID
150 	DWORD dwWorldID;			// 撮合的国家所在游戏世界ID
151 	DWORD dwCountryID;			// 撮合的国家ID
152 	DWORD dwType;				// 撮合的跨服国家边境类型
153 	bool  bMatchOK;				// 匹配结果
154 	DWORD dwScore;				// 匹配得分
178 {
179 	DWORD dwWorldAttack;		// 国家综合攻击力
180 	DWORD dwID;					// 跨服国家连通信息ID，(游戏世界ID,国家ID,类型)组合编号
182 	SMatchWorldCountryLinkOrderNode(void)
183 	{
202 // 服务器领地Boss开战场信息列表,以序号为关键字
203 typedef map<DWORD,SCastleBossWarTaskInfo> TMAP_CastleBossWarTaskInfoList;
205 // 跨服边境连通列表，以ID 为关键字
206 typedef map<DWORD,SCountryWorldWarInfo> TMAP_CountryWorldBorderLinkTask;
206 typedef map<DWORD,SCountryWorldWarInfo> TMAP_CountryWorldBorderLinkTask;
208 // 跨服国家边境连通信息列表，以(游戏世界ID,国家ID,类型)组合编号 为关键字
209 typedef map<DWORD,SCountryWorldLinkInfo> TMAP_CountryWorldBorderLink;
211 // 国家与国家连接撮合信息列表，以(游戏世界ID,国家ID,类型)组合编号 为关键字
211 // 国家与国家连接撮合信息列表，以(游戏世界ID,国家ID,类型)组合编号 为关键字
212 typedef map<DWORD,SMathcWorldCountryLinkNode> TMAP_MathcWorldCountryLinkList;
214 // 跨服国战数据列表，以ID 为关键字
215 typedef map<DWORD,SCheckCountryWorldWarDataInfo> TMAP_CheckCountryWarDataInfoList;
218 // 跨区战场系统
227 		ETimerEventID_DoBossWarTask,		// 领地Boss处理定时器
228 		ETimerEventID_DoCheckCountryWar,	// 本区国战防重处理定时器
229 		ETimerEventID_DoCheckBadCountryWar,	// 检测跨服国战记录任务处理定时器
230 		ETimerEventID_DoCheckBridge,		// 检测连上桥连接处理定时器
231 		ETimerEventID_DoCheckCountryUniqueness,		// 检测参与国战国家的唯一性
297 	*/
298 	void OnUserLogin(UserInfo& info, int nMode);
300 	// 更新跨服国战活动追踪信息,dwWarID=0为发全部战场追踪信息
301 	bool OnUpdateWorldWarTracker(DWORD dwWarID=0);
303 	// 国战开战存数据库事件
303 	// 国战开战存数据库事件
304 	bool OnCountryWarSaveDBEvent(WORD wEventID, BYTE bSrcType, DWORD dwSrcID, LPCSTR pszContext, int nLen);
306 	/** 加入跨服Boss战发起信息
307 	@param   LPSTR data : 上下文数据,为SCastleBossWarAddContext
308 	@param   size_t len	: 上下文数据长度
313 	// 检查新一天时周日重连所有国家
314 	virtual void CheckReLinkAllWorldCountry(bool bCheckWeekDay=true);
316 	// 检查跨服连接和跨服国战信息是否正确,有问题报警
317 	virtual void CheckWorldAlert();
317 	virtual void CheckWorldAlert();
319 	// 检查跨服国战同天同国是否重复
320 	virtual void CheckUniquenessCountryWar();
322 	// 计算国家与国家连接匹配结果信息
330 	void HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
332 	virtual bool IsCountryWarFight(UserInfo* dwMyInfo,UserInfo* dwTrageInfo);
334 	// 新建跨服国战
335 	virtual bool NewCountryWorldWar(bool bIsPublic,SCountryWorldWarInfo &node);
335 	virtual bool NewCountryWorldWar(bool bIsPublic,SCountryWorldWarInfo &node);
336 	// 新建跨服边境
337 	virtual bool NewCountryWorldBorderWar(bool bIsPublic,SCountryWorldWarInfo &node);
339 	//////////////////////////////////////////////////////////////////////////
340 	// 额外功能处理
341 	
342 	/* 强制让本区的跨服国战记录失效，用于处理公共区异常导致本区缓存的数据还运行的问题，不让客户端显示活动追踪及DIDA
343 	@Param	: DWORD dwDBID		跨服国战数据库记录ID
344 	*/
345 	virtual bool AbandLocalCountryWorldWarInfo(DWORD dwDBID, DWORD dwState=WarState_None, DWORD dwRunStep=CountryWarRunStep_None);
354 	// 所有公共数据
357 private:
358 	// 所有客户端同步跨服战场活动追踪信息,dwWarID=0为发全部战场追踪信息
359 	bool SendClientWorldWarTracker(UserInfo& userInfo,DWORD dwWarID=0,bool bRemoveTracker=false);
359 	bool SendClientWorldWarTracker(UserInfo& userInfo,DWORD dwWarID=0,bool bRemoveTracker=false);
360 	// 客户端同步跨服国战活动追踪信息
361 	bool SendClientCoutryWarTracker(UserInfo& userInfo);
361 	bool SendClientCoutryWarTracker(UserInfo& userInfo);
362 	// 客户端同步跨服领地BOSS战活动追踪信息
363 	bool SendClientCastleBossWarTracker(UserInfo& userInfo);
363 	bool SendClientCastleBossWarTracker(UserInfo& userInfo);
364 	// 客户端同步跨服跨服边境战活动追踪信息
365 	bool SendClientBorderWarTracker(UserInfo& userInfo);
367 	// 主任务处理
367 	// 主任务处理
368 	void DoTask();
369 	// 跨服边境主任务处理
370 	void DoBorderWarTask();
371 	// 领地Boss战主任务处理
375 	// 本区国战防重处理
376 	void DoCheckCountryWar();
377 	// 检测跨服国战记录任务处理定时器
378 	void DoCheckBadCountryWar();
379 	// 检测连上桥连接处理定时器
379 	// 检测连上桥连接处理定时器
380 	void DoCheckBridge();
382 	// 玩家请求发起跨服国战 DWORD dwFlag 操作标识 0.开战,1.结盟
383 	void OnMsgRequestAddCountryWar(DWORD dwClientID,DWORD dwWorldID,DWORD dwCountryID,DWORD dwFlag);
383 	void OnMsgRequestAddCountryWar(DWORD dwClientID,DWORD dwWorldID,DWORD dwCountryID,DWORD dwFlag);
384 	// 请求检查跨服国战对方是否本区有国战
385 	void OnMsgRequestCheckCountryWar(SMsgWarRequestAddCountryWar_O &node);
385 	void OnMsgRequestCheckCountryWar(SMsgWarRequestAddCountryWar_O &node);
386 	// 请求检查跨服国战对方是否本区有国战结果
387 	void OnMsgRequestCheckCountryWarResult(SMsgWarRequestAddCountryWar_O &node,DWORD dwResultFlag);
387 	void OnMsgRequestCheckCountryWarResult(SMsgWarRequestAddCountryWar_O &node,DWORD dwResultFlag);
388 	// 玩家请求发起跨服国战 DWORD dwFlag 操作标识 0.开战,1.结盟
389 	void RequestAddCountryWar(DWORD dwPlayerID,DWORD dwActorWorldID,DWORD dwFromWorldID,DWORD dwFromCountryID,DWORD dwWorldID,DWORD dwCountryID,DWORD dwFlag);
389 	void RequestAddCountryWar(DWORD dwPlayerID,DWORD dwActorWorldID,DWORD dwFromWorldID,DWORD dwFromCountryID,DWORD dwWorldID,DWORD dwCountryID,DWORD dwFlag);
390 	// 检查是否能发起跨服国战 DWORD dwFlag 操作标识 0.开战,1.结盟
391 	bool CheckCountryWorldWar(bool IsLocal,DWORD dwPlayerID,DWORD dwActorWorldID,DWORD dwFromWorldID,DWORD dwFromCountryID,DWORD dwWorldID,DWORD dwCountryID,DWORD dwFlag);
391 	bool CheckCountryWorldWar(bool IsLocal,DWORD dwPlayerID,DWORD dwActorWorldID,DWORD dwFromWorldID,DWORD dwFromCountryID,DWORD dwWorldID,DWORD dwCountryID,DWORD dwFlag);
392 	// 检查国家在跨服国战中的参战类型
393 	DWORD CheckCountryWorldWarType(DWORD dwWorldID,DWORD dwCountryID,SCountryWorldWarInfo &node);
394 	// 跨区国战召集
397 	// 加入服务器开战场信息
398 	void AddServerOpenWarInfo(DWORD dwServerSerialID,DWORD dwWarType=0);
400 	// 发送参战跨服国战请求结果给本区社会服
401 	bool OnBridgeRequestWarResultToLocal(DWORD dwWorldID, DWORD dwCountryID, DWORD dwFlag);
401 	bool OnBridgeRequestWarResultToLocal(DWORD dwWorldID, DWORD dwCountryID, DWORD dwFlag);
403 	// 跨服国战延长国战任期
404 	bool OnAddCountryWarKingTimeout(DWORD dwWorldID, DWORD dwCountryID);
404 	bool OnAddCountryWarKingTimeout(DWORD dwWorldID, DWORD dwCountryID);
406 	// 新建跨服领地Boss战
407 	bool NewCastleBossWar(bool bIsPublic,SCastleBossWarTaskInfo &node);
407 	bool NewCastleBossWar(bool bIsPublic,SCastleBossWarTaskInfo &node);
409 	// 取得跨服国家边境连通编号以(游戏世界ID+国家ID+类型)组数编号 为关键字
410 	DWORD GetCountryWorldLinkKey(DWORD dwWorldID,DWORD dwCountryID,DWORD dwType);
412 	// 发送本次新国战信息给本区社会服
416 	void OnBridgeMsgExistCountryWarData(DWORD dwWarID, DWORD dwClashCampID);
419 	// 增加本区国战占用电脑信息
420 	//dwWarType:国战类型；dwComputerID:计算机id; dwValue:过期时间，0表示函数内部计算； nType:0表示跨服，1表示本区
421 	void AddWarComputerInfo(DWORD dwWarType, DWORD dwComputerID, DWORD dwValue=0, int nType=0);
422 	
445 	// 最大领地Boss开战场撮合序号
446 	DWORD m_dwBossWarMatchMaxID;
448 	// 跨服边境连通列表，以ID 为关键字
449 	TMAP_CountryWorldBorderLinkTask m_mapWorldBorderLinkTaskList;
449 	TMAP_CountryWorldBorderLinkTask m_mapWorldBorderLinkTaskList;
451 	// 最大跨服边境连通序号
452 	DWORD m_dwWorldBorderLinkMaxID;
452 	DWORD m_dwWorldBorderLinkMaxID;
454 	// 最近创建跨服边境连通时间，用来冷却
455 	DWORD m_dwLastAddWorldBorderWarTimes;
455 	DWORD m_dwLastAddWorldBorderWarTimes;
457 	// 跨服国战数据列表，以ID 为关键字
458 	TMAP_CheckCountryWarDataInfoList m_mapCheckCountryWarDataInfoList;
460 	//战场用电脑信息列表，以战场类型为关键字，计算机ID为值

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\MatchService\WarService.h 17 KB H 文件 2014/2/25 14:31:44 2018/10/23 19:46:42 2018/10/23 19:46:42 40
107 struct SMathcWorldCountryLinkNode
108 {
109 	DWORD dwID;							// 跨服国家连通信息ID，(游戏世界ID,国家ID,类型)组合编号
110 	DWORD dwWorldID;					// 国家所在游戏世界ID
111 	DWORD dwCountryID;					// 国家ID
110 	DWORD dwWorldID;					// 国家所在游戏世界ID
111 	DWORD dwCountryID;					// 国家ID
112 	DWORD dwType;						// 跨服国家边境类型
113 	// 国家基本信息
114 	DWORD nLevel;						// 国家发展等级
147 struct SMatchWorldCountryLinkResultInfo
148 {
149 	DWORD dwID;					// 撮合的跨服国家连通信息ID，(游戏世界ID,国家ID,类型)组合编号
150 	DWORD dwWorldID;			// 撮合的国家所在游戏世界ID
151 	DWORD dwCountryID;			// 撮合的国家ID
150 	DWORD dwWorldID;			// 撮合的国家所在游戏世界ID
151 	DWORD dwCountryID;			// 撮合的国家ID
152 	DWORD dwType;				// 撮合的跨服国家边境类型
153 	bool  bMatchOK;				// 匹配结果
154 	DWORD dwScore;				// 匹配得分
178 {
179 	DWORD dwWorldAttack;		// 国家综合攻击力
180 	DWORD dwID;					// 跨服国家连通信息ID，(游戏世界ID,国家ID,类型)组合编号
182 	SMatchWorldCountryLinkOrderNode(void)
183 	{
202 // 服务器领地Boss开战场信息列表,以序号为关键字
203 typedef map<DWORD,SCastleBossWarTaskInfo> TMAP_CastleBossWarTaskInfoList;
205 // 跨服边境连通列表，以ID 为关键字
206 typedef map<DWORD,SCountryWorldWarInfo> TMAP_CountryWorldBorderLinkTask;
206 typedef map<DWORD,SCountryWorldWarInfo> TMAP_CountryWorldBorderLinkTask;
208 // 跨服国家边境连通信息列表，以(游戏世界ID,国家ID,类型)组合编号 为关键字
209 typedef map<DWORD,SCountryWorldLinkInfo> TMAP_CountryWorldBorderLink;
211 // 国家与国家连接撮合信息列表，以(游戏世界ID,国家ID,类型)组合编号 为关键字
211 // 国家与国家连接撮合信息列表，以(游戏世界ID,国家ID,类型)组合编号 为关键字
212 typedef map<DWORD,SMathcWorldCountryLinkNode> TMAP_MathcWorldCountryLinkList;
214 // 跨服国战数据列表，以ID 为关键字
215 typedef map<DWORD,SCheckCountryWorldWarDataInfo> TMAP_CheckCountryWarDataInfoList;
218 // 跨区战场系统
227 		ETimerEventID_DoBossWarTask,		// 领地Boss处理定时器
228 		ETimerEventID_DoCheckCountryWar,	// 本区国战防重处理定时器
229 		ETimerEventID_DoCheckBadCountryWar,	// 检测跨服国战记录任务处理定时器
230 		ETimerEventID_DoCheckBridge,		// 检测连上桥连接处理定时器
231 		ETimerEventID_DoCheckCountryUniqueness,		// 检测参与国战国家的唯一性
297 	*/
298 	void OnUserLogin(UserInfo& info, int nMode);
300 	// 更新跨服国战活动追踪信息,dwWarID=0为发全部战场追踪信息
301 	bool OnUpdateWorldWarTracker(DWORD dwWarID=0);
303 	// 国战开战存数据库事件
303 	// 国战开战存数据库事件
304 	bool OnCountryWarSaveDBEvent(WORD wEventID, BYTE bSrcType, DWORD dwSrcID, LPCSTR pszContext, int nLen);
306 	/** 加入跨服Boss战发起信息
307 	@param   LPSTR data : 上下文数据,为SCastleBossWarAddContext
308 	@param   size_t len	: 上下文数据长度
313 	// 检查新一天时周日重连所有国家
314 	virtual void CheckReLinkAllWorldCountry(bool bCheckWeekDay=true);
316 	// 检查跨服连接和跨服国战信息是否正确,有问题报警
317 	virtual void CheckWorldAlert();
317 	virtual void CheckWorldAlert();
319 	// 检查跨服国战同天同国是否重复
320 	virtual void CheckUniquenessCountryWar();
322 	// 计算国家与国家连接匹配结果信息
330 	void HandleBridgeMessage(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
332 	virtual bool IsCountryWarFight(UserInfo* dwMyInfo,UserInfo* dwTrageInfo);
334 	// 新建跨服国战
335 	virtual bool NewCountryWorldWar(bool bIsPublic,SCountryWorldWarInfo &node);
335 	virtual bool NewCountryWorldWar(bool bIsPublic,SCountryWorldWarInfo &node);
336 	// 新建跨服边境
337 	virtual bool NewCountryWorldBorderWar(bool bIsPublic,SCountryWorldWarInfo &node);
339 	//////////////////////////////////////////////////////////////////////////
340 	// 额外功能处理
341 	
342 	/* 强制让本区的跨服国战记录失效，用于处理公共区异常导致本区缓存的数据还运行的问题，不让客户端显示活动追踪及DIDA
343 	@Param	: DWORD dwDBID		跨服国战数据库记录ID
344 	*/
345 	virtual bool AbandLocalCountryWorldWarInfo(DWORD dwDBID, DWORD dwState=WarState_None, DWORD dwRunStep=CountryWarRunStep_None);
354 	// 所有公共数据
357 private:
358 	// 所有客户端同步跨服战场活动追踪信息,dwWarID=0为发全部战场追踪信息
359 	bool SendClientWorldWarTracker(UserInfo& userInfo,DWORD dwWarID=0,bool bRemoveTracker=false);
359 	bool SendClientWorldWarTracker(UserInfo& userInfo,DWORD dwWarID=0,bool bRemoveTracker=false);
360 	// 客户端同步跨服国战活动追踪信息
361 	bool SendClientCoutryWarTracker(UserInfo& userInfo);
361 	bool SendClientCoutryWarTracker(UserInfo& userInfo);
362 	// 客户端同步跨服领地BOSS战活动追踪信息
363 	bool SendClientCastleBossWarTracker(UserInfo& userInfo);
363 	bool SendClientCastleBossWarTracker(UserInfo& userInfo);
364 	// 客户端同步跨服跨服边境战活动追踪信息
365 	bool SendClientBorderWarTracker(UserInfo& userInfo);
367 	// 主任务处理
367 	// 主任务处理
368 	void DoTask();
369 	// 跨服边境主任务处理
370 	void DoBorderWarTask();
371 	// 领地Boss战主任务处理
375 	// 本区国战防重处理
376 	void DoCheckCountryWar();
377 	// 检测跨服国战记录任务处理定时器
378 	void DoCheckBadCountryWar();
379 	// 检测连上桥连接处理定时器
379 	// 检测连上桥连接处理定时器
380 	void DoCheckBridge();
382 	// 玩家请求发起跨服国战 DWORD dwFlag 操作标识 0.开战,1.结盟
383 	void OnMsgRequestAddCountryWar(DWORD dwClientID,DWORD dwWorldID,DWORD dwCountryID,DWORD dwFlag);
383 	void OnMsgRequestAddCountryWar(DWORD dwClientID,DWORD dwWorldID,DWORD dwCountryID,DWORD dwFlag);
384 	// 请求检查跨服国战对方是否本区有国战
385 	void OnMsgRequestCheckCountryWar(SMsgWarRequestAddCountryWar_O &node);
385 	void OnMsgRequestCheckCountryWar(SMsgWarRequestAddCountryWar_O &node);
386 	// 请求检查跨服国战对方是否本区有国战结果
387 	void OnMsgRequestCheckCountryWarResult(SMsgWarRequestAddCountryWar_O &node,DWORD dwResultFlag);
387 	void OnMsgRequestCheckCountryWarResult(SMsgWarRequestAddCountryWar_O &node,DWORD dwResultFlag);
388 	// 玩家请求发起跨服国战 DWORD dwFlag 操作标识 0.开战,1.结盟
389 	void RequestAddCountryWar(DWORD dwPlayerID,DWORD dwActorWorldID,DWORD dwFromWorldID,DWORD dwFromCountryID,DWORD dwWorldID,DWORD dwCountryID,DWORD dwFlag);
389 	void RequestAddCountryWar(DWORD dwPlayerID,DWORD dwActorWorldID,DWORD dwFromWorldID,DWORD dwFromCountryID,DWORD dwWorldID,DWORD dwCountryID,DWORD dwFlag);
390 	// 检查是否能发起跨服国战 DWORD dwFlag 操作标识 0.开战,1.结盟
391 	bool CheckCountryWorldWar(bool IsLocal,DWORD dwPlayerID,DWORD dwActorWorldID,DWORD dwFromWorldID,DWORD dwFromCountryID,DWORD dwWorldID,DWORD dwCountryID,DWORD dwFlag);
391 	bool CheckCountryWorldWar(bool IsLocal,DWORD dwPlayerID,DWORD dwActorWorldID,DWORD dwFromWorldID,DWORD dwFromCountryID,DWORD dwWorldID,DWORD dwCountryID,DWORD dwFlag);
392 	// 检查国家在跨服国战中的参战类型
393 	DWORD CheckCountryWorldWarType(DWORD dwWorldID,DWORD dwCountryID,SCountryWorldWarInfo &node);
394 	// 跨区国战召集
397 	// 加入服务器开战场信息
398 	void AddServerOpenWarInfo(DWORD dwServerSerialID,DWORD dwWarType=0);
400 	// 发送参战跨服国战请求结果给本区社会服
401 	bool OnBridgeRequestWarResultToLocal(DWORD dwWorldID, DWORD dwCountryID, DWORD dwFlag);
401 	bool OnBridgeRequestWarResultToLocal(DWORD dwWorldID, DWORD dwCountryID, DWORD dwFlag);
403 	// 跨服国战延长国战任期
404 	bool OnAddCountryWarKingTimeout(DWORD dwWorldID, DWORD dwCountryID);
404 	bool OnAddCountryWarKingTimeout(DWORD dwWorldID, DWORD dwCountryID);
406 	// 新建跨服领地Boss战
407 	bool NewCastleBossWar(bool bIsPublic,SCastleBossWarTaskInfo &node);
407 	bool NewCastleBossWar(bool bIsPublic,SCastleBossWarTaskInfo &node);
409 	// 取得跨服国家边境连通编号以(游戏世界ID+国家ID+类型)组数编号 为关键字
410 	DWORD GetCountryWorldLinkKey(DWORD dwWorldID,DWORD dwCountryID,DWORD dwType);
412 	// 发送本次新国战信息给本区社会服
416 	void OnBridgeMsgExistCountryWarData(DWORD dwWarID, DWORD dwClashCampID);
419 	// 增加本区国战占用电脑信息
420 	//dwWarType:国战类型；dwComputerID:计算机id; dwValue:过期时间，0表示函数内部计算； nType:0表示跨服，1表示本区
421 	void AddWarComputerInfo(DWORD dwWarType, DWORD dwComputerID, DWORD dwValue=0, int nType=0);
422 	
445 	// 最大领地Boss开战场撮合序号
446 	DWORD m_dwBossWarMatchMaxID;
448 	// 跨服边境连通列表，以ID 为关键字
449 	TMAP_CountryWorldBorderLinkTask m_mapWorldBorderLinkTaskList;
449 	TMAP_CountryWorldBorderLinkTask m_mapWorldBorderLinkTaskList;
451 	// 最大跨服边境连通序号
452 	DWORD m_dwWorldBorderLinkMaxID;
452 	DWORD m_dwWorldBorderLinkMaxID;
454 	// 最近创建跨服边境连通时间，用来冷却
455 	DWORD m_dwLastAddWorldBorderWarTimes;
455 	DWORD m_dwLastAddWorldBorderWarTimes;
457 	// 跨服国战数据列表，以ID 为关键字
458 	TMAP_CheckCountryWarDataInfoList m_mapCheckCountryWarDataInfoList;
460 	//战场用电脑信息列表，以战场类型为关键字，计算机ID为值

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\WarServer.h 9 KB H 文件 2014/2/25 0:09:08 2018/10/23 20:06:25 2018/10/23 20:06:25 10
29 // 帮会战传送至游戏区所有场景数据结构信息列表,以房间号为键值
30 typedef map<DWORD,SWorldClanBossWarZoneInfo> TMAP_ClanWarZoneInfoList;
32 // 跨服边境战传送至游戏区所有场景数据结构信息列表,以房间号为键值
33 typedef map<DWORD,SCountryBorderWarZoneInfo> TMAP_BorderWarZoneInfoList;
36 // 战场管理类
136 	*/
137 	virtual const SWorldClanBossWarZoneInfo * GetBossZoneInfoByRoomID(DWORD dwRoomID);
139 	/** 是否为指定跨服帮会BOSS战场中的参战帮会
140 	@param   DWORD dwWorldID					: 游戏世界ID
141 	@param   DWORD dwCountryID					: 国家ID
145 	*/
146 	virtual bool IsInWorldClanBossWar(DWORD dwWorldID,DWORD dwCountryID, DWORD dwClanID, DWORD dwRoomID);
148 	/** 取得指定跨服帮会BOSS战场中的参战帮会信息
149 	@param   DWORD dwWorldID					: 游戏世界ID
150 	@param   DWORD dwCountryID					: 国家ID
199 	bool RequestAddHistory(DWORD dwWorldID, DWORD dwCountryID,int nType,int nLevel,char* szTitle,char* szHistory);
200 	
201 	// 检查国家在跨服国战中的参战类型
202 	DWORD CheckCountryWorldWarType(DWORD dwWorldID,DWORD dwCountryID,SCountryWarZoneInfo &node);
202 	DWORD CheckCountryWorldWarType(DWORD dwWorldID,DWORD dwCountryID,SCountryWarZoneInfo &node);
204 	/**  检查帮会是否进参与跨服帮会BOSS战
205 	@param   DWORD dwWorldID					: 游戏世界ID
206 	@param   DWORD dwCountryID					: 国家ID
210 	*/
211 	bool CheckJoinWorldClanBossWar(DWORD dwWorldID,DWORD dwCountryID, DWORD dwClanID, SWorldClanBossWarZoneInfo &node);
213 	/**  检查是否进参与跨服边境战
214 	@param   DWORD dwWorldID					: 游戏世界ID
215 	@param   DWORD dwCountryID					: 国家ID
220 	
221 public:
223 	/**  跨服国战状态变化
224 	@param void * pWar :争场ID
225 	@param DWORD dwRunStep :状态
234 	// 发加入国战战场数据到客户端 
235 	bool SendJoinWarDataToClient(IPerson * pPerson,DWORD dwRoomID=0, bool bCheckStep=false);
237 	// 发加入跨服帮会BOSS战数据到客户端 
238 	bool SendJoinClanBossWarDataToClient(IPerson * pPerson,DWORD dwRoomID=0, bool bCheckStep=false);
238 	bool SendJoinClanBossWarDataToClient(IPerson * pPerson,DWORD dwRoomID=0, bool bCheckStep=false);
240 	// 发加入跨服边境战数据到客户端 
241 	bool SendJoinBorderWarDataToClient(IPerson * pPerson,DWORD dwRoomID=0, bool bCheckStep=false);
243 private:
256 	// 是否列表结尾了
257 	bool										m_bBossEndList;
259 	// 跨服边境战传送至游戏区所有场景数据结构信息列表,以房间号为键值
260 	TMAP_BorderWarZoneInfoList					m_mapBorderWarZoneInfoList;
261 	// 列表当前指针

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\WarServer.h 9 KB H 文件 2014/2/25 14:27:19 2018/10/23 19:45:15 2018/10/23 19:45:15 10
29 // 帮会战传送至游戏区所有场景数据结构信息列表,以房间号为键值
30 typedef map<DWORD,SWorldClanBossWarZoneInfo> TMAP_ClanWarZoneInfoList;
32 // 跨服边境战传送至游戏区所有场景数据结构信息列表,以房间号为键值
33 typedef map<DWORD,SCountryBorderWarZoneInfo> TMAP_BorderWarZoneInfoList;
36 // 战场管理类
136 	*/
137 	virtual const SWorldClanBossWarZoneInfo * GetBossZoneInfoByRoomID(DWORD dwRoomID);
139 	/** 是否为指定跨服帮会BOSS战场中的参战帮会
140 	@param   DWORD dwWorldID					: 游戏世界ID
141 	@param   DWORD dwCountryID					: 国家ID
145 	*/
146 	virtual bool IsInWorldClanBossWar(DWORD dwWorldID,DWORD dwCountryID, DWORD dwClanID, DWORD dwRoomID);
148 	/** 取得指定跨服帮会BOSS战场中的参战帮会信息
149 	@param   DWORD dwWorldID					: 游戏世界ID
150 	@param   DWORD dwCountryID					: 国家ID
199 	bool RequestAddHistory(DWORD dwWorldID, DWORD dwCountryID,int nType,int nLevel,char* szTitle,char* szHistory);
200 	
201 	// 检查国家在跨服国战中的参战类型
202 	DWORD CheckCountryWorldWarType(DWORD dwWorldID,DWORD dwCountryID,SCountryWarZoneInfo &node);
202 	DWORD CheckCountryWorldWarType(DWORD dwWorldID,DWORD dwCountryID,SCountryWarZoneInfo &node);
204 	/**  检查帮会是否进参与跨服帮会BOSS战
205 	@param   DWORD dwWorldID					: 游戏世界ID
206 	@param   DWORD dwCountryID					: 国家ID
210 	*/
211 	bool CheckJoinWorldClanBossWar(DWORD dwWorldID,DWORD dwCountryID, DWORD dwClanID, SWorldClanBossWarZoneInfo &node);
213 	/**  检查是否进参与跨服边境战
214 	@param   DWORD dwWorldID					: 游戏世界ID
215 	@param   DWORD dwCountryID					: 国家ID
220 	
221 public:
223 	/**  跨服国战状态变化
224 	@param void * pWar :争场ID
225 	@param DWORD dwRunStep :状态
234 	// 发加入国战战场数据到客户端 
235 	bool SendJoinWarDataToClient(IPerson * pPerson,DWORD dwRoomID=0, bool bCheckStep=false);
237 	// 发加入跨服帮会BOSS战数据到客户端 
238 	bool SendJoinClanBossWarDataToClient(IPerson * pPerson,DWORD dwRoomID=0, bool bCheckStep=false);
238 	bool SendJoinClanBossWarDataToClient(IPerson * pPerson,DWORD dwRoomID=0, bool bCheckStep=false);
240 	// 发加入跨服边境战数据到客户端 
241 	bool SendJoinBorderWarDataToClient(IPerson * pPerson,DWORD dwRoomID=0, bool bCheckStep=false);
243 private:
256 	// 是否列表结尾了
257 	bool										m_bBossEndList;
259 	// 跨服边境战传送至游戏区所有场景数据结构信息列表,以房间号为键值
260 	TMAP_BorderWarZoneInfoList					m_mapBorderWarZoneInfoList;
261 	// 列表当前指针

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\MatchClient\WarClient.h 3 KB H 文件 2014/2/25 8:34:48 2018/10/23 19:52:18 2018/10/23 19:52:18 5
21 #include "ClanBossWar.h"
22 #include "CountryBorderWar.h"
24 // 跨服战场客户端系统
25 class CWarClient: public IWarClient
26 {
45 	*/
46 	virtual ICountryWar * GetCountryWar();
48 	/** 取得跨服帮会BOSS战场系统
49 	@return  CClanBossWar * 
50 	*/
55 	*/
56 	virtual ICountryBorderWar * GetCountryBorderWar();
59 	/** 玩家请求发起跨服国战
60 	@param DWORD dwWorldID : 对方游戏世界ID
61 	@param DWORD dwCountryID : 对方国家ID
96 	// 战场系统列表
97 	CCountryWar		m_CountryWar;
98 	// 跨服帮会BOSS战场系统列表
99 	CClanBossWar	m_ClanBossWar;
99 	CClanBossWar	m_ClanBossWar;
100 	// 跨服边境战场系统列表
101 	CCountryBorderWar	m_BorderWar;
102 };

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\MatchClient\WarClient.h 3 KB H 文件 2014/2/25 13:44:54 2018/10/23 19:34:25 2018/10/23 19:34:25 5
21 #include "ClanBossWar.h"
22 #include "CountryBorderWar.h"
24 // 跨服战场客户端系统
25 class CWarClient: public IWarClient
26 {
45 	*/
46 	virtual ICountryWar * GetCountryWar();
48 	/** 取得跨服帮会BOSS战场系统
49 	@return  CClanBossWar * 
50 	*/
55 	*/
56 	virtual ICountryBorderWar * GetCountryBorderWar();
59 	/** 玩家请求发起跨服国战
60 	@param DWORD dwWorldID : 对方游戏世界ID
61 	@param DWORD dwCountryID : 对方国家ID
96 	// 战场系统列表
97 	CCountryWar		m_CountryWar;
98 	// 跨服帮会BOSS战场系统列表
99 	CClanBossWar	m_ClanBossWar;
99 	CClanBossWar	m_ClanBossWar;
100 	// 跨服边境战场系统列表
101 	CCountryBorderWar	m_BorderWar;
102 };

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\War.h 26 KB H 文件 2014/2/25 0:09:04 2018/10/23 20:06:24 2018/10/23 20:06:24 2
152 	/** 资源事件执行接口
153 	@param   WORD wEventID		:事件ID
154 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
155 	@param   WORD dwWarID		:相关战场ID
156 	@param   WORD dwResID		:相关战争资源配置ID
164 	/** 资源投票事件
165 	@param   WORD wEventID		:事件ID
166 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
167 	@param   WORD dwWarID		:相关战场ID
168 	@param   WORD dwResID		:相关战争资源配置ID

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\MatchClient\War.h 4 KB H 文件 2014/2/25 8:34:48 2018/10/23 19:52:18 2018/10/23 19:52:18 1
26 // 战场阵营信息列表,以阵营ID为关键字
27 typedef map<DWORD,SWarCampNodeInfo> TMAP_WarCampInfoList;
30 // 跨服战场客户端系统
31 class CWar: public TimerHandler
32 {

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\War.h 26 KB H 文件 2014/2/25 14:27:16 2018/10/23 19:45:14 2018/10/23 19:45:14 2
152 	/** 资源事件执行接口
153 	@param   WORD wEventID		:事件ID
154 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
155 	@param   WORD dwWarID		:相关战场ID
156 	@param   WORD dwResID		:相关战争资源配置ID
164 	/** 资源投票事件
165 	@param   WORD wEventID		:事件ID
166 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
167 	@param   WORD dwWarID		:相关战场ID
168 	@param   WORD dwResID		:相关战争资源配置ID

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\MatchClient\War.h 4 KB H 文件 2014/2/25 13:44:54 2018/10/23 19:34:25 2018/10/23 19:34:25 1
26 // 战场阵营信息列表,以阵营ID为关键字
27 typedef map<DWORD,SWarCampNodeInfo> TMAP_WarCampInfoList;
30 // 跨服战场客户端系统
31 class CWar: public TimerHandler
32 {

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\ServerModule\VoiceServer.h 7 KB H 文件 2014/2/25 0:10:27 2018/10/23 20:06:42 2018/10/23 20:06:42 2
95 	// 是否是打折日
96 	bool IsRebateDay(void);
98 	// 发送跨服网络检测，跨服网络检测完毕会回调，再执行dwActionId
99 	void SendCheck( DWORD dwEndPoint, DWORD dwSrcWorldID, DWORD dwDestWorldID, DWORD dwActionId, DWORD dwPDBIDSend, DWORD dwPDBID, 
100 					DWORD dwData1 = 0, DWORD dwData2 = 0, DWORD dwData3 = 0, void * data = NULL, size_t len = 0 );

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\ServerModule\VoiceServer.h 7 KB H 文件 2014/2/25 14:28:12 2018/10/23 19:45:34 2018/10/23 19:45:34 2
95 	// 是否是打折日
96 	bool IsRebateDay(void);
98 	// 发送跨服网络检测，跨服网络检测完毕会回调，再执行dwActionId
99 	void SendCheck( DWORD dwEndPoint, DWORD dwSrcWorldID, DWORD dwDestWorldID, DWORD dwActionId, DWORD dwPDBIDSend, DWORD dwPDBID, 
100 					DWORD dwData1 = 0, DWORD dwData2 = 0, DWORD dwData3 = 0, void * data = NULL, size_t len = 0 );

I:\work\source\仙剑神曲\[src.cool]仙剑神曲\src\tools\common\onwind_protoc\proto_test\version.pb.h 12 KB H 文件 2012/4/22 2:05:20 2018/10/23 16:12:21 2018/10/23 16:12:21 1
92  * [VER 0200] 升级到三测版本
93  * [VER 0169] ITEM_INSTANCE/CHAR_ITEM 加入物品存在时间对应的结构成员
94  * [VER 0167] 跨服同步协议修改增加组队相关信息
95  * [VER 0166] 行会协议更改
96  * [VER 0165] 炼化协议更改

I:\work\source\蜀山神话\[src.cool]蜀山神话\include\common\protocol\version.h 12 KB H 文件 2012/4/21 1:09:00 2018/10/23 13:22:11 2018/10/23 13:22:11 1
98  * [VER 0200] 升级到三测版本
99  * [VER 0169] ITEM_INSTANCE/CHAR_ITEM 加入物品存在时间对应的结构成员
100  * [VER 0167] 跨服同步协议修改增加组队相关信息
101  * [VER 0166] 行会协议更改
102  * [VER 0165] 炼化协议更改

I:\work\source\预言OL\yl code\code\Server\GameServer\mapgroupkernel\UserData.h 23 KB H 文件 2010/1/6 16:09:05 2018/10/23 19:32:12 2018/10/23 19:32:12 1
173 	//char            szSvrState[STATC_BUFSIZE];  //什么国家的.其他跟据配置设定
174 	WORD			wOwnStateNo;		// 所属的国家,
175 	WORD            wStateNo;//国家编号在哪个国家...跨服务器的时候才用到        
176 	int				nYBgold;			// 绑定元宝 [12/5/2008 12:13 赵文源]
178 	DWORD			dwLogonCount;		// 玩家登陆次数 [Chancy___2009/1/22 11:23:00]

I:\work\source\预言OL\[src.cool]预言OL\yuyancode\code\Server\GameServer\mapgroupkernel\UserData.h 23 KB H 文件 2010/1/6 16:09:05 2018/10/23 19:32:54 2018/10/23 19:32:54 1
173 	//char            szSvrState[STATC_BUFSIZE];  //什么国家的.其他跟据配置设定
174 	WORD			wOwnStateNo;		// 所属的国家,
175 	WORD            wStateNo;//国家编号在哪个国家...跨服务器的时候才用到        
176 	int				nYBgold;			// 绑定元宝 [12/5/2008 12:13 赵文源]
178 	DWORD			dwLogonCount;		// 玩家登陆次数 [Chancy___2009/1/22 11:23:00]

I:\work\source\盛世OL\[src.cool]盛世OL\Server\GameServer\mapgroupkernel\UserData.h 27 KB H 文件 2014/2/25 15:43:54 2018/10/23 13:19:21 2018/10/23 13:19:21 1
180 	//char            szSvrState[STATC_BUFSIZE];  //什么国家的.其他跟据配置设定
181 	WORD			wOwnStateNo;		// 所属的国家,
182 	WORD            wStateNo;//国家编号在哪个国家...跨服务器的时候才用到        
183 	int				nYBgold;			// 绑定元宝 [12/5/2008 12:13 赵文源]
185 	DWORD			dwLogonCount;		// 玩家登陆次数 [王玉波___2009/1/22 11:23:00]

I:\work\source\剑侠时代\jxsd\core\地图插件\jxsd\code\Server\GameServer\mapgroupkernel\UserData.h 23 KB H 文件 2011/4/20 9:42:26 2018/10/19 14:11:34 2018/10/19 14:11:34 1
173 	//char            szSvrState[STATC_BUFSIZE];  //什么国家的.其他跟据配置设定
174 	WORD			wOwnStateNo;		// 所属的国家,
175 	WORD            wStateNo;//国家编号在哪个国家...跨服务器的时候才用到        
176 	int				nYBgold;			// 绑定元宝 [12/5/2008 12:13 赵文源]
178 	DWORD			dwLogonCount;		// 玩家登陆次数 [wxy___2009/1/22 11:23:00]

I:\work\source\剑侠时代\[src.cool]剑侠时代\jxsd\code\Server\GameServer\mapgroupkernel\UserData.h 23 KB H 文件 2011/4/20 9:42:26 2018/10/19 14:11:14 2018/10/19 14:11:14 1
173 	//char            szSvrState[STATC_BUFSIZE];  //什么国家的.其他跟据配置设定
174 	WORD			wOwnStateNo;		// 所属的国家,
175 	WORD            wStateNo;//国家编号在哪个国家...跨服务器的时候才用到        
176 	int				nYBgold;			// 绑定元宝 [12/5/2008 12:13 赵文源]
178 	DWORD			dwLogonCount;		// 玩家登陆次数 [wxy___2009/1/22 11:23:00]

I:\work\source\武侠世界2\swordworld\武侠世界\代码\服务器\World\World\WorldData\User.h 8 KB H 文件 2014/3/9 20:41:18 2018/10/23 15:46:13 2018/10/23 15:46:13 1
10 	US_NONE = 0 ,		//空
11 	US_HOLDUSERDATA ,	//拥有当前玩家的档案信息
12 	US_CHANGESCENE,		//跨服务器切换场景
13 	US_NORMAL ,			//玩家正在游戏中，一切正常
14 	US_OFFLINE ,		//玩家处于断线状态中

I:\work\source\天龙八部\天龙八部\无修改版\World\WorldData\User.h 8 KB H 文件 2008/1/14 17:34:42 2018/10/23 14:57:09 2018/10/23 14:57:09 1
10 	US_NONE = 0 ,		//空
11 	US_HOLDUSERDATA ,	//拥有当前玩家的档案信息
12 	US_CHANGESCENE,		//跨服务器切换场景
13 	US_NORMAL ,			//玩家正在游戏中，一切正常
14 	US_OFFLINE ,		//玩家处于断线状态中

I:\work\source\天龙八部\天龙八部\天龙代码\服务器\World\WorldData\User.h 8 KB H 文件 2008/1/14 17:34:42 2018/10/23 14:56:24 2018/10/23 14:56:24 1
10 	US_NONE = 0 ,		//空
11 	US_HOLDUSERDATA ,	//拥有当前玩家的档案信息
12 	US_CHANGESCENE,		//跨服务器切换场景
13 	US_NORMAL ,			//玩家正在游戏中，一切正常
14 	US_OFFLINE ,		//玩家处于断线状态中

I:\work\source\天龙八部2\tianlongbabu2\天龙八部Ⅱ源代码\Server\Server\WorldServer\World\WorldData\User.h 8 KB H 文件 2008/1/14 17:34:41 2018/10/23 14:52:00 2018/10/23 14:52:00 1
10 	US_NONE = 0 ,		//空
11 	US_HOLDUSERDATA ,	//拥有当前玩家的档案信息
12 	US_CHANGESCENE,		//跨服务器切换场景
13 	US_NORMAL ,			//玩家正在游戏中，一切正常
14 	US_OFFLINE ,		//玩家处于断线状态中

I:\work\source\仙剑神曲\[src.cool]仙剑神曲\src\include\common\generated\Tuple_Types.pb.h 6 KB H 文件 2012/4/22 2:05:30 2018/10/23 16:10:25 2018/10/23 16:10:25 1
20 //{
21 //	SPC_SERVICE,		//服务发现Space
22 //	SPC_EDGE,			//跨服务器边界Space
23 //	SPC_LOGGING,		//日志服务的Space
24 //	SPC_PERSIST,		//持久化存储SPACE

I:\work\source\蜀山神话\[src.cool]蜀山神话\include\common\protocol\Tuple_Types.h 6 KB H 文件 2012/4/21 1:09:00 2018/10/23 13:22:11 2018/10/23 13:22:11 1
17 {
18 	SPC_SERVICE,		//服务发现Space
19 	SPC_EDGE,			//跨服务器边界Space
20 	SPC_LOGGING,		//日志服务的Space
21 	SPC_PERSIST,		//持久化存储SPACE

I:\work\source\仙剑神曲\[src.cool]仙剑神曲\src\include\common\protocol\Tuple_Types.h 6 KB H 文件 2012/4/22 2:05:26 2018/10/23 16:10:33 2018/10/23 16:10:33 1
17 //{
18 //	SPC_SERVICE,		//服务发现Space
19 //	SPC_EDGE,			//跨服务器边界Space
20 //	SPC_LOGGING,		//日志服务的Space
21 //	SPC_PERSIST,		//持久化存储SPACE

I:\work\source\仙剑神曲\[src.cool]仙剑神曲\src\server\gamesvr\itemsimpl\TrumpManager.h 5 KB H 文件 2012/4/22 2:05:30 2018/10/23 16:11:07 2018/10/23 16:11:07 1
68     bool CheckEquipTrump(GamePlayer* pPlayer, ZuItem* pTrumpItem, INT32& err_no);
69     
70     /// 跨服重建法宝状态
71     void RebuildSvrTrumpState(GamePlayer* pPlayer, TRUMP_SVR_SYNC_DATA& syncData);
72     

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\LuaServer\TriggerManager.h 13 KB H 文件 2014/2/25 0:09:34 2018/10/23 20:06:12 2018/10/23 20:06:12 1
322 	int CreateActorStrikeTrigger(const char * szCallFunc,int nActor);
324 	/**
325 	@name            : 创建人物跨服国战-完成时间触发器
326 	@brief           : 
327 	@param szCallFunc: 回调函数名

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\LuaServer\TriggerManager.h 13 KB H 文件 2014/2/25 14:26:03 2018/10/23 19:44:53 2018/10/23 19:44:53 1
322 	int CreateActorStrikeTrigger(const char * szCallFunc,int nActor);
324 	/**
325 	@name            : 创建人物跨服国战-完成时间触发器
326 	@brief           : 
327 	@param szCallFunc: 回调函数名

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\TestServer\TestServer.h 4 KB H 文件 2014/2/25 0:11:39 2018/10/23 20:06:57 2018/10/23 20:06:57 1
101 	// 随机取得地图着陆配置信息
102 	bool GetRandMapLandInfo(IPerson * pPerson,DWORD &dwMapID,POINT &ptLoc);
104 	// 随机取得跨服地图着陆配置信息
105 	bool GetRandWorldMapLandInfo(IPerson * pPerson,DWORD &dwGameWorldID,DWORD &dwMapID,POINT &ptLoc);
107 	// 在周围随机取一个空块,IGameZone中的这个函数可以取到空块单不随机

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\TestServer\TestServer.h 4 KB H 文件 2014/2/25 14:28:58 2018/10/23 19:45:47 2018/10/23 19:45:47 1
101 	// 随机取得地图着陆配置信息
102 	bool GetRandMapLandInfo(IPerson * pPerson,DWORD &dwMapID,POINT &ptLoc);
104 	// 随机取得跨服地图着陆配置信息
105 	bool GetRandWorldMapLandInfo(IPerson * pPerson,DWORD &dwGameWorldID,DWORD &dwMapID,POINT &ptLoc);
107 	// 在周围随机取一个空块,IGameZone中的这个函数可以取到空块单不随机

I:\work\source\龙腾世界\[src.cool]龙腾世界\Code\Code\EasyRPG\Include\TeamMng.h 10 KB H 文件 2007/1/12 18:26:08 2018/10/22 15:44:20 2018/10/22 15:44:20 1
228 	// 可以使用的策略：
229 	// 1 只要建立队伍就在各个服务器内建立队伍。如果有改变就向其他广播，保持同步。这样消息量会大一点。
230 	// 2 在队伍创建一开始设置只在一个服务器，但是只要有跨服务器的情况就设置为在不同服务器，之后再不设置回来。
231 	//   在服务器间传数据也该成广播模式。
232 	// 3 和2类似，只是在适当的时候设置成只在一个服务器以节省效率，在服务器间传数据是发送到指定场景方式。

I:\work\source\最游记\Server\Server\Common\TeammanagerEx.h 12 KB H 文件 2012/2/10 11:48:56 2012/2/10 11:48:56 2012/2/10 11:48:56 1
166     uint32 m_dwNextUpdateSelfTime;                              // 检查队伍时间
167     uint32 m_dwStopUpdateTeamMemberTime;                        // 间隔多少时间停止更新队员信息
168     uint32 m_dwSessionId;                                       // 跨服间使用的sessionid
169     bool m_bCorps;                                              // 是否是团
170     uint8 m_nAssignModeType;                                    // 当前队伍的分配模式

I:\work\source\最游记\[src.cool]最游记\Server\Server\Server\Common\TeammanagerEx.h 12 KB H 文件 2013/6/28 14:00:16 2018/10/23 19:50:05 2018/10/23 19:50:05 1
166     uint32 m_dwNextUpdateSelfTime;                              // 检查队伍时间
167     uint32 m_dwStopUpdateTeamMemberTime;                        // 间隔多少时间停止更新队员信息
168     uint32 m_dwSessionId;                                       // 跨服间使用的sessionid
169     bool m_bCorps;                                              // 是否是团
170     uint8 m_nAssignModeType;                                    // 当前队伍的分配模式

I:\work\source\征三国\征三国\Server\Common\TeammanagerEx.h 12 KB H 文件 2013/4/28 21:54:53 2018/10/23 19:46:54 2018/10/23 19:46:54 1
166     uint32 m_dwNextUpdateSelfTime;                              // 检查队伍时间
167     uint32 m_dwStopUpdateTeamMemberTime;                        // 间隔多少时间停止更新队员信息
168     uint32 m_dwSessionId;                                       // 跨服间使用的sessionid
169     bool m_bCorps;                                              // 是否是团
170     uint8 m_nAssignModeType;                                    // 当前队伍的分配模式

I:\work\source\书剑恩仇录\书剑恩仇录_zccode.com\书剑恩仇录\金\Src\Share\TAB\TabDefine_Map_Misc.h 42 KB H 文件 2013/3/3 12:51:48 2018/10/23 13:36:06 2018/10/23 13:36:06 2
117     // 加载职业转换技能对应表
118 	void    LoadChangeProfession();
119 	// 跨服关卡逻辑表
120 	void	LoadRoomLogicTab();
120 	void	LoadRoomLogicTab();
121 	// 跨服关卡配置表
122 	void	LoadRoomConfigTab();
123 	// 代练配置

I:\work\source\书剑恩仇录\[src.cool]书剑恩仇录\Src\Share\TAB\TabDefine_Map_Misc.h 42 KB H 文件 2013/3/3 12:51:48 2018/10/23 13:35:06 2018/10/23 13:35:06 2
117     // 加载职业转换技能对应表
118 	void    LoadChangeProfession();
119 	// 跨服关卡逻辑表
120 	void	LoadRoomLogicTab();
120 	void	LoadRoomLogicTab();
121 	// 跨服关卡配置表
122 	void	LoadRoomConfigTab();
123 	// 代练配置

I:\work\source\蜀山神话\[src.cool]蜀山神话\src\server\gamesvr\spellsimpl\SummonData.h 4 KB H 文件 2012/4/21 1:05:15 2018/10/23 13:25:14 2018/10/23 13:25:14 1
126 	bool		 m_real_god;	//真神假神？
127 	bool		 m_determined;	//是否Determin过效果？
128     bool         m_bCross;      //是否跨服
130 	SUMMON_ENHANCE m_enhance;	//本次换神对角色攻防的增益
132     suite_enhance  m_suit_enhance; //套装影响唤神虚弱值

I:\work\source\书剑恩仇录\书剑恩仇录_zccode.com\书剑恩仇录\金\Src\Share\StructRoomBattle.h 58 KB H 文件 2013/3/3 11:32:38 2018/10/23 13:36:05 2018/10/23 13:36:05 22
4 Author:shangy		
5 Created:shangy    
6 Description :跨服房间相关结构
7 Revision :  2011/06/20 shangy create
9 =============================================================================*/
23 #define		MAX_ROOMBATTLE_TEAM_NUM			(6)
24 #define		MAX_ROOMBATTLE_GROUP_NUM		(4)   
25 #define		MAX_SIGNUPLIST_COUNT			(10000)	//跨服报名列表最大值
26 #define		MAX_ROOM_COUNT					(2000)	//跨服房间实例个数最大值
27 #define		MAX_ROOM_CONFIG_COUNT			(100)	//跨服房间配置文件条数上线
28 #define     MAX_MEMBERS_PER_ROOM			(4 * 6 * 6)	//每房间最大人数
30 #define		MAX_ROOM_BATTLE_WAITING_TIME	 (30000)	//确认等待时间
366 };
368 /************************************************************************/
369 /* 跨服报名候选数据结构定义  		                                    */
370 /************************************************************************/
371 struct RoomBattleSignupInfo
420 };
422 /************************************************************************/
423 /* 跨服报名候选数据结构定义 客户端消息结构                              */
424 /************************************************************************/
425 struct RoomBattleSignupInfo_CX_Msg
442 };
444 /************************************************************************/
445 /* 跨服取消报名结构定义   客户端消息结构	                           */
446 /************************************************************************/
447 struct RoomBattleSignupCancel_CX_Msg
456 };
458 /************************************************************************/
459 /* 跨服确认进入结构定义    客户端消息结构								*/
460 /************************************************************************/
461 struct RoomBattleWaitingEnter_CX_Msg
502 };
504 /************************************************************************/
505 /* 跨服玩家确认结构定义    服务器消息结构								*/
506 /************************************************************************/
507 struct RoomBattlePlayerEnter_XC_Msg
525 };
527 /************************************************************************/
528 /* 跨服玩家离开军团    服务器消息结构								*/
529 /************************************************************************/
530 struct RoomBattlePlayerLeave_XC_Msg
540 };
542 /************************************************************************/
543 /* 跨服确认进入结构定义    服务器消息结构								*/
544 /************************************************************************/
545 struct RoomBattleWaitingEnter_XC_Msg
648 };
650 /************************************************************************/
651 /* 跨服MapServer信息                  		                            */
652 /************************************************************************/
653 struct SMutiGroupMapServerInfo
687 };
690 /************************************************************************/
691 /* 跨服关卡消息结构定义 MGP-->GL               		                    */
692 /************************************************************************/
693 struct MsgMGRoomBattle
713 };
715 /************************************************************************/
716 /* 跨服关卡消息结构定义 GL-->MGP               		                    */
717 /************************************************************************/
718 struct MsgGMRoomBattle
739 };
740 /************************************************************************/
741 /* 跨服关卡消息结构定义 MGP-->GL-->MGP 客户端确认进入或取消             */
742 /************************************************************************/
743 struct MsgXGMRoomBattle_ReplyEnter
753 };
754 /************************************************************************/
755 /* 跨服关卡消息结构定义 MGP-->GL-->MGP 客户端确认广播                   */
756 /************************************************************************/
757 struct MsgXGMRoomBattle_ReplyEnter_BROADCAST
767 };
768 /************************************************************************/
769 /* 跨服关卡消息结构定义 MGP-->GL-->MGP 客户端确认离开，重新返回报名状态 */
770 /************************************************************************/
771 struct MsgXGMRoomBattle_Leave
781 };
782 /************************************************************************/
783 /* 跨服关卡消息结构定义 MGP-->GL-->MGP        		                    */
784 /************************************************************************/
785 struct MsgMGMRoomBattle
802 };
803 /************************************************************************/
804 /* 跨服关卡消息结构定义 MAP-->GL-->MGP        		                    */
805 /************************************************************************/
806 struct MsgXGMRoomBattle
830 };
831 /************************************************************************/
832 /* 跨服关卡消息结构定义 MGP-->GL-->MAP        		                    */
833 /************************************************************************/
834 struct MsgMGXRoomBattle
865 };
866 /************************************************************************/
867 /* 跨服关卡消息结构定义 Client-->MAP        		                    */
868 /************************************************************************/
869 struct MsgCXRoomBattle
895 };
898 /************************************************************************/
899 /* 跨服关卡消息结构定义 MAP-->Client        		                    */
900 /************************************************************************/
901 struct MsgXCRoomBattle

I:\work\source\书剑恩仇录\[src.cool]书剑恩仇录\Src\Share\StructRoomBattle.h 58 KB H 文件 2013/3/3 11:32:38 2018/10/23 13:35:06 2018/10/23 13:35:06 22
4 Author:shangy		
5 Created:shangy    
6 Description :跨服房间相关结构
7 Revision :  2011/06/20 shangy create
9 =============================================================================*/
23 #define		MAX_ROOMBATTLE_TEAM_NUM			(6)
24 #define		MAX_ROOMBATTLE_GROUP_NUM		(4)   
25 #define		MAX_SIGNUPLIST_COUNT			(10000)	//跨服报名列表最大值
26 #define		MAX_ROOM_COUNT					(2000)	//跨服房间实例个数最大值
27 #define		MAX_ROOM_CONFIG_COUNT			(100)	//跨服房间配置文件条数上线
28 #define     MAX_MEMBERS_PER_ROOM			(4 * 6 * 6)	//每房间最大人数
30 #define		MAX_ROOM_BATTLE_WAITING_TIME	 (30000)	//确认等待时间
366 };
368 /************************************************************************/
369 /* 跨服报名候选数据结构定义  		                                    */
370 /************************************************************************/
371 struct RoomBattleSignupInfo
420 };
422 /************************************************************************/
423 /* 跨服报名候选数据结构定义 客户端消息结构                              */
424 /************************************************************************/
425 struct RoomBattleSignupInfo_CX_Msg
442 };
444 /************************************************************************/
445 /* 跨服取消报名结构定义   客户端消息结构	                           */
446 /************************************************************************/
447 struct RoomBattleSignupCancel_CX_Msg
456 };
458 /************************************************************************/
459 /* 跨服确认进入结构定义    客户端消息结构								*/
460 /************************************************************************/
461 struct RoomBattleWaitingEnter_CX_Msg
502 };
504 /************************************************************************/
505 /* 跨服玩家确认结构定义    服务器消息结构								*/
506 /************************************************************************/
507 struct RoomBattlePlayerEnter_XC_Msg
525 };
527 /************************************************************************/
528 /* 跨服玩家离开军团    服务器消息结构								*/
529 /************************************************************************/
530 struct RoomBattlePlayerLeave_XC_Msg
540 };
542 /************************************************************************/
543 /* 跨服确认进入结构定义    服务器消息结构								*/
544 /************************************************************************/
545 struct RoomBattleWaitingEnter_XC_Msg
648 };
650 /************************************************************************/
651 /* 跨服MapServer信息                  		                            */
652 /************************************************************************/
653 struct SMutiGroupMapServerInfo
687 };
690 /************************************************************************/
691 /* 跨服关卡消息结构定义 MGP-->GL               		                    */
692 /************************************************************************/
693 struct MsgMGRoomBattle
713 };
715 /************************************************************************/
716 /* 跨服关卡消息结构定义 GL-->MGP               		                    */
717 /************************************************************************/
718 struct MsgGMRoomBattle
739 };
740 /************************************************************************/
741 /* 跨服关卡消息结构定义 MGP-->GL-->MGP 客户端确认进入或取消             */
742 /************************************************************************/
743 struct MsgXGMRoomBattle_ReplyEnter
753 };
754 /************************************************************************/
755 /* 跨服关卡消息结构定义 MGP-->GL-->MGP 客户端确认广播                   */
756 /************************************************************************/
757 struct MsgXGMRoomBattle_ReplyEnter_BROADCAST
767 };
768 /************************************************************************/
769 /* 跨服关卡消息结构定义 MGP-->GL-->MGP 客户端确认离开，重新返回报名状态 */
770 /************************************************************************/
771 struct MsgXGMRoomBattle_Leave
781 };
782 /************************************************************************/
783 /* 跨服关卡消息结构定义 MGP-->GL-->MGP        		                    */
784 /************************************************************************/
785 struct MsgMGMRoomBattle
802 };
803 /************************************************************************/
804 /* 跨服关卡消息结构定义 MAP-->GL-->MGP        		                    */
805 /************************************************************************/
806 struct MsgXGMRoomBattle
830 };
831 /************************************************************************/
832 /* 跨服关卡消息结构定义 MGP-->GL-->MAP        		                    */
833 /************************************************************************/
834 struct MsgMGXRoomBattle
865 };
866 /************************************************************************/
867 /* 跨服关卡消息结构定义 Client-->MAP        		                    */
868 /************************************************************************/
869 struct MsgCXRoomBattle
895 };
898 /************************************************************************/
899 /* 跨服关卡消息结构定义 MAP-->Client        		                    */
900 /************************************************************************/
901 struct MsgXCRoomBattle

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\MatchService\StrikeMatch.h 8 KB H 文件 2014/2/25 0:23:11 2018/10/23 20:09:04 2018/10/23 20:09:04 2
5 ** 日  期:	2010-10-27
6 ** 版  本:	1.0
7 ** 描  述:	跨服竞技撮合系统服务
8 ** 应  用:  	
9 	
121 // 排序结果列表
122 typedef list<SMatchStrikeResultOrderNode> TLIST_StrikeMatchSortResultList;
125 // 跨服竞技撮合系统
126 class CStrikeMatch : public IStrikeMatch,public TimerHandler
127 {

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\StrikeMatch.h 3 KB H 文件 2014/2/25 0:09:02 2018/10/23 20:06:24 2018/10/23 20:06:24 1
5 ** 日  期:	2010-10-27
6 ** 版  本:	1.0
7 ** 描  述:	跨服竞技撮合系统服务器
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\MatchClient\StrikeMatch.h 4 KB H 文件 2014/2/25 8:34:47 2018/10/23 19:52:18 2018/10/23 19:52:18 1
5 ** 日  期:	2010-10-27
6 ** 版  本:	1.0
7 ** 描  述:	跨服竞技撮合系统客户端
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\MatchService\StrikeMatch.h 8 KB H 文件 2014/2/25 14:31:42 2018/10/23 19:46:42 2018/10/23 19:46:42 2
5 ** 日  期:	2010-10-27
6 ** 版  本:	1.0
7 ** 描  述:	跨服竞技撮合系统服务
8 ** 应  用:  	
9 	
121 // 排序结果列表
122 typedef list<SMatchStrikeResultOrderNode> TLIST_StrikeMatchSortResultList;
125 // 跨服竞技撮合系统
126 class CStrikeMatch : public IStrikeMatch,public TimerHandler
127 {

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\StrikeMatch.h 3 KB H 文件 2014/2/25 14:27:14 2018/10/23 19:45:13 2018/10/23 19:45:13 1
5 ** 日  期:	2010-10-27
6 ** 版  本:	1.0
7 ** 描  述:	跨服竞技撮合系统服务器
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\MatchClient\StrikeMatch.h 4 KB H 文件 2014/2/25 13:44:54 2018/10/23 19:34:25 2018/10/23 19:34:25 1
5 ** 日  期:	2010-10-27
6 ** 版  本:	1.0
7 ** 描  述:	跨服竞技撮合系统客户端
8 ** 应  用:  	
9 	

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\Strike.h 29 KB H 文件 2014/2/25 0:08:59 2018/10/23 20:06:24 2018/10/23 20:06:24 2
153 	/** 资源事件执行接口
154 	@param   WORD wEventID		:事件ID
155 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
156 	@param   WORD dwWarID		:相关战场ID
157 	@param   WORD dwResID		:相关战争资源配置ID
165 	/** 资源投票事件
166 	@param   WORD wEventID		:事件ID
167 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
168 	@param   WORD dwWarID		:相关战场ID
169 	@param   WORD dwResID		:相关战争资源配置ID

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\Strike.h 29 KB H 文件 2014/2/25 14:27:12 2018/10/23 19:45:13 2018/10/23 19:45:13 2
153 	/** 资源事件执行接口
154 	@param   WORD wEventID		:事件ID
155 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
156 	@param   WORD dwWarID		:相关战场ID
157 	@param   WORD dwResID		:相关战争资源配置ID
165 	/** 资源投票事件
166 	@param   WORD wEventID		:事件ID
167 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
168 	@param   WORD dwWarID		:相关战场ID
169 	@param   WORD dwResID		:相关战争资源配置ID

I:\work\source\书剑恩仇录\书剑恩仇录_zccode.com\书剑恩仇录\金\Src\MapServer\Server\GameLogic\SignUpMgr.h 10 KB H 文件 2013/3/3 13:58:34 2018/10/23 13:34:39 2018/10/23 13:34:39 2
4 Author:shangy		
5 Created:shangy    
6 Description :跨服报名管理类
7 Revision :  2011/06/20 shangy create
8 			2011/08/05 Michael Lin Modify
18 #include "MGMRoomBattle.h"
19 #include "msg_c2x_005.h"
21 //跨服报名管理类
23 class SignUpMgr
24 {

I:\work\source\书剑恩仇录\[src.cool]书剑恩仇录\Src\MapServer\Server\GameLogic\SignUpMgr.h 10 KB H 文件 2013/3/3 13:58:34 2018/10/23 13:34:21 2018/10/23 13:34:21 2
4 Author:shangy		
5 Created:shangy    
6 Description :跨服报名管理类
7 Revision :  2011/06/20 shangy create
8 			2011/08/05 Michael Lin Modify
18 #include "MGMRoomBattle.h"
19 #include "msg_c2x_005.h"
21 //跨服报名管理类
23 class SignUpMgr
24 {

I:\work\source\书剑恩仇录\书剑恩仇录_zccode.com\书剑恩仇录\金\Src\Share\Core\Setting.h 38 KB H 文件 2013/3/3 12:49:24 2018/10/23 13:35:56 2018/10/23 13:35:56 4
1255 	}
1256 };
1258 #define	MAX_MUTIGROUP_MAPSERVER	(64)							//1个GL可以连接的跨服服务器最大数量
1259 #define MULTI_GROUP_MAX_COUNT	(32)							//1个跨服服务器可以连接GL最大数量
1260 #define PERGROUP_MAX_MAPCOUNT	(SERVER_CAPACITY)				//1个GL可以连接的所有MapServer数量
1263 struct MULTIGROUP_SERVER_INFO
1328 		return INVALID_INDEX;
1329 	}
1332 	//当前服务器是否跨服关卡报名服务器  added by Micheal Lin by 2011-08-03
1333 	BOOL IsSignUpServer(void)
1334 	{
1335 		if (m_nGroupCount <=0 )
1336 		{
1337 			//不是跨服服务器
1338 			return FALSE;
1339 		}

I:\work\source\书剑恩仇录\[src.cool]书剑恩仇录\Src\Share\Core\Setting.h 38 KB H 文件 2013/3/3 12:49:24 2018/10/23 13:35:01 2018/10/23 13:35:01 4
1255 	}
1256 };
1258 #define	MAX_MUTIGROUP_MAPSERVER	(64)							//1个GL可以连接的跨服服务器最大数量
1259 #define MULTI_GROUP_MAX_COUNT	(32)							//1个跨服服务器可以连接GL最大数量
1260 #define PERGROUP_MAX_MAPCOUNT	(SERVER_CAPACITY)				//1个GL可以连接的所有MapServer数量
1263 struct MULTIGROUP_SERVER_INFO
1328 		return INVALID_INDEX;
1329 	}
1332 	//当前服务器是否跨服关卡报名服务器  added by Micheal Lin by 2011-08-03
1333 	BOOL IsSignUpServer(void)
1334 	{
1335 		if (m_nGroupCount <=0 )
1336 		{
1337 			//不是跨服服务器
1338 			return FALSE;
1339 		}

I:\work\source\书剑恩仇录\书剑恩仇录_zccode.com\书剑恩仇录\金\Src\Share\Connector\ServerConnectorManager.h 2 KB H 文件 2013/3/3 12:49:16 2018/10/23 13:35:56 2018/10/23 13:35:56 1
47 	void				BroadCastLogin(IMessage *pPacket);
49 	BOOL				ConnectToServer(const char* ip, uint16 port, ID_t serverid, ConnectorID_t& connID, BOOL bCreate=TRUE, BOOL bSendSS=TRUE);
51 	//2011-10-27 by Michael 跨服线程连接方式(非阻塞)
52 	Connector*          ConnectToServerForGroup(const char* ip,uint16 port,ID_t serverid,ConnectorID_t& connID);
54 protected:

I:\work\source\书剑恩仇录\[src.cool]书剑恩仇录\Src\Share\Connector\ServerConnectorManager.h 2 KB H 文件 2013/3/3 12:49:16 2018/10/23 13:35:01 2018/10/23 13:35:01 1
47 	void				BroadCastLogin(IMessage *pPacket);
49 	BOOL				ConnectToServer(const char* ip, uint16 port, ID_t serverid, ConnectorID_t& connID, BOOL bCreate=TRUE, BOOL bSendSS=TRUE);
51 	//2011-10-27 by Michael 跨服线程连接方式(非阻塞)
52 	Connector*          ConnectToServerForGroup(const char* ip,uint16 port,ID_t serverid,ConnectorID_t& connID);
54 protected:

I:\work\source\征途\征途-1\zhengtu\征途\server\src\ScenesServer\SceneUser.h 32 KB H 文件 2006/6/10 13:45:50 2018/10/23 19:35:37 2018/10/23 19:35:37 1
208 		//在国外死亡复活到本国凤凰城,写死了^_^
209 		DWORD deathBackToMapID;
211 		//跨服跳地图在Session未返回时的临时记录
212 		char wait_gomap_name[MAX_NAMESIZE];
214 		void setDiplomatState(BYTE newstate);

I:\work\source\神魔传奇\[src.cool]神魔传奇代码\Server\include\zebra\ScenesServer.h 838 KB H 文件 2012/1/17 23:01:07 2018/10/23 13:17:59 2018/10/23 13:17:59 1
9768 	//在国外死亡复活到本国凤凰城,写死了^_^
9769 	DWORD deathBackToMapID;
9771 	//跨服跳地图在Session未返回时的临时记录
9772 	char wait_gomap_name[MAX_NAMESIZE];
9774 	void setDiplomatState(BYTE newstate);

I:\work\source\征途\征途-2\zhengtu\src\include\zebra\ScenesServer.h 754 KB H 文件 2009/3/27 10:47:50 2018/10/23 19:34:22 2018/10/23 19:34:22 1
8130     //在国外死亡复活到本国凤凰城,写死了^_^
8131     DWORD deathBackToMapID;
8133     //跨服跳地图在Session未返回时的临时记录
8134     char wait_gomap_name[MAX_NAMESIZE];
8136     void setDiplomatState(BYTE newstate);

I:\work\source\神仙传\[src.cool]神仙传\GAME\Project1\ZoneClientEditor\Source\Gameplay\Data\RouteRepository.h 3 KB H 文件 2010/3/22 9:23:20 2018/10/23 13:31:17 2018/10/23 13:31:17 1
44 	RouteMap m_RouteMap;
45 };
46 //跨服寻径
47 struct  StrideServerPath
48 {

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\ServerManager\ManagerClient\Src\RealTimeDataDraw.h 13 KB H 文件 2014/2/25 0:32:16 2018/10/23 20:07:25 2018/10/23 20:07:25 3
50 	MG_RTDrawType_None = 0,							// 无
51 	MG_RTDrawType_OnlineCountsCurve,				// 在线数曲线图
52 	MG_RTDrawType_OtherOnlineCountsCurve,			// 跨服在线数曲线图
53 	MG_RTDrawType_PhysicalMemoryUsedCurve,			// 物理内存使用曲线图
54 	MG_RTDrawType_VirtualMemoryUsedCurve,			// 虚拟内存使用曲线图
67 	MG_RTDrawType_HourKDataCurve,					// 小时K线曲线图
68 	MG_RTDrawType_HourKDataFixCurve,				// 小时K线固定宽度曲线图
69 	MG_RTDrawType_OtherMinuteKDataCurve,			// 跨服分钟K线曲线图
70 	MG_RTDrawType_OtherHourKDataCurve,				// 跨服小时K线曲线图
71 	
72 	// 最大

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\ServerManager\ManagerClient\Src\RealTimeDataDraw.h 13 KB H 文件 2014/2/25 14:34:35 2018/10/23 19:46:19 2018/10/23 19:46:19 3
50 	MG_RTDrawType_None = 0,							// 无
51 	MG_RTDrawType_OnlineCountsCurve,				// 在线数曲线图
52 	MG_RTDrawType_OtherOnlineCountsCurve,			// 跨服在线数曲线图
53 	MG_RTDrawType_PhysicalMemoryUsedCurve,			// 物理内存使用曲线图
54 	MG_RTDrawType_VirtualMemoryUsedCurve,			// 虚拟内存使用曲线图
67 	MG_RTDrawType_HourKDataCurve,					// 小时K线曲线图
68 	MG_RTDrawType_HourKDataFixCurve,				// 小时K线固定宽度曲线图
69 	MG_RTDrawType_OtherMinuteKDataCurve,			// 跨服分钟K线曲线图
70 	MG_RTDrawType_OtherHourKDataCurve,				// 跨服小时K线曲线图
71 	
72 	// 最大

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\PublicWatcher.h 7 KB H 文件 2014/2/25 0:08:57 2018/10/23 20:06:24 2018/10/23 20:06:24 1
203 	// 检查时间是否到了过期时间
204 	bool CheckTimeout(DWORD dwTime);
206 	// 控制显示客户端跨服倒计时
207 	void ShowClientWatcherPanel(IPerson* pPerson, int nShow, int nRemainSeconds);
209 	// 重刷脚本时重新刷新所有的客户端显示面板

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\PublicWatcher.h 7 KB H 文件 2014/2/25 14:27:10 2018/10/23 19:45:12 2018/10/23 19:45:12 1
203 	// 检查时间是否到了过期时间
204 	bool CheckTimeout(DWORD dwTime);
206 	// 控制显示客户端跨服倒计时
207 	void ShowClientWatcherPanel(IPerson* pPerson, int nShow, int nRemainSeconds);
209 	// 重刷脚本时重新刷新所有的客户端显示面板

I:\work\source\最游记\[src.cool]最游记\Server\Server\Server\Common\PublicHead.h 2 KB H 文件 2013/6/28 14:00:20 2018/10/23 19:50:02 2018/10/23 19:50:02 1
2 #define __public_head_h__
4 // 数据来源标示
5 // 目前主要是用来跨服设计的管理各个服务器对应的数据
6 // 以及在收发消息的时候根据服务器_SeverID 来确定需要收发数据的对象.
7 // 目前只是使用啦_SeverID

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\OssLogDef.h 27 KB H 文件 2014/2/25 11:36:50 2018/10/23 19:49:34 2018/10/23 19:49:34 3
540 	// 召唤宠物
541 	OssResAdd_PetWakan,
543 	// 跨服帮会Boss战
544 	OssResAdd_WorldClanBossWar,
544 	OssResAdd_WorldClanBossWar,
545 	// 跨服边境战
546 	OssResAdd_CountryBorderWar, 
548 	// 经脉真气增加途径
875 	OssResDel_PetWeapon,
876 	OssResDel_DelPet,
878 	// 跨服边境
879 	OssResDel_CountryBorderWar,
881 	// 国庆礼包

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\OssLogDef.h 27 KB H 文件 2014/2/25 14:54:06 2018/10/23 19:32:39 2018/10/23 19:32:39 3
540 	// 召唤宠物
541 	OssResAdd_PetWakan,
543 	// 跨服帮会Boss战
544 	OssResAdd_WorldClanBossWar,
544 	OssResAdd_WorldClanBossWar,
545 	// 跨服边境战
546 	OssResAdd_CountryBorderWar, 
548 	// 经脉真气增加途径
875 	OssResDel_PetWeapon,
876 	OssResDel_DelPet,
878 	// 跨服边境
879 	OssResDel_CountryBorderWar,
881 	// 国庆礼包

I:\work\source\蜀山神话\[src.cool]蜀山神话\src\server\gamesvr\society\OrganizeManager.h 6 KB H 文件 2012/4/21 1:05:07 2018/10/23 13:25:13 2018/10/23 13:25:13 1
137 	//师父开启当日师徒任务
138 	void HandleNotifyCorpQuest(FiMessage* pMsg);
139 	//处理跨服观察请求
140 	void HandleObserverOtherGameRequest(FiMessage* pMsg);
142     // 处理播放屏幕特效的通知

I:\work\source\蜀山神话\[src.cool]蜀山神话\src\server\npcserver\ObjectPxManager.h 10 KB H 文件 2012/4/21 1:05:18 2018/10/23 13:25:17 2018/10/23 13:25:17 1
230 	//变更结拜ID
231 	void				HandleNotifySwornBrotherId(FiMessage* pMsg);
232 	//请求跨服刷怪
233 	void				HandleRequestSpawnNpcToAppointSector(FiMessage* pMsg);
234     //通知玩家离开战斗状态

I:\work\source\仙剑神曲\[src.cool]仙剑神曲\src\server\gamesvr\buff\ObjectBuff.h 7 KB H 文件 2012/4/22 2:05:32 2018/10/23 16:10:53 2018/10/23 16:10:53 3
161     bool  IsSharedFromThisOne(ZGID otherGid);
162     
163     /// 是否为跨服重建的BUFF
164     bool  IsSvrRebuild() { return m_isSvrRebuild; }
165     
164     bool  IsSvrRebuild() { return m_isSvrRebuild; }
165     
166     /// 跨服重建BUFF标记
167     void  SetSvrBuildFlag(bool isSvrRebuild) { m_isSvrRebuild = isSvrRebuild; }
169     void  SetSrcType(INT32 srcType) { m_srcType = srcType; }
232     
233     UINT32 m_startTime;
235     INT32  m_extendTime;        ///< 延长的BUFF时间，仅在跨服计算时使用，勿做他用!!!
237     INT32 m_srcType;    ///< BUFF 来源
238 };

I:\work\source\武侠世界2\wxsj2\trunk\Server\Server\Obj\Obj_Pet.h 20 KB H 文件 2010/7/26 13:54:59 2018/10/23 18:25:24 2018/10/23 18:25:24 1
143 	virtual VOID		InitAIObj( );
145 	const _PET_DB*		GetPetDB(VOID) const { return &m_PetDB; }
146 	//根据召唤兽当前情况初始化DB,在跨服时使用
147 	VOID				InitMonsterPetDB( _Monster_Pet_DB_Struct& oMonsterPet );
149 	//注意只有存活的对象，才有初始化技能的需要

I:\work\source\武侠世界2\[src.cool]武侠世界2\Server\Server\Obj\Obj_Pet.h 20 KB H 文件 2010/7/26 13:54:59 2018/10/23 16:20:21 2018/10/23 16:20:21 1
143 	virtual VOID		InitAIObj( );
145 	const _PET_DB*		GetPetDB(VOID) const { return &m_PetDB; }
146 	//根据召唤兽当前情况初始化DB,在跨服时使用
147 	VOID				InitMonsterPetDB( _Monster_Pet_DB_Struct& oMonsterPet );
149 	//注意只有存活的对象，才有初始化技能的需要

I:\work\source\蜀山神话\[src.cool]蜀山神话\src\server\gamesvr\NobleManager.h 2 KB H 文件 2012/4/21 1:05:17 2018/10/23 13:25:11 2018/10/23 13:25:11 1
35      */
36     virtual void HandleMessage(FiMessage* pMsg);
38     /// 玩家登录，包括首次上线和跨服
39     void OnPlayerLogin(GamePlayer* pPlayer);
41     /// 刷新贵族点数

I:\work\source\预言OL\yl code\code\Server\GameServer\share\networkdef.h 12 KB H 文件 2010/1/14 16:35:19 2018/10/23 19:32:12 2018/10/23 19:32:12 1
54 // GONGFAN [11/22/2008]
55 const unsigned short _MSG_SYSNOTICE		=_MSG_GENERAL+60; //全GS公告
56 const unsigned short _MSG_TOGSPRIVATE	=_MSG_GENERAL+61; //跨服私聊
57 const unsigned short _MSG_SUPERLOUDSPEAKER = _MSG_GENERAL+62;// 超级大喇叭 [zhaowenyuan3/11/2009] 
59 // new info in cq

I:\work\source\预言OL\[src.cool]预言OL\yuyancode\code\Server\GameServer\share\networkdef.h 12 KB H 文件 2010/1/14 16:35:19 2018/10/23 19:32:55 2018/10/23 19:32:55 1
54 // GONGFAN [11/22/2008]
55 const unsigned short _MSG_SYSNOTICE		=_MSG_GENERAL+60; //全GS公告
56 const unsigned short _MSG_TOGSPRIVATE	=_MSG_GENERAL+61; //跨服私聊
57 const unsigned short _MSG_SUPERLOUDSPEAKER = _MSG_GENERAL+62;// 超级大喇叭 [zhaowenyuan3/11/2009] 
59 // new info in cq

I:\work\source\盛世OL\[src.cool]盛世OL\Server\GameServer\share\networkdef.h 14 KB H 文件 2014/2/25 15:44:18 2018/10/23 13:19:21 2018/10/23 13:19:21 1
59 // GONGFAN [11/22/2008]
60 const unsigned short _MSG_SYSNOTICE		=_MSG_GENERAL+60; //全GS公告
61 const unsigned short _MSG_TOGSPRIVATE	=_MSG_GENERAL+61; //跨服私聊
62 const unsigned short _MSG_SUPERLOUDSPEAKER = _MSG_GENERAL+62;// 超级大喇叭 [zhaowenyuan3/11/2009] 
63 const unsigned short _MSG_SCALLEX		= _MSG_GENERAL + 63;//公告系列

I:\work\source\剑侠时代\jxsd\core\地图插件\jxsd\code\Server\GameServer\share\networkdef.h 12 KB H 文件 2010/12/21 10:13:14 2018/10/19 14:11:35 2018/10/19 14:11:35 1
54 // wxy [11/22/2008]
55 const unsigned short _MSG_SYSNOTICE		=_MSG_GENERAL+60; //全GS公告
56 const unsigned short _MSG_TOGSPRIVATE	=_MSG_GENERAL+61; //跨服私聊
57 const unsigned short _MSG_SUPERLOUDSPEAKER = _MSG_GENERAL+62;// 超级大喇叭 [zhaowenyuan3/11/2009] 
59 // new info in cq

I:\work\source\剑侠时代\[src.cool]剑侠时代\jxsd\code\Server\GameServer\share\networkdef.h 12 KB H 文件 2010/12/21 10:13:14 2018/10/19 14:11:14 2018/10/19 14:11:14 1
54 // wxy [11/22/2008]
55 const unsigned short _MSG_SYSNOTICE		=_MSG_GENERAL+60; //全GS公告
56 const unsigned short _MSG_TOGSPRIVATE	=_MSG_GENERAL+61; //跨服私聊
57 const unsigned short _MSG_SUPERLOUDSPEAKER = _MSG_GENERAL+62;// 超级大喇叭 [zhaowenyuan3/11/2009] 
59 // new info in cq

I:\work\source\书剑恩仇录\书剑恩仇录_zccode.com\书剑恩仇录\金\Src\GLServer\GL\GLData\MutiGroupMapServerManager.h 4 KB H 文件 2013/3/3 13:56:50 2018/10/23 13:34:37 2018/10/23 13:34:37 2
4 Author:Michael		
5 Created:Michael
6 Description :跨服MapServer管理器定义
7 Revision :  2011/06/17 Michael create
9 =============================================================================*/
77 	//得到报名服务器
78 	ID_t GetSignupMapServer() const;
80 	//////////////////跨服消息处理相关///////////////////
82 	//向报名服务器发送消息
83 	BOOL SendMessage2SignupServer(IMessage* pPacket) const;

I:\work\source\书剑恩仇录\[src.cool]书剑恩仇录\Src\GLServer\GL\GLData\MutiGroupMapServerManager.h 4 KB H 文件 2013/3/3 13:56:50 2018/10/23 13:34:15 2018/10/23 13:34:15 2
4 Author:Michael		
5 Created:Michael
6 Description :跨服MapServer管理器定义
7 Revision :  2011/06/17 Michael create
9 =============================================================================*/
77 	//得到报名服务器
78 	ID_t GetSignupMapServer() const;
80 	//////////////////跨服消息处理相关///////////////////
82 	//向报名服务器发送消息
83 	BOOL SendMessage2SignupServer(IMessage* pPacket) const;

I:\work\source\最游记\[src.cool]最游记\Server\Server\Server\Common\MultiTeamStage.h 3 KB H 文件 2013/6/28 13:59:58 2018/10/23 19:49:53 2018/10/23 19:49:53 1
26     // 是否有该玩家的队伍
27     bool HaveTeam( uint32 nTeamID );
29     // Begin 以下应该是跨服战场相关的，暂时不做处理
30     virtual void CheckStageValid();
31     virtual void CheckLevel(GamePlayer* pkPlayer);

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\DBSvr\DBSvrLogic\Msg_CountryWorldWarUpdate.h 2 KB H 文件 2014/2/25 0:04:18 2018/10/23 20:03:52 2018/10/23 20:03:52 1
3 #define __Msg_CountryWorldWarUpdate_H__
5 #include "ClientMsgBase.h"
7 //国家-跨服轼战-更新
9 class CMsg_CountryWorldWarUpdate : public CClientMsgBase,  public IDBRetSink ,public IUpdateToDBSink
10 {

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\DBSvr\DBSvrLogic\Msg_CountryWorldWarUpdate.h 2 KB H 文件 2014/2/25 14:22:32 2018/10/23 19:42:50 2018/10/23 19:42:50 1
3 #define __Msg_CountryWorldWarUpdate_H__
5 #include "ClientMsgBase.h"
7 //国家-跨服轼战-更新
9 class CMsg_CountryWorldWarUpdate : public CClientMsgBase,  public IDBRetSink ,public IUpdateToDBSink
10 {

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\DBSvr\DBSvrLogic\Msg_CountryWorldWarLogGet.h 2 KB H 文件 2014/2/25 0:04:18 2018/10/23 20:03:52 2018/10/23 20:03:52 1
3 #define __Msg_CountryWorldWarLogGet_H__
5 #include "ClientMsgBase.h"
7 //国家-跨服国家战记录-读取
9 class CMsg_CountryWorldWarLogGet  : public CClientMsgBase,  public IDBRetSink
10 {

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\DBSvr\DBSvrLogic\Msg_CountryWorldWarLogGet.h 2 KB H 文件 2014/2/25 14:22:32 2018/10/23 19:42:50 2018/10/23 19:42:50 1
3 #define __Msg_CountryWorldWarLogGet_H__
5 #include "ClientMsgBase.h"
7 //国家-跨服国家战记录-读取
9 class CMsg_CountryWorldWarLogGet  : public CClientMsgBase,  public IDBRetSink
10 {

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\DBSvr\DBSvrLogic\Msg_CountryWorldWarLogAdd.h 2 KB H 文件 2014/2/25 0:04:17 2018/10/23 20:03:52 2018/10/23 20:03:52 1
3 #define __Msg_CountryWorldWarLogAdd_H__
5 #include "ClientMsgBase.h"
7 //国家-跨服国战记录-添加
9 class CMsg_CountryWorldWarLogAdd : public CClientMsgBase,  public IDBRetSink
10 {

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\DBSvr\DBSvrLogic\Msg_CountryWorldWarLogAdd.h 2 KB H 文件 2014/2/25 14:22:31 2018/10/23 19:42:50 2018/10/23 19:42:50 1
3 #define __Msg_CountryWorldWarLogAdd_H__
5 #include "ClientMsgBase.h"
7 //国家-跨服国战记录-添加
9 class CMsg_CountryWorldWarLogAdd : public CClientMsgBase,  public IDBRetSink
10 {

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\DBSvr\DBSvrLogic\Msg_CountryWorldWarGet.h 2 KB H 文件 2014/2/25 0:04:17 2018/10/23 20:03:52 2018/10/23 20:03:52 1
3 #define __Msg_CountryWorldWarGet_H__
5 #include "ClientMsgBase.h"
7 //国家-跨服国战-读取
10 class CMsg_CountryWorldWarGet  : public CClientMsgBase,  public IDBRetSink
11 {

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\DBSvr\DBSvrLogic\Msg_CountryWorldWarGet.h 2 KB H 文件 2014/2/25 14:22:31 2018/10/23 19:42:50 2018/10/23 19:42:50 1
3 #define __Msg_CountryWorldWarGet_H__
5 #include "ClientMsgBase.h"
7 //国家-跨服国战-读取
10 class CMsg_CountryWorldWarGet  : public CClientMsgBase,  public IDBRetSink
11 {

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\DBSvr\DBSvrLogic\Msg_CountryWorldWarAdd.h 2 KB H 文件 2014/2/25 0:04:16 2018/10/23 20:03:52 2018/10/23 20:03:52 1
3 #define __Msg_CountryWorldWarAdd_H__
5 #include "ClientMsgBase.h"
7 //国家-跨服国战-添加
9 class CMsg_CountryWorldWarAdd : public CClientMsgBase,  public IDBRetSink
10 {

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\DBSvr\DBSvrLogic\Msg_CountryWorldWarAdd.h 2 KB H 文件 2014/2/25 14:22:31 2018/10/23 19:42:50 2018/10/23 19:42:50 1
3 #define __Msg_CountryWorldWarAdd_H__
5 #include "ClientMsgBase.h"
7 //国家-跨服国战-添加
9 class CMsg_CountryWorldWarAdd : public CClientMsgBase,  public IDBRetSink
10 {

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Cluster\CellServer\MigrateManager.h 2 KB H 文件 2014/2/25 0:00:17 2018/10/23 20:03:26 2018/10/23 20:03:26 1
21 #include "ICenterServerConnector.h"
22 using namespace CenterServer;
24 /// 实体跨服务器迁移命令
25 #define MSG_MODULEID_ENTITY_MIGRATE      71
26 /// 实体迁移

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Cluster\CellServer\MigrateManager.h 2 KB H 文件 2014/2/25 14:22:05 2018/10/23 19:40:58 2018/10/23 19:40:58 1
21 #include "ICenterServerConnector.h"
22 using namespace CenterServer;
24 /// 实体跨服务器迁移命令
25 #define MSG_MODULEID_ENTITY_MIGRATE      71
26 /// 实体迁移

I:\work\source\最游记\[src.cool]最游记\Server\Server\Common\MessageRangeDefine.h 5 KB H 文件 2013/6/28 13:40:38 2018/10/23 19:45:32 2018/10/23 19:45:32 2
39     GAMEWORD_GUILDMSG_END = GAMEWORD_GUILDMSG_BEGIN + 90,
40     
41     // 跨服战场消息范围
42     GAMEWORD_BATTLEMSG_BEGIN,
43     GAMEWORD_BATTLEMSG_END = GAMEWORD_BATTLEMSG_BEGIN + 100,
152     EMessageModule_Platform   , // 平台模块
153 	EMessageModule_Family     , // 家族模块
154     EMessageModule_battle     , // 跨服战场
155 	EMessageModule_Shop       , // 商店系统模块
156     EMessageModule_Rabot      , // 外挂系统模块

I:\work\source\最游记\[src.cool]最游记\Client\Client\Common\MessageRangeDefine.h 5 KB H 文件 2013/6/28 14:14:14 2018/10/23 19:36:07 2018/10/23 19:36:07 2
39     GAMEWORD_GUILDMSG_END = GAMEWORD_GUILDMSG_BEGIN + 90,
40     
41     // 跨服战场消息范围
42     GAMEWORD_BATTLEMSG_BEGIN,
43     GAMEWORD_BATTLEMSG_END = GAMEWORD_BATTLEMSG_BEGIN + 100,
152     EMessageModule_Platform   , // 平台模块
153 	EMessageModule_Family     , // 家族模块
154     EMessageModule_battle     , // 跨服战场
155 	EMessageModule_Shop       , // 商店系统模块
156     EMessageModule_Rabot      , // 外挂系统模块

I:\work\source\最游记\Server\Common\MessageDefine.h 346 KB H 文件 2012/2/23 15:19:54 2012/2/23 15:19:54 2012/2/23 15:19:54 1
7320     {
7321         Result_Success = 0,     // 成功
7322         Result_Fail,            // 不在线,跨服, 或者不在有效范围内 ,都失败
7323     };
7325     uint8 chAssignResult;

I:\work\source\最游记\client\Common\MessageDefine.h 345 KB H 文件 2012/3/26 11:21:04 2012/5/10 19:15:15 2012/5/10 19:15:15 1
7323     {
7324         Result_Success = 0,     // 成功
7325         Result_Fail,            // 不在线,跨服, 或者不在有效范围内 ,都失败
7326     };
7328     uint8 chAssignResult;

I:\work\source\最游记\[src.cool]最游记\Server\Server\Common\MessageDefine.h 395 KB H 文件 2013/8/12 14:53:21 2018/10/23 19:45:32 2018/10/23 19:45:32 1
7741     {
7742         Result_Success = 0,     // 成功
7743         Result_Fail,            // 不在线,跨服, 或者不在有效范围内 ,都失败
7744     };
7746     uint8 chAssignResult;

I:\work\source\最游记\[src.cool]最游记\Client\Client\Common\MessageDefine.h 395 KB H 文件 2013/8/12 14:45:24 2018/10/23 19:36:07 2018/10/23 19:36:07 1
7741     {
7742         Result_Success = 0,     // 成功
7743         Result_Fail,            // 不在线,跨服, 或者不在有效范围内 ,都失败
7744     };
7746     uint8 chAssignResult;

I:\work\source\征三国\征三国\Common\MessageDefine.h 379 KB H 文件 2014/6/23 11:19:54 2018/10/23 19:34:50 2018/10/23 19:34:50 1
7542     {
7543         Result_Success = 0,     // 成功
7544         Result_Fail,            // 不在线,跨服, 或者不在有效范围内 ,都失败
7545     };
7547     uint8 chAssignResult;

I:\work\source\书剑恩仇录\书剑恩仇录_zccode.com\书剑恩仇录\金\Src\Share\MessageDefine.h 55 KB H 文件 2013/3/3 11:32:16 2018/10/23 13:35:57 2018/10/23 13:35:57 8
945 	PACKET_GX_GAMEBATTLE														= 3105,///< 战场相关
946 	PACKET_GX_DYNAMIC_SHOP														= 3108,///< 动态价格商店
947 	PACKET_GX_NOTICESYSINFO														= 3109,///< 跨服信息
948 	PACKET_GX_RET_GAMEONLINE													= 3110,///< 返回在线信息
948 	PACKET_GX_RET_GAMEONLINE													= 3110,///< 返回在线信息
949 	PACKET_GX_NEWWORLD															= 3111,///< 切场景请求，跨服专用
950 	PACKET_GX_ACTIVITY_NOTICE													= 3112,///< 活动追踪
951 	PACKET_GX_SEARCH_VENDUE_ITEM_LIST											= 3113,///	返回查询拍卖行列表
1086 	PACKET_XG_DYNAMIC_SHOP														= 4127,// 动态价格商店
1087 	PACKET_XG_NOTICESYSINFO														= 4128,///<
1088 	PACKET_XG_NEWWORLD															= 4129,///<进入新场景，跨服专用
1089 	PACKET_XG_ACTIVITY_NOTICE													= 4130,///< 开启活动跟踪
1090 	PACKET_XG_SEARCH_VENDUEITEM													= 4131,/// 查询拍卖行数据
1102 	PACKET_XG_TOPEXP_UPDATE														= 4141, // 等级排行更新
1103 	END_PACKET_XG,
1105 	BEGIN_PACKET_MG																= 5000,///<GL与跨服MapServer专用消息
1106 	PACKET_MG_ROOMBATTLE														= 5001,///<关卡
1107 	END_PACKET_MG,
1106 	PACKET_MG_ROOMBATTLE														= 5001,///<关卡
1107 	END_PACKET_MG,
1109 	BEGIN_PACKET_GM																= 5200,///<GL与跨服MapServer专用消息
1110 	PACKET_GM_ROOMBATTLE														= 5201,///<关卡
1111 	END_PACKET_GM,
1110 	PACKET_GM_ROOMBATTLE														= 5201,///<关卡
1111 	END_PACKET_GM,
1113 	BEGIN_PACKET_MGM															= 5400,///<GL与跨服MapServer专用消息
1114 	PACKET_MGM_ROOMBATTLE														= 5401,///<关卡
1115 	END_PACKET_MGM,
1114 	PACKET_MGM_ROOMBATTLE														= 5401,///<关卡
1115 	END_PACKET_MGM,
1117 	BEGIN_PACKET_XGM															= 5600,///<GL与跨服MapServer专用消息
1118 	PACKET_XGM_ROOMBATTLE														= 5601,///<关卡
1119 	PACKET_XGM_PKROOM															= 5602,///<决斗房间
1119 	PACKET_XGM_PKROOM															= 5602,///<决斗房间
1120 	END_PACKET_XGM,
1122 	BEGIN_PACKET_MGX															= 5800,///<GL与跨服MapServer专用消息
1123 	PACKET_MGX_ROOMBATTLE														= 5801,///<关卡
1124 	PACKET_MGX_PKROOM															= 5802,///<决斗房间

I:\work\source\书剑恩仇录\[src.cool]书剑恩仇录\Src\Share\MessageDefine.h 55 KB H 文件 2013/3/3 11:32:16 2018/10/23 13:35:02 2018/10/23 13:35:02 8
945 	PACKET_GX_GAMEBATTLE														= 3105,///< 战场相关
946 	PACKET_GX_DYNAMIC_SHOP														= 3108,///< 动态价格商店
947 	PACKET_GX_NOTICESYSINFO														= 3109,///< 跨服信息
948 	PACKET_GX_RET_GAMEONLINE													= 3110,///< 返回在线信息
948 	PACKET_GX_RET_GAMEONLINE													= 3110,///< 返回在线信息
949 	PACKET_GX_NEWWORLD															= 3111,///< 切场景请求，跨服专用
950 	PACKET_GX_ACTIVITY_NOTICE													= 3112,///< 活动追踪
951 	PACKET_GX_SEARCH_VENDUE_ITEM_LIST											= 3113,///	返回查询拍卖行列表
1086 	PACKET_XG_DYNAMIC_SHOP														= 4127,// 动态价格商店
1087 	PACKET_XG_NOTICESYSINFO														= 4128,///<
1088 	PACKET_XG_NEWWORLD															= 4129,///<进入新场景，跨服专用
1089 	PACKET_XG_ACTIVITY_NOTICE													= 4130,///< 开启活动跟踪
1090 	PACKET_XG_SEARCH_VENDUEITEM													= 4131,/// 查询拍卖行数据
1102 	PACKET_XG_TOPEXP_UPDATE														= 4141, // 等级排行更新
1103 	END_PACKET_XG,
1105 	BEGIN_PACKET_MG																= 5000,///<GL与跨服MapServer专用消息
1106 	PACKET_MG_ROOMBATTLE														= 5001,///<关卡
1107 	END_PACKET_MG,
1106 	PACKET_MG_ROOMBATTLE														= 5001,///<关卡
1107 	END_PACKET_MG,
1109 	BEGIN_PACKET_GM																= 5200,///<GL与跨服MapServer专用消息
1110 	PACKET_GM_ROOMBATTLE														= 5201,///<关卡
1111 	END_PACKET_GM,
1110 	PACKET_GM_ROOMBATTLE														= 5201,///<关卡
1111 	END_PACKET_GM,
1113 	BEGIN_PACKET_MGM															= 5400,///<GL与跨服MapServer专用消息
1114 	PACKET_MGM_ROOMBATTLE														= 5401,///<关卡
1115 	END_PACKET_MGM,
1114 	PACKET_MGM_ROOMBATTLE														= 5401,///<关卡
1115 	END_PACKET_MGM,
1117 	BEGIN_PACKET_XGM															= 5600,///<GL与跨服MapServer专用消息
1118 	PACKET_XGM_ROOMBATTLE														= 5601,///<关卡
1119 	PACKET_XGM_PKROOM															= 5602,///<决斗房间
1119 	PACKET_XGM_PKROOM															= 5602,///<决斗房间
1120 	END_PACKET_XGM,
1122 	BEGIN_PACKET_MGX															= 5800,///<GL与跨服MapServer专用消息
1123 	PACKET_MGX_ROOMBATTLE														= 5801,///<关卡
1124 	PACKET_MGX_PKROOM															= 5802,///<决斗房间

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\MatchService\MatchService.h 30 KB H 文件 2014/2/25 0:23:05 2018/10/23 20:09:04 2018/10/23 20:09:04 14
5 ** 日  期:	2008/12/9 16:50
6 ** 版  本:	1.0
7 ** 描  述:	跨服组队撮合系统服务
8 ** 应  用:  	
9 	
138 // 竞技场情景配置数据,以序号为关键字
139 typedef map<DWORD,SStrikeSceneSchemeInfo> TMAP_StrikeSceneSchemeInfo;
141 // 跨服在线玩家列表,以玩家角色ID为关键字
142 typedef map<DWORD,SWorldOnlineUserInfo> TMAP_WorldOnlineUserList;
144 //挑战系统：各排名区间的配置信息
145 typedef map<int, SDummySelectSchemeInfo> TMAP_SDummySelectSchemeInfoList;
147 typedef std::vector<SMatchTeamResultInfo> TeamMatchResult;
149 // 跨服组队撮合系统
150 class CMatchService :public IMatchService, public IMessageHandler,public TimerHandler,public IUserManagerObserver, public IEventVoteSink, public IEventExecuteSink,public ISchemeUpdateSink,public IBridgeMessageHandler,public IBridgeEventHandler
151 {
500 	*/
501 	virtual IEctypeAssist* GetEctypeAssist();
503 	/** 取得跨服竞技撮合系统接口
504 	*/
505 	virtual IStrikeMatch* GetStrikeMatch();
532 	*/
533 	virtual BYTE GetStrikePrizeRateFlag(BYTE nPrizeRateNo);
535 	/** 取得跨服在线角色信息
536 	@param   DWORD dwPDBID	: 角色ID
537 	@return SWorldOnlineUserInfo 在线角色信息
538 	*/
539 	virtual const SWorldOnlineUserInfo * GetOtherWorldUserInfo(DWORD dwPDBID);
541 	/** 取得跨服在线角色个数
542 	@param  
543 	@return   DWORD : 在线角色个数
544 	*/
545 	virtual DWORD GetOtherWorldUserCounts();
547 	/** 设定指定游戏世界ID是否开启跨服国战
548 	@param   DWORD dwWorldID	: 游戏世界ID
549 	@param   bool bClose		: 是否关闭
551 	*/
552 	virtual void SetCloseWorldCountryWar(DWORD dwWorldID,bool bClose=true);
554 	/** 指定游戏世界ID是否开启跨服国战
555 	@param   DWORD dwWorldID	: 游戏世界ID
556 	@return bool 是否关闭
602 	// 取得跨区副本
603 	CEctypeAssist& GetEctypeAssistInstance();
604 	// 取得跨服竞技撮合系统
605 	CStrikeMatch& GetStrikeMatchInstance();
606 	// 取得跨区竞技系统
616 	// 取得战场情景配置信息列表
617 	TMAP_WarSceneSchemeInfo & GetWarSceneSchemeList();
618 	// 本区是否能开跨服国战
619 	bool IsCanOpenWorldWar();
620 	// 构造函数
739 	void OnMsgMatchSubMsg(ulong endpointId, ulong actionId, SGameMsgHead* head, void* data, size_t len);
741 	//////////////////////////////////////////////////////////////////////////
742 	// 跨服 服务器撮合信息子消息
743 	void OnBridgeMsgMatchSubMsg(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
743 	void OnBridgeMsgMatchSubMsg(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
744 	// 跨服 跨区中转消息
745 	void OnBridgeMsgMatchBridgeData(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
746 	
796 	// 跨区副本保姆
797 	CEctypeAssist m_EctypeAssist;
798 	// 跨服竞技撮合系统
799 	CStrikeMatch m_StrikeMatch;
800 	// 跨区竞技系统
820 	// 整个队伍撮合组装队伍临时数据,以队长为关键字
821 	TMAP_MatchTeamInfo m_mapMatchWholeTeamInfo;
823 	// 所有游戏世界跨服在线玩家列表,以玩家角色ID为关键字
824 	TMAP_WorldOnlineUserList m_mapWorldOnlineUserList;
826 	// 最大撮合组装队伍节点ID

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\MatchService\MatchService.h 30 KB H 文件 2014/2/25 14:31:40 2018/10/23 19:46:42 2018/10/23 19:46:42 14
5 ** 日  期:	2008/12/9 16:50
6 ** 版  本:	1.0
7 ** 描  述:	跨服组队撮合系统服务
8 ** 应  用:  	
9 	
138 // 竞技场情景配置数据,以序号为关键字
139 typedef map<DWORD,SStrikeSceneSchemeInfo> TMAP_StrikeSceneSchemeInfo;
141 // 跨服在线玩家列表,以玩家角色ID为关键字
142 typedef map<DWORD,SWorldOnlineUserInfo> TMAP_WorldOnlineUserList;
144 //挑战系统：各排名区间的配置信息
145 typedef map<int, SDummySelectSchemeInfo> TMAP_SDummySelectSchemeInfoList;
147 typedef std::vector<SMatchTeamResultInfo> TeamMatchResult;
149 // 跨服组队撮合系统
150 class CMatchService :public IMatchService, public IMessageHandler,public TimerHandler,public IUserManagerObserver, public IEventVoteSink, public IEventExecuteSink,public ISchemeUpdateSink,public IBridgeMessageHandler,public IBridgeEventHandler
151 {
500 	*/
501 	virtual IEctypeAssist* GetEctypeAssist();
503 	/** 取得跨服竞技撮合系统接口
504 	*/
505 	virtual IStrikeMatch* GetStrikeMatch();
532 	*/
533 	virtual BYTE GetStrikePrizeRateFlag(BYTE nPrizeRateNo);
535 	/** 取得跨服在线角色信息
536 	@param   DWORD dwPDBID	: 角色ID
537 	@return SWorldOnlineUserInfo 在线角色信息
538 	*/
539 	virtual const SWorldOnlineUserInfo * GetOtherWorldUserInfo(DWORD dwPDBID);
541 	/** 取得跨服在线角色个数
542 	@param  
543 	@return   DWORD : 在线角色个数
544 	*/
545 	virtual DWORD GetOtherWorldUserCounts();
547 	/** 设定指定游戏世界ID是否开启跨服国战
548 	@param   DWORD dwWorldID	: 游戏世界ID
549 	@param   bool bClose		: 是否关闭
551 	*/
552 	virtual void SetCloseWorldCountryWar(DWORD dwWorldID,bool bClose=true);
554 	/** 指定游戏世界ID是否开启跨服国战
555 	@param   DWORD dwWorldID	: 游戏世界ID
556 	@return bool 是否关闭
602 	// 取得跨区副本
603 	CEctypeAssist& GetEctypeAssistInstance();
604 	// 取得跨服竞技撮合系统
605 	CStrikeMatch& GetStrikeMatchInstance();
606 	// 取得跨区竞技系统
616 	// 取得战场情景配置信息列表
617 	TMAP_WarSceneSchemeInfo & GetWarSceneSchemeList();
618 	// 本区是否能开跨服国战
619 	bool IsCanOpenWorldWar();
620 	// 构造函数
739 	void OnMsgMatchSubMsg(ulong endpointId, ulong actionId, SGameMsgHead* head, void* data, size_t len);
741 	//////////////////////////////////////////////////////////////////////////
742 	// 跨服 服务器撮合信息子消息
743 	void OnBridgeMsgMatchSubMsg(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
743 	void OnBridgeMsgMatchSubMsg(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
744 	// 跨服 跨区中转消息
745 	void OnBridgeMsgMatchBridgeData(unsigned long actionId, SMsgBridgeHead &bridgeHead, SGameMsgHead* head, LPSTR data, size_t len);
746 	
796 	// 跨区副本保姆
797 	CEctypeAssist m_EctypeAssist;
798 	// 跨服竞技撮合系统
799 	CStrikeMatch m_StrikeMatch;
800 	// 跨区竞技系统
820 	// 整个队伍撮合组装队伍临时数据,以队长为关键字
821 	TMAP_MatchTeamInfo m_mapMatchWholeTeamInfo;
823 	// 所有游戏世界跨服在线玩家列表,以玩家角色ID为关键字
824 	TMAP_WorldOnlineUserList m_mapWorldOnlineUserList;
826 	// 最大撮合组装队伍节点ID

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\MatchServer.h 34 KB H 文件 2014/2/25 0:08:51 2018/10/23 20:06:23 2018/10/23 20:06:23 10
5 ** 日  期:	2010-7-13
6 ** 版  本:	1.0
7 ** 描  述:	跨服组队撮合系统服务器
8 ** 应  用:  	
9 	
50 // 竞技场抽奖配置数据,以竞技场ID为关键字
51 typedef map<DWORD, TMAP_StrikeDropPrizeLevelSchemeInfo> TMAP_StrikeDropPrizeLevelSchemeInfoList;
53 // 跨服国战跨服BUFF配置信息结构
54 struct SCountryWarBalanceConfig
55 {
421 	*/
422 	virtual IEctypeAssist* GetEctypeAssist();
424 	/** 取得跨服竞技撮合系统接口
425 	*/
426 	virtual IStrikeMatch* GetStrikeMatch();
565 	/** 加入PVP场景类型与相关ID映射信息
566 	@param  DWORD dwZoneID		:		场景ID
567 	@param  DWORD dwPVPType		:		跨服PVP类型 EMPVPClassType
568 	@param  DWORD dwWarID		:		相关战场ID
569 	*/
577 	/** 加入战争资源UID与相关ID映射信息
578 	@param  LONGLONG uid		:		实体UID
579 	@param  DWORD dwPVPType		:		跨服PVP类型 EMPVPClassType
580 	@param  DWORD dwWarID		:		相关战场ID
581 	@param  DWORD dwID			:		相关战争资源ID
608 	*/
609 	void AddStrikeResultLog(SEventPersonStrikeFinish_S addData);
611 	// 获取跨服国战平衡BUFF配置信息
612 	const SCountryWarBalanceConfig & GetCountryWarBalanceConfig(DWORD dwIndex);
614 	// 取得跨区副本助手
614 	// 取得跨区副本助手
615 	CEctypeAssist& GetEctypeAssistInstance();
616 	// 取得跨服竞技撮合系统
617 	CStrikeMatch& GetStrikeMatchInstance();
618 	// 取得跨区竞技系统
713 	DWORD GetAllMatchItemOpenFlag();
714 	
715 	// 初始化跨服国战平衡BUFF配置信息
716 	void InitializeWarBalanceConfig();
718 	// 找到所有队员并请求副本状态数据
854 	// 公共区遣返模块
855 	CPublicWatcher m_PublicWatcher;
856 	// 跨服竞技撮合系统模块
857 	CStrikeMatch m_StrikeMatch;
858 	// 跨区竞技系统模块

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\MatchServer.h 34 KB H 文件 2014/2/25 14:27:05 2018/10/23 19:45:11 2018/10/23 19:45:11 10
5 ** 日  期:	2010-7-13
6 ** 版  本:	1.0
7 ** 描  述:	跨服组队撮合系统服务器
8 ** 应  用:  	
9 	
50 // 竞技场抽奖配置数据,以竞技场ID为关键字
51 typedef map<DWORD, TMAP_StrikeDropPrizeLevelSchemeInfo> TMAP_StrikeDropPrizeLevelSchemeInfoList;
53 // 跨服国战跨服BUFF配置信息结构
54 struct SCountryWarBalanceConfig
55 {
421 	*/
422 	virtual IEctypeAssist* GetEctypeAssist();
424 	/** 取得跨服竞技撮合系统接口
425 	*/
426 	virtual IStrikeMatch* GetStrikeMatch();
565 	/** 加入PVP场景类型与相关ID映射信息
566 	@param  DWORD dwZoneID		:		场景ID
567 	@param  DWORD dwPVPType		:		跨服PVP类型 EMPVPClassType
568 	@param  DWORD dwWarID		:		相关战场ID
569 	*/
577 	/** 加入战争资源UID与相关ID映射信息
578 	@param  LONGLONG uid		:		实体UID
579 	@param  DWORD dwPVPType		:		跨服PVP类型 EMPVPClassType
580 	@param  DWORD dwWarID		:		相关战场ID
581 	@param  DWORD dwID			:		相关战争资源ID
608 	*/
609 	void AddStrikeResultLog(SEventPersonStrikeFinish_S addData);
611 	// 获取跨服国战平衡BUFF配置信息
612 	const SCountryWarBalanceConfig & GetCountryWarBalanceConfig(DWORD dwIndex);
614 	// 取得跨区副本助手
614 	// 取得跨区副本助手
615 	CEctypeAssist& GetEctypeAssistInstance();
616 	// 取得跨服竞技撮合系统
617 	CStrikeMatch& GetStrikeMatchInstance();
618 	// 取得跨区竞技系统
713 	DWORD GetAllMatchItemOpenFlag();
714 	
715 	// 初始化跨服国战平衡BUFF配置信息
716 	void InitializeWarBalanceConfig();
718 	// 找到所有队员并请求副本状态数据
854 	// 公共区遣返模块
855 	CPublicWatcher m_PublicWatcher;
856 	// 跨服竞技撮合系统模块
857 	CStrikeMatch m_StrikeMatch;
858 	// 跨区竞技系统模块

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\MatchClient\MatchClient.h 24 KB H 文件 2014/2/25 8:34:44 2018/10/23 19:52:18 2018/10/23 19:52:18 3
5 ** 日  期:	2010-7-13
6 ** 版  本:	1.0
7 ** 描  述:	跨服组队撮合系统客户端
8 ** 应  用:	
10 **************************** 修改记录 ******************************
319 	*/
320 	virtual IPersonStrikePart* CreatePersonStrikePart();
322 	/** 取得跨服竞技撮合系统接口
323 	*/
324 	virtual IStrikeMatch* GetStrikeMatch();
548 	// 取得跨区副本助手
549 	CEctypeAssist& GetCEctypeAssistInstance();
550 	// 取得跨服竞技撮合系统接口
551 	CStrikeMatch& GetStrikeMatchInstance();
552 	// 取得跨区竞技系统接口

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\MatchClient\MatchClient.h 24 KB H 文件 2014/2/25 13:44:51 2018/10/23 19:34:25 2018/10/23 19:34:25 3
5 ** 日  期:	2010-7-13
6 ** 版  本:	1.0
7 ** 描  述:	跨服组队撮合系统客户端
8 ** 应  用:	
10 **************************** 修改记录 ******************************
319 	*/
320 	virtual IPersonStrikePart* CreatePersonStrikePart();
322 	/** 取得跨服竞技撮合系统接口
323 	*/
324 	virtual IStrikeMatch* GetStrikeMatch();
548 	// 取得跨区副本助手
549 	CEctypeAssist& GetCEctypeAssistInstance();
550 	// 取得跨服竞技撮合系统接口
551 	CStrikeMatch& GetStrikeMatchInstance();
552 	// 取得跨区竞技系统接口

I:\work\source\最游记\Core\src\MeCommon\Include\MapConfig.h 18 KB H 文件 2012/3/26 11:25:47 2012/5/10 16:58:17 2012/5/10 16:58:17 1
138             EPKM_Challenge_PK   = 8,    // 个人擂台地图
139             EPKM_Contend_PK     = 9,    // 争夺战PK
140             EPKM_CrossServer_PK = 10,   // 跨服PK战
141             
143             EPKM_End = 0xF,

I:\work\source\最游记\Core\src\Include\MeCommon\MapConfig.h 18 KB H 文件 2012/3/26 11:25:47 2012/1/6 20:20:29 2011/12/6 11:34:42 1
138             EPKM_Challenge_PK   = 8,    // 个人擂台地图
139             EPKM_Contend_PK     = 9,    // 争夺战PK
140             EPKM_CrossServer_PK = 10,   // 跨服PK战
141             
143             EPKM_End = 0xF,

I:\work\source\最游记\Core\Core_server\Include\MeCommon\MapConfig.h 18 KB H 文件 2011/12/6 11:36:58 2012/4/29 10:56:31 2012/4/29 10:56:31 1
138             EPKM_Challenge_PK   = 8,    // 个人擂台地图
139             EPKM_Contend_PK     = 9,    // 争夺战PK
140             EPKM_CrossServer_PK = 10,   // 跨服PK战
141             
143             EPKM_End = 0xF,

I:\work\source\最游记\Core\Core_client\Include\MeCommon\MapConfig.h 18 KB H 文件 2012/3/26 11:25:47 2012/6/2 20:01:34 2012/6/2 20:01:34 1
138             EPKM_Challenge_PK   = 8,    // 个人擂台地图
139             EPKM_Contend_PK     = 9,    // 争夺战PK
140             EPKM_CrossServer_PK = 10,   // 跨服PK战
141             
143             EPKM_End = 0xF,

I:\work\source\最游记\[src.cool]最游记\Server\Server\Contrib\Include\MeCommon\MapConfig.h 21 KB H 文件 2013/6/28 13:41:44 2018/10/23 19:46:34 2018/10/23 19:46:34 1
184             EPKM_Challenge_PK   = 8,    // 个人擂台地图
185             EPKM_Contend_PK     = 9,    // 争夺战PK
186             EPKM_CrossServer_PK = 10,   // 跨服PK战
188 			EPKM_Tuobo_Use = 20,
189 			EPKM_Normal_Map       = 21,	  // 普通场景

I:\work\source\最游记\[src.cool]最游记\Client\Client\Contrib_bak\Include\MeCommon\MapConfig.h 21 KB H 文件 2013/6/28 14:03:42 2018/10/23 19:40:01 2018/10/23 19:40:01 1
184             EPKM_Challenge_PK   = 8,    // 个人擂台地图
185             EPKM_Contend_PK     = 9,    // 争夺战PK
186             EPKM_CrossServer_PK = 10,   // 跨服PK战
188 			EPKM_Tuobo_Use = 20,
189 			EPKM_Normal_Map       = 21,	  // 普通场景

I:\work\source\最游记\[src.cool]最游记\Client\Client\Contrib\Include\MeCommon\MapConfig.h 21 KB H 文件 2013/6/28 14:14:18 2018/10/23 19:36:40 2018/10/23 19:36:40 1
184             EPKM_Challenge_PK   = 8,    // 个人擂台地图
185             EPKM_Contend_PK     = 9,    // 争夺战PK
186             EPKM_CrossServer_PK = 10,   // 跨服PK战
188 			EPKM_Tuobo_Use = 20,
189 			EPKM_Normal_Map       = 21,	  // 普通场景

I:\work\source\征三国\征三国\Contrib\MeCommon\Include\MapConfig.h 19 KB H 文件 2013/10/16 23:17:06 2018/10/23 19:45:26 2018/10/23 19:45:26 1
144             EPKM_Challenge_PK   =  8,    // 个人擂台地图
145             EPKM_Contend_PK     =  9,    // 争夺战PK
146             EPKM_CrossServer_PK =  10,   // 跨服PK战
147             EPKM_WorldBattle_PK =  11,	 // 世界战场PK模式
149             EPKM_End = 0xF,

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\LuaService\LuaAPI.h 42 KB H 文件 2014/2/25 0:22:40 2018/10/23 20:09:00 2018/10/23 20:09:00 10
856 */
857 int GetMaxLingHunVocation(DWORD pdbid);
860 /** 设定指定游戏世界ID是否开启跨服国战
861 @param   DWORD dwWorldID	: 游戏世界ID
862 @param   bool bClose		: 是否关闭
864 */
865 void SetCloseWorldCountryWar(DWORD dwWorldID,bool bClose=true);
867 /** 指定游戏世界ID是否开启跨服国战
868 @param   DWORD dwWorldID	: 游戏世界ID
869 @return bool 是否关闭
898 */
899 void BroadcastSystemTipsById(TipsType type, ulong id, int channel, int pos, const char* text);
901 /** 手动更新所有国家的跨服边境连接
902 @param
903 */
903 */
904 bool LuaReLinkAllWorldCountry(bool bCheckWeekDay=true);
906 /**  取得跨服组队撮合系统服务接口
907 @param   
907 @param   
908 @return  跨服组队撮合系统服务接口
909 */
910 IMatchService * GetMatchService(void);
919 /************************************************************************/
920 void LuaSacredWeaponReadDataFromDB();
924 /// 开启跨服战场API ///////////////////////////////////////////////////////////////////////
926 /** 立即创建跨服国战并开启副本
927 @param
928 */
928 */
929 bool LuaStartWorldCountryWar(DWORD dwAttackWorldID, DWORD dwAttackCountryID, DWORD dwDefendWorldID, DWORD dwDefendCountryID, DWORD dwSceneID=0);
931 /** 立即创建跨服边境并开启副本
932 @param
933 */
933 */
934 bool LuaStartWorldCountryBorderWar(DWORD dwAttackWorldID, DWORD dwAttackCountryID, DWORD dwLinkWorldID, DWORD dwLinkCountryID, DWORD dwSceneID=0);
936 /* 强制让本区的跨服国战记录失效，用于处理公共区异常导致本区缓存的数据还运行的问题，不让客户端显示活动追踪及DIDA
937 @Param	: DWORD dwDBID	跨服国战数据库记录ID
938 @Param	: DWORD dwState	战场状态标识 EMWarState
939 @Param	: DWORD dwRunStep	战场状态子类扩展

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\LuaClient\LuaApi.h 27 KB H 文件 2014/2/25 8:34:03 2018/10/23 19:52:06 2018/10/23 19:52:06 1
270 // 取得套装客户端
271 ISuitClient* GetSuitClient();
273 // 取得跨服组队撮合系统客户端
274 IMatchClient* GetMatchClient();
276 // 获取游戏分区列表接口

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\LuaService\LuaAPI.h 42 KB H 文件 2014/2/25 14:31:27 2018/10/23 19:46:39 2018/10/23 19:46:39 10
856 */
857 int GetMaxLingHunVocation(DWORD pdbid);
860 /** 设定指定游戏世界ID是否开启跨服国战
861 @param   DWORD dwWorldID	: 游戏世界ID
862 @param   bool bClose		: 是否关闭
864 */
865 void SetCloseWorldCountryWar(DWORD dwWorldID,bool bClose=true);
867 /** 指定游戏世界ID是否开启跨服国战
868 @param   DWORD dwWorldID	: 游戏世界ID
869 @return bool 是否关闭
898 */
899 void BroadcastSystemTipsById(TipsType type, ulong id, int channel, int pos, const char* text);
901 /** 手动更新所有国家的跨服边境连接
902 @param
903 */
903 */
904 bool LuaReLinkAllWorldCountry(bool bCheckWeekDay=true);
906 /**  取得跨服组队撮合系统服务接口
907 @param   
907 @param   
908 @return  跨服组队撮合系统服务接口
909 */
910 IMatchService * GetMatchService(void);
919 /************************************************************************/
920 void LuaSacredWeaponReadDataFromDB();
924 /// 开启跨服战场API ///////////////////////////////////////////////////////////////////////
926 /** 立即创建跨服国战并开启副本
927 @param
928 */
928 */
929 bool LuaStartWorldCountryWar(DWORD dwAttackWorldID, DWORD dwAttackCountryID, DWORD dwDefendWorldID, DWORD dwDefendCountryID, DWORD dwSceneID=0);
931 /** 立即创建跨服边境并开启副本
932 @param
933 */
933 */
934 bool LuaStartWorldCountryBorderWar(DWORD dwAttackWorldID, DWORD dwAttackCountryID, DWORD dwLinkWorldID, DWORD dwLinkCountryID, DWORD dwSceneID=0);
936 /* 强制让本区的跨服国战记录失效，用于处理公共区异常导致本区缓存的数据还运行的问题，不让客户端显示活动追踪及DIDA
937 @Param	: DWORD dwDBID	跨服国战数据库记录ID
938 @Param	: DWORD dwState	战场状态标识 EMWarState
939 @Param	: DWORD dwRunStep	战场状态子类扩展

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\LuaClient\LuaApi.h 27 KB H 文件 2014/2/25 13:44:20 2018/10/23 19:34:22 2018/10/23 19:34:22 1
270 // 取得套装客户端
271 ISuitClient* GetSuitClient();
273 // 取得跨服组队撮合系统客户端
274 IMatchClient* GetMatchClient();
276 // 获取游戏分区列表接口

I:\work\source\天空之剑\[src.cool]天空之剑\sky\Code\SrcServer\ScriptEngine\LUAApi.h 16 KB H 文件 2013/5/24 13:12:24 2018/10/23 14:48:35 2018/10/23 14:48:35 1
227 	// 传送玩家到某个地图
228 	static bool PlayerSwitchMap(int nPlayerDBID, long lMapID, int nMapCopyIndex, long x, long y);
230 	// 传送玩家到跨服务器的某个地图
231 	static bool PlayerSwtichGS(int nPlayerDBID, long lServerID, long lMapID, int nMapCopyIndex, long x, long y);
233 	// 传送玩家到后备地图

I:\work\source\仙剑神曲\[src.cool]仙剑神曲\src\server\include\logclient\LogDataType.h 33 KB H 文件 2012/4/22 2:05:30 2018/10/23 16:11:32 2018/10/23 16:11:32 1
196     CHAR_LOGOUT_CAPTCHA_FAILED  = 14,   // 防沉迷验证错误超过指定次数踢下线
197     CHAR_LOGOUT_GATE_DISCONN    = 15,   // GateSvr断线
198     CHAR_LOGOUT_TRANSMIT_MAP    = 16,   // 跨服跳地图移除本服角色
199     CHAR_CAPTCHA_HACK           = 17,   // 验证图片非法超过指定次数踢下线
200     CHAR_CHANGE_RACE_KICK       = 18,   // 使用转职功能踢下线

I:\work\source\书剑恩仇录\书剑恩仇录_zccode.com\书剑恩仇录\金\Src\Client\Game\Object\KObjCommand.h 2 KB H 文件 2013/3/3 13:28:26 2018/10/23 13:33:19 2018/10/23 13:33:19 1
15 /* 仓库整理消息发送间隔时间 */
16 #define BANK_RESET_ITEM_TIME	(1)			/* 毫秒 */
18 /* 跨服地下城报名间隔时间 */
19 #define FUBEN_RESET_COOLDOWN_ITEM	(60000)	/* 毫秒 */
21 /* obj实体消亡时间 */

I:\work\source\书剑恩仇录\[src.cool]书剑恩仇录\Src\Client\Game\Object\KObjCommand.h 2 KB H 文件 2013/3/3 13:28:26 2018/10/23 13:33:09 2018/10/23 13:33:09 1
15 /* 仓库整理消息发送间隔时间 */
16 #define BANK_RESET_ITEM_TIME	(1)			/* 毫秒 */
18 /* 跨服地下城报名间隔时间 */
19 #define FUBEN_RESET_COOLDOWN_ITEM	(60000)	/* 毫秒 */
21 /* obj实体消亡时间 */

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\Include\IZoneServiceProvider.h 18 KB H 文件 2014/2/25 0:08:52 2018/10/23 20:05:20 2018/10/23 20:05:20 1
766 	*/
767 	virtual IStarTrekServer *			GetStarTrekServer(void) = NULL;
769 	/** 取得跨服组队撮合服务器
770 	@param   
771 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\Include\IZoneServiceProvider.h 18 KB H 文件 2014/2/25 14:25:34 2018/10/23 19:44:10 2018/10/23 19:44:10 1
766 	*/
767 	virtual IStarTrekServer *			GetStarTrekServer(void) = NULL;
769 	/** 取得跨服组队撮合服务器
770 	@param   
771 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\Include\IZoneManager.h 28 KB H 文件 2014/2/25 0:08:51 2018/10/23 20:05:20 2018/10/23 20:05:20 1
282 	*/
283 	virtual bool				CanArena() = NULL;
285 	/** 是否允许跨服传送
286 	@param   
287 	@param   

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\Include\IZoneManager.h 28 KB H 文件 2014/2/25 14:25:34 2018/10/23 19:44:10 2018/10/23 19:44:10 1
282 	*/
283 	virtual bool				CanArena() = NULL;
285 	/** 是否允许跨服传送
286 	@param   
287 	@param   

I:\work\source\君天下OL\君天下OL完整\Server\GameServer\Game\InstanceQueue.h 4 KB H 文件 2011/7/4 9:41:04 2018/10/19 14:51:54 2018/10/19 14:51:54 1
105 		InstanceQueue* iq;
106 		GSC_InstanceQueue* gsc_iq;  // 
107 		GSP_InstanceQueueBase* gsp_iq;  // 跨服服务器
108 	};
109 	std::vector<instance_queue*> m_iqv;

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\Include\IMatchService.h 31 KB H 文件 2014/2/25 0:22:03 2018/10/23 20:08:56 2018/10/23 20:08:56 17
5 ** 日  期:	2008/12/9 16:45
6 ** 版  本:	1.0
7 ** 描  述:	跨服组队撮合系统服务接口定义
8 ** 应  用:  	
9 	
34 // tolua_begin
36 //////////////////////////////////////////////////////////////////////////
37 // 跨服组队撮合系统服务接口定义
38 struct IMatchService
39 {
211 	*/
212 	virtual IEctypeAssist* GetEctypeAssist() = NULL;
214 	/** 取得跨服竞技撮合系统接口
215 	*/
216 	virtual IStrikeMatch* GetStrikeMatch() = NULL;
243 	*/
244 	virtual BYTE GetStrikePrizeRateFlag(BYTE nPrizeRateNo) = NULL;
246 	/** 取得跨服在线角色信息
247 	@param   DWORD dwPDBID	: 角色ID
248 	@return SWorldOnlineUserInfo 在线角色信息
249 	*/
250 	virtual const SWorldOnlineUserInfo * GetOtherWorldUserInfo(DWORD dwPDBID) = NULL;
252 	/** 取得跨服在线角色个数
253 	@param  
254 	@return   DWORD : 在线角色个数
255 	*/
256 	virtual DWORD GetOtherWorldUserCounts() = NULL;
257 	/** 设定指定游戏世界ID是否开启跨服国战
258 	@param   DWORD dwWorldID	: 游戏世界ID
259 	@param   bool bClose		: 是否关闭
261 	*/
262 	virtual void SetCloseWorldCountryWar(DWORD dwWorldID,bool bClose=true) = NULL;
264 	/** 指定游戏世界ID是否开启跨服国战
265 	@param   DWORD dwWorldID	: 游戏世界ID
266 	@return bool 是否关闭
296 	virtual bool GetMatrixOpen(void) = NULL;
297 };
300 // 跨服竞技撮合系统服务接口定义
301 struct IStrikeMatch
302 {
315 	virtual void SaveStrikeMatchTotalInfoToFile(const char * szFileName) = NULL;
317 };
320 // 跨服竞技系统服务接口定义
321 struct IStrikeService
322 {
333 	virtual DWORD GetPublicWorldStrikeServerIdleRate(void) = NULL;
335 };
337 // 跨服战争系统服务接口定义
338 struct IWarService
339 {
363 	*/
364 	virtual bool IsCountryWarFight(UserInfo* dwMyInfo,UserInfo* dwTrageInfo) = NULL;
366 	/** 加入跨服Boss战发起信息
367 	@param   LPSTR data : 上下文数据,为SCastleBossWarAddContext
368 	@param   size_t len	: 上下文数据长度
373 	// 检查新一天时周日重连所有国家
374 	virtual void CheckReLinkAllWorldCountry(bool bCheckWeekDay=true) = NULL;
376 	// 检查跨服连接和跨服国战信息是否正确,有问题报警
377 	virtual void CheckWorldAlert() = NULL;
377 	virtual void CheckWorldAlert() = NULL;
379 	// 新建跨服国战
380 	virtual bool NewCountryWorldWar(bool bIsPublic,SCountryWorldWarInfo &node) = NULL;
380 	virtual bool NewCountryWorldWar(bool bIsPublic,SCountryWorldWarInfo &node) = NULL;
382 	// 新建跨服边境
383 	virtual bool NewCountryWorldBorderWar(bool bIsPublic,SCountryWorldWarInfo &node) = NULL;
383 	virtual bool NewCountryWorldBorderWar(bool bIsPublic,SCountryWorldWarInfo &node) = NULL;
385 	/* 强制让本区的跨服国战记录失效，用于处理公共区异常导致本区缓存的数据还运行的问题，不让客户端显示活动追踪及DIDA
386 	@Param	: DWORD dwDBID		跨服国战数据库记录ID
387 	*/
388 	virtual bool AbandLocalCountryWorldWarInfo(DWORD dwDBID, DWORD dwState=WarState_None, DWORD dwRunStep=CountryWarRunStep_None) = NULL;

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\Include\IMatchService.h 31 KB H 文件 2014/2/25 14:31:10 2018/10/23 19:46:36 2018/10/23 19:46:36 17
5 ** 日  期:	2008/12/9 16:45
6 ** 版  本:	1.0
7 ** 描  述:	跨服组队撮合系统服务接口定义
8 ** 应  用:  	
9 	
34 // tolua_begin
36 //////////////////////////////////////////////////////////////////////////
37 // 跨服组队撮合系统服务接口定义
38 struct IMatchService
39 {
211 	*/
212 	virtual IEctypeAssist* GetEctypeAssist() = NULL;
214 	/** 取得跨服竞技撮合系统接口
215 	*/
216 	virtual IStrikeMatch* GetStrikeMatch() = NULL;
243 	*/
244 	virtual BYTE GetStrikePrizeRateFlag(BYTE nPrizeRateNo) = NULL;
246 	/** 取得跨服在线角色信息
247 	@param   DWORD dwPDBID	: 角色ID
248 	@return SWorldOnlineUserInfo 在线角色信息
249 	*/
250 	virtual const SWorldOnlineUserInfo * GetOtherWorldUserInfo(DWORD dwPDBID) = NULL;
252 	/** 取得跨服在线角色个数
253 	@param  
254 	@return   DWORD : 在线角色个数
255 	*/
256 	virtual DWORD GetOtherWorldUserCounts() = NULL;
257 	/** 设定指定游戏世界ID是否开启跨服国战
258 	@param   DWORD dwWorldID	: 游戏世界ID
259 	@param   bool bClose		: 是否关闭
261 	*/
262 	virtual void SetCloseWorldCountryWar(DWORD dwWorldID,bool bClose=true) = NULL;
264 	/** 指定游戏世界ID是否开启跨服国战
265 	@param   DWORD dwWorldID	: 游戏世界ID
266 	@return bool 是否关闭
296 	virtual bool GetMatrixOpen(void) = NULL;
297 };
300 // 跨服竞技撮合系统服务接口定义
301 struct IStrikeMatch
302 {
315 	virtual void SaveStrikeMatchTotalInfoToFile(const char * szFileName) = NULL;
317 };
320 // 跨服竞技系统服务接口定义
321 struct IStrikeService
322 {
333 	virtual DWORD GetPublicWorldStrikeServerIdleRate(void) = NULL;
335 };
337 // 跨服战争系统服务接口定义
338 struct IWarService
339 {
363 	*/
364 	virtual bool IsCountryWarFight(UserInfo* dwMyInfo,UserInfo* dwTrageInfo) = NULL;
366 	/** 加入跨服Boss战发起信息
367 	@param   LPSTR data : 上下文数据,为SCastleBossWarAddContext
368 	@param   size_t len	: 上下文数据长度
373 	// 检查新一天时周日重连所有国家
374 	virtual void CheckReLinkAllWorldCountry(bool bCheckWeekDay=true) = NULL;
376 	// 检查跨服连接和跨服国战信息是否正确,有问题报警
377 	virtual void CheckWorldAlert() = NULL;
377 	virtual void CheckWorldAlert() = NULL;
379 	// 新建跨服国战
380 	virtual bool NewCountryWorldWar(bool bIsPublic,SCountryWorldWarInfo &node) = NULL;
380 	virtual bool NewCountryWorldWar(bool bIsPublic,SCountryWorldWarInfo &node) = NULL;
382 	// 新建跨服边境
383 	virtual bool NewCountryWorldBorderWar(bool bIsPublic,SCountryWorldWarInfo &node) = NULL;
383 	virtual bool NewCountryWorldBorderWar(bool bIsPublic,SCountryWorldWarInfo &node) = NULL;
385 	/* 强制让本区的跨服国战记录失效，用于处理公共区异常导致本区缓存的数据还运行的问题，不让客户端显示活动追踪及DIDA
386 	@Param	: DWORD dwDBID		跨服国战数据库记录ID
387 	*/
388 	virtual bool AbandLocalCountryWorldWarInfo(DWORD dwDBID, DWORD dwState=WarState_None, DWORD dwRunStep=CountryWarRunStep_None) = NULL;

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\Include\IMatchServer.h 101 KB H 文件 2014/2/25 0:08:41 2018/10/23 20:05:19 2018/10/23 20:05:19 15
5 ** 日  期:	2008/10/15
6 ** 版  本:	1.0
7 ** 描  述:	跨服组队撮合系统服务器
8 ** 应  用:	
10 **************************** 修改记录 ******************************
49 class IGameMatchAPI;
51 // tolua_begin
52 // 跨服组队撮合系统模块
53 struct IMatchServer
54 {	
293 	*/
294 	virtual IEctypeAssist* GetEctypeAssist() = NULL;
296 	/** 取得跨服竞技撮合系统接口
297 	*/
298 	virtual IStrikeMatch* GetStrikeMatch() = NULL;
411 	virtual IGameMatchAPI* GetGameMatchAPI()=NULL;
412 };
415 // 跨服竞技撮合系统服务接口定义
416 struct IStrikeMatch
417 {
422 // tolua_begin
424 };
427 // 跨服竞技系统服务接口定义
428 struct IStrikeServer
429 {
511 	/** 资源事件执行接口
512 	@param   WORD wEventID		:事件ID
513 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
514 	@param   WORD dwWarID		:相关战场ID
515 	@param   WORD dwResID		:相关战争资源配置ID
523 	/** 资源投票事件
524 	@param   WORD wEventID		:事件ID
525 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
526 	@param   WORD dwWarID		:相关战场ID
527 	@param   WORD dwResID		:相关战争资源配置ID
951 };
953 //////////////////////////////////////////////////////////////////////////
956 // 跨服战争系统服务接口定义
957 struct IWarServer
958 {
1015 	*/
1016 	virtual const SWorldClanBossWarZoneInfo * GetBossZoneInfoByRoomID(DWORD dwRoomID) = NULL;
1018 	/** 是否为指定跨服帮会BOSS战场中的参战帮会
1019 	@param   DWORD dwWorldID					: 游戏世界ID
1020 	@param   DWORD dwCountryID					: 国家ID
1024 	*/
1025 	virtual bool IsInWorldClanBossWar(DWORD dwWorldID,DWORD dwCountryID, DWORD dwClanID, DWORD dwRoomID) = NULL;
1027 	/** 取得指定跨服帮会BOSS战场中的参战帮会信息
1028 	@param   DWORD dwWorldID					: 游戏世界ID
1029 	@param   DWORD dwCountryID					: 国家ID
1466 	virtual DWORD GetAllWarIDList(DWORD * pWarIDArray,DWORD dwArrayLen,DWORD &dwGetCounts,DWORD dwInterfaceType=0,DWORD dwWarType=0,bool bOnlyCount=false) = NULL;
1468 };
1471 //////////////////////////// 跨服国战接口 //////////////////////////////////
1473 // 战争场管理器接口定义
1474 struct ICountryWar
1540 struct IClanBossWar
1541 { 
1542 	/** 跨服BOSS战接收外部数据结构信息
1543 	@return  SWorldBossWarInfo *
1544 	*/
1578 	virtual void EndWar(bool bCoercive=false) = NULL;
1579 };
1581 // 跨服边境管理器接口定义
1582 struct ICountryBorderWar
1583 { 
1582 struct ICountryBorderWar
1583 { 
1584 	/** 跨服边境接收外部数据结构信息
1585 	@return  SWorldBossWarInfo *
1586 	*/
1662 	/** 获取指定方向复活点坐标
1663 	@param   IPerson * pPerson	: 战争玩家
1664 	@param   DWORD dwTransFlag	: 跨服边境战场传送标识 EMCountryBorderWarTransFlag
1665 	@param   bool bNeedOffset	: 复活点需要偏移
1666 	@return POINT 复活点坐标

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\Include\IMatchServer.h 101 KB H 文件 2014/2/25 14:25:26 2018/10/23 19:44:08 2018/10/23 19:44:08 15
5 ** 日  期:	2008/10/15
6 ** 版  本:	1.0
7 ** 描  述:	跨服组队撮合系统服务器
8 ** 应  用:	
10 **************************** 修改记录 ******************************
49 class IGameMatchAPI;
51 // tolua_begin
52 // 跨服组队撮合系统模块
53 struct IMatchServer
54 {	
293 	*/
294 	virtual IEctypeAssist* GetEctypeAssist() = NULL;
296 	/** 取得跨服竞技撮合系统接口
297 	*/
298 	virtual IStrikeMatch* GetStrikeMatch() = NULL;
411 	virtual IGameMatchAPI* GetGameMatchAPI()=NULL;
412 };
415 // 跨服竞技撮合系统服务接口定义
416 struct IStrikeMatch
417 {
422 // tolua_begin
424 };
427 // 跨服竞技系统服务接口定义
428 struct IStrikeServer
429 {
511 	/** 资源事件执行接口
512 	@param   WORD wEventID		:事件ID
513 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
514 	@param   WORD dwWarID		:相关战场ID
515 	@param   WORD dwResID		:相关战争资源配置ID
523 	/** 资源投票事件
524 	@param   WORD wEventID		:事件ID
525 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
526 	@param   WORD dwWarID		:相关战场ID
527 	@param   WORD dwResID		:相关战争资源配置ID
951 };
953 //////////////////////////////////////////////////////////////////////////
956 // 跨服战争系统服务接口定义
957 struct IWarServer
958 {
1015 	*/
1016 	virtual const SWorldClanBossWarZoneInfo * GetBossZoneInfoByRoomID(DWORD dwRoomID) = NULL;
1018 	/** 是否为指定跨服帮会BOSS战场中的参战帮会
1019 	@param   DWORD dwWorldID					: 游戏世界ID
1020 	@param   DWORD dwCountryID					: 国家ID
1024 	*/
1025 	virtual bool IsInWorldClanBossWar(DWORD dwWorldID,DWORD dwCountryID, DWORD dwClanID, DWORD dwRoomID) = NULL;
1027 	/** 取得指定跨服帮会BOSS战场中的参战帮会信息
1028 	@param   DWORD dwWorldID					: 游戏世界ID
1029 	@param   DWORD dwCountryID					: 国家ID
1466 	virtual DWORD GetAllWarIDList(DWORD * pWarIDArray,DWORD dwArrayLen,DWORD &dwGetCounts,DWORD dwInterfaceType=0,DWORD dwWarType=0,bool bOnlyCount=false) = NULL;
1468 };
1471 //////////////////////////// 跨服国战接口 //////////////////////////////////
1473 // 战争场管理器接口定义
1474 struct ICountryWar
1540 struct IClanBossWar
1541 { 
1542 	/** 跨服BOSS战接收外部数据结构信息
1543 	@return  SWorldBossWarInfo *
1544 	*/
1578 	virtual void EndWar(bool bCoercive=false) = NULL;
1579 };
1581 // 跨服边境管理器接口定义
1582 struct ICountryBorderWar
1583 { 
1582 struct ICountryBorderWar
1583 { 
1584 	/** 跨服边境接收外部数据结构信息
1585 	@return  SWorldBossWarInfo *
1586 	*/
1662 	/** 获取指定方向复活点坐标
1663 	@param   IPerson * pPerson	: 战争玩家
1664 	@param   DWORD dwTransFlag	: 跨服边境战场传送标识 EMCountryBorderWarTransFlag
1665 	@param   bool bNeedOffset	: 复活点需要偏移
1666 	@return POINT 复活点坐标

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\Include\IMatchClient.h 41 KB H 文件 2014/2/25 8:33:33 2018/10/23 19:51:51 2018/10/23 19:51:51 22
5 ** 日  期:	2009/4/20
6 ** 版  本:	1.0
7 ** 描  述:	跨服组队撮合系统
8 ** 应  用:  	
9 	
32 struct IMatrixClient;
34 // tolua_begin
37 // 跨服组队撮合系统客户端
38 struct IMatchClient
39 {
52 	virtual IPersonStrikePart* CreatePersonStrikePart() = NULL;
54 // tolua_begin
56 	/** 取得跨服竞技撮合系统接口
57 	*/
58 	virtual IStrikeMatch* GetStrikeMatch() = NULL;
473 	virtual SDummyDBInfo* GetDummyDBInfo() = NULL;
474 };
478 // 跨服竞技撮合系统接口定义
479 struct IStrikeMatch
480 {
541 	virtual bool ConfirmInviteViewStrike(DWORD dwServerID,DWORD dwStrikeID,DWORD dwStrikeWorldID,DWORD dwStrikeCamp,DWORD dwActorID,DWORD dwWorldID,DWORD nResult) = NULL;
542 };
545 // 跨服竞技系统接口定义
546 struct IStrikeClient
547 {
795 	virtual bool RequestExit(void) = NULL;
796 };
798 // 跨服国战接口定义
799 struct ICountryWar: public IWar
800 {
811 	*/
812 	virtual bool RequestSetNotice(DWORD dwWarID,DWORD dwCampIndex,const char * szBuf) = NULL;
814 	/** 取得跨服国战信息结果日志信息
815 	@return  跨服国战信息结果日志信息
816 	*/
817 	virtual SWorldCountryWarResultInfo*  GetWorldCountryWarResultInfo(void) = NULL;
816 	*/
817 	virtual SWorldCountryWarResultInfo*  GetWorldCountryWarResultInfo(void) = NULL;
819 	/** 取得跨服国战信息日志信息的排名节点信息
820 	@param  DWORD dwIndex : 序号
821 	@param   BYTE dwType: 对象类型	1表示玩家，2表示帮会
820 	@param  DWORD dwIndex : 序号
821 	@param   BYTE dwType: 对象类型	1表示玩家，2表示帮会
822 	@return  查询到的跨服国战信息日志信息排名节点信息
823 	*/
824 	virtual const SWorldCountryWarOrderNodeInfo*  GetWorldCountryWarLogOrderNodeInfo(DWORD dwIndex,BYTE dwType) = NULL;
824 	virtual const SWorldCountryWarOrderNodeInfo*  GetWorldCountryWarLogOrderNodeInfo(DWORD dwIndex,BYTE dwType) = NULL;
826 	/** 获取本帮帮会积分数据
827 	@param DWORD dwScoreID : 跨服国战积分类型ID EMWarScoreFlag  
828 	@return
829 	*/
830 	virtual DWORD GetClanScore(DWORD dwScoreID) = NULL;
831 };
833 // 跨服帮会BOSS战场接口定义
834 struct IClanBossWar: public IWar
835 {
834 struct IClanBossWar: public IWar
835 {
836 	/** 取得跨服帮会BOSS战扩展数据
837 	@return
838 	*/
838 	*/
839 	virtual const SWorldClanBossWarBaseInfo* GetWarBaseExtInfo(void) = NULL;
841 	/** 取得跨服帮会BOSS战本帮帮会详细数据,dwCampID为0则找自己帮会信息
842 	@return
843 	*/
843 	*/
844 	virtual const SWorldBossWarClanBaseNode * GetClanNode(DWORD dwCampID) = NULL;
846 	/** 取得跨服帮会BOSS战帮会详细数据
847 	@param DWORD dwClanID : 帮会ID
848 	@return
849 	*/
850 	virtual const SWorldBossWarClanBaseNode * GetClanNodeByID(DWORD dwClanID) = NULL;
852 	/** 取得跨服帮会BOSS战结果日志信息
853 	@return
854 	*/
854 	*/
855 	virtual SWorldClanBossWarResultInfo*  GetWorldWarResultInfo(void) = NULL;
857 	/** 取得跨服帮会BOSS战日志信息的排名节点信息
858 	@param  DWORD dwIndex	: 序号
859 	@param  BYTE dwType		: 对象类型	1表示玩家，2表示帮会
858 	@param  DWORD dwIndex	: 序号
859 	@param  BYTE dwType		: 对象类型	1表示玩家，2表示帮会
860 	@return 查询到的跨服帮会BOSS战日志信息排名节点信息
861 	*/
862 	virtual const SWorldClanBossWarOrderNodeInfo*  GetWorldWarLogOrderNodeInfo(DWORD dwIndex,BYTE dwType) = NULL;
867 	virtual DWORD GetClanScore() = NULL;
868 };
870 // 跨服边境战场接口定义
871 struct ICountryBorderWar: public IWar
872 {
871 struct ICountryBorderWar: public IWar
872 {
873 	/** 取得跨服帮会BOSS战扩展数据
874 	@return
875 	*/
885 	*/
886 	virtual ICountryWar * GetCountryWar() = NULL;
888 	/** 取得跨服帮会BOSS战场系统
889 	@return  CClanBossWar * 
890 	*/
895 	*/
896 	virtual ICountryBorderWar * GetCountryBorderWar()= NULL;
898 	/** 玩家请求发起跨服国战
899 	@param DWORD dwWorldID : 对方游戏世界ID
900 	@param DWORD dwCountryID : 对方国家ID

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\Include\IMatchClient.h 41 KB H 文件 2014/2/25 13:43:56 2018/10/23 19:34:19 2018/10/23 19:34:19 22
5 ** 日  期:	2009/4/20
6 ** 版  本:	1.0
7 ** 描  述:	跨服组队撮合系统
8 ** 应  用:  	
9 	
32 struct IMatrixClient;
34 // tolua_begin
37 // 跨服组队撮合系统客户端
38 struct IMatchClient
39 {
52 	virtual IPersonStrikePart* CreatePersonStrikePart() = NULL;
54 // tolua_begin
56 	/** 取得跨服竞技撮合系统接口
57 	*/
58 	virtual IStrikeMatch* GetStrikeMatch() = NULL;
473 	virtual SDummyDBInfo* GetDummyDBInfo() = NULL;
474 };
478 // 跨服竞技撮合系统接口定义
479 struct IStrikeMatch
480 {
541 	virtual bool ConfirmInviteViewStrike(DWORD dwServerID,DWORD dwStrikeID,DWORD dwStrikeWorldID,DWORD dwStrikeCamp,DWORD dwActorID,DWORD dwWorldID,DWORD nResult) = NULL;
542 };
545 // 跨服竞技系统接口定义
546 struct IStrikeClient
547 {
795 	virtual bool RequestExit(void) = NULL;
796 };
798 // 跨服国战接口定义
799 struct ICountryWar: public IWar
800 {
811 	*/
812 	virtual bool RequestSetNotice(DWORD dwWarID,DWORD dwCampIndex,const char * szBuf) = NULL;
814 	/** 取得跨服国战信息结果日志信息
815 	@return  跨服国战信息结果日志信息
816 	*/
817 	virtual SWorldCountryWarResultInfo*  GetWorldCountryWarResultInfo(void) = NULL;
816 	*/
817 	virtual SWorldCountryWarResultInfo*  GetWorldCountryWarResultInfo(void) = NULL;
819 	/** 取得跨服国战信息日志信息的排名节点信息
820 	@param  DWORD dwIndex : 序号
821 	@param   BYTE dwType: 对象类型	1表示玩家，2表示帮会
820 	@param  DWORD dwIndex : 序号
821 	@param   BYTE dwType: 对象类型	1表示玩家，2表示帮会
822 	@return  查询到的跨服国战信息日志信息排名节点信息
823 	*/
824 	virtual const SWorldCountryWarOrderNodeInfo*  GetWorldCountryWarLogOrderNodeInfo(DWORD dwIndex,BYTE dwType) = NULL;
824 	virtual const SWorldCountryWarOrderNodeInfo*  GetWorldCountryWarLogOrderNodeInfo(DWORD dwIndex,BYTE dwType) = NULL;
826 	/** 获取本帮帮会积分数据
827 	@param DWORD dwScoreID : 跨服国战积分类型ID EMWarScoreFlag  
828 	@return
829 	*/
830 	virtual DWORD GetClanScore(DWORD dwScoreID) = NULL;
831 };
833 // 跨服帮会BOSS战场接口定义
834 struct IClanBossWar: public IWar
835 {
834 struct IClanBossWar: public IWar
835 {
836 	/** 取得跨服帮会BOSS战扩展数据
837 	@return
838 	*/
838 	*/
839 	virtual const SWorldClanBossWarBaseInfo* GetWarBaseExtInfo(void) = NULL;
841 	/** 取得跨服帮会BOSS战本帮帮会详细数据,dwCampID为0则找自己帮会信息
842 	@return
843 	*/
843 	*/
844 	virtual const SWorldBossWarClanBaseNode * GetClanNode(DWORD dwCampID) = NULL;
846 	/** 取得跨服帮会BOSS战帮会详细数据
847 	@param DWORD dwClanID : 帮会ID
848 	@return
849 	*/
850 	virtual const SWorldBossWarClanBaseNode * GetClanNodeByID(DWORD dwClanID) = NULL;
852 	/** 取得跨服帮会BOSS战结果日志信息
853 	@return
854 	*/
854 	*/
855 	virtual SWorldClanBossWarResultInfo*  GetWorldWarResultInfo(void) = NULL;
857 	/** 取得跨服帮会BOSS战日志信息的排名节点信息
858 	@param  DWORD dwIndex	: 序号
859 	@param  BYTE dwType		: 对象类型	1表示玩家，2表示帮会
858 	@param  DWORD dwIndex	: 序号
859 	@param  BYTE dwType		: 对象类型	1表示玩家，2表示帮会
860 	@return 查询到的跨服帮会BOSS战日志信息排名节点信息
861 	*/
862 	virtual const SWorldClanBossWarOrderNodeInfo*  GetWorldWarLogOrderNodeInfo(DWORD dwIndex,BYTE dwType) = NULL;
867 	virtual DWORD GetClanScore() = NULL;
868 };
870 // 跨服边境战场接口定义
871 struct ICountryBorderWar: public IWar
872 {
871 struct ICountryBorderWar: public IWar
872 {
873 	/** 取得跨服帮会BOSS战扩展数据
874 	@return
875 	*/
885 	*/
886 	virtual ICountryWar * GetCountryWar() = NULL;
888 	/** 取得跨服帮会BOSS战场系统
889 	@return  CClanBossWar * 
890 	*/
895 	*/
896 	virtual ICountryBorderWar * GetCountryBorderWar()= NULL;
898 	/** 玩家请求发起跨服国战
899 	@param DWORD dwWorldID : 对方游戏世界ID
900 	@param DWORD dwCountryID : 对方国家ID

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\Include\IGlobalSocialServer.h 9 KB H 文件 2014/2/25 0:22:01 2018/10/23 20:08:56 2018/10/23 20:08:56 1
234 	// 获得跨区桥服务器连接器
235 	virtual Bridge::IBridgeConnector* GetBridgeConnector(void) = NULL;
237 	// 取得跨服组队撮合系统服务
238 	virtual IMatchService* GetMatchService(void) = NULL;
240 	// 竞拍服务接口

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\Include\IGlobalSocialServer.h 9 KB H 文件 2014/2/25 14:31:09 2018/10/23 19:46:36 2018/10/23 19:46:36 1
234 	// 获得跨区桥服务器连接器
235 	virtual Bridge::IBridgeConnector* GetBridgeConnector(void) = NULL;
237 	// 取得跨服组队撮合系统服务
238 	virtual IMatchService* GetMatchService(void) = NULL;
240 	// 竞拍服务接口

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\Common\IGlobalClient.h 15 KB H 文件 2014/2/25 8:25:11 2018/10/23 19:50:48 2018/10/23 19:50:48 1
404 	virtual ISuitClient* getSuitClient() const = 0;
406 	virtual void updateUnDesc(int enter, const std::string& error = "") = 0;
408 	/// 取得跨服组队撮合系统客户端
409 	virtual IMatchClient* getMatchClient() const = 0;
411 	/// 取得竞拍客户端

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\Common\IGlobalClient.h 15 KB H 文件 2014/2/25 13:41:54 2018/10/23 19:33:44 2018/10/23 19:33:44 1
396 	virtual ISuitClient* getSuitClient() const = 0;
398 	virtual void updateUnDesc(int enter, const std::string& error = "") = 0;
400 	/// 取得跨服组队撮合系统客户端
401 	virtual IMatchClient* getMatchClient() const = 0;
403 	/// 取得竞拍客户端

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\Include\IGameMatchAPI.h 49 KB H 文件 2014/2/25 0:08:39 2018/10/23 20:05:18 2018/10/23 20:05:18 13
5 ** 日  期:	2010-7-13
6 ** 版  本:	1.0
7 ** 描  述:	跨服组队撮合系统API接口
8 ** 应  用:  	
10 **************************** 修改记录 ******************************
25 {
27 public:
29 /**  取得跨服组队撮合系统服务器
30 @param   
30 @param   
31 @return  跨服组队撮合系统服务器
32 */
33 virtual IMatchServer * GetMatchServer(void)=0;
259 virtual bool WarChangeActorTank(DWORD dwActorID, DWORD dwTankID)=0;
261 ///////////// 跨区战场API /////////////////////////////////////////////////////////////
263 /** 用现场创建跨服国战
264 @param  DWORD dwWarTypeID		: 战场场类型 EMWarItemType
265 @param  const char * szCampNames: 阵营名称列表，分号分割阵营名
433 */
434 virtual const char * GetWarStringProp(DWORD dwZoneID, DWORD dwPropID)=0;
436 /** 跨服领地BOSS战接收外部数据结构信息
437 @param	 DWORD dwActorID	:玩家序列号
438 @param	 DWORD dwWarID		:战场ID
440 */
441 virtual SWorldBossWarClanNodeInfo * GetCastleBossWarExtData(DWORD dwActorID,DWORD dwWarID)=0;
443 /** 跨服领地BOSS战接收外部数据结构信息
444 @param	 DWORD dwActorID	:玩家序列号
445 @param	 DWORD dwWarID		:战场ID
450 */
451 virtual bool SetCastleBossWarExtData(DWORD dwActorID,DWORD dwWarID, DWORD dwCivilGrade, DWORD dwBossID, char * szClanIDs)=0;
453 /** 跨服领地BOSS战接收外部数据结构中指定帮会信息
454 @param	 DWORD dwActorID	:玩家序列号
455 @param	 DWORD dwWarID		:战场ID
464 */
465 virtual DWORD GetWarGameUpLevelLimit(DWORD dwZoneID)=0;
467 /** 取得跨服边境战场对象
468 @param	 DWORD dwZoneID		:场景ID
469 @return  SCountryWarInfo *
470 */
471 virtual ICountryBorderWar * GetCountryBorderWar(DWORD dwZoneID)=0;
473 /** 跨服边境战场内传送玩家
474 @param	 DWORD dwActorID	:玩家序列号
475 @param	 DWORD dwTransFlag	:传送标识 EMCountryBorderWarTransFlag
477 */
478 virtual bool CountryBorderWarTransActor(DWORD dwActorID,DWORD dwTransFlag)=0;
480 /** 跨服边境战场内传送玩家是否能传送到天上战场
481 @param	 DWORD dwActorID	:玩家序列号
482 @return  bool
483 */
484 virtual bool CountryBorderWarActorCanTransSky(DWORD dwActorID)=0;
486 /** 跨服边境战场击杀BOSS时AI触发事件后处理
487 @param	DWORD dwActorID		: 玩家序列号
488 @param	bool bSendResult	: 是否要发送结果信息到社会服,false=不发送
490 */
491 virtual bool DoCountryBorderWarKillBossEvent(DWORD dwActorID, bool bSendResult)=0;
493 /** 检测跨服边境战场是否开启任务
494 @param	DWORD dwActorID		: 玩家序列号
495 @return  bool
496 */
497 virtual bool CheckCountryBorderWarOpenTask(DWORD dwActorID)=0;
499 /** 检测跨服边境战场阵营数量
500 @param	DWORD dwActorID		: 玩家序列号
501 @return  DWORD

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\Include\IGameMatchAPI.h 49 KB H 文件 2014/2/25 14:25:24 2018/10/23 19:44:07 2018/10/23 19:44:07 13
5 ** 日  期:	2010-7-13
6 ** 版  本:	1.0
7 ** 描  述:	跨服组队撮合系统API接口
8 ** 应  用:  	
10 **************************** 修改记录 ******************************
25 {
27 public:
29 /**  取得跨服组队撮合系统服务器
30 @param   
30 @param   
31 @return  跨服组队撮合系统服务器
32 */
33 virtual IMatchServer * GetMatchServer(void)=0;
259 virtual bool WarChangeActorTank(DWORD dwActorID, DWORD dwTankID)=0;
261 ///////////// 跨区战场API /////////////////////////////////////////////////////////////
263 /** 用现场创建跨服国战
264 @param  DWORD dwWarTypeID		: 战场场类型 EMWarItemType
265 @param  const char * szCampNames: 阵营名称列表，分号分割阵营名
433 */
434 virtual const char * GetWarStringProp(DWORD dwZoneID, DWORD dwPropID)=0;
436 /** 跨服领地BOSS战接收外部数据结构信息
437 @param	 DWORD dwActorID	:玩家序列号
438 @param	 DWORD dwWarID		:战场ID
440 */
441 virtual SWorldBossWarClanNodeInfo * GetCastleBossWarExtData(DWORD dwActorID,DWORD dwWarID)=0;
443 /** 跨服领地BOSS战接收外部数据结构信息
444 @param	 DWORD dwActorID	:玩家序列号
445 @param	 DWORD dwWarID		:战场ID
450 */
451 virtual bool SetCastleBossWarExtData(DWORD dwActorID,DWORD dwWarID, DWORD dwCivilGrade, DWORD dwBossID, char * szClanIDs)=0;
453 /** 跨服领地BOSS战接收外部数据结构中指定帮会信息
454 @param	 DWORD dwActorID	:玩家序列号
455 @param	 DWORD dwWarID		:战场ID
464 */
465 virtual DWORD GetWarGameUpLevelLimit(DWORD dwZoneID)=0;
467 /** 取得跨服边境战场对象
468 @param	 DWORD dwZoneID		:场景ID
469 @return  SCountryWarInfo *
470 */
471 virtual ICountryBorderWar * GetCountryBorderWar(DWORD dwZoneID)=0;
473 /** 跨服边境战场内传送玩家
474 @param	 DWORD dwActorID	:玩家序列号
475 @param	 DWORD dwTransFlag	:传送标识 EMCountryBorderWarTransFlag
477 */
478 virtual bool CountryBorderWarTransActor(DWORD dwActorID,DWORD dwTransFlag)=0;
480 /** 跨服边境战场内传送玩家是否能传送到天上战场
481 @param	 DWORD dwActorID	:玩家序列号
482 @return  bool
483 */
484 virtual bool CountryBorderWarActorCanTransSky(DWORD dwActorID)=0;
486 /** 跨服边境战场击杀BOSS时AI触发事件后处理
487 @param	DWORD dwActorID		: 玩家序列号
488 @param	bool bSendResult	: 是否要发送结果信息到社会服,false=不发送
490 */
491 virtual bool DoCountryBorderWarKillBossEvent(DWORD dwActorID, bool bSendResult)=0;
493 /** 检测跨服边境战场是否开启任务
494 @param	DWORD dwActorID		: 玩家序列号
495 @return  bool
496 */
497 virtual bool CheckCountryBorderWarOpenTask(DWORD dwActorID)=0;
499 /** 检测跨服边境战场阵营数量
500 @param	DWORD dwActorID		: 玩家序列号
501 @return  DWORD

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\IGameDatabaseDef.h 463 KB H 文件 2014/2/25 11:36:46 2018/10/23 19:49:32 2018/10/23 19:49:32 11
232 //******************************  角色出售系统  *********************************/
233 #define  DBDEF_ROLEVENDED_BUFF_LEN			16
235 // 跨服竞技PK数据
236 #define  DBDEF_STRIKE_BUFF_LEN				96
238 // 沉默描述内容长度
1106 		GAMEDB_REQUEST_PET_PART_DELETEPET_DATA			// 删除一条御兽信息
1107 	};
1108 	/*********************************** 跨服国战 **********************************************************/
1109 	enum
1110 	{ 
1110 	{ 
1111 		// 操作表名: WorldCountryWar
1112 		GAMEDB_REQUEST_WORLDCOUNTRY_WAR_READ = 2050,		// 查询跨服国战信息
1113 		GAMEDB_REQUEST_WORLDCOUNTRY_WAR_ADD,				// 添加跨服国战信息
1114 		GAMEDB_REQUEST_WORLDCOUNTRY_WAR_SAVE,				// 批量保存跨服国战信息
1115 		// 操作表名: WorldCountryWarLog
1115 		// 操作表名: WorldCountryWarLog
1116 		GAMEDB_REQUEST_WORLDCOUNTRY_WARLOG_READ,			// 查询跨服国战结果信息
1117 		GAMEDB_REQUEST_WORLDCOUNTRY_WARLOG_ADD,				// 添加跨服国战结果信息
1118 		// 操作表名: WorldCountryLink
1118 		// 操作表名: WorldCountryLink
1119 		GAMEDB_REQUEST_WORLDCOUNTRY_LINK_READ,				// 查询跨服国家边境连通信息
1120 		GAMEDB_REQUEST_WORLDCOUNTRY_LINK_ADD,				// 添加跨服国家边境连通信息
1121 	};
1123 	/***********************************增值服务1**********************************************************/
1955 		BYTE	 byCountryData[DBDEF_MAX_COUNTRY_LEN];	// 国家数据	2011.10.31	64 --> 96
1956 		BYTE	 byKqEctypeData[DBDEF_MAX_KQE_LEN];		// 跨区副本数据
1957 		BYTE	 byStrikeData[DBDEF_STRIKE_BUFF_LEN];	// 跨服竞技数据
1959 		BYTE	 nWareLevel;								// 仓库等级
1960 		DWORD	 dwWareMoney;								// 仓库金钱
2067 		BYTE	 byFormData[DBDEF_MAX_FORMDATA_LEN];		// 外观数据	
2068 		BYTE	 byKqEctypeData[DBDEF_MAX_KQE_LEN];			// 跨区副本数据
2069 		BYTE	 byStrikeData[DBDEF_STRIKE_BUFF_LEN];		// 跨服竞技数据
2071 		BYTE	 nCurLingHun;								// 当前灵魂态（命=0;地=1;天=2）
2073 		BYTE	 nWareLevel;								// 仓库等级

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\IGameDatabaseDef.h 463 KB H 文件 2014/2/25 14:54:02 2018/10/23 19:32:39 2018/10/23 19:32:39 11
232 //******************************  角色出售系统  *********************************/
233 #define  DBDEF_ROLEVENDED_BUFF_LEN			16
235 // 跨服竞技PK数据
236 #define  DBDEF_STRIKE_BUFF_LEN				96
238 // 沉默描述内容长度
1106 		GAMEDB_REQUEST_PET_PART_DELETEPET_DATA			// 删除一条御兽信息
1107 	};
1108 	/*********************************** 跨服国战 **********************************************************/
1109 	enum
1110 	{ 
1110 	{ 
1111 		// 操作表名: WorldCountryWar
1112 		GAMEDB_REQUEST_WORLDCOUNTRY_WAR_READ = 2050,		// 查询跨服国战信息
1113 		GAMEDB_REQUEST_WORLDCOUNTRY_WAR_ADD,				// 添加跨服国战信息
1114 		GAMEDB_REQUEST_WORLDCOUNTRY_WAR_SAVE,				// 批量保存跨服国战信息
1115 		// 操作表名: WorldCountryWarLog
1115 		// 操作表名: WorldCountryWarLog
1116 		GAMEDB_REQUEST_WORLDCOUNTRY_WARLOG_READ,			// 查询跨服国战结果信息
1117 		GAMEDB_REQUEST_WORLDCOUNTRY_WARLOG_ADD,				// 添加跨服国战结果信息
1118 		// 操作表名: WorldCountryLink
1118 		// 操作表名: WorldCountryLink
1119 		GAMEDB_REQUEST_WORLDCOUNTRY_LINK_READ,				// 查询跨服国家边境连通信息
1120 		GAMEDB_REQUEST_WORLDCOUNTRY_LINK_ADD,				// 添加跨服国家边境连通信息
1121 	};
1123 	/***********************************增值服务1**********************************************************/
1955 		BYTE	 byCountryData[DBDEF_MAX_COUNTRY_LEN];	// 国家数据	2011.10.31	64 --> 96
1956 		BYTE	 byKqEctypeData[DBDEF_MAX_KQE_LEN];		// 跨区副本数据
1957 		BYTE	 byStrikeData[DBDEF_STRIKE_BUFF_LEN];	// 跨服竞技数据
1959 		BYTE	 nWareLevel;								// 仓库等级
1960 		DWORD	 dwWareMoney;								// 仓库金钱
2067 		BYTE	 byFormData[DBDEF_MAX_FORMDATA_LEN];		// 外观数据	
2068 		BYTE	 byKqEctypeData[DBDEF_MAX_KQE_LEN];			// 跨区副本数据
2069 		BYTE	 byStrikeData[DBDEF_STRIKE_BUFF_LEN];		// 跨服竞技数据
2071 		BYTE	 nCurLingHun;								// 当前灵魂态（命=0;地=1;天=2）
2073 		BYTE	 nWareLevel;								// 仓库等级

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\Include\ICountryService.h 52 KB H 文件 2014/2/25 0:22:01 2018/10/23 20:08:56 2018/10/23 20:08:56 18
565 	*/
566 	virtual BYTE GetLastWinInfo(int nCounts=32) = NULL;
568 	/** 刷新跨服共享国家信息
569 	@param 
570 	*/
1322 };
1324 //////////////////////////////////////////////////////////////////////////
1325 // 跨服国战信息 (IWorldWar)
1327 struct IWorldWar
1328 {
1328 {
1330 	/** 取得地图信息
1331 	@param   DWORD dwID:	跨服国战ID
1332 	@return  SCountryWorldWarInfo 
1333 	*/
1354 	virtual SCountryWorldWarInfo * GetListData(void) = NULL;
1356 	/** 设定状态 
1357 	@param   DWORD dwID:	跨服国战ID
1358 	@param   DWORD dwState :状态 EMCountryWorldWarState
1359 	@return  bool 成功否
1360 	*/
1361 	virtual	bool SetState(DWORD dwID,DWORD dwState) = NULL;
1363 	/** 跨服国战变化
1364 	@param   DWORD dwID:	跨服国战ID
1365 	@return  bool 成功否
1366 	*/
1366 	*/
1367 	virtual	bool OnWorldWarInfoChanged(DWORD dwID) = NULL;
1369 	/** 加入跨服国战信息
1370 	@param   DWORD dwStartTime			: 开始时间
1371 	@param   DWORD dwFightTime			: 开战时间
1371 	@param   DWORD dwFightTime			: 开战时间
1372 	@param   DWORD dwEndTime			: 结束时间
1373 	@param   DWORD dwType;				: 跨服国战类型 EMWarItemType
1374 	@param   DWORD dwWarSceneID			: 战争场情景ID
1375 	@param   DWORD dwAttackWorldID;		: 进攻国家所在游戏世界ID
1380 	*/
1381 	virtual bool AddWorldCountryWar(DWORD dwStartTime,DWORD dwFightTime,DWORD dwEndTime,DWORD dwType,DWORD dwWarSceneID,DWORD dwAttackWorldID,DWORD dwAttackCountryID,DWORD dwDefendWorldID,DWORD dwDefendCountryID) = NULL;
1383 	/** 加入跨服国战盟国信息
1384 	@param   DWORD dwMyWorldID;		: 本国家所在游戏世界ID
1385 	@param   DWORD dwMyCountryID;	: 本国家ID
1389 	*/
1390 	virtual bool AddWarFriend(DWORD dwMyWorldID,DWORD dwMyCountryID,DWORD dwWorldID,DWORD dwCountryID) = NULL;
1392 	// 检查是否能发起跨服国战
1393 	virtual bool CheckCountryWorldWar(DWORD dwFromWorldID,DWORD dwFromCountryID,DWORD dwWorldID,DWORD dwCountryID) = NULL;
1393 	virtual bool CheckCountryWorldWar(DWORD dwFromWorldID,DWORD dwFromCountryID,DWORD dwWorldID,DWORD dwCountryID) = NULL;
1395 	/** 取得跨服国家边境连通信息
1396 	@return  SCountryWorldLinkInfo * 边境连通信息
1397 	*/
1397 	*/
1398 	virtual	SCountryWorldLinkInfo *	GetCountryWorldLinkInfo(DWORD dwWorldID,DWORD dwCountryID,DWORD dwType) = NULL;
1400 	/** 取得跨服国家边境连通信息
1401 	@return  SCountryWorldLinkInfo * 边境连通信息
1402 	*/
1402 	*/
1403 	virtual	SCountryWorldLinkInfo *	GetCountryWorldLinkInfoByID(DWORD dwID) = NULL;
1405 	/** 跨服边境连通信息变化,保存入数据库
1406 	@param   DWORD dwID:	边境连通信息ID
1407 	@return  bool 成功否
1408 	*/
1409 	virtual	bool OnWorldLinkInfoChanged(DWORD dwID) = NULL;
1411 	/** 加入跨服边境连通信息
1412 	@return   bool 成功否
1413 	*/
1425 	//   取得列表当前指向的数据
1426 	virtual SCountryWorldLinkInfo * Link_GetListData(void) = NULL;
1428 	// 取得跨服国家边境连通编号以(游戏世界ID,国家ID,类型)组合编号 为关键字
1429 	virtual DWORD GetCountryWorldLinkKey(DWORD dwWorldID,DWORD dwCountryID,DWORD dwType) = NULL;
1431 	// 请求同步所有服务器数据
1431 	// 请求同步所有服务器数据
1432 	virtual bool UpdateAllServerData(void) = NULL;
1434 	// 检查所有跨服国战记录有效性
1435 	virtual bool CheckAllBadWorldCountryWar(void) = NULL;
1436 };
1747 	*/
1748 	virtual bool SetGameNoticeInfo(DWORD dwShowTimes,const char * szTitle,const char * szUrl=NULL) = NULL;
1750 	/** 本区是否能开跨服国战
1751 	@return  成功否
1752 	*/
1752 	*/
1753 	virtual bool IsCanOpenWorldWar() = NULL;
1755 	/** 取地跨服国战系统接口
1756 	@param   
1757 	@return  

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\Include\ICountryService.h 52 KB H 文件 2014/2/25 14:31:09 2018/10/23 19:46:36 2018/10/23 19:46:36 18
565 	*/
566 	virtual BYTE GetLastWinInfo(int nCounts=32) = NULL;
568 	/** 刷新跨服共享国家信息
569 	@param 
570 	*/
1322 };
1324 //////////////////////////////////////////////////////////////////////////
1325 // 跨服国战信息 (IWorldWar)
1327 struct IWorldWar
1328 {
1328 {
1330 	/** 取得地图信息
1331 	@param   DWORD dwID:	跨服国战ID
1332 	@return  SCountryWorldWarInfo 
1333 	*/
1354 	virtual SCountryWorldWarInfo * GetListData(void) = NULL;
1356 	/** 设定状态 
1357 	@param   DWORD dwID:	跨服国战ID
1358 	@param   DWORD dwState :状态 EMCountryWorldWarState
1359 	@return  bool 成功否
1360 	*/
1361 	virtual	bool SetState(DWORD dwID,DWORD dwState) = NULL;
1363 	/** 跨服国战变化
1364 	@param   DWORD dwID:	跨服国战ID
1365 	@return  bool 成功否
1366 	*/
1366 	*/
1367 	virtual	bool OnWorldWarInfoChanged(DWORD dwID) = NULL;
1369 	/** 加入跨服国战信息
1370 	@param   DWORD dwStartTime			: 开始时间
1371 	@param   DWORD dwFightTime			: 开战时间
1371 	@param   DWORD dwFightTime			: 开战时间
1372 	@param   DWORD dwEndTime			: 结束时间
1373 	@param   DWORD dwType;				: 跨服国战类型 EMWarItemType
1374 	@param   DWORD dwWarSceneID			: 战争场情景ID
1375 	@param   DWORD dwAttackWorldID;		: 进攻国家所在游戏世界ID
1380 	*/
1381 	virtual bool AddWorldCountryWar(DWORD dwStartTime,DWORD dwFightTime,DWORD dwEndTime,DWORD dwType,DWORD dwWarSceneID,DWORD dwAttackWorldID,DWORD dwAttackCountryID,DWORD dwDefendWorldID,DWORD dwDefendCountryID) = NULL;
1383 	/** 加入跨服国战盟国信息
1384 	@param   DWORD dwMyWorldID;		: 本国家所在游戏世界ID
1385 	@param   DWORD dwMyCountryID;	: 本国家ID
1389 	*/
1390 	virtual bool AddWarFriend(DWORD dwMyWorldID,DWORD dwMyCountryID,DWORD dwWorldID,DWORD dwCountryID) = NULL;
1392 	// 检查是否能发起跨服国战
1393 	virtual bool CheckCountryWorldWar(DWORD dwFromWorldID,DWORD dwFromCountryID,DWORD dwWorldID,DWORD dwCountryID) = NULL;
1393 	virtual bool CheckCountryWorldWar(DWORD dwFromWorldID,DWORD dwFromCountryID,DWORD dwWorldID,DWORD dwCountryID) = NULL;
1395 	/** 取得跨服国家边境连通信息
1396 	@return  SCountryWorldLinkInfo * 边境连通信息
1397 	*/
1397 	*/
1398 	virtual	SCountryWorldLinkInfo *	GetCountryWorldLinkInfo(DWORD dwWorldID,DWORD dwCountryID,DWORD dwType) = NULL;
1400 	/** 取得跨服国家边境连通信息
1401 	@return  SCountryWorldLinkInfo * 边境连通信息
1402 	*/
1402 	*/
1403 	virtual	SCountryWorldLinkInfo *	GetCountryWorldLinkInfoByID(DWORD dwID) = NULL;
1405 	/** 跨服边境连通信息变化,保存入数据库
1406 	@param   DWORD dwID:	边境连通信息ID
1407 	@return  bool 成功否
1408 	*/
1409 	virtual	bool OnWorldLinkInfoChanged(DWORD dwID) = NULL;
1411 	/** 加入跨服边境连通信息
1412 	@return   bool 成功否
1413 	*/
1425 	//   取得列表当前指向的数据
1426 	virtual SCountryWorldLinkInfo * Link_GetListData(void) = NULL;
1428 	// 取得跨服国家边境连通编号以(游戏世界ID,国家ID,类型)组合编号 为关键字
1429 	virtual DWORD GetCountryWorldLinkKey(DWORD dwWorldID,DWORD dwCountryID,DWORD dwType) = NULL;
1431 	// 请求同步所有服务器数据
1431 	// 请求同步所有服务器数据
1432 	virtual bool UpdateAllServerData(void) = NULL;
1434 	// 检查所有跨服国战记录有效性
1435 	virtual bool CheckAllBadWorldCountryWar(void) = NULL;
1436 };
1747 	*/
1748 	virtual bool SetGameNoticeInfo(DWORD dwShowTimes,const char * szTitle,const char * szUrl=NULL) = NULL;
1750 	/** 本区是否能开跨服国战
1751 	@return  成功否
1752 	*/
1752 	*/
1753 	virtual bool IsCanOpenWorldWar() = NULL;
1755 	/** 取地跨服国战系统接口
1756 	@param   
1757 	@return  

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\Include\ICountryServer.h 48 KB H 文件 2014/2/25 0:08:35 2018/10/23 20:05:18 2018/10/23 20:05:18 1
1622 	virtual SHugeAnimalSchemeInfo* GetAnimalTankInfo(DWORD dwTankID) = NULL;
1624 // tolua_end
1626 	/** 新增跨服国战日志
1627 	@param   SWorldCountryWarLogInfo &addNode	: 日志信息
1628 	@param   DWORD dwSaveToWorldID				: 要保存到的游戏区ID

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\Include\ICountryServer.h 48 KB H 文件 2014/2/25 14:25:20 2018/10/23 19:44:07 2018/10/23 19:44:07 1
1622 	virtual SHugeAnimalSchemeInfo* GetAnimalTankInfo(DWORD dwTankID) = NULL;
1624 // tolua_end
1626 	/** 新增跨服国战日志
1627 	@param   SWorldCountryWarLogInfo &addNode	: 日志信息
1628 	@param   DWORD dwSaveToWorldID				: 要保存到的游戏区ID

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\ICountryDataBaseDef.h 88 KB H 文件 2014/2/25 11:36:45 2018/10/23 19:49:32 2018/10/23 19:49:32 40
103 		GAMEDB_REQUEST_GETCOUNTRYPOWER,						// 取得国家综合国力信息
105 		// 操作表名: WorldCountryWar
106 		GAMEDB_REQUEST_WORLDCOUNTRY_WAR_READ = 2050,		// 查询跨服国战信息
107 		GAMEDB_REQUEST_WORLDCOUNTRY_WAR_ADD,				// 添加跨服国战信息
108 		GAMEDB_REQUEST_WORLDCOUNTRY_WAR_SAVE,				// 批量保存跨服国战信息
109 		// 操作表名: WorldCountryWarLog
109 		// 操作表名: WorldCountryWarLog
110 		GAMEDB_REQUEST_WORLDCOUNTRY_WARLOG_READ,			// 查询跨服国战结果信息
111 		GAMEDB_REQUEST_WORLDCOUNTRY_WARLOG_ADD,				// 添加跨服国战结果信息
112 		// 操作表名: WorldCountryLink
112 		// 操作表名: WorldCountryLink
113 		GAMEDB_REQUEST_WORLDCOUNTRY_LINK_READ,				// 查询跨服国家边境连通信息
114 		GAMEDB_REQUEST_WORLDCOUNTRY_LINK_ADD,				// 添加跨服国家边境连通信息
115 		// 操作表名: WorldIPCityOnline
116 		GAMEDB_REQUEST_WORLDIPCITYONLINE_SAVE,				// 批量保存在线IP所有城市坐标信息
2188 	};
2190  
2193 	/////////////////////////////// 跨服国战 //////////////////////////////////////////////////////////////////////////
2194 	// 操作表名: WorldCountryWar
2195 	///////////////////////////////////////////////////////////////////
2194 	// 操作表名: WorldCountryWar
2195 	///////////////////////////////////////////////////////////////////
2197 	// 跨服国战信息数据库表
2198 	struct DB_Table_WorldCountryWar
2199 	{
2198 	struct DB_Table_WorldCountryWar
2199 	{
2200 		DWORD dwID;									// 跨服国战信息ID，0为无效ID,数据库设为自增
2201 		DWORD dwPublicWorldID;						// 所属公共区世界ID
2202 		DWORD dwStartTime;							// 开始时间
2202 		DWORD dwStartTime;							// 开始时间
2203 		DWORD dwEndTime;							// 结束时间
2204 		DWORD dwType;								// 跨服国战类型
2205 		DWORD dwAttackWorldID;						// 进攻国家所在游戏世界ID
2206 		DWORD dwAttackCountryID;					// 进攻国家ID
2236 		}
2237 	};
2239 	/// GAMEDB_REQUEST_WORLDCOUNTRY_WAR_READ 查询跨服国战信息 : 传入参数结构
2240 	struct DB_Param_Read_WorldCountryWar
2241 	{
2241 	{
2242 		// 所有为and关系,排序以dwID顺序,只读出最近30天的记录
2243 		DWORD dwID;							// 跨服国战信息ID，0为忽略
2244 		DWORD dwPublicWorldID;				// 所属公共区世界ID，0为忽略
2245 		DWORD dwDays;						// 只读出最近多少天的记录，0为忽略
2264 	};
2267 	///////////////////////////////////////////////////////////////////
2268 	/// GAMEDB_REQUEST_WORLDCOUNTRY_WAR_ADD 添加跨服国战信息 : 传入参数结构
2269 	struct DB_Param_Add_WorldCountryWar
2270 	{
2270 	{
2271 		// 条件参数
2272 		DWORD dwID;									// 跨服国战信息ID，0为无效ID，为0则新增记录，否则就修改
2274 		// 存入的数据
2275 		DWORD dwPublicWorldID;						// 所属公共区世界ID
2276 		DWORD dwStartTime;							// 开始时间
2277 		DWORD dwEndTime;							// 结束时间
2278 		DWORD dwType;								// 跨服国战类型
2279 		DWORD dwAttackWorldID;						// 进攻国家所在游戏世界ID
2280 		DWORD dwAttackCountryID;					// 进攻国家ID
2313 	struct DB_Result_Add_WorldCountryWar
2314 	{
2315 		DWORD dwID;							// 跨服国战信息ID, 0为无效ID
2316 		BYTE nResult;						// 结果 0:出错,没有新增或修改; 1:新增成功,2:修改成功
2318 		DB_Result_Add_WorldCountryWar(void)
2322 	};
2325 	///////////////////////////////////////////////////////////////////
2326 	/// GAMEDB_REQUEST_MAPRECOVER_SAVE 批量保存跨服国战信息 : 传入参数结构
2327 	struct DB_Param_Save_WorldCountryWar
2328 	{
2342 		}
2343 	};
2345 	/// 批量保存跨服国战信息: 返回结果的记录结构
2346 	struct DB_Result_Save_WorldCountryWar_Record
2347 	{
2346 	struct DB_Result_Save_WorldCountryWar_Record
2347 	{
2348 		DWORD	dwID;							// 跨服国战信息ID
2349 		BYTE	nResult;						// 结果 0:出错 1:成功
2351 		DB_Result_Save_WorldCountryWar_Record(void)
2354 		}
2355 	};
2357 	/// 批量保存跨服国战信息: 返回结果
2358 	struct DB_Result_Save_WorldCountryWar
2359 	{
2367 		}
2368 	};
2372 	/////////////////////////////// 跨服国战日志表 //////////////////////////////////////////////////////////////////////////
2373 	// 操作表名: WorldCountryWarLog
2374 	///////////////////////////////////////////////////////////////////
2373 	// 操作表名: WorldCountryWarLog
2374 	///////////////////////////////////////////////////////////////////
2376 	// 跨服国战信息日志数据库表
2377 	struct DB_Table_WorldCountryWarLog
2378 	{
2377 	struct DB_Table_WorldCountryWarLog
2378 	{
2379 		DWORD dwID;									// 跨服国战日志信息ID
2380 		DWORD dwAddTime;							// 跨服国战日志写入时间
2381 		DWORD dwPublicWorldID;						// 所属公共区世界ID
2382 		DWORD dwStartTime;							// 开始时间
2382 		DWORD dwStartTime;							// 开始时间
2383 		DWORD dwPlayTime;							// 战斗时长(秒)
2384 		DWORD dwType;								// 跨服国战类型
2385 		DWORD dwAttackWorldID;						// 进攻国家所在游戏世界ID
2386 		DWORD dwAttackCountryID;					// 进攻国家ID
2403 		}
2404 	};
2406 	/// GAMEDB_REQUEST_WORLDCOUNTRY_WAR_READ 查询跨服国战日志信息 : 传入参数结构
2407 	struct DB_Param_Read_WorldCountryWarLog
2408 	{
2408 	{
2409 		// 查找dwID和dwAddTime的记当,只返回一条记录
2410 		DWORD dwID;							// 跨服国战日志信息ID
2411 		DWORD dwAddTime;					// 跨服国战日志写入时间
2412 		DWORD dwPlayerID;					// 查询的角色ID,用来返回找到角色并发给他
2414 		DB_Param_Read_WorldCountryWarLog(void)
2431 	};
2434 	///////////////////////////////////////////////////////////////////
2435 	/// GAMEDB_REQUEST_WORLDCOUNTRY_WAR_ADD 添加跨服国战日志信息 : 传入参数结构
2436 	struct DB_Param_Add_WorldCountryWarLog
2437 	{
2455 		}
2456 	};
2460 	/////////////////////////////// 跨服国家边境连通 //////////////////////////////////////////////////////////////////////////
2461 	// 操作表名: WorldCountryLink
2462 	///////////////////////////////////////////////////////////////////
2461 	// 操作表名: WorldCountryLink
2462 	///////////////////////////////////////////////////////////////////
2464 	// 跨服国家边境连通信息数据库表
2465 	struct DB_Table_WorldCountryLink
2466 	{
2465 	struct DB_Table_WorldCountryLink
2466 	{
2467 		DWORD dwID;									// 跨服国家边境连通信息ID，0为无效ID,(游戏世界ID,国家ID,类型)组合编号
2468 		DWORD dwPublicWorldID;						// 所属公共区世界ID
2468 		DWORD dwPublicWorldID;						// 所属公共区世界ID
2469 		DWORD dwType;								// 跨服国家边境类型
2470 		DWORD dwWorldID;							// 国家所在游戏世界ID
2471 		DWORD dwCountryID;							// 国家ID
2479 		}
2480 	};
2482 	/// GAMEDB_REQUEST_WORLDCOUNTRY_LINK_READ 查询跨服国家边境连通信息 : 传入参数结构
2483 	struct DB_Param_Read_WorldCountryLink
2484 	{
2484 	{
2485 		// 所有为and关系,排序以dwID顺序
2486 		DWORD dwID;							// 跨服国战信息ID，0为忽略
2487 		DWORD dwPublicWorldID;				// 所属公共区世界ID，0为忽略
2489 		DB_Param_Read_WorldCountryLink(void)
2505 	};
2508 	///////////////////////////////////////////////////////////////////
2509 	/// GAMEDB_REQUEST_WORLDCOUNTRY_LINK_ADD 添加跨服国家边境连通信息 : 传入参数结构
2510 	struct DB_Param_Add_WorldCountryLink
2511 	{
2511 	{
2512 		// 条件参数
2513 		DWORD dwID;									// 跨服国家边境连通信息ID，0为无效ID，找到就修改，否则就新增
2515 		// 存入的数据
2516 		DWORD dwPublicWorldID;						// 所属公共区世界ID
2515 		// 存入的数据
2516 		DWORD dwPublicWorldID;						// 所属公共区世界ID
2517 		DWORD dwType;								// 跨服国家边境类型
2518 		DWORD dwWorldID;							// 国家所在游戏世界ID
2519 		DWORD dwCountryID;							// 国家ID
2531 	struct DB_Result_Add_WorldCountryLink
2532 	{
2533 		DWORD dwID;									// 跨服国家边境连通信息ID, 0为无效ID
2534 		BYTE nResult;								// 结果 0:出错,没有新增或修改; 1:新增成功,2:修改成功
2535 		// 带出的数据,用来处理新增记录

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\ICountryDataBaseDef.h 88 KB H 文件 2014/2/25 14:53:58 2018/10/23 19:32:39 2018/10/23 19:32:39 40
103 		GAMEDB_REQUEST_GETCOUNTRYPOWER,						// 取得国家综合国力信息
105 		// 操作表名: WorldCountryWar
106 		GAMEDB_REQUEST_WORLDCOUNTRY_WAR_READ = 2050,		// 查询跨服国战信息
107 		GAMEDB_REQUEST_WORLDCOUNTRY_WAR_ADD,				// 添加跨服国战信息
108 		GAMEDB_REQUEST_WORLDCOUNTRY_WAR_SAVE,				// 批量保存跨服国战信息
109 		// 操作表名: WorldCountryWarLog
109 		// 操作表名: WorldCountryWarLog
110 		GAMEDB_REQUEST_WORLDCOUNTRY_WARLOG_READ,			// 查询跨服国战结果信息
111 		GAMEDB_REQUEST_WORLDCOUNTRY_WARLOG_ADD,				// 添加跨服国战结果信息
112 		// 操作表名: WorldCountryLink
112 		// 操作表名: WorldCountryLink
113 		GAMEDB_REQUEST_WORLDCOUNTRY_LINK_READ,				// 查询跨服国家边境连通信息
114 		GAMEDB_REQUEST_WORLDCOUNTRY_LINK_ADD,				// 添加跨服国家边境连通信息
115 		// 操作表名: WorldIPCityOnline
116 		GAMEDB_REQUEST_WORLDIPCITYONLINE_SAVE,				// 批量保存在线IP所有城市坐标信息
2188 	};
2190  
2193 	/////////////////////////////// 跨服国战 //////////////////////////////////////////////////////////////////////////
2194 	// 操作表名: WorldCountryWar
2195 	///////////////////////////////////////////////////////////////////
2194 	// 操作表名: WorldCountryWar
2195 	///////////////////////////////////////////////////////////////////
2197 	// 跨服国战信息数据库表
2198 	struct DB_Table_WorldCountryWar
2199 	{
2198 	struct DB_Table_WorldCountryWar
2199 	{
2200 		DWORD dwID;									// 跨服国战信息ID，0为无效ID,数据库设为自增
2201 		DWORD dwPublicWorldID;						// 所属公共区世界ID
2202 		DWORD dwStartTime;							// 开始时间
2202 		DWORD dwStartTime;							// 开始时间
2203 		DWORD dwEndTime;							// 结束时间
2204 		DWORD dwType;								// 跨服国战类型
2205 		DWORD dwAttackWorldID;						// 进攻国家所在游戏世界ID
2206 		DWORD dwAttackCountryID;					// 进攻国家ID
2236 		}
2237 	};
2239 	/// GAMEDB_REQUEST_WORLDCOUNTRY_WAR_READ 查询跨服国战信息 : 传入参数结构
2240 	struct DB_Param_Read_WorldCountryWar
2241 	{
2241 	{
2242 		// 所有为and关系,排序以dwID顺序,只读出最近30天的记录
2243 		DWORD dwID;							// 跨服国战信息ID，0为忽略
2244 		DWORD dwPublicWorldID;				// 所属公共区世界ID，0为忽略
2245 		DWORD dwDays;						// 只读出最近多少天的记录，0为忽略
2264 	};
2267 	///////////////////////////////////////////////////////////////////
2268 	/// GAMEDB_REQUEST_WORLDCOUNTRY_WAR_ADD 添加跨服国战信息 : 传入参数结构
2269 	struct DB_Param_Add_WorldCountryWar
2270 	{
2270 	{
2271 		// 条件参数
2272 		DWORD dwID;									// 跨服国战信息ID，0为无效ID，为0则新增记录，否则就修改
2274 		// 存入的数据
2275 		DWORD dwPublicWorldID;						// 所属公共区世界ID
2276 		DWORD dwStartTime;							// 开始时间
2277 		DWORD dwEndTime;							// 结束时间
2278 		DWORD dwType;								// 跨服国战类型
2279 		DWORD dwAttackWorldID;						// 进攻国家所在游戏世界ID
2280 		DWORD dwAttackCountryID;					// 进攻国家ID
2313 	struct DB_Result_Add_WorldCountryWar
2314 	{
2315 		DWORD dwID;							// 跨服国战信息ID, 0为无效ID
2316 		BYTE nResult;						// 结果 0:出错,没有新增或修改; 1:新增成功,2:修改成功
2318 		DB_Result_Add_WorldCountryWar(void)
2322 	};
2325 	///////////////////////////////////////////////////////////////////
2326 	/// GAMEDB_REQUEST_MAPRECOVER_SAVE 批量保存跨服国战信息 : 传入参数结构
2327 	struct DB_Param_Save_WorldCountryWar
2328 	{
2342 		}
2343 	};
2345 	/// 批量保存跨服国战信息: 返回结果的记录结构
2346 	struct DB_Result_Save_WorldCountryWar_Record
2347 	{
2346 	struct DB_Result_Save_WorldCountryWar_Record
2347 	{
2348 		DWORD	dwID;							// 跨服国战信息ID
2349 		BYTE	nResult;						// 结果 0:出错 1:成功
2351 		DB_Result_Save_WorldCountryWar_Record(void)
2354 		}
2355 	};
2357 	/// 批量保存跨服国战信息: 返回结果
2358 	struct DB_Result_Save_WorldCountryWar
2359 	{
2367 		}
2368 	};
2372 	/////////////////////////////// 跨服国战日志表 //////////////////////////////////////////////////////////////////////////
2373 	// 操作表名: WorldCountryWarLog
2374 	///////////////////////////////////////////////////////////////////
2373 	// 操作表名: WorldCountryWarLog
2374 	///////////////////////////////////////////////////////////////////
2376 	// 跨服国战信息日志数据库表
2377 	struct DB_Table_WorldCountryWarLog
2378 	{
2377 	struct DB_Table_WorldCountryWarLog
2378 	{
2379 		DWORD dwID;									// 跨服国战日志信息ID
2380 		DWORD dwAddTime;							// 跨服国战日志写入时间
2381 		DWORD dwPublicWorldID;						// 所属公共区世界ID
2382 		DWORD dwStartTime;							// 开始时间
2382 		DWORD dwStartTime;							// 开始时间
2383 		DWORD dwPlayTime;							// 战斗时长(秒)
2384 		DWORD dwType;								// 跨服国战类型
2385 		DWORD dwAttackWorldID;						// 进攻国家所在游戏世界ID
2386 		DWORD dwAttackCountryID;					// 进攻国家ID
2403 		}
2404 	};
2406 	/// GAMEDB_REQUEST_WORLDCOUNTRY_WAR_READ 查询跨服国战日志信息 : 传入参数结构
2407 	struct DB_Param_Read_WorldCountryWarLog
2408 	{
2408 	{
2409 		// 查找dwID和dwAddTime的记当,只返回一条记录
2410 		DWORD dwID;							// 跨服国战日志信息ID
2411 		DWORD dwAddTime;					// 跨服国战日志写入时间
2412 		DWORD dwPlayerID;					// 查询的角色ID,用来返回找到角色并发给他
2414 		DB_Param_Read_WorldCountryWarLog(void)
2431 	};
2434 	///////////////////////////////////////////////////////////////////
2435 	/// GAMEDB_REQUEST_WORLDCOUNTRY_WAR_ADD 添加跨服国战日志信息 : 传入参数结构
2436 	struct DB_Param_Add_WorldCountryWarLog
2437 	{
2455 		}
2456 	};
2460 	/////////////////////////////// 跨服国家边境连通 //////////////////////////////////////////////////////////////////////////
2461 	// 操作表名: WorldCountryLink
2462 	///////////////////////////////////////////////////////////////////
2461 	// 操作表名: WorldCountryLink
2462 	///////////////////////////////////////////////////////////////////
2464 	// 跨服国家边境连通信息数据库表
2465 	struct DB_Table_WorldCountryLink
2466 	{
2465 	struct DB_Table_WorldCountryLink
2466 	{
2467 		DWORD dwID;									// 跨服国家边境连通信息ID，0为无效ID,(游戏世界ID,国家ID,类型)组合编号
2468 		DWORD dwPublicWorldID;						// 所属公共区世界ID
2468 		DWORD dwPublicWorldID;						// 所属公共区世界ID
2469 		DWORD dwType;								// 跨服国家边境类型
2470 		DWORD dwWorldID;							// 国家所在游戏世界ID
2471 		DWORD dwCountryID;							// 国家ID
2479 		}
2480 	};
2482 	/// GAMEDB_REQUEST_WORLDCOUNTRY_LINK_READ 查询跨服国家边境连通信息 : 传入参数结构
2483 	struct DB_Param_Read_WorldCountryLink
2484 	{
2484 	{
2485 		// 所有为and关系,排序以dwID顺序
2486 		DWORD dwID;							// 跨服国战信息ID，0为忽略
2487 		DWORD dwPublicWorldID;				// 所属公共区世界ID，0为忽略
2489 		DB_Param_Read_WorldCountryLink(void)
2505 	};
2508 	///////////////////////////////////////////////////////////////////
2509 	/// GAMEDB_REQUEST_WORLDCOUNTRY_LINK_ADD 添加跨服国家边境连通信息 : 传入参数结构
2510 	struct DB_Param_Add_WorldCountryLink
2511 	{
2511 	{
2512 		// 条件参数
2513 		DWORD dwID;									// 跨服国家边境连通信息ID，0为无效ID，找到就修改，否则就新增
2515 		// 存入的数据
2516 		DWORD dwPublicWorldID;						// 所属公共区世界ID
2515 		// 存入的数据
2516 		DWORD dwPublicWorldID;						// 所属公共区世界ID
2517 		DWORD dwType;								// 跨服国家边境类型
2518 		DWORD dwWorldID;							// 国家所在游戏世界ID
2519 		DWORD dwCountryID;							// 国家ID
2531 	struct DB_Result_Add_WorldCountryLink
2532 	{
2533 		DWORD dwID;									// 跨服国家边境连通信息ID, 0为无效ID
2534 		BYTE nResult;								// 结果 0:出错,没有新增或修改; 1:新增成功,2:修改成功
2535 		// 带出的数据,用来处理新增记录

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\Include\ICountryClient.h 44 KB H 文件 2014/2/25 8:33:29 2018/10/23 19:51:50 2018/10/23 19:51:50 12
1346 	*/
1347 	virtual void PrintGameWorldListInfo() = NULL;
1349 	/** 取得跨服国战信息日志信息
1350 	@param  
1351 	@param   
1350 	@param  
1351 	@param   
1352 	@return  查询到的跨服国战信息日志信息
1353 	*/
1354 	virtual const SWorldCountryWarLogInfo*  GetWorldCountryWarLogInfo(void) = NULL;
1353 	*/
1354 	virtual const SWorldCountryWarLogInfo*  GetWorldCountryWarLogInfo(void) = NULL;
1356 	/** 取得跨服国战信息日志信息的排名节点信息
1357 	@param  DWORD dwIndex : 序号
1358 	@param   BYTE dwType: 对象类型	1表示玩家，2表示帮会
1357 	@param  DWORD dwIndex : 序号
1358 	@param   BYTE dwType: 对象类型	1表示玩家，2表示帮会
1359 	@return  查询到的跨服国战信息日志信息排名节点信息
1360 	*/
1361 	virtual const SWorldCountryWarOrderNodeInfo*  GetWorldCountryWarLogOrderNodeInfo(DWORD dwIndex,BYTE dwType) = NULL;
1360 	*/
1361 	virtual const SWorldCountryWarOrderNodeInfo*  GetWorldCountryWarLogOrderNodeInfo(DWORD dwIndex,BYTE dwType) = NULL;
1363 	/** 请求取得跨服国战信息日志信息
1364 	@param  DWORD dwID 			: 跨服国战日志信息ID
1365 	@param  DWORD dwAddTime 	: 跨服国战日志写入时间
1366 	*/
1367 	virtual void  RequestWorldCountryWarLog(DWORD dwID ,DWORD dwAddTime) = NULL;
1397 	*/
1398 	virtual IBridgeCountry * GetBridgeCountry(DWORD dwWorldID,DWORD dwCountryID) = NULL;
1400 	/**  请求跨服国战信息
1401 	@return  
1402 	*/
1422 	*/
1423 	virtual const SCountryWorldWarInfo * WarGetListData(void) = NULL;
1425 	/** 取得指定国家的跨服国战信息
1426 	DWORD dwWorldID			: 游戏世界ID
1427 	DWORD dwCountryID		: 国家ID
1441 	//   取得列表当前指向的数据
1442 	virtual SCountryWorldLinkInfo * Link_GetListData(void) = NULL;
1444 	/** 取得跨服国家边境连通信息
1445 	@return  SCountryWorldLinkInfo * 边境连通信息
1446 	*/
1446 	*/
1447 	virtual	SCountryWorldLinkInfo *	GetCountryWorldLinkInfo(DWORD dwWorldID,DWORD dwCountryID,DWORD dwType) = NULL;
1449 	/** 取得跨服国家边境连通信息
1450 	@return  SCountryWorldLinkInfo * 边境连通信息
1451 	*/
1451 	*/
1452 	virtual	SCountryWorldLinkInfo *	GetCountryWorldLinkInfoByID(DWORD dwID) = NULL;
1454 	// 取得跨服国家边境连通编号以(游戏世界ID,国家ID,类型)组合编号 为关键字
1455 	virtual DWORD GetCountryWorldLinkKey(DWORD dwWorldID,DWORD dwCountryID,DWORD dwType) = NULL;
1457 	/** 取得玩家设置时区与北京时区差值

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\Include\ICountryClient.h 41 KB H 文件 2014/2/25 13:43:53 2018/10/23 19:34:19 2018/10/23 19:34:19 12
1346 	*/
1347 	virtual void PrintGameWorldListInfo() = NULL;
1349 	/** 取得跨服国战信息日志信息
1350 	@param  
1351 	@param   
1350 	@param  
1351 	@param   
1352 	@return  查询到的跨服国战信息日志信息
1353 	*/
1354 	virtual const SWorldCountryWarLogInfo*  GetWorldCountryWarLogInfo(void) = NULL;
1353 	*/
1354 	virtual const SWorldCountryWarLogInfo*  GetWorldCountryWarLogInfo(void) = NULL;
1356 	/** 取得跨服国战信息日志信息的排名节点信息
1357 	@param  DWORD dwIndex : 序号
1358 	@param   BYTE dwType: 对象类型	1表示玩家，2表示帮会
1357 	@param  DWORD dwIndex : 序号
1358 	@param   BYTE dwType: 对象类型	1表示玩家，2表示帮会
1359 	@return  查询到的跨服国战信息日志信息排名节点信息
1360 	*/
1361 	virtual const SWorldCountryWarOrderNodeInfo*  GetWorldCountryWarLogOrderNodeInfo(DWORD dwIndex,BYTE dwType) = NULL;
1360 	*/
1361 	virtual const SWorldCountryWarOrderNodeInfo*  GetWorldCountryWarLogOrderNodeInfo(DWORD dwIndex,BYTE dwType) = NULL;
1363 	/** 请求取得跨服国战信息日志信息
1364 	@param  DWORD dwID 			: 跨服国战日志信息ID
1365 	@param  DWORD dwAddTime 	: 跨服国战日志写入时间
1366 	*/
1367 	virtual void  RequestWorldCountryWarLog(DWORD dwID ,DWORD dwAddTime) = NULL;
1397 	*/
1398 	virtual IBridgeCountry * GetBridgeCountry(DWORD dwWorldID,DWORD dwCountryID) = NULL;
1400 	/**  请求跨服国战信息
1401 	@return  
1402 	*/
1422 	*/
1423 	virtual const SCountryWorldWarInfo * WarGetListData(void) = NULL;
1425 	/** 取得指定国家的跨服国战信息
1426 	DWORD dwWorldID			: 游戏世界ID
1427 	DWORD dwCountryID		: 国家ID
1441 	//   取得列表当前指向的数据
1442 	virtual SCountryWorldLinkInfo * Link_GetListData(void) = NULL;
1444 	/** 取得跨服国家边境连通信息
1445 	@return  SCountryWorldLinkInfo * 边境连通信息
1446 	*/
1446 	*/
1447 	virtual	SCountryWorldLinkInfo *	GetCountryWorldLinkInfo(DWORD dwWorldID,DWORD dwCountryID,DWORD dwType) = NULL;
1449 	/** 取得跨服国家边境连通信息
1450 	@return  SCountryWorldLinkInfo * 边境连通信息
1451 	*/
1451 	*/
1452 	virtual	SCountryWorldLinkInfo *	GetCountryWorldLinkInfoByID(DWORD dwID) = NULL;
1454 	// 取得跨服国家边境连通编号以(游戏世界ID,国家ID,类型)组合编号 为关键字
1455 	virtual DWORD GetCountryWorldLinkKey(DWORD dwWorldID,DWORD dwCountryID,DWORD dwType) = NULL;
1457 	/** 取得玩家设置时区与北京时区差值

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\Include\IChatService.h 7 KB H 文件 2014/2/25 0:21:59 2018/10/23 20:08:56 2018/10/23 20:08:56 1
121 	// 服务器发送GM命令
122 	virtual bool sendGMCommandFromServer(const std::string& name, DWORD right, const std::string& cmd, DWORD id) = 0;
124 	////// 跨服发聊天消息接口 接口和原来一样，只多了一个游戏世界ID参数 ////////////////////////////////////////////////////////////////////
126 	// 广播系统提示消息
127 	virtual void worldBroadcastSystemTips(DWORD dwWorldID,TipsType type ,dbid sender, ChatChannelType channel, InfoPos pos, const char* text) = 0;

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\Include\IChatService.h 7 KB H 文件 2014/2/25 14:31:08 2018/10/23 19:46:35 2018/10/23 19:46:35 1
121 	// 服务器发送GM命令
122 	virtual bool sendGMCommandFromServer(const std::string& name, DWORD right, const std::string& cmd, DWORD id) = 0;
124 	////// 跨服发聊天消息接口 接口和原来一样，只多了一个游戏世界ID参数 ////////////////////////////////////////////////////////////////////
126 	// 广播系统提示消息
127 	virtual void worldBroadcastSystemTips(DWORD dwWorldID,TipsType type ,dbid sender, ChatChannelType channel, InfoPos pos, const char* text) = 0;

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\Include\IChatServer.h 5 KB H 文件 2014/2/25 0:08:34 2018/10/23 20:05:18 2018/10/23 20:05:18 1
88 	/// 向指定的客户组发送系统提示信息
89 	virtual void sendSystemTipsEx(TipsType type, ulong* client_array, size_t client_num, InfoPos pos, const char* text) = 0;
91 	////// 跨服发聊天消息接口 接口和原来一样，只多了一个游戏世界ID参数 ////////////////////////////////////////////////////////////////////
92 	// 广播系统提示消息
93 	virtual void worldBroadcastSystemTips(DWORD dwWorldID,TipsType type, dbid sender, ChatChannelType channel, InfoPos pos, const char* text) = 0;

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\Include\IChatServer.h 5 KB H 文件 2014/2/25 14:25:19 2018/10/23 19:44:07 2018/10/23 19:44:07 1
88 	/// 向指定的客户组发送系统提示信息
89 	virtual void sendSystemTipsEx(TipsType type, ulong* client_array, size_t client_num, InfoPos pos, const char* text) = 0;
91 	////// 跨服发聊天消息接口 接口和原来一样，只多了一个游戏世界ID参数 ////////////////////////////////////////////////////////////////////
92 	// 广播系统提示消息
93 	virtual void worldBroadcastSystemTips(DWORD dwWorldID,TipsType type, dbid sender, ChatChannelType channel, InfoPos pos, const char* text) = 0;

I:\work\source\武侠世界2\wxsj2\trunk\Server\Server\DB\HumanDB.h 22 KB H 文件 2010/7/26 13:54:41 2018/10/23 18:24:43 2018/10/23 18:24:43 1
401 	_SETTING_DB_LOAD*				m_dbSetting ;	//设置数据
402 	_PRIVATE_INFO_DB_LOAD*			m_dbPrivateInfo;//私人信息
403 	_MONSTER_PET_DB*				m_dbMonsterPet;	//召唤兽跨服专用，不要写数据库
404 	_SOUXIA_DB_LOAD*				m_dbSouXia;		//搜侠录信息 add by gh 2010/05/15
405     _MOUNT_DB_LOAD*                 m_dbMount;      //角色的坐骑信息  [7/1/2010 陈军龙]

I:\work\source\武侠世界2\[src.cool]武侠世界2\Server\Server\DB\HumanDB.h 22 KB H 文件 2010/7/26 13:54:41 2018/10/23 16:20:04 2018/10/23 16:20:04 1
401 	_SETTING_DB_LOAD*				m_dbSetting ;	//设置数据
402 	_PRIVATE_INFO_DB_LOAD*			m_dbPrivateInfo;//私人信息
403 	_MONSTER_PET_DB*				m_dbMonsterPet;	//召唤兽跨服专用，不要写数据库
404 	_SOUXIA_DB_LOAD*				m_dbSouXia;		//搜侠录信息 add by gh 2010/05/15
405     _MOUNT_DB_LOAD*                 m_dbMount;      //角色的坐骑信息  [7/1/2010 陈军龙]

I:\work\source\君天下OL\君天下OL完整\Server\GameServer\Game\GSP_InstanceQueue.h 4 KB H 文件 2011/6/21 11:53:06 2018/10/19 14:51:54 2018/10/19 14:51:54 1
95 	std::list<team_t*> m_fireteam[3];
96 };
101 //服务器战场 按照服务器进行跨服战场分组
102 class GSP_ServerBattleGroundGroup : public GSP_InstanceQueueBase
103 {

I:\work\source\君天下OL\君天下OL完整\Server\GameServer\Net\GS_SP_Socket.h 1 KB H 文件 2011/6/9 10:43:53 2018/10/19 14:51:55 2018/10/19 14:51:55 1
1 #ifndef __GS_SP_SOCKET_H__
2 #define __GS_SP_SOCKET_H__
3 //连接跨服服务器
4 #include "../../new_common/Source/net/tcpsession.h"
6 class gs_sp_scocket : public tcp_session

I:\work\source\君天下OL\君天下OL完整\Server\GameServer\Net\GS_SP_ListenServer.h 1 KB H 文件 2011/6/17 9:48:19 2018/10/19 14:51:55 2018/10/19 14:51:55 1
1 #ifndef __GS_SP_LISTENSERVER_H__
2 #define __GS_SP_LISTENSERVER_H__
3 // 跨服服务器侦听服务器
4 #include "../../new_common/Source/net/tcpserver.h"
5 class gs_sp_scocket;

I:\work\source\最游记\Server\Server\Common\GraphicCodeCheck.h 8 KB H 文件 2012/2/10 11:48:56 2012/2/10 11:48:56 2012/2/10 11:48:56 1
19     ECheckState state;
20     uint32      dwFightStatusTime; // 战斗状态时间
21     uint32      onMapTime;         // 在地图的时间 以后要做跨服同步
22     uint32      m_dwSendCheckTime; // 图片发送到客户端时间
23 };

I:\work\source\最游记\[src.cool]最游记\Server\Server\Server\Common\GraphicCodeCheck.h 9 KB H 文件 2013/6/28 14:00:04 2018/10/23 19:49:44 2018/10/23 19:49:44 1
25     ECheckState state;
26     uint32      dwFightStatusTime; // 战斗状态时间
27     uint32      onMapTime;         // 在地图的时间 以后要做跨服同步
28     uint32      m_dwSendCheckTime; // 图片发送到客户端时间
29 };

I:\work\source\征三国\征三国\Server\Common\GraphicCodeCheck.h 8 KB H 文件 2013/4/28 21:54:53 2018/10/23 19:46:41 2018/10/23 19:46:41 1
25     ECheckState state;
26     uint32      dwFightStatusTime; // 战斗状态时间
27     uint32      onMapTime;         // 在地图的时间 以后要做跨服同步
28     uint32      m_dwSendCheckTime; // 图片发送到客户端时间
29 };

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\SocialServer\GlobalSocialServer.h 17 KB H 文件 2014/2/25 0:23:56 2018/10/23 20:09:11 2018/10/23 20:09:11 3
71 		DWORD dwTime;				// 时间
72 		DWORD dwUserCounts;			// 本区在线
73 		DWORD dwOtherCounts;		// 跨服在线角色个数
75 		SOnlineUserCountsInfo(void)
76 		{
146 	IManagerConnector *			m_ManagerConnector;			/// 服务器管理连接器
148 	IBridgeConnector *			m_BridgeConnector;			/// 跨区桥服务器连接器
150 	IMatchService *				m_MatchService;				/// 跨服组队撮合系统服务
151 	IAuctionService*			mAuctionService;			//  竞拍服务
153 	IContactService*			mContactService;			/// 个人资料管理器
481 		return mCastleService;
482 	}
484 	// 取得跨服组队撮合系统服务
485 	virtual IMatchService* GetMatchService(void)
486 	{

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\SocialServer\GlobalSocialServer.h 17 KB H 文件 2014/2/25 14:32:01 2018/10/23 19:46:48 2018/10/23 19:46:48 3
71 		DWORD dwTime;				// 时间
72 		DWORD dwUserCounts;			// 本区在线
73 		DWORD dwOtherCounts;		// 跨服在线角色个数
75 		SOnlineUserCountsInfo(void)
76 		{
146 	IManagerConnector *			m_ManagerConnector;			/// 服务器管理连接器
148 	IBridgeConnector *			m_BridgeConnector;			/// 跨区桥服务器连接器
150 	IMatchService *				m_MatchService;				/// 跨服组队撮合系统服务
151 	IAuctionService*			mAuctionService;			//  竞拍服务
153 	IContactService*			mContactService;			/// 个人资料管理器
481 		return mCastleService;
482 	}
484 	// 取得跨服组队撮合系统服务
485 	virtual IMatchService* GetMatchService(void)
486 	{

I:\work\source\最游记\Tool\testGameDataDecryptLib\Contrib\GameDataDecrypt\GlobalDef.h 129 KB H 文件 2011/12/6 12:21:05 2011/12/6 12:21:05 2011/12/6 12:21:05 1
707     TeamMaxManipleCount = 4,		//一个团4个小队
708     TeamUpdateInterval = 2000,		//队员信息2秒刷新一次
709     TeamUpdateToCenter = 5000,      //为了缓解跨服同步压力,队员信息5秒同步一次
710     TeamSelfUpdate = 100000,         //队伍创建后每60秒检查一次是否还有效
712     ReleaseSpaceTime = 1000,    

I:\work\source\最游记\Tool\GameDataDecrypt\Source\GlobalDef.h 129 KB H 文件 2011/12/6 12:21:10 2011/12/6 12:21:10 2011/12/6 12:21:10 1
707     TeamMaxManipleCount = 4,		//一个团4个小队
708     TeamUpdateInterval = 2000,		//队员信息2秒刷新一次
709     TeamUpdateToCenter = 5000,      //为了缓解跨服同步压力,队员信息5秒同步一次
710     TeamSelfUpdate = 100000,         //队伍创建后每60秒检查一次是否还有效
712     ReleaseSpaceTime = 1000,    

I:\work\source\最游记\Server\Common\GlobalDef.h 133 KB H 文件 2012/2/10 11:51:34 2012/2/10 11:51:34 2012/2/10 11:51:34 1
798     TeamMaxManipleCount = 4,		//一个团4个小队
799     TeamUpdateInterval = 2000,		//队员信息2秒刷新一次
800     TeamUpdateToCenter = 5000,      //为了缓解跨服同步压力,队员信息5秒同步一次
801     TeamSelfUpdate = 100000,        //队伍创建后每60秒检查一次是否还有效
803     ReleaseSpaceTime = 1000,    

I:\work\source\最游记\client\Common\GlobalDef.h 133 KB H 文件 2012/3/26 11:21:04 2012/5/10 19:15:15 2012/5/10 19:15:15 1
809     TeamMaxManipleCount = 4,		//一个团4个小队
810     TeamUpdateInterval = 2000,		//队员信息2秒刷新一次
811     TeamUpdateToCenter = 5000,      //为了缓解跨服同步压力,队员信息5秒同步一次
812     TeamSelfUpdate = 100000,        //队伍创建后每60秒检查一次是否还有效
814     ReleaseSpaceTime = 1000,    

I:\work\source\最游记\[src.cool]最游记\Server\Server\Common\GlobalDef.h 159 KB H 文件 2013/6/28 13:40:38 2018/10/23 19:45:26 2018/10/23 19:45:26 3
860     TeamMaxManipleCount = 4,		//一个团4个小队
861     TeamUpdateInterval = 2000,		//队员信息2秒刷新一次
862     TeamUpdateToCenter = 5000,      //为了缓解跨服同步压力,队员信息5秒同步一次
863     TeamSelfUpdate = 100000,        //队伍创建后每60秒检查一次是否还有效
865     ReleaseSpaceTime = 1000,    
1873 	ST_SERVER_STARTUP		 , // 全局变量初始化脚本
1874 	ST_CALLSCRIPT            , // CallScript触发
1875     ST_BATTLE_WIN            , // 跨服战胜利触发
1876     ST_BATTLE_LOSE           , // 跨服战输触发
1877 	ST_XIUWEI_LEVELUP		 , // 修为升级触发
1879     ST_MAX                   , // 最大

I:\work\source\最游记\[src.cool]最游记\Client\Client\Common\GlobalDef.h 159 KB H 文件 2013/6/28 14:14:12 2018/10/23 19:36:06 2018/10/23 19:36:06 3
860     TeamMaxManipleCount = 4,		//一个团4个小队
861     TeamUpdateInterval = 2000,		//队员信息2秒刷新一次
862     TeamUpdateToCenter = 5000,      //为了缓解跨服同步压力,队员信息5秒同步一次
863     TeamSelfUpdate = 100000,        //队伍创建后每60秒检查一次是否还有效
865     ReleaseSpaceTime = 1000,    
1873 	ST_SERVER_STARTUP		 , // 全局变量初始化脚本
1874 	ST_CALLSCRIPT            , // CallScript触发
1875     ST_BATTLE_WIN            , // 跨服战胜利触发
1876     ST_BATTLE_LOSE           , // 跨服战输触发
1877 	ST_XIUWEI_LEVELUP		 , // 修为升级触发
1879     ST_MAX                   , // 最大

I:\work\source\征三国\征三国\Common\GlobalDef.h 147 KB H 文件 2014/6/18 16:14:47 2018/10/23 19:34:47 2018/10/23 19:34:47 1
844     TeamMaxManipleCount = 4,		//一个团4个小队
845     TeamUpdateInterval = 2000,		//队员信息2秒刷新一次
846     TeamUpdateToCenter = 5000,      //为了缓解跨服同步压力,队员信息5秒同步一次
847     TeamSelfUpdate = 100000,        //队伍创建后每60秒检查一次是否还有效
849     ReleaseSpaceTime = 1000,    

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\Game\GlobalClient.h 20 KB H 文件 2014/2/25 8:33:03 2018/10/23 19:51:38 2018/10/23 19:51:38 2
187 	IInviteClient*		mInviteClient;			/// 人拉人客户端
188 	ISuitClient*		mSuitClient;			/// 套装客户端
189 	IMatchClient*		mMatchClient;			/// 跨服组队撮合系统客户端
190 	IAuctionClient*		mAuctionClient;			/// 竞拍客户端
191 	IAntiCheatingClient* mAntiCheatingClient;   /// 反外挂模块
460 	/// 取得套装客户端
461 	virtual ISuitClient* getSuitClient() const;
463 	/// 取得跨服组队撮合系统客户端
464 	virtual IMatchClient* getMatchClient() const;
466 	/// 取得竞拍客户端

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\Game\GlobalClient.h 24 KB H 文件 2014/2/25 13:43:32 2018/10/23 19:34:17 2018/10/23 19:34:17 2
185 	IInviteClient*		mInviteClient;			/// 人拉人客户端
186 	ISuitClient*		mSuitClient;			/// 套装客户端
187 	IMatchClient*		mMatchClient;			/// 跨服组队撮合系统客户端
188 	IAuctionClient*		mAuctionClient;			/// 竞拍客户端
189 	IAntiCheatingClient* mAntiCheatingClient;   /// 反外挂模块
529 	virtual ISuitClient* getSuitClient() const
530 	{ return mSuitClient; }
532 	/// 取得跨服组队撮合系统客户端
533 	virtual IMatchClient* getMatchClient() const
534 	{ return mMatchClient; }

I:\work\source\书剑恩仇录\书剑恩仇录_zccode.com\书剑恩仇录\金\Src\Client\Game\Table\GameTableDefine.h 13 KB H 文件 2013/3/3 13:29:52 2018/10/23 13:33:20 2018/10/23 13:33:20 1
560 	// add by dragon 时装上色蓝属性表
561 	{ TABLE_SuitEquipBlueAttr, "Equip_Suit_Gem" },
563     // 2011-10-28 add by qiliang 平移成2跨服玩家服名称显示功能
564     { TABLE_WORLD_NAME, "worldname" },
566 	// 拆解

I:\work\source\书剑恩仇录\[src.cool]书剑恩仇录\Src\Client\Game\Table\GameTableDefine.h 13 KB H 文件 2013/3/3 13:29:52 2018/10/23 13:33:11 2018/10/23 13:33:11 1
560 	// add by dragon 时装上色蓝属性表
561 	{ TABLE_SuitEquipBlueAttr, "Equip_Suit_Gem" },
563     // 2011-10-28 add by qiliang 平移成2跨服玩家服名称显示功能
564     { TABLE_WORLD_NAME, "worldname" },
566 	// 拆解

I:\work\source\书剑恩仇录\书剑恩仇录_zccode.com\书剑恩仇录\金\Src\Client\Game\Table\GameTableData.h 96 KB H 文件 2013/3/3 13:29:52 2018/10/23 13:33:20 2018/10/23 13:33:20 1
3559 	int32			m_AttValue7;
3561 };
3563 // 2011-10-28 add by qiliang 平移成2跨服玩家服名称显示功能
3564 #define TABLE_WORLD_NAME	(1056)
3565 struct _TABLE_WORLD_NAME

I:\work\source\书剑恩仇录\[src.cool]书剑恩仇录\Src\Client\Game\Table\GameTableData.h 96 KB H 文件 2013/3/3 13:29:52 2018/10/23 13:33:11 2018/10/23 13:33:11 1
3559 	int32			m_AttValue7;
3561 };
3563 // 2011-10-28 add by qiliang 平移成2跨服玩家服名称显示功能
3564 #define TABLE_WORLD_NAME	(1056)
3565 struct _TABLE_WORLD_NAME

I:\work\source\书剑恩仇录\书剑恩仇录_zccode.com\书剑恩仇录\金\Src\Client\Game\ScriptFunction\GameScriptFunctionMySelf.h 13 KB H 文件 2013/3/3 13:29:30 2018/10/23 13:33:20 2018/10/23 13:33:20 1
305 	int32			IsShowGuanqiaWindown(LuaPlus::LuaState * state);
307     int32           IsRoomBattleGroupState( LuaPlus::LuaState* state);
309 	//退出跨服关卡 2011-09-16 added by Micheal Lin
310 	int32			ExitRoom(LuaPlus::LuaState *state);
312 	// add by dragon 时装上色

I:\work\source\书剑恩仇录\[src.cool]书剑恩仇录\Src\Client\Game\ScriptFunction\GameScriptFunctionMySelf.h 13 KB H 文件 2013/3/3 13:29:30 2018/10/23 13:33:10 2018/10/23 13:33:10 1
305 	int32			IsShowGuanqiaWindown(LuaPlus::LuaState * state);
307     int32           IsRoomBattleGroupState( LuaPlus::LuaState* state);
309 	//退出跨服关卡 2011-09-16 added by Micheal Lin
310 	int32			ExitRoom(LuaPlus::LuaState *state);
312 	// add by dragon 时装上色

I:\work\source\蜀山神话\[src.cool]蜀山神话\src\server\gamesvr\GamePlayer.h 50 KB H 文件 2012/4/21 1:05:17 2018/10/23 13:25:10 2018/10/23 13:25:10 1
742     //  设置在线奖励的重新计时
743     void                    OnlineAward_Login();            // 登陆过程，设置在线奖励状态
744     void                    OnlineAward_SpanServer();       // 跨服过程，设置在线奖励状态
746     void                    SetNeedReStart(bool bNeed) { m_bNeedReStart = bNeed; }
747     bool                    IsNeedReStart()            { return m_bNeedReStart; }

I:\work\source\最游记\[src.cool]最游记\Server\Server\Server\Common\GamePlayer.h 86 KB H 文件 2013/6/28 14:00:14 2018/10/23 19:49:43 2018/10/23 19:49:43 1
350     // 移动模块
351 #include "PlayerMoveActionModule.h"
353               // 跨服副本用， 属于原来的大区的ID.
354 public:
355     // IBaseCharProperty

I:\work\source\仙剑神曲\[src.cool]仙剑神曲\src\server\gamesvr\GamePlayer.h 48 KB H 文件 2012/4/22 2:05:34 2018/10/23 16:11:01 2018/10/23 16:11:01 3
348 	void				SetSummonedCreature(GameGf* pGf){ m_pSummonedCreature = pGf; }
349 	void				DismissSummonCreature();
350     // 召唤兽跨服同步信息
351     GF_SVR_SYNC_DATA&   GetGfSyncData() { return m_gfSyncData; }
352     void                SaveGfSyncData();
742 	// 离线BUFF相关
743 	int		PersistBuffs();
745 	// 跨服重建BUFF
746 	int		RebuildSvrBuff(BUFF_ENTRY_SERVER* svr_entrys, BYTE entry_cnts);
748 public:
1172     // 是否处于调用名门特权脚本状态
1173     bool                m_bNobleInvokeScript;
1175     GF_SVR_SYNC_DATA    m_gfSyncData;               ///< 召唤兽跨服同步信息
1177     // 登录时刷怪疲劳值
1178     UINT32              m_nLoginTireCount;

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\LuaServer\GameMatchAPI.h 50 KB H 文件 2014/2/25 0:09:18 2018/10/23 20:06:04 2018/10/23 20:06:04 13
5 ** 日  期:	2010-7-13
6 ** 版  本:	1.0
7 ** 描  述:	跨服组队撮合系统API接口
8 ** 应  用:  	
10 **************************** 修改记录 ******************************
33 ///////////////////////////////////////////////////////////////////////////////////////////////
35 // tolua_begin
38 /**  取得跨服组队撮合系统服务器
39 @param   
39 @param   
40 @return  跨服组队撮合系统服务器
41 */
42 MATCH_API IMatchServer * GetMatchServer(void);
268 MATCH_API bool WarChangeActorTank(DWORD dwActorID, DWORD dwTankID);
270 ///////////// 跨区战场API /////////////////////////////////////////////////////////////
272 /** 用现场创建跨服国战
273 @param  DWORD dwWarTypeID		: 战场场类型 EMWarItemType
274 @param  const char * szCampNames: 阵营名称列表，分号分割阵营名
442 */
443 MATCH_API const char * GetWarStringProp(DWORD dwZoneID, DWORD dwPropID);
445 /** 跨服领地BOSS战接收外部数据结构信息
446 @param	 DWORD dwActorID	:玩家序列号
447 @param	 DWORD dwWarID		:战场ID
449 */
450 MATCH_API SWorldBossWarClanNodeInfo * GetCastleBossWarExtData(DWORD dwActorID,DWORD dwWarID);
452 /** 跨服领地BOSS战接收外部数据结构信息
453 @param	 DWORD dwActorID	:玩家序列号
454 @param	 DWORD dwWarID		:战场ID
459 */
460 MATCH_API bool SetCastleBossWarExtData(DWORD dwActorID,DWORD dwWarID, DWORD dwCivilGrade, DWORD dwBossID, char * szClanIDs);
462 /** 跨服领地BOSS战接收外部数据结构中指定帮会信息
463 @param	 DWORD dwActorID	:玩家序列号
464 @param	 DWORD dwWarID		:战场ID
473 */
474 MATCH_API DWORD GetWarGameUpLevelLimit(DWORD dwZoneID);
476 /** 取得跨服边境战场对象
477 @param	 DWORD dwZoneID		:场景ID
478 @return  SCountryWarInfo *
479 */
480 MATCH_API ICountryBorderWar * GetCountryBorderWar(DWORD dwZoneID);
482 /** 跨服边境战场内传送玩家
483 @param	 DWORD dwActorID	:玩家序列号
484 @param	 DWORD dwTransFlag	:传送标识 EMCountryBorderWarTransFlag
486 */
487 MATCH_API bool CountryBorderWarTransActor(DWORD dwActorID,DWORD dwTransFlag);
489 /** 跨服边境战场内传送玩家是否能传送到天上战场
490 @param	 DWORD dwActorID	:玩家序列号
491 @return  bool
492 */
493 MATCH_API bool CountryBorderWarActorCanTransSky(DWORD dwActorID);
495 /** 跨服边境战场击杀BOSS时AI触发事件后处理
496 @param	DWORD dwActorID		: 玩家序列号
497 @param	bool bSendResult	: 是否要发送结果信息到社会服,false=不发送
499 */
500 MATCH_API bool DoCountryBorderWarKillBossEvent(DWORD dwActorID, bool bSendResult);
502 /** 检测跨服边境战场是否开启任务
503 @param	DWORD dwActorID		: 玩家序列号
504 @return  bool
505 */
506 MATCH_API bool CheckCountryBorderWarOpenTask(DWORD dwActorID);
508 /** 检测跨服边境战场阵营数量
509 @param	DWORD dwActorID		: 玩家序列号
510 @return  DWORD

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\LuaServer\GameMatchAPI.h 50 KB H 文件 2014/2/25 14:25:52 2018/10/23 19:44:39 2018/10/23 19:44:39 13
5 ** 日  期:	2010-7-13
6 ** 版  本:	1.0
7 ** 描  述:	跨服组队撮合系统API接口
8 ** 应  用:  	
10 **************************** 修改记录 ******************************
33 ///////////////////////////////////////////////////////////////////////////////////////////////
35 // tolua_begin
38 /**  取得跨服组队撮合系统服务器
39 @param   
39 @param   
40 @return  跨服组队撮合系统服务器
41 */
42 MATCH_API IMatchServer * GetMatchServer(void);
268 MATCH_API bool WarChangeActorTank(DWORD dwActorID, DWORD dwTankID);
270 ///////////// 跨区战场API /////////////////////////////////////////////////////////////
272 /** 用现场创建跨服国战
273 @param  DWORD dwWarTypeID		: 战场场类型 EMWarItemType
274 @param  const char * szCampNames: 阵营名称列表，分号分割阵营名
442 */
443 MATCH_API const char * GetWarStringProp(DWORD dwZoneID, DWORD dwPropID);
445 /** 跨服领地BOSS战接收外部数据结构信息
446 @param	 DWORD dwActorID	:玩家序列号
447 @param	 DWORD dwWarID		:战场ID
449 */
450 MATCH_API SWorldBossWarClanNodeInfo * GetCastleBossWarExtData(DWORD dwActorID,DWORD dwWarID);
452 /** 跨服领地BOSS战接收外部数据结构信息
453 @param	 DWORD dwActorID	:玩家序列号
454 @param	 DWORD dwWarID		:战场ID
459 */
460 MATCH_API bool SetCastleBossWarExtData(DWORD dwActorID,DWORD dwWarID, DWORD dwCivilGrade, DWORD dwBossID, char * szClanIDs);
462 /** 跨服领地BOSS战接收外部数据结构中指定帮会信息
463 @param	 DWORD dwActorID	:玩家序列号
464 @param	 DWORD dwWarID		:战场ID
473 */
474 MATCH_API DWORD GetWarGameUpLevelLimit(DWORD dwZoneID);
476 /** 取得跨服边境战场对象
477 @param	 DWORD dwZoneID		:场景ID
478 @return  SCountryWarInfo *
479 */
480 MATCH_API ICountryBorderWar * GetCountryBorderWar(DWORD dwZoneID);
482 /** 跨服边境战场内传送玩家
483 @param	 DWORD dwActorID	:玩家序列号
484 @param	 DWORD dwTransFlag	:传送标识 EMCountryBorderWarTransFlag
486 */
487 MATCH_API bool CountryBorderWarTransActor(DWORD dwActorID,DWORD dwTransFlag);
489 /** 跨服边境战场内传送玩家是否能传送到天上战场
490 @param	 DWORD dwActorID	:玩家序列号
491 @return  bool
492 */
493 MATCH_API bool CountryBorderWarActorCanTransSky(DWORD dwActorID);
495 /** 跨服边境战场击杀BOSS时AI触发事件后处理
496 @param	DWORD dwActorID		: 玩家序列号
497 @param	bool bSendResult	: 是否要发送结果信息到社会服,false=不发送
499 */
500 MATCH_API bool DoCountryBorderWarKillBossEvent(DWORD dwActorID, bool bSendResult);
502 /** 检测跨服边境战场是否开启任务
503 @param	DWORD dwActorID		: 玩家序列号
504 @return  bool
505 */
506 MATCH_API bool CheckCountryBorderWarOpenTask(DWORD dwActorID);
508 /** 检测跨服边境战场阵营数量
509 @param	DWORD dwActorID		: 玩家序列号
510 @return  DWORD

I:\work\source\书剑恩仇录\书剑恩仇录_zccode.com\书剑恩仇录\金\Src\Client\Game\Data\GameDataRelation.h 33 KB H 文件 2013/3/3 13:28:00 2018/10/23 13:33:16 2018/10/23 13:33:16 2
823 	void	Set_MemberCount(BYTE ucCount);
824 	BYTE	Get_MemberCount(void);
826 	/* 跨服报名暂存数据 */
827 	void	ClearSignUpInfo();	 //清除报名数据
828 	void	AskSignUpStatus();   //请求报名状态 2011-08-26 added by Michael Lin
967 	/* 国家 */
968 	CountryFunctionaryInfo m_CountryFunctionInfo[COUNTRY_FUNCTION_TYPE_NUM];
970 	/* 跨服副本组队 */
971 	RoomID_t		m_nSignUpID;
972 	RoomBattlePos	m_RoomPos;

I:\work\source\书剑恩仇录\[src.cool]书剑恩仇录\Src\Client\Game\Data\GameDataRelation.h 33 KB H 文件 2013/3/3 13:28:00 2018/10/23 13:33:05 2018/10/23 13:33:05 2
823 	void	Set_MemberCount(BYTE ucCount);
824 	BYTE	Get_MemberCount(void);
826 	/* 跨服报名暂存数据 */
827 	void	ClearSignUpInfo();	 //清除报名数据
828 	void	AskSignUpStatus();   //请求报名状态 2011-08-26 added by Michael Lin
967 	/* 国家 */
968 	CountryFunctionaryInfo m_CountryFunctionInfo[COUNTRY_FUNCTION_TYPE_NUM];
970 	/* 跨服副本组队 */
971 	RoomID_t		m_nSignUpID;
972 	RoomBattlePos	m_RoomPos;

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\Include\GameCountryAPI.h 30 KB H 文件 2014/2/25 0:21:58 2018/10/23 20:08:55 2018/10/23 20:08:55 1
894 */
895 COUNTRY_API	 bool OpenManagerCmd(DWORD dwPlayerID,DWORD dwManagerPlayerID);
897 // 检查明天是否有跨服国战
898 COUNTRY_API bool CheckCountryWorldWar(DWORD dwFromWorldID,DWORD dwFromCountryID,DWORD dwWorldID,DWORD dwCountryID);
900 /** 诸侯让位给指定玩家

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\Include\GameCountryAPI.h 30 KB H 文件 2014/2/25 14:31:07 2018/10/23 19:46:35 2018/10/23 19:46:35 1
894 */
895 COUNTRY_API	 bool OpenManagerCmd(DWORD dwPlayerID,DWORD dwManagerPlayerID);
897 // 检查明天是否有跨服国战
898 COUNTRY_API bool CheckCountryWorldWar(DWORD dwFromWorldID,DWORD dwFromCountryID,DWORD dwWorldID,DWORD dwCountryID);
900 /** 诸侯让位给指定玩家

I:\work\source\龙腾世界\[src.cool]龙腾世界\Code\Code\ERBase\Include\GameConstDef_SubEffect.h 10 KB H 文件 2006/4/25 12:30:56 2018/10/22 15:44:22 2018/10/22 15:44:22 1
149 	BYTE m_nBeEquipEffect;		// 是否是装备添加的附加效果
151 	BYTE m_nBeTalismanEffect;	// 是否是护身符添加的附加效果
153 	BYTE m_nS2SNeedSave;		// 跨服务器时是不是需要存盘
155 	BYTE m_bHaveCalcValue;		// 是否已经计算过附加效果的值了
157 	//仅有持续时间的技能释放的附加效果才有效，用来处理装备拿掉后停止附加效果。

I:\work\source\龙腾世界\[src.cool]龙腾世界\Code\Code\ERBase\Include\GameConstDef_Character.h 44 KB H 文件 2006/12/20 9:50:38 2018/10/22 15:44:21 2018/10/22 15:44:21 1
508 {
509 	LOAD_FILE_TYPE_ENTER_GAME,			//进入游戏
510 	LOAD_FILE_TYPE_STRIDE_SERVER,		//跨服务器
511 	LOAD_FILE_TYPE_PLAYER_TOOL,			//角色扫描工具
513 };

I:\work\source\蜀山神话\[src.cool]蜀山神话\src\server\gamesvr\persist\GameCharCallbacks.h 6 KB H 文件 2012/4/21 1:05:17 2018/10/23 13:25:12 2018/10/23 13:25:12 2
66 /// CharVisitCallback 
67 /// @brief   :   SyncManager所使用的一个回调，用于
68 ///              在玩家跨服跳转的过程中，作为目的地图所在的服务器，
69 ///              异步的完成角色数据的加载
70 /// @remark  :   与CharEnterCallback不同之处在于前者属于玩家登录流程，
101 /// CharFlushCallback 
102 /// @brief   :   SyncManager所使用的一个回调，用于
103 ///              在玩家跨服跳转的过程中，作为出发地图所在的服务器，
104 ///              异步的完成角色数据的保存
105 /// @remark  :   

I:\work\source\仙剑神曲\[src.cool]仙剑神曲\src\server\gamesvr\persist\GameCharCallbacks.h 7 KB H 文件 2012/4/22 2:05:34 2018/10/23 16:11:11 2018/10/23 16:11:11 2
67 /// CharVisitCallback 
68 /// @brief   :   SyncManager所使用的一个回调，用于
69 ///              在玩家跨服跳转的过程中，作为目的地图所在的服务器，
70 ///              异步的完成角色数据的加载
71 /// @remark  :   与CharEnterCallback不同之处在于前者属于玩家登录流程，
102 /// CharFlushCallback 
103 /// @brief   :   SyncManager所使用的一个回调，用于
104 ///              在玩家跨服跳转的过程中，作为出发地图所在的服务器，
105 ///              异步的完成角色数据的保存
106 /// @remark  :   

I:\work\source\龙腾世界\[src.cool]龙腾世界\Code\Code\ERBase\Include\FodHeroMsgCmd.h 96 KB H 文件 2007/3/22 14:56:36 2018/10/22 15:44:21 2018/10/22 15:44:21 2
962 			// D0	:	
963 			FMI_STOC_POT_OFF_POINT_RETURN		= 13516,
965 			// 角色跨服务器切场景
966 			// aParam[1]:	原来场景ID
967 			// aParam[2]:	来到场景ID
1507 			//	szBuf:		id+SChatRoomMemberInfo
1508 			FMI_STOC_ER_CHAT_ROOM_MANAGER_R 		= 13736,	
1510 			// 在跨服务器切场景以前向客户端发消息
1511 			//	aParam[1]: -1
1512 			//	aParam[2]: -1

I:\work\source\书剑恩仇录\书剑恩仇录_zccode.com\书剑恩仇录\金\Src\Share\Core\FileDef.h 20 KB H 文件 2013/3/3 12:49:20 2018/10/23 13:35:56 2018/10/23 13:35:56 1
122 #define FILE_EQUIP_CONST_ATTR				"./Config/Equip_Const_Attr.tab"   		//星座装备属性
123 #define FILE_DYNAMIC_SHOP					"./Config/dynamic_shop_tab.tab"			//动态价格商店
124 #define FILE_ROOM_LOGIC						"./Config/Room_Logic.tab"				//跨服关卡逻辑表
125 #define FILE_ROBBRICKT						"./Config/robbrick.tab"					//搬砖
126 #define FILE_LOTTO							"./Config/Lotto.tab"					//乐透

I:\work\source\书剑恩仇录\[src.cool]书剑恩仇录\Src\Share\Core\FileDef.h 20 KB H 文件 2013/3/3 12:49:20 2018/10/23 13:35:01 2018/10/23 13:35:01 1
122 #define FILE_EQUIP_CONST_ATTR				"./Config/Equip_Const_Attr.tab"   		//星座装备属性
123 #define FILE_DYNAMIC_SHOP					"./Config/dynamic_shop_tab.tab"			//动态价格商店
124 #define FILE_ROOM_LOGIC						"./Config/Room_Logic.tab"				//跨服关卡逻辑表
125 #define FILE_ROBBRICKT						"./Config/robbrick.tab"					//搬砖
126 #define FILE_LOTTO							"./Config/Lotto.tab"					//乐透

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\LuaServer\EscortPathManager.h 5 KB H 文件 2014/2/25 0:09:10 2018/10/23 20:06:04 2018/10/23 20:06:04 1
27 		   2.在程序初始化时就将路径算好,以后每次朝固定路径前进,
28 		     可以大大减少长距离路径搜索的次数,提高服务器效率
29 		   4.算固定路径时注意会有跨地图甚至跨服务器的状况
30 */
32 class EscortPath

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\LuaServer\EscortPathManager.h 5 KB H 文件 2014/2/25 14:25:46 2018/10/23 19:44:38 2018/10/23 19:44:38 1
27 		   2.在程序初始化时就将路径算好,以后每次朝固定路径前进,
28 		     可以大大减少长距离路径搜索的次数,提高服务器效率
29 		   4.算固定路径时注意会有跨地图甚至跨服务器的状况
30 */
32 class EscortPath

I:\work\source\龙腾世界\[src.cool]龙腾世界\Code\Code\EasyRPG\Include\ERPlayer.h 76 KB H 文件 2007/5/8 16:07:18 2018/10/22 15:44:19 2018/10/22 15:44:19 4
60 	__int32	m_aPara[2];
61 };
64 //跨服务器时携带的临时数据
65 struct SPlayerOtherServerTakeInfo
66 {
65 struct SPlayerOtherServerTakeInfo
66 {
67 	// 是否为跨服务器数据
68 	BOOL m_bFromOtherServer;
68 	BOOL m_bFromOtherServer;
70 	// 跨服务器时，跳转前的场景ID
71 	DWORD m_dwPreviousSceneID;
73 	// 需要自动更新的复活点的场景ID
1532 		return m_ePlayerSaveType;
1533 	}
1535 	// 跨服务器后，更新上个服务器带来的信息。
1536 	void UpdatePlayerDataAfterChangeServer();
1538 	SPlayerOtherServerTakeInfo * GetOtherServerTakeInfo() {

I:\work\source\龙腾世界\[src.cool]龙腾世界\Code\Code\EasyRPG\Include\ErPersonSaveVersion.h 9 KB H 文件 2007/4/26 13:54:26 2018/10/22 15:44:19 2018/10/22 15:44:19 2
18 //CONST DWORD PERSON_SAVE_VERSION = 1010;			// By zhaoguotao	2005.2.24		保存打造栏
19 //CONST DWORD PERSON_SAVE_VERSION = 1011;			// By zhaoguotao	2005.3.25		马的面板存盘
20 //CONST DWORD PERSON_SAVE_VERSION = 1012;			// By zhaoguotao	2005.4.19		添加跨服务器时角色身上携带的数据存盘
21 //CONST DWORD PERSON_SAVE_VERSION = 1013;			// By zhaoguotao	2005.5.30		添加灵魂系统存盘
22 //CONST DWORD PERSON_SAVE_VERSION = 1014;			// By zhaoguotao	2005.7.20		添加悬赏任务系统存盘
93 //CONST DWORD PERSON_HORSE_SAVE_VERSION	= 1001;		// By zhaoguotao		2005.3.25		马的面板存盘
94 CONST DWORD PERSON_HORSE_SAVE_VERSION	= 1002;		// modi by Nick			2006-02-08		马的附加面板存盘
96 //CONST DWORD PERSON_OTHER_SERVER_SAVE_VERSION	= 1001;		// By zhaoguotao	 2005.4.19		跨服务器时角色身上携带的数据存盘
97 //CONST DWORD PERSON_OTHER_SERVER_SAVE_VERSION	= 1002;		// By zhaoguotao	 2005.4.28		增加巫师权限存盘
98 //CONST DWORD PERSON_OTHER_SERVER_SAVE_VERSION	= 1003;		// By zhaoguotao	 2005.6.16		增加传送扣钱

I:\work\source\龙腾世界\[src.cool]龙腾世界\Code\Code\EasyRPG\Include\EROptCmd.h 33 KB H 文件 2007/1/29 16:02:24 2018/10/22 15:44:19 2018/10/22 15:44:19 1
344 	// B1	:	成功还是失败
345 	// P2	:	SEnterGameExtraInfo* pEnterGameInfo		//进入游戏信息（如果是进入游戏的login)
346 	// D3	:	Target Scene ID			// 目标场景ID(如果是跨服务器切换的login）
347 	CMD_ERTOGS_LOGIN_CALLBACK						= 1062,
349 	//added by Jerry 2005-4-15,

I:\work\source\龙腾世界\[src.cool]龙腾世界\Code\Code\EasyRPG\Include\ERFunc.H 85 KB H 文件 2007/3/27 17:36:16 2018/10/22 15:44:19 2018/10/22 15:44:19 2
1314 BOOL MoveObjectWithoutNotifyGS( CERObject *pParent, CERObject *pChild );
1315 // ERS_FUNC_END : MoveObjectWithoutNotifyGS
1317 // modified by Jerry 2005-4-14,修改返回类型，用HRESULT代替直接返回Room指针，否则跨服务器切换有问题
1318 // ERS_FUNC_BEGIN : ChangeRoom
1319 // pPlayer	:	用户
2200 // dwSceneID 要更新到的场景ID
2201 // nIndex 场景中的第几个复活点
2202 // bDoOtherServer 是否考虑跨服务器
2203 EASYRPG_API BOOL SetResurrectPoint( CERPlayer* pPlayer, DWORD dwSceneID, int nIndex, BOOL bDoOtherServer = TRUE );
2204 // ERS_FUNC_END : SetResurrectPoint

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\EctypeAssistDef.h 10 KB H 文件 2014/2/25 11:36:44 2018/10/23 19:49:31 2018/10/23 19:49:31 1
24 enum EKqEctypeType
25 {
26 	// 跨服类型
27 	KqEctypeType_FuBen_1 = 1,		//	副本1 幻象副本
28 	KqEctypeType_FuBen_2,			//	副本2 木神殿副本

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\EctypeAssistDef.h 10 KB H 文件 2014/2/25 14:53:56 2018/10/23 19:32:39 2018/10/23 19:32:39 1
24 enum EKqEctypeType
25 {
26 	// 跨服类型
27 	KqEctypeType_FuBen_1 = 1,		//	副本1 幻象副本
28 	KqEctypeType_FuBen_2,			//	副本2 木神殿副本

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DWarDef.h 36 KB H 文件 2014/2/25 11:36:43 2018/10/23 19:49:31 2018/10/23 19:49:31 39
23 #pragma pack(1)
26 // tolua_begin
30 //// 跨服战场 //////////////////////////////////////////////////////////////////////
33 #define WAR_BUFF_MAXCOUNT				16			// 战场BUFF最多个数
34 #define WAR_NUMBER_MAXCOUNT				140			// 配置数字值最多个数
143 enum EMWarConfigNumber
144 {
145 	/// 跨服国战 //////////////////////////////////////////////
147 	WarCfgNum_Coutry_ReliveTime = 0,// 国战复活点定时清场时长 秒
148 	WarCfgNum_Coutry_MinLevel,		// 被召集国民等级
216 	WarCfgNum_SealShare_AdjBase1,	// 封印第一次占领共享经验-奖励调节基数1
217 	WarCfgNum_SealShare_AdjBase2,	// 封印第一次占领共享经验-奖励调节基数2
219 	WarCfgNum_StartHourMin,			// 跨服国战开战时间：小时*100+分钟
220 	WarCfgNum_AttackLoRangeRate,	// 进攻目标国家实力下限系数 * 1/1000
221 	WarCfgNum_AttackHiRangeRate,	// 进攻目标国家实力上限系数 * 1/1000
222 	WarCfgNum_FriendLoRangeRate,	// 结盟目标国家实力下限系数 * 1/1000
223 	WarCfgNum_FriendHiRangeRate,	// 结盟目标国家实力上限系数 * 1/1000
224 	WarCfgNum_RunWorldWarMax,		// 一天最多开跨服国战数
225 	WarCfgNum_WeekAttackMax,		// 跨服国战一周最多进攻数
226 	WarCfgNum_WeekDefendMax,		// 跨服国战一周最多防守数
227 	WarCfgNum_WeekHelpMax,			// 跨服国战一周最多帮忙数
228 	WarCfgNum_CivilGradeLoRang,		// 跨服国战能跨文明等级下限
229 	WarCfgNum_CivilGradeHiRang,		// 跨服国战能跨文明等级上限
231 	WarCfgNum_CheckBoss_FirstInterval,	// 调整天师血量-是否动态设置天师血量，0关闭
232 	WarCfgNum_CheckBoss_Interval,		// 调整天师血量-检测BOSS血量周期时间（分钟），0不进行周期检测
239 	WarCfgNum_Coutry_CountPowRate,		// 调整天师血量参考-攻方人数指数系数 * 1/1000
240 	WarCfgNum_Coutry_RatePowRate,		// 调整天师血量参考-攻/守比例指数系数 * 1/1000
242 	WarCfgNum_ClanBoss_TaskKillCount,	// 跨服帮会BOSS-基础积分杀人数
243 	WarCfgNum_ClanBoss_MaxMoney,		// 跨服帮会BOSS-获得最高绑金
244 	WarCfgNum_ClanBoss_AdjLevel,		// 跨服帮会BOSS-经验调节等级
245 	WarCfgNum_ClanBoss_Const1,			// 跨服帮会BOSS-经验调节常量1
246 	WarCfgNum_ClanBoss_Const2,			// 跨服帮会BOSS-经验调节常量2
247 	WarCfgNum_ClanBoss_Const3,			// 跨服帮会BOSS-经验调节常量3
248 	WarCfgNum_ClanBoss_PowerRateMin,	// 跨服帮会BOSS-跨服撮合最小实力比 * 1/1000 (0~1000,默认700)
249 	WarCfgNum_ClanBoss_RandPowRate,		// 跨服帮会BOSS-实力比随机调节系数，为实力比的pow指数 * 1/1000 (1000~10000,默认3000)
251 	WarCfgNum_BorderWar_MinLevel,		// 跨服边境-玩家进入最低等级
252 	WarCfgNum_BorderWar_Passport,		// 跨服边境-玩家通行证物品ID
254 	WarCfgNum_ClanBoss_OtherMoney,		// 跨服帮会BOSS-完成任务后可获赠送绑金
255 	WarCfgNum_WarInfo_DisableTime,		// 强制非正常战场过期时间：单位秒
256 	WarCfgNum_DisableSameWarOnComputer,	// 禁止在同一台电脑上开启多个同类型战场,0.允许，1.禁止
286 	WarConfigNum_MaxID
287 };
289 /// 跨服战场-国战情景资源项编号定义
290 enum EMCountryWarResourceID
291 {
315 	CountryWarCamp_MaxID,			// 最大阵营ID
316 };
318 // 跨服国战积分类型
319 enum EMWarScoreFlag
320 {
613 	//char szHistory[nHistoryStrLen];
614 };
616 // 跨服国战信息结果日志信息
617 struct SWorldCountryWarResultInfo
618 {
618 {
619 	DWORD dwPlayTime;							// 战斗时长(秒)
620 	DWORD dwType;								// 跨服国战类型
621 	DWORD dwAttackWorldID;						// 进攻国家所在游戏世界ID
622 	DWORD dwAttackCountryID;					// 进攻国家ID
650 	}
651 };
654 // 跨服国战个人获取奖励信息
655 struct SWorldCountryWarPrizeInfo
656 {
709 	};
710 };
712 // 跨服BOSS战接收外部数据结构信息
713 struct SWorldBossWarClanNodeInfo
714 {
743 	};
744 };
746 // 跨服BOSS战传送至游戏区所有场景数据结构信息
747 struct SWorldClanBossWarZoneInfo
748 {
778 	char szName[GAME_NAME_MAXSIZE];		// 帮会名称
779 };
780 // 跨服BOSS战基本信息扩展数据结构 社会服、客户端
781 struct SWorldClanBossWarBaseInfo
782 {
785 	bool  bIsPublic;										// 是否在公共区开战
786 };
788 // 跨服BOSS战排序数据
789 struct SWorldClanBossWarOrderNodeInfo
790 {
802 	};
803 };
805 // 跨服BOSS战信息结果日志信息
806 struct SWorldClanBossWarResultInfo
807 {
853 	SCastleBossWarClanNode campList[COUNTRY_MAXID];	// 参战阵营信息
854 };
857 /// 跨服边境 ///////////////////////////////////////////////////////////////////////
859 // 跨服边境战场控制状态位标识
860 enum EMCountryBorderWarRunStep
861 {
872 	BorderWarRunStep_MaxID
873 };
874 // 跨服边境战场传送标识
875 enum EMCountryBorderWarTransFlag
876 {
881 	BorderWarTransFlag_MaxID
882 };
884 /// 跨服战场-边境战情景资源项编号定义
885 enum EMCountryBorderWarResourceID
886 {
902 	BorderWarRes_MiddleBoss5,			// 中间BOSS5(定时刷新)
903 };
905 // 跨服战场-边境战数值状态类型
906 enum EMCountryBorderWarNumState
907 {
914 	BorderWarNum_Max,
915 };
917 // 跨服边境战接收外部数据结构信息
918 struct SCountryBorderWarInfo
919 {
928 	};
929 };
931 // 跨服边境战基本信息扩展数据结构 社会服、客户端
932 struct SCountryBorderWarBaseInfo
933 {
937 	DWORD dwDefCountryID;					// 防守方国家ID
938 };
940 // 跨服边境战传送至游戏区所有场景数据结构信息
941 struct SCountryBorderWarZoneInfo
942 {

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DWarDef.h 36 KB H 文件 2014/2/25 14:53:56 2018/10/23 19:32:39 2018/10/23 19:32:39 39
23 #pragma pack(1)
26 // tolua_begin
30 //// 跨服战场 //////////////////////////////////////////////////////////////////////
33 #define WAR_BUFF_MAXCOUNT				16			// 战场BUFF最多个数
34 #define WAR_NUMBER_MAXCOUNT				140			// 配置数字值最多个数
143 enum EMWarConfigNumber
144 {
145 	/// 跨服国战 //////////////////////////////////////////////
147 	WarCfgNum_Coutry_ReliveTime = 0,// 国战复活点定时清场时长 秒
148 	WarCfgNum_Coutry_MinLevel,		// 被召集国民等级
216 	WarCfgNum_SealShare_AdjBase1,	// 封印第一次占领共享经验-奖励调节基数1
217 	WarCfgNum_SealShare_AdjBase2,	// 封印第一次占领共享经验-奖励调节基数2
219 	WarCfgNum_StartHourMin,			// 跨服国战开战时间：小时*100+分钟
220 	WarCfgNum_AttackLoRangeRate,	// 进攻目标国家实力下限系数 * 1/1000
221 	WarCfgNum_AttackHiRangeRate,	// 进攻目标国家实力上限系数 * 1/1000
222 	WarCfgNum_FriendLoRangeRate,	// 结盟目标国家实力下限系数 * 1/1000
223 	WarCfgNum_FriendHiRangeRate,	// 结盟目标国家实力上限系数 * 1/1000
224 	WarCfgNum_RunWorldWarMax,		// 一天最多开跨服国战数
225 	WarCfgNum_WeekAttackMax,		// 跨服国战一周最多进攻数
226 	WarCfgNum_WeekDefendMax,		// 跨服国战一周最多防守数
227 	WarCfgNum_WeekHelpMax,			// 跨服国战一周最多帮忙数
228 	WarCfgNum_CivilGradeLoRang,		// 跨服国战能跨文明等级下限
229 	WarCfgNum_CivilGradeHiRang,		// 跨服国战能跨文明等级上限
231 	WarCfgNum_CheckBoss_FirstInterval,	// 调整天师血量-是否动态设置天师血量，0关闭
232 	WarCfgNum_CheckBoss_Interval,		// 调整天师血量-检测BOSS血量周期时间（分钟），0不进行周期检测
239 	WarCfgNum_Coutry_CountPowRate,		// 调整天师血量参考-攻方人数指数系数 * 1/1000
240 	WarCfgNum_Coutry_RatePowRate,		// 调整天师血量参考-攻/守比例指数系数 * 1/1000
242 	WarCfgNum_ClanBoss_TaskKillCount,	// 跨服帮会BOSS-基础积分杀人数
243 	WarCfgNum_ClanBoss_MaxMoney,		// 跨服帮会BOSS-获得最高绑金
244 	WarCfgNum_ClanBoss_AdjLevel,		// 跨服帮会BOSS-经验调节等级
245 	WarCfgNum_ClanBoss_Const1,			// 跨服帮会BOSS-经验调节常量1
246 	WarCfgNum_ClanBoss_Const2,			// 跨服帮会BOSS-经验调节常量2
247 	WarCfgNum_ClanBoss_Const3,			// 跨服帮会BOSS-经验调节常量3
248 	WarCfgNum_ClanBoss_PowerRateMin,	// 跨服帮会BOSS-跨服撮合最小实力比 * 1/1000 (0~1000,默认700)
249 	WarCfgNum_ClanBoss_RandPowRate,		// 跨服帮会BOSS-实力比随机调节系数，为实力比的pow指数 * 1/1000 (1000~10000,默认3000)
251 	WarCfgNum_BorderWar_MinLevel,		// 跨服边境-玩家进入最低等级
252 	WarCfgNum_BorderWar_Passport,		// 跨服边境-玩家通行证物品ID
254 	WarCfgNum_ClanBoss_OtherMoney,		// 跨服帮会BOSS-完成任务后可获赠送绑金
255 	WarCfgNum_WarInfo_DisableTime,		// 强制非正常战场过期时间：单位秒
256 	WarCfgNum_DisableSameWarOnComputer,	// 禁止在同一台电脑上开启多个同类型战场,0.允许，1.禁止
286 	WarConfigNum_MaxID
287 };
289 /// 跨服战场-国战情景资源项编号定义
290 enum EMCountryWarResourceID
291 {
315 	CountryWarCamp_MaxID,			// 最大阵营ID
316 };
318 // 跨服国战积分类型
319 enum EMWarScoreFlag
320 {
613 	//char szHistory[nHistoryStrLen];
614 };
616 // 跨服国战信息结果日志信息
617 struct SWorldCountryWarResultInfo
618 {
618 {
619 	DWORD dwPlayTime;							// 战斗时长(秒)
620 	DWORD dwType;								// 跨服国战类型
621 	DWORD dwAttackWorldID;						// 进攻国家所在游戏世界ID
622 	DWORD dwAttackCountryID;					// 进攻国家ID
650 	}
651 };
654 // 跨服国战个人获取奖励信息
655 struct SWorldCountryWarPrizeInfo
656 {
709 	};
710 };
712 // 跨服BOSS战接收外部数据结构信息
713 struct SWorldBossWarClanNodeInfo
714 {
743 	};
744 };
746 // 跨服BOSS战传送至游戏区所有场景数据结构信息
747 struct SWorldClanBossWarZoneInfo
748 {
778 	char szName[GAME_NAME_MAXSIZE];		// 帮会名称
779 };
780 // 跨服BOSS战基本信息扩展数据结构 社会服、客户端
781 struct SWorldClanBossWarBaseInfo
782 {
785 	bool  bIsPublic;										// 是否在公共区开战
786 };
788 // 跨服BOSS战排序数据
789 struct SWorldClanBossWarOrderNodeInfo
790 {
802 	};
803 };
805 // 跨服BOSS战信息结果日志信息
806 struct SWorldClanBossWarResultInfo
807 {
853 	SCastleBossWarClanNode campList[COUNTRY_MAXID];	// 参战阵营信息
854 };
857 /// 跨服边境 ///////////////////////////////////////////////////////////////////////
859 // 跨服边境战场控制状态位标识
860 enum EMCountryBorderWarRunStep
861 {
872 	BorderWarRunStep_MaxID
873 };
874 // 跨服边境战场传送标识
875 enum EMCountryBorderWarTransFlag
876 {
881 	BorderWarTransFlag_MaxID
882 };
884 /// 跨服战场-边境战情景资源项编号定义
885 enum EMCountryBorderWarResourceID
886 {
902 	BorderWarRes_MiddleBoss5,			// 中间BOSS5(定时刷新)
903 };
905 // 跨服战场-边境战数值状态类型
906 enum EMCountryBorderWarNumState
907 {
914 	BorderWarNum_Max,
915 };
917 // 跨服边境战接收外部数据结构信息
918 struct SCountryBorderWarInfo
919 {
928 	};
929 };
931 // 跨服边境战基本信息扩展数据结构 社会服、客户端
932 struct SCountryBorderWarBaseInfo
933 {
937 	DWORD dwDefCountryID;					// 防守方国家ID
938 };
940 // 跨服边境战传送至游戏区所有场景数据结构信息
941 struct SCountryBorderWarZoneInfo
942 {

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DVoice.h 76 KB H 文件 2014/2/25 11:36:43 2018/10/23 19:49:31 2018/10/23 19:49:31 5
1375 	ENUM_MSG_VOICE_ADDVOICEBLUEDIAMOND,				// 添加蓝钻
1377 	ENUM_MSG_VOICE_BRIDGEDATA,						// 发送消息到其他服务器，可跨区
1378 	ENUM_MSG_VOICE_CHECK,							// 检测消息，用来跨服检测网络连接状态
1379 	ENUM_MSG_VOICE_CHECKBACK,						// 检测消息回复，用来跨服检测网络连接状态
1381 	// 语音网关消息
1382 	ENUM_MSG_VOICE_LOGIN,							// 请求登录语音服务器
1699 	VoiceSubMsg_KickUser,							// 踢出用户
1700 	VoiceSubMsg_AddVoiceTime,						// 增加语音时间
1701 	VoiceSubMsg_VoiceCheck,							// 检测消息，用来跨服检测网络连接状态
1702 	VoiceSubMsg_VoiceCheckBack,						// 检测消息回复，用来跨服检测网络连接状态
1703 	VoiceSubMsg_UpdateNumValue,						// 更新数值到游戏服务器
1705 	////////////////////	语音逻辑客户端   //////////////////////////////////////////////////////
1815 };
1818 //////////////////////////////////////////////////////////////////////////
1819 // 检测消息，用来跨服检测网络连接状态
1820 // VoiceSubMsg_VoiceCheck,							
1821 // VoiceSubMsg_VoiceCheckBack

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DVoice.h 76 KB H 文件 2014/2/25 14:53:55 2018/10/23 19:32:39 2018/10/23 19:32:39 5
1375 	ENUM_MSG_VOICE_ADDVOICEBLUEDIAMOND,				// 添加蓝钻
1377 	ENUM_MSG_VOICE_BRIDGEDATA,						// 发送消息到其他服务器，可跨区
1378 	ENUM_MSG_VOICE_CHECK,							// 检测消息，用来跨服检测网络连接状态
1379 	ENUM_MSG_VOICE_CHECKBACK,						// 检测消息回复，用来跨服检测网络连接状态
1381 	// 语音网关消息
1382 	ENUM_MSG_VOICE_LOGIN,							// 请求登录语音服务器
1699 	VoiceSubMsg_KickUser,							// 踢出用户
1700 	VoiceSubMsg_AddVoiceTime,						// 增加语音时间
1701 	VoiceSubMsg_VoiceCheck,							// 检测消息，用来跨服检测网络连接状态
1702 	VoiceSubMsg_VoiceCheckBack,						// 检测消息回复，用来跨服检测网络连接状态
1703 	VoiceSubMsg_UpdateNumValue,						// 更新数值到游戏服务器
1705 	////////////////////	语音逻辑客户端   //////////////////////////////////////////////////////
1815 };
1818 //////////////////////////////////////////////////////////////////////////
1819 // 检测消息，用来跨服检测网络连接状态
1820 // VoiceSubMsg_VoiceCheck,							
1821 // VoiceSubMsg_VoiceCheckBack

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\Dummy.h 11 KB H 文件 2014/2/25 0:08:45 2018/10/23 20:06:22 2018/10/23 20:06:22 2
75 	/** 资源事件执行接口
76 	@param   WORD wEventID		:事件ID
77 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
78 	@param   WORD dwWarID		:相关战场ID
79 	@param   WORD dwResID		:相关战争资源配置ID
87 	/** 资源投票事件
88 	@param   WORD wEventID		:事件ID
89 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
90 	@param   WORD dwWarID		:相关战场ID
91 	@param   WORD dwResID		:相关战争资源配置ID

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\Dummy.h 11 KB H 文件 2014/2/25 14:27:01 2018/10/23 19:45:10 2018/10/23 19:45:10 2
75 	/** 资源事件执行接口
76 	@param   WORD wEventID		:事件ID
77 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
78 	@param   WORD dwWarID		:相关战场ID
79 	@param   WORD dwResID		:相关战争资源配置ID
87 	/** 资源投票事件
88 	@param   WORD wEventID		:事件ID
89 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
90 	@param   WORD dwWarID		:相关战场ID
91 	@param   WORD dwResID		:相关战争资源配置ID

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DTeamModule.h 55 KB H 文件 2014/2/25 11:36:41 2018/10/23 19:49:30 2018/10/23 19:49:30 1
694 	// 离开队伍原因：队伍解散
695 	ELeaveTeamReason_Disband,
697 	// 离开队伍原因：队友跨服去了
698 	ELeaveTeamReason_StarTrek,
700 	// 离开队伍原因：系统强退

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DTeamModule.h 55 KB H 文件 2014/2/25 14:53:54 2018/10/23 19:32:39 2018/10/23 19:32:39 1
694 	// 离开队伍原因：队伍解散
695 	ELeaveTeamReason_Disband,
697 	// 离开队伍原因：队友跨服去了
698 	ELeaveTeamReason_StarTrek,
700 	// 离开队伍原因：系统强退

I:\work\source\天空之剑\[src.cool]天空之剑\sky\Code\Common\DMsgSubAction.h 34 KB H 文件 2013/5/22 21:08:42 2018/10/23 14:48:21 2018/10/23 14:48:21 1
95 	MAINACTION_MSGID_SWITCHMAP,
97 	/////////////////////////////////////////////////////////
98 	//描        述：跨服通知(切换场景服务器 换线)
99 	//支持流通类型：CSC
100 	/////////////////////////////////////////////////////////

I:\work\source\天空之剑\[src.cool]天空之剑\Code\Common\DMsgSubAction.h 35 KB H 文件 2013/5/22 15:44:16 2018/10/23 14:45:02 2018/10/23 14:45:02 1
95 	MAINACTION_MSGID_SWITCHMAP,
97 	/////////////////////////////////////////////////////////
98 	//描        述：跨服通知(切换场景服务器 换线)
99 	//支持流通类型：CSC
100 	/////////////////////////////////////////////////////////

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DMatchModule.h 131 KB H 文件 2014/2/25 11:36:38 2018/10/23 19:49:28 2018/10/23 19:49:28 51
5 ** 日  期:	2010/7/13
6 ** 版  本:	1.01
7 ** 描  述:	跨服组队撮合系统模块定义	
8 ** 应  用:  
9 	
55 #pragma pack(1)
57 /******************************************************************/
58 /////////////跨服组队撮合系统的公共结构体定义 //////////////////////
59 /******************************************************************/
60 ///////////////////////////////////////////////////////////////////
91 #define WAR_DAYOFWEEK_COUNT			7				// 每周天数
92 #define MATCH_CHECKCOUNTRYWAR_TIMEOUT	10000		// 检测本区国战信息(毫秒) 10秒
93 #define MATCH_CHECKBADWAR_INTERVAL		1800000		// 检测跨服国战记录任务处理定时器 INTERVAL = 1800000毫秒(毫秒) 30分钟
95 #define MATCH_COMPUTER_INFO_TIMEOUT		600000		//检测占用电脑信息（毫秒) 10分钟
97 //// 竞技模块 //////////////////////////////////////////////////////////////////////
156 	MatchType_LocalFuBen_13,	//	副本13 DOTA
157 	MatchType_LocalMax,			//	本地最大撮合项ID
158 	// 跨服副本类型
159 	MatchType_FuBen_1,			//	副本1 幻象副本
160 	MatchType_FuBen_2,			//	副本2 木神殿副本
177 {
178 	MatchTypeID_None = 0,		//	无效类型
179 	MatchTypeID_PublicFuBen,	//	跨服副本组队类型
180 	MatchTypeID_LocalFuBen,		//	本服副本组队类型
181 	MatchTypeID_Local,			//	本地组队
369 	// 本地类型
370 	MatchStrike_None	= 0,		//	无效
371 	// 跨服副本类型
372 	MatchStrike_CS6,				// 对抗模式 收费 6v6
373 	MatchStrike_Dead6,				// 对抗模式 打工 6v6
384 	// 本地类型
385 	StrikeType_None	= 0,		//	无效
386 	// 跨服副本类型
387 	StrikeType_CS6,				// 对抗模式 收费 6v6
388 	StrikeType_Dead6,			// 对抗模式 打工 6v6
755 {
756 	WarType_None	= 0,		// 无效
757 	WarType_Country1,			// 跨服国战-落日城
758 	WarType_ClanBoss,			// 跨服帮会领地BOSS战
759 	WarType_CountryBorder,		// 跨服战场-国家边境
760 	WarType_MaxID,				// 最大竞技项ID
761 };
915 	int nLevelRange;						// 上下浮动等级 组队时成员间的等级浮动范围 为0表示所有等级
916 	int nStrikeID;							// 竞技场类型ID	 SStrikeSchemeInfo.nID 
917 	int nType;								// 跨服类型  1.跨服类型 2.本服类型
918 	int nMinNum;							// 撮合最少人数
919 	int nAttackRange;						// 撮合攻击能力浮动比例 * 1/1000
1460 	int nDetailDlgID;						// 详细信息说明ID	对应DialogHtmlInfo.csv信息ID
1461 	int nPrizeDlgID;						// 奖励说明ID		对应DialogHtmlInfo.csv信息ID
1462 	int nSpare1;							// 备用1			边境战.战场开始多少分钟后可进入天上战场（分钟）；跨服国战被踢玩家场内滞留时间（秒）
1463 	int nSpare2;							// 备用2			边境战.天上战场可开放总时长（分钟）
1464 	int nSpare3;							// 备用3			边境战.删除栅栏时间（分钟）
1465 	int nSpare4;							// 备用4			边境战.刷出怪物阵中BOSS时间（分钟）
1466 	int nSpare5;							// 备用5			
1467 	int nSpare6;							// 备用6			跨服国战补偿绑金数量
1468 	char szName[GAME_NAME_MAXSIZE];			// 战争场名称
1470 	SWarSchemeInfo(void)
1485 	POINT ptCampLoc[WAR_CAMP_MAXCOUNT];		// 阵营复活点坐标
1486 	POINT ptLookerLoc;						// 观察者出生点坐标
1487 	POINT ptTran1[WAR_MAP_LOCATIONS];		// 阵营1清场传送点  跨服国战用
1488 	POINT ptTran2[WAR_MAP_LOCATIONS];		// 阵营2清场传送点  跨服国战用
1489 	POINT ptKickBack[WAR_MAP_LOCATIONS];	// 战场清理区域多边形定点
1490 	int nWarList[STRIKE_MAP_MAXCOUNT];		// 支持的战场场ID列表 多个战场用分号隔开 SWarSchemeInfo.nID
1718 	WORD nDayPlayCount;						// [61~62]每天竞技比赛局数
1720 	// 国战专用
1721 	DWORD dwWarScore;						// [63~66]跨服国战积分
1722 	DWORD dwData1;							// [67~70]备用,调试用
1723 	WORD nGiftCount;						// [71~72]国战获得礼包次数
1755 	WORD nDayPlayCount;						// 每天竞技比赛局数
1757 	// 国战专用
1758 	DWORD dwWarScore;						// 跨服国战积分
1759 	DWORD dwData1;							// [67~70]备用
1760 	WORD nGiftCount;						// [71~72]国战获得礼包次数
1956 	};
1957 };
1959 // 跨服在线玩家信息
1960 struct SWorldOnlineUserInfo
1961 {
1998 struct SMatchPVPZoneInfoNode
1999 {
2000 	DWORD	dwPVPClassType;		// 跨服PVP类型 EMPVPClassType
2001 	DWORD	dwWarID;			// 相关战场ID
2003 	SMatchPVPZoneInfoNode(void)
2009 struct SWarEntityUIDResInfoNode
2010 {
2011 	DWORD	dwPVPClassType;		// 跨服PVP类型 EMPVPClassType
2012 	DWORD	dwWarID;			// 相关战场ID
2013 	DWORD	dwID;				// 相关战争资源ID
3114 	Match_WarMsg_UpdateResMapPoint,		// 更新地图资源打点信息
3115 	Match_WarMsg_RequestResMapPoint,	// 请求地图资源打点信息
3117 	Match_WarMsg_RequestAddCountryWar,	// 玩家请求发起跨服国战
3118 	Match_WarMsg_RequestCheckCountryWar,// 请求检查跨服国战对方是否本区有国战
3119 	Match_WarMsg_CheckCountryWarResult,	// 请求检查跨服国战对方是否本区有国战结果
3120 	Match_WarMsg_RequestNewCountryWar,	// 请求开跨服国战
3121 	Match_WarMsg_WorldCountryWarState,	// 跨服国战状态变化
3122 	Match_WarMsg_WorldWarTracker,		// 跨服国战跟踪信息
3123 	Match_WarMsg_RequestAddCountryWarResult,	// 玩家请求发起跨服国战结果
3124 	Match_WarMsg_ClearWarTracker,		// 通知清除战场任务追踪信息
3126 	Match_WarMsg_SendCountryWarData,	// 发送本次新国战信息给本区社会服
3155 	Match_WarMsg_RequestAddHistory,		// 请求加入国家历史信息
3156 	Match_WarMsg_RequestAddClanGold,	// 请求增加帮会资金
3157 	Match_WarMsg_SendCountryWarResult,	// 更新跨服国战信息结果日志信息到客户端
3158 	Match_WarMsg_RequestKingInfo,		// 请求获取跨服国王信息
3159 	Match_WarMsg_SendExitWar,			// 发送退出战场信息
3160 	Match_WarMsg_RequestExit,			// 玩家请求退出
3168 	Match_WarMsg_COUNTRYMODE_MSGEND,	// 国战专用消息码 结束
3169 	// 国战专用消息码 结束
3171 	// 跨服帮会Boss战专用消息码 开始
3172 	Match_WarMsg_CLANBOSSMODE_MSGBEGIN,	// 跨服帮会战专用消息码 开始
3173 	Match_WarMsg_ClanBossWarCreate,		// 帮会BOSS战场已创建
3174 	Match_WarMsg_ClanBossWarEnd,		// 帮会BOSS战场已结束
3179 	Match_WarMsg_ClanBossWarAutoJoin,	// 客户端显示并可直接加入帮会BOSS战
3180 	Match_WarMsg_ClanBossWarResultInfo,	// 发送战场结果信息
3181 	Match_WarMsg_BossWarTracker,		// 跨服帮会领地BOSS战跟踪信息
3182 	Match_WarMsg_RequestAddClanBossWar,	// 请求发起跨服帮会领地BOSS战信息
3183 	Match_WarMsg_RequestNewClanBossWar,	// 请求开跨服帮会领地BOSS战
3184 	Match_WarMsg_CLANBOSSMODE_MSGEND,	// 跨服帮会战专用消息码 结束
3185 	// 跨服帮会Boss战专用消息码 结束
3187 	// 跨服边境战专用消息码 开始
3188 	Match_WarMsg_COUNTRYBORDERMODE_MSGBEGIN,	// 跨服边境战专用消息码 开始
3189 	Match_WarMsg_RequestNewBorderWar,			// 请求开跨服边境战场
3190 	Match_WarMsg_BorderWarCreate,				// 跨服边境战场已创建
3191 	Match_WarMsg_BorderWarEnd,					// 跨服边境战场已结束
3192 	Match_WarMsg_RemoveBorderWar,				// 移除跨服边境战场信息
3193 	Match_WarMsg_BorderWarStateChanged,			// 更新跨服边境战状态变化
3194 	Match_WarMsg_BorderWarStepChanged,			// 跨服边境执行状态子类型变化
3195 	Match_WarMsg_NoticeJoinBorderWar,			// 通知玩家加入
3196 	Match_WarMsg_BorderWarAutoJoin,				// 客户端显示并可直接加入
3195 	Match_WarMsg_NoticeJoinBorderWar,			// 通知玩家加入
3196 	Match_WarMsg_BorderWarAutoJoin,				// 客户端显示并可直接加入
3197 	Match_WarMsg_BorderWarTracker,				// 跨服边境战跟踪信息
3198 	Match_WarMsg_COUNTRYBORDERMODE_MSGEND,		// 跨服边境战专用消息码 结束
3199 	// 跨服边境战专用消息码 结束
3204 	// 最大
3205 	Match_WarMsg_Max
3288 	}
3289 };
3291 // Match_WarMsg_RequestAddCountryWar,	// 玩家请求发起跨服国战
3292 // 请求发起跨服国战信息数据结构
3293 struct SMsgWarRequestAddCountryWar_O
3294 {
3306 	}
3307 };
3309 //	Match_WarMsg_RequestKingInfo,		// 请求获取跨服国王信息
3310 struct SWarCountryKingInfo
3311 {

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DMatchModule.h 131 KB H 文件 2014/2/25 14:53:50 2018/10/23 19:32:39 2018/10/23 19:32:39 51
5 ** 日  期:	2010/7/13
6 ** 版  本:	1.01
7 ** 描  述:	跨服组队撮合系统模块定义	
8 ** 应  用:  
9 	
55 #pragma pack(1)
57 /******************************************************************/
58 /////////////跨服组队撮合系统的公共结构体定义 //////////////////////
59 /******************************************************************/
60 ///////////////////////////////////////////////////////////////////
91 #define WAR_DAYOFWEEK_COUNT			7				// 每周天数
92 #define MATCH_CHECKCOUNTRYWAR_TIMEOUT	10000		// 检测本区国战信息(毫秒) 10秒
93 #define MATCH_CHECKBADWAR_INTERVAL		1800000		// 检测跨服国战记录任务处理定时器 INTERVAL = 1800000毫秒(毫秒) 30分钟
95 #define MATCH_COMPUTER_INFO_TIMEOUT		600000		//检测占用电脑信息（毫秒) 10分钟
97 //// 竞技模块 //////////////////////////////////////////////////////////////////////
156 	MatchType_LocalFuBen_13,	//	副本13 DOTA
157 	MatchType_LocalMax,			//	本地最大撮合项ID
158 	// 跨服副本类型
159 	MatchType_FuBen_1,			//	副本1 幻象副本
160 	MatchType_FuBen_2,			//	副本2 木神殿副本
177 {
178 	MatchTypeID_None = 0,		//	无效类型
179 	MatchTypeID_PublicFuBen,	//	跨服副本组队类型
180 	MatchTypeID_LocalFuBen,		//	本服副本组队类型
181 	MatchTypeID_Local,			//	本地组队
369 	// 本地类型
370 	MatchStrike_None	= 0,		//	无效
371 	// 跨服副本类型
372 	MatchStrike_CS6,				// 对抗模式 收费 6v6
373 	MatchStrike_Dead6,				// 对抗模式 打工 6v6
384 	// 本地类型
385 	StrikeType_None	= 0,		//	无效
386 	// 跨服副本类型
387 	StrikeType_CS6,				// 对抗模式 收费 6v6
388 	StrikeType_Dead6,			// 对抗模式 打工 6v6
755 {
756 	WarType_None	= 0,		// 无效
757 	WarType_Country1,			// 跨服国战-落日城
758 	WarType_ClanBoss,			// 跨服帮会领地BOSS战
759 	WarType_CountryBorder,		// 跨服战场-国家边境
760 	WarType_MaxID,				// 最大竞技项ID
761 };
915 	int nLevelRange;						// 上下浮动等级 组队时成员间的等级浮动范围 为0表示所有等级
916 	int nStrikeID;							// 竞技场类型ID	 SStrikeSchemeInfo.nID 
917 	int nType;								// 跨服类型  1.跨服类型 2.本服类型
918 	int nMinNum;							// 撮合最少人数
919 	int nAttackRange;						// 撮合攻击能力浮动比例 * 1/1000
1460 	int nDetailDlgID;						// 详细信息说明ID	对应DialogHtmlInfo.csv信息ID
1461 	int nPrizeDlgID;						// 奖励说明ID		对应DialogHtmlInfo.csv信息ID
1462 	int nSpare1;							// 备用1			边境战.战场开始多少分钟后可进入天上战场（分钟）；跨服国战被踢玩家场内滞留时间（秒）
1463 	int nSpare2;							// 备用2			边境战.天上战场可开放总时长（分钟）
1464 	int nSpare3;							// 备用3			边境战.删除栅栏时间（分钟）
1465 	int nSpare4;							// 备用4			边境战.刷出怪物阵中BOSS时间（分钟）
1466 	int nSpare5;							// 备用5			
1467 	int nSpare6;							// 备用6			跨服国战补偿绑金数量
1468 	char szName[GAME_NAME_MAXSIZE];			// 战争场名称
1470 	SWarSchemeInfo(void)
1485 	POINT ptCampLoc[WAR_CAMP_MAXCOUNT];		// 阵营复活点坐标
1486 	POINT ptLookerLoc;						// 观察者出生点坐标
1487 	POINT ptTran1[WAR_MAP_LOCATIONS];		// 阵营1清场传送点  跨服国战用
1488 	POINT ptTran2[WAR_MAP_LOCATIONS];		// 阵营2清场传送点  跨服国战用
1489 	POINT ptKickBack[WAR_MAP_LOCATIONS];	// 战场清理区域多边形定点
1490 	int nWarList[STRIKE_MAP_MAXCOUNT];		// 支持的战场场ID列表 多个战场用分号隔开 SWarSchemeInfo.nID
1718 	WORD nDayPlayCount;						// [61~62]每天竞技比赛局数
1720 	// 国战专用
1721 	DWORD dwWarScore;						// [63~66]跨服国战积分
1722 	DWORD dwData1;							// [67~70]备用,调试用
1723 	WORD nGiftCount;						// [71~72]国战获得礼包次数
1755 	WORD nDayPlayCount;						// 每天竞技比赛局数
1757 	// 国战专用
1758 	DWORD dwWarScore;						// 跨服国战积分
1759 	DWORD dwData1;							// [67~70]备用
1760 	WORD nGiftCount;						// [71~72]国战获得礼包次数
1956 	};
1957 };
1959 // 跨服在线玩家信息
1960 struct SWorldOnlineUserInfo
1961 {
1998 struct SMatchPVPZoneInfoNode
1999 {
2000 	DWORD	dwPVPClassType;		// 跨服PVP类型 EMPVPClassType
2001 	DWORD	dwWarID;			// 相关战场ID
2003 	SMatchPVPZoneInfoNode(void)
2009 struct SWarEntityUIDResInfoNode
2010 {
2011 	DWORD	dwPVPClassType;		// 跨服PVP类型 EMPVPClassType
2012 	DWORD	dwWarID;			// 相关战场ID
2013 	DWORD	dwID;				// 相关战争资源ID
3114 	Match_WarMsg_UpdateResMapPoint,		// 更新地图资源打点信息
3115 	Match_WarMsg_RequestResMapPoint,	// 请求地图资源打点信息
3117 	Match_WarMsg_RequestAddCountryWar,	// 玩家请求发起跨服国战
3118 	Match_WarMsg_RequestCheckCountryWar,// 请求检查跨服国战对方是否本区有国战
3119 	Match_WarMsg_CheckCountryWarResult,	// 请求检查跨服国战对方是否本区有国战结果
3120 	Match_WarMsg_RequestNewCountryWar,	// 请求开跨服国战
3121 	Match_WarMsg_WorldCountryWarState,	// 跨服国战状态变化
3122 	Match_WarMsg_WorldWarTracker,		// 跨服国战跟踪信息
3123 	Match_WarMsg_RequestAddCountryWarResult,	// 玩家请求发起跨服国战结果
3124 	Match_WarMsg_ClearWarTracker,		// 通知清除战场任务追踪信息
3126 	Match_WarMsg_SendCountryWarData,	// 发送本次新国战信息给本区社会服
3155 	Match_WarMsg_RequestAddHistory,		// 请求加入国家历史信息
3156 	Match_WarMsg_RequestAddClanGold,	// 请求增加帮会资金
3157 	Match_WarMsg_SendCountryWarResult,	// 更新跨服国战信息结果日志信息到客户端
3158 	Match_WarMsg_RequestKingInfo,		// 请求获取跨服国王信息
3159 	Match_WarMsg_SendExitWar,			// 发送退出战场信息
3160 	Match_WarMsg_RequestExit,			// 玩家请求退出
3168 	Match_WarMsg_COUNTRYMODE_MSGEND,	// 国战专用消息码 结束
3169 	// 国战专用消息码 结束
3171 	// 跨服帮会Boss战专用消息码 开始
3172 	Match_WarMsg_CLANBOSSMODE_MSGBEGIN,	// 跨服帮会战专用消息码 开始
3173 	Match_WarMsg_ClanBossWarCreate,		// 帮会BOSS战场已创建
3174 	Match_WarMsg_ClanBossWarEnd,		// 帮会BOSS战场已结束
3179 	Match_WarMsg_ClanBossWarAutoJoin,	// 客户端显示并可直接加入帮会BOSS战
3180 	Match_WarMsg_ClanBossWarResultInfo,	// 发送战场结果信息
3181 	Match_WarMsg_BossWarTracker,		// 跨服帮会领地BOSS战跟踪信息
3182 	Match_WarMsg_RequestAddClanBossWar,	// 请求发起跨服帮会领地BOSS战信息
3183 	Match_WarMsg_RequestNewClanBossWar,	// 请求开跨服帮会领地BOSS战
3184 	Match_WarMsg_CLANBOSSMODE_MSGEND,	// 跨服帮会战专用消息码 结束
3185 	// 跨服帮会Boss战专用消息码 结束
3187 	// 跨服边境战专用消息码 开始
3188 	Match_WarMsg_COUNTRYBORDERMODE_MSGBEGIN,	// 跨服边境战专用消息码 开始
3189 	Match_WarMsg_RequestNewBorderWar,			// 请求开跨服边境战场
3190 	Match_WarMsg_BorderWarCreate,				// 跨服边境战场已创建
3191 	Match_WarMsg_BorderWarEnd,					// 跨服边境战场已结束
3192 	Match_WarMsg_RemoveBorderWar,				// 移除跨服边境战场信息
3193 	Match_WarMsg_BorderWarStateChanged,			// 更新跨服边境战状态变化
3194 	Match_WarMsg_BorderWarStepChanged,			// 跨服边境执行状态子类型变化
3195 	Match_WarMsg_NoticeJoinBorderWar,			// 通知玩家加入
3196 	Match_WarMsg_BorderWarAutoJoin,				// 客户端显示并可直接加入
3195 	Match_WarMsg_NoticeJoinBorderWar,			// 通知玩家加入
3196 	Match_WarMsg_BorderWarAutoJoin,				// 客户端显示并可直接加入
3197 	Match_WarMsg_BorderWarTracker,				// 跨服边境战跟踪信息
3198 	Match_WarMsg_COUNTRYBORDERMODE_MSGEND,		// 跨服边境战专用消息码 结束
3199 	// 跨服边境战专用消息码 结束
3204 	// 最大
3205 	Match_WarMsg_Max
3288 	}
3289 };
3291 // Match_WarMsg_RequestAddCountryWar,	// 玩家请求发起跨服国战
3292 // 请求发起跨服国战信息数据结构
3293 struct SMsgWarRequestAddCountryWar_O
3294 {
3306 	}
3307 };
3309 //	Match_WarMsg_RequestKingInfo,		// 请求获取跨服国王信息
3310 struct SWarCountryKingInfo
3311 {

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DMatchEvent.h 13 KB H 文件 2014/2/25 11:36:37 2018/10/23 19:49:28 2018/10/23 19:49:28 18
37 {
38 	ENUM_EVENT_MATCH_ROOTID = 1,				// 跨区系统根事件码
39 	ENUM_EVENT_MATCH_ADDUSER,					// 跨服玩家上线
40 	ENUM_EVENT_MATCH_REMOVEUSER,				// 跨服玩家下线
41 	ENUM_EVENT_MATCH_WARRES_BUILD,				// 战争资源生成
42 	ENUM_EVENT_MATCH_WARRES_DIE,				// 战争资源死亡
69 };
72 /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
74 // 跨服玩家上线
75 #define EVENT_MATCH_ADDUSER						ENUM_EVENT_MATCH_ADDUSER
75 #define EVENT_MATCH_ADDUSER						ENUM_EVENT_MATCH_ADDUSER
77 // 社会服 跨服玩家上线
78 struct SEventMatchAddUser_O
79 {
81 	DWORD dwPDBID;					// 玩家角色ID
82 };
85 // 跨服玩家下线
86 #define EVENT_MATCH_REMOVEUSER						ENUM_EVENT_MATCH_REMOVEUSER
86 #define EVENT_MATCH_REMOVEUSER						ENUM_EVENT_MATCH_REMOVEUSER
88 // 社会服 跨服玩家下线
89 struct SEventMatchRemoveUser_O
90 {
100 struct SEventMatchWarResBuild_S
101 {
102 	DWORD	dwPVPClassType;		// 跨服PVP类型 EMPVPClassType
103 	DWORD	dwWarID;			// 相关战场ID
104 	DWORD	dwResID;			// 相关战争资源配置
113 struct SEventMatchWarResDie_S
114 {
115 	DWORD	dwPVPClassType;		// 跨服PVP类型 EMPVPClassType
116 	DWORD	dwWarID;			// 相关战场ID
117 	DWORD	dwResID;			// 相关战争资源配置
125 struct SEventMatchWarResGateOpen_S
126 {
127 	DWORD	dwPVPClassType;		// 跨服PVP类型 EMPVPClassType
128 	DWORD	dwWarID;			// 相关战场ID
129 	DWORD	dwResID;			// 相关战争资源配置
138 struct SEventMatchWarResSeal_Occupy
139 {
140 	DWORD	dwPVPClassType;		// 跨服PVP类型 EMPVPClassType
141 	DWORD	dwWarID;			// 相关战场ID
142 	DWORD	dwResID;			// 相关战争资源配置
158 struct SEventMatchWarResCanAddValue_S
159 {
160 	DWORD	dwPVPClassType;		// 跨服PVP类型 EMPVPClassType
161 	DWORD	dwWarID;			// 相关战场ID
162 	DWORD	dwResID;			// 相关战争资源配置
178 struct SEventMatchWarResStone_Gather_S
179 {
180 	DWORD	 dwPVPClassType;	// 跨服PVP类型 EMPVPClassType
181 	DWORD	 dwWarID;			// 相关战场ID
182 	LONGLONG uidMaster;			// 完成采集的玩家UID
192 struct SEventMatchWarResBrushTank_Kill_S
193 {
194 	DWORD	 dwPVPClassType;	// 跨服PVP类型 EMPVPClassType
195 	DWORD	 dwWarID;			// 相关战场ID
196 	LONGLONG uidMaster;			// 击杀载具的玩家UID
206 struct SEventMatchWarResTank_Kill_S
207 {
208 	DWORD	 dwPVPClassType;	// 跨服PVP类型 EMPVPClassType
209 	DWORD	 dwWarID;			// 相关战场ID
210 	LONGLONG uidMaster;			// 击杀载具的玩家UID
221 struct SEventMatchWarRes_State_Change_S
222 {
223 	DWORD	dwPVPClassType;		// 跨服PVP类型 EMPVPClassType
224 	DWORD	dwWarID;			// 相关战场ID
225 	DWORD	dwResID;			// 相关战争资源配置
238 struct SEventMatchCountryWarResult_S
239 {
240 	DWORD	dwPVPClassType;			// 跨服PVP类型 EMPVPClassType
241 	DWORD	dwWarID;				// 相关战场ID
242 	BYTE	nWinCampID;				// 获胜方阵营ID
260 struct SEventMatchCountryWarGetScore_S
261 {
262 	DWORD		dwPVPClassType;		// 跨服PVP类型 EMPVPClassType
263 	DWORD		dwWarID;			// 相关战场ID
264 	LONGLONG	uidPlayer;			// 玩家UID
281 struct SEventMatchCountryWarAddPrize_S
282 {
283 	DWORD		dwPVPClassType;		// 跨服PVP类型 EMPVPClassType
284 	DWORD		dwWarID;			// 相关战场ID
285 	LONGLONG	uidPlayer;			// 玩家UID

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DMatchEvent.h 13 KB H 文件 2014/2/25 14:53:49 2018/10/23 19:32:39 2018/10/23 19:32:39 18
37 {
38 	ENUM_EVENT_MATCH_ROOTID = 1,				// 跨区系统根事件码
39 	ENUM_EVENT_MATCH_ADDUSER,					// 跨服玩家上线
40 	ENUM_EVENT_MATCH_REMOVEUSER,				// 跨服玩家下线
41 	ENUM_EVENT_MATCH_WARRES_BUILD,				// 战争资源生成
42 	ENUM_EVENT_MATCH_WARRES_DIE,				// 战争资源死亡
69 };
72 /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
74 // 跨服玩家上线
75 #define EVENT_MATCH_ADDUSER						ENUM_EVENT_MATCH_ADDUSER
75 #define EVENT_MATCH_ADDUSER						ENUM_EVENT_MATCH_ADDUSER
77 // 社会服 跨服玩家上线
78 struct SEventMatchAddUser_O
79 {
81 	DWORD dwPDBID;					// 玩家角色ID
82 };
85 // 跨服玩家下线
86 #define EVENT_MATCH_REMOVEUSER						ENUM_EVENT_MATCH_REMOVEUSER
86 #define EVENT_MATCH_REMOVEUSER						ENUM_EVENT_MATCH_REMOVEUSER
88 // 社会服 跨服玩家下线
89 struct SEventMatchRemoveUser_O
90 {
100 struct SEventMatchWarResBuild_S
101 {
102 	DWORD	dwPVPClassType;		// 跨服PVP类型 EMPVPClassType
103 	DWORD	dwWarID;			// 相关战场ID
104 	DWORD	dwResID;			// 相关战争资源配置
113 struct SEventMatchWarResDie_S
114 {
115 	DWORD	dwPVPClassType;		// 跨服PVP类型 EMPVPClassType
116 	DWORD	dwWarID;			// 相关战场ID
117 	DWORD	dwResID;			// 相关战争资源配置
125 struct SEventMatchWarResGateOpen_S
126 {
127 	DWORD	dwPVPClassType;		// 跨服PVP类型 EMPVPClassType
128 	DWORD	dwWarID;			// 相关战场ID
129 	DWORD	dwResID;			// 相关战争资源配置
138 struct SEventMatchWarResSeal_Occupy
139 {
140 	DWORD	dwPVPClassType;		// 跨服PVP类型 EMPVPClassType
141 	DWORD	dwWarID;			// 相关战场ID
142 	DWORD	dwResID;			// 相关战争资源配置
158 struct SEventMatchWarResCanAddValue_S
159 {
160 	DWORD	dwPVPClassType;		// 跨服PVP类型 EMPVPClassType
161 	DWORD	dwWarID;			// 相关战场ID
162 	DWORD	dwResID;			// 相关战争资源配置
178 struct SEventMatchWarResStone_Gather_S
179 {
180 	DWORD	 dwPVPClassType;	// 跨服PVP类型 EMPVPClassType
181 	DWORD	 dwWarID;			// 相关战场ID
182 	LONGLONG uidMaster;			// 完成采集的玩家UID
192 struct SEventMatchWarResBrushTank_Kill_S
193 {
194 	DWORD	 dwPVPClassType;	// 跨服PVP类型 EMPVPClassType
195 	DWORD	 dwWarID;			// 相关战场ID
196 	LONGLONG uidMaster;			// 击杀载具的玩家UID
206 struct SEventMatchWarResTank_Kill_S
207 {
208 	DWORD	 dwPVPClassType;	// 跨服PVP类型 EMPVPClassType
209 	DWORD	 dwWarID;			// 相关战场ID
210 	LONGLONG uidMaster;			// 击杀载具的玩家UID
221 struct SEventMatchWarRes_State_Change_S
222 {
223 	DWORD	dwPVPClassType;		// 跨服PVP类型 EMPVPClassType
224 	DWORD	dwWarID;			// 相关战场ID
225 	DWORD	dwResID;			// 相关战争资源配置
238 struct SEventMatchCountryWarResult_S
239 {
240 	DWORD	dwPVPClassType;			// 跨服PVP类型 EMPVPClassType
241 	DWORD	dwWarID;				// 相关战场ID
242 	BYTE	nWinCampID;				// 获胜方阵营ID
260 struct SEventMatchCountryWarGetScore_S
261 {
262 	DWORD		dwPVPClassType;		// 跨服PVP类型 EMPVPClassType
263 	DWORD		dwWarID;			// 相关战场ID
264 	LONGLONG	uidPlayer;			// 玩家UID
281 struct SEventMatchCountryWarAddPrize_S
282 {
283 	DWORD		dwPVPClassType;		// 跨服PVP类型 EMPVPClassType
284 	DWORD		dwWarID;			// 相关战场ID
285 	LONGLONG	uidPlayer;			// 玩家UID

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DManagerModule.h 108 KB H 文件 2014/2/25 11:36:37 2018/10/23 19:49:28 2018/10/23 19:49:28 1
644 	MG_SocialRTData_VirtualMemoryUsedSize,		// 当前进程的虚拟内存已使用大小
645 	MG_SocialRTData_OnLineCounts,				// 在线数
646 	MG_SocialRTData_OtherOnLineCounts,			// 跨服在线数
647 	// 最大
648 	MG_SocialRTData_Max

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DManagerModule.h 108 KB H 文件 2014/2/25 14:53:49 2018/10/23 19:32:39 2018/10/23 19:32:39 1
644 	MG_SocialRTData_VirtualMemoryUsedSize,		// 当前进程的虚拟内存已使用大小
645 	MG_SocialRTData_OnLineCounts,				// 在线数
646 	MG_SocialRTData_OtherOnLineCounts,			// 跨服在线数
647 	// 最大
648 	MG_SocialRTData_Max

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DGlobalGame.h 23 KB H 文件 2014/2/25 11:36:35 2018/10/23 19:49:27 2018/10/23 19:49:27 1
566 	MSG_MODULEID_BRIDGE,						// 跨区桥服务器模块
567 	MSG_MODULEID_STARTREK,						// 跨区模块
568 	MSG_MODULEID_MATCH,							// 跨服组队撮合系统模块
569 	MSG_MODULEID_AUCTION,						// 竞拍模块
570 	MSG_MODULEID_ANTICHEATING,					// 反外挂模块

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DGlobalGame.h 23 KB H 文件 2014/2/25 14:53:46 2018/10/23 19:32:39 2018/10/23 19:32:39 1
566 	MSG_MODULEID_BRIDGE,						// 跨区桥服务器模块
567 	MSG_MODULEID_STARTREK,						// 跨区模块
568 	MSG_MODULEID_MATCH,							// 跨服组队撮合系统模块
569 	MSG_MODULEID_AUCTION,						// 竞拍模块
570 	MSG_MODULEID_ANTICHEATING,					// 反外挂模块

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DEntityBuild.h 24 KB H 文件 2014/2/25 11:36:33 2018/10/23 19:49:27 2018/10/23 19:49:27 4
333 /// 切换场景跨区副本数据最长长度
334 #define TRANSMAP_MAX_KQE_LEN				64
336 // 跨服竞技PK数据
337 #define TRANSMAP_STRIKE_BUFF_LEN			64
339 // 切换场景经脉数据
358 	}
359 };
361 /// 人物跨服务器切换地图现场 
362 struct STransMapPersonContext
363 {	
426 	BYTE				byCountryData[TRANSMAP_MAX_CountryData_LEN];	// 国战部件数据 
427 	BYTE				byKqEctypeData[TRANSMAP_MAX_KQE_LEN];			// 跨区副本数据
428 	BYTE				byStrikeData[DBDEF_STRIKE_BUFF_LEN];			// 跨服竞技数据
429 	BYTE				byNerveData[TRANSMAP_NERVE_BUFF_LEN];			// 经脉数据
430 	BYTE				byZenSkillData[TRANSMAP_ZEN_BUFF_LEN];			// 创招数据
630 	}
631 };
634 /// 载具跨服务器切换地图现场 
635 struct STransMapTankContext
636 {	

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DEntityBuild.h 24 KB H 文件 2014/2/25 14:53:45 2018/10/23 19:32:39 2018/10/23 19:32:39 4
333 /// 切换场景跨区副本数据最长长度
334 #define TRANSMAP_MAX_KQE_LEN				64
336 // 跨服竞技PK数据
337 #define TRANSMAP_STRIKE_BUFF_LEN			64
339 // 切换场景经脉数据
358 	}
359 };
361 /// 人物跨服务器切换地图现场 
362 struct STransMapPersonContext
363 {	
426 	BYTE				byCountryData[TRANSMAP_MAX_CountryData_LEN];	// 国战部件数据 
427 	BYTE				byKqEctypeData[TRANSMAP_MAX_KQE_LEN];			// 跨区副本数据
428 	BYTE				byStrikeData[DBDEF_STRIKE_BUFF_LEN];			// 跨服竞技数据
429 	BYTE				byNerveData[TRANSMAP_NERVE_BUFF_LEN];			// 经脉数据
430 	BYTE				byZenSkillData[TRANSMAP_ZEN_BUFF_LEN];			// 创招数据
630 	}
631 };
634 /// 载具跨服务器切换地图现场 
635 struct STransMapTankContext
636 {	

I:\work\source\预言OL\yl code\code\Server\MsgServer\Define.h 8 KB H 文件 2010/1/6 16:09:10 2018/10/23 19:32:13 2018/10/23 19:32:13 1
73 const unsigned short _MSG_TOJUMPSERVER	=_MSG_GENERAL+59;
74 const unsigned short _MSG_SYSNOTICE	=_MSG_GENERAL+60; //全GS公告
75 const unsigned short _MSG_TOGSPRIVATE	=_MSG_GENERAL+61; //跨服私聊
76 const unsigned short _MSG_SUPERLOUDSPEAKER = _MSG_GENERAL+62;// 超级大喇叭 [zhaowenyuan3/11/2009] 
78 const unsigned short _MSG_GM		=_MSG_GENERAL+100;

I:\work\source\预言OL\[src.cool]预言OL\yuyancode\code\Server\MsgServer\Define.h 8 KB H 文件 2010/1/6 16:09:10 2018/10/23 19:32:57 2018/10/23 19:32:57 1
73 const unsigned short _MSG_TOJUMPSERVER	=_MSG_GENERAL+59;
74 const unsigned short _MSG_SYSNOTICE	=_MSG_GENERAL+60; //全GS公告
75 const unsigned short _MSG_TOGSPRIVATE	=_MSG_GENERAL+61; //跨服私聊
76 const unsigned short _MSG_SUPERLOUDSPEAKER = _MSG_GENERAL+62;// 超级大喇叭 [zhaowenyuan3/11/2009] 
78 const unsigned short _MSG_GM		=_MSG_GENERAL+100;

I:\work\source\盛世OL\[src.cool]盛世OL\Server\MsgServer\Define.h 9 KB H 文件 2014/2/25 15:40:12 2018/10/23 13:19:27 2018/10/23 13:19:27 1
78 const unsigned short _MSG_TOJUMPSERVER	=_MSG_GENERAL+59;
79 const unsigned short _MSG_SYSNOTICE	=_MSG_GENERAL+60; //全GS公告
80 const unsigned short _MSG_TOGSPRIVATE	=_MSG_GENERAL+61; //跨服私聊
81 const unsigned short _MSG_SUPERLOUDSPEAKER = _MSG_GENERAL+62;// 超级大喇叭 [zhaowenyuan3/11/2009] 
82 const unsigned short _MSG_SCALLEX		= _MSG_GENERAL + 63;//公告系列

I:\work\source\剑侠时代\jxsd\core\地图插件\jxsd\code\Server\MsgServer\Define.h 8 KB H 文件 2010/12/7 15:28:54 2018/10/19 14:11:36 2018/10/19 14:11:36 1
73 const unsigned short _MSG_TOJUMPSERVER	=_MSG_GENERAL+59;
74 const unsigned short _MSG_SYSNOTICE	=_MSG_GENERAL+60; //全GS公告
75 const unsigned short _MSG_TOGSPRIVATE	=_MSG_GENERAL+61; //跨服私聊
76 const unsigned short _MSG_SUPERLOUDSPEAKER = _MSG_GENERAL+62;// 超级大喇叭 [zhaowenyuan3/11/2009] 
78 const unsigned short _MSG_GM		=_MSG_GENERAL+100;

I:\work\source\剑侠时代\[src.cool]剑侠时代\jxsd\code\Server\MsgServer\Define.h 8 KB H 文件 2010/12/7 15:28:54 2018/10/19 14:11:15 2018/10/19 14:11:15 1
73 const unsigned short _MSG_TOJUMPSERVER	=_MSG_GENERAL+59;
74 const unsigned short _MSG_SYSNOTICE	=_MSG_GENERAL+60; //全GS公告
75 const unsigned short _MSG_TOGSPRIVATE	=_MSG_GENERAL+61; //跨服私聊
76 const unsigned short _MSG_SUPERLOUDSPEAKER = _MSG_GENERAL+62;// 超级大喇叭 [zhaowenyuan3/11/2009] 
78 const unsigned short _MSG_GM		=_MSG_GENERAL+100;

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DCountryModule.h 165 KB H 文件 2014/2/25 11:36:33 2018/10/23 19:49:27 2018/10/23 19:49:27 23
761 //////////////////////////////////////////////////////////////////////////
762 // 5.	国战系统 (CountryWar)
764 // 跨服国战状态定义
765 enum EMCountryWorldWarState
766 {
765 enum EMCountryWorldWarState
766 {
767 	CountryWorldWarState_None = 0,						// 无效跨服国战
768 	CountryWorldWarState_New,							// 新跨服国战（未启动）
769 	CountryWorldWarState_Ready,							// 战前准备
770 	CountryWorldWarState_Doing,							// 正在进行
772 	CountryWorldWarState_MaxID,							// 最大
773 };
776 // 跨服国战信息
777 struct SCountryWorldWarInfo
778 {
777 struct SCountryWorldWarInfo
778 {
779 	DWORD dwID;									// 跨服国战信息ID，0为无效ID
780 	DWORD dwPublicWorldID;						// 所属公共区世界ID
781 	DWORD dwStartTime;							// 开始时间
781 	DWORD dwStartTime;							// 开始时间
782 	DWORD dwEndTime;							// 结束时间
783 	DWORD dwType;								// 跨服国战类型 EMWarItemType
784 	DWORD dwAttackWorldID;						// 进攻国家所在游戏世界ID
785 	DWORD dwAttackCountryID;					// 进攻国家ID
814 	}
815 };
818 // 跨服国家边境连通信息
819 struct SCountryWorldLinkInfo
820 {
819 struct SCountryWorldLinkInfo
820 {
821 	DWORD dwID;									// 跨服国家边境连通信息ID，(游戏世界ID,国家ID,类型)组合编号
822 	DWORD dwPublicWorldID;						// 所属公共区世界ID
822 	DWORD dwPublicWorldID;						// 所属公共区世界ID
823 	DWORD dwType;								// 跨服国家边境类型
824 	DWORD dwWorldID;							// 国家所在游戏世界ID
825 	DWORD dwCountryID;							// 国家ID
1469 };
1472 // tolua_begin
1474 #define  COUNTRY_WARORDERLOG_MAXCOUNT		10			// 跨服国战信息日志排名节点最多数据个数
1476 //  跨服国战信息日志排名节点信息
1477 struct SWorldCountryWarOrderNodeInfo
1478 {
1487 	char  szObjectName[COUNTRY_NAME_MAXSIZE];	// 对象名字（角色名或帮会名）
1488 };
1490 // 跨服国战信息日志数据库表
1491 struct SWorldCountryWarLogInfo
1492 {
1491 struct SWorldCountryWarLogInfo
1492 {
1493 	DWORD dwID;									// 跨服国战日志信息ID
1494 	DWORD dwAddTime;							// 跨服国战日志写入时间
1495 	DWORD dwPublicWorldID;						// 所属公共区世界ID
1496 	DWORD dwStartTime;							// 开始时间
1496 	DWORD dwStartTime;							// 开始时间
1497 	DWORD dwPlayTime;							// 战斗时长(秒)
1498 	DWORD dwType;								// 跨服国战类型
1499 	DWORD dwAttackWorldID;						// 进攻国家所在游戏世界ID
1500 	DWORD dwAttackCountryID;					// 进攻国家ID
1583 // tolua_begin
1585 };
1587 // 取得指定国家的跨服国战信息数据结构
1588 struct SClientWorldWarCountryGetInfo
1589 {
2373 	ENUM_MSG_COUNTRY_HISTORY_GET_LOG,				// 国家客户端 发送给国家社会服务器的请求史册数据消息
2374 	ENUM_MSG_COUNTRY_HISTORY_SEND_LOG,				// 社会服发送给客户端史册数据消息
2375 	ENUM_MSG_COUNTRY_HISTORY_GET_WARLOG,			// 客户端请求场景服跨服国战结果数据消息
2376 	ENUM_MSG_COUNTRY_HISTORY_SEND_WARLOG,			// 场景服发送给客户端跨服国战结果数据消息
2378 	// 7.	功勋系统 (CountryExploit)
2379 	ENUM_MSG_COUNTRY_EXPLOIT_BUILD_SERVER_PART,		// 国家场景服务器 发送给国家社会服务器的更新部件数据消息
2430 	ENUM_MSG_COUNTRY_CMD_RESULT,					// CMD操作结果
2431 	ENUM_MSG_COUNTRY_WORLDLIST_UPDATE,				// 游戏世界列表更新
2433 	// 跨服国战系统
2434 	ENUM_MSG_COUNTRY_WORLDWAR_UPDATE,				// 更新国战记录信息
2435 	ENUM_MSG_COUNTRY_WORLDWAR_REQUEST,				// 请求发国战记录信息
3591 	}
3592 };
3594 // 客户端请求场景服跨服国战结果数据消息
3595 #define MSG_COUNTRY_HISTORY_GET_WARLOG					ENUM_MSG_COUNTRY_HISTORY_GET_WARLOG
3597 struct SMsgCountryHistoryGetWarLog_CS	
3597 struct SMsgCountryHistoryGetWarLog_CS	
3598 {
3599 	DWORD dwID;							// 跨服国战日志信息ID
3600 	DWORD dwAddTime;					// 跨服国战日志写入时间
3601 	DWORD dwPlayerID;					// 查询的角色ID,用来返回找到角色并发给他
3603 	SMsgCountryHistoryGetWarLog_CS(void)
3606 	}
3607 };
3609 // 场景服发送给客户端跨服国战结果数据消息
3610 #define MSG_COUNTRY_HISTORY_SEND_WARLOG					ENUM_MSG_COUNTRY_HISTORY_SEND_WARLOG
3612 struct SMsgCountryHistorySetWarLog_SC

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DCountryModule.h 165 KB H 文件 2014/2/25 14:53:44 2018/10/23 19:32:39 2018/10/23 19:32:39 23
761 //////////////////////////////////////////////////////////////////////////
762 // 5.	国战系统 (CountryWar)
764 // 跨服国战状态定义
765 enum EMCountryWorldWarState
766 {
765 enum EMCountryWorldWarState
766 {
767 	CountryWorldWarState_None = 0,						// 无效跨服国战
768 	CountryWorldWarState_New,							// 新跨服国战（未启动）
769 	CountryWorldWarState_Ready,							// 战前准备
770 	CountryWorldWarState_Doing,							// 正在进行
772 	CountryWorldWarState_MaxID,							// 最大
773 };
776 // 跨服国战信息
777 struct SCountryWorldWarInfo
778 {
777 struct SCountryWorldWarInfo
778 {
779 	DWORD dwID;									// 跨服国战信息ID，0为无效ID
780 	DWORD dwPublicWorldID;						// 所属公共区世界ID
781 	DWORD dwStartTime;							// 开始时间
781 	DWORD dwStartTime;							// 开始时间
782 	DWORD dwEndTime;							// 结束时间
783 	DWORD dwType;								// 跨服国战类型 EMWarItemType
784 	DWORD dwAttackWorldID;						// 进攻国家所在游戏世界ID
785 	DWORD dwAttackCountryID;					// 进攻国家ID
814 	}
815 };
818 // 跨服国家边境连通信息
819 struct SCountryWorldLinkInfo
820 {
819 struct SCountryWorldLinkInfo
820 {
821 	DWORD dwID;									// 跨服国家边境连通信息ID，(游戏世界ID,国家ID,类型)组合编号
822 	DWORD dwPublicWorldID;						// 所属公共区世界ID
822 	DWORD dwPublicWorldID;						// 所属公共区世界ID
823 	DWORD dwType;								// 跨服国家边境类型
824 	DWORD dwWorldID;							// 国家所在游戏世界ID
825 	DWORD dwCountryID;							// 国家ID
1469 };
1472 // tolua_begin
1474 #define  COUNTRY_WARORDERLOG_MAXCOUNT		10			// 跨服国战信息日志排名节点最多数据个数
1476 //  跨服国战信息日志排名节点信息
1477 struct SWorldCountryWarOrderNodeInfo
1478 {
1487 	char  szObjectName[COUNTRY_NAME_MAXSIZE];	// 对象名字（角色名或帮会名）
1488 };
1490 // 跨服国战信息日志数据库表
1491 struct SWorldCountryWarLogInfo
1492 {
1491 struct SWorldCountryWarLogInfo
1492 {
1493 	DWORD dwID;									// 跨服国战日志信息ID
1494 	DWORD dwAddTime;							// 跨服国战日志写入时间
1495 	DWORD dwPublicWorldID;						// 所属公共区世界ID
1496 	DWORD dwStartTime;							// 开始时间
1496 	DWORD dwStartTime;							// 开始时间
1497 	DWORD dwPlayTime;							// 战斗时长(秒)
1498 	DWORD dwType;								// 跨服国战类型
1499 	DWORD dwAttackWorldID;						// 进攻国家所在游戏世界ID
1500 	DWORD dwAttackCountryID;					// 进攻国家ID
1583 // tolua_begin
1585 };
1587 // 取得指定国家的跨服国战信息数据结构
1588 struct SClientWorldWarCountryGetInfo
1589 {
2373 	ENUM_MSG_COUNTRY_HISTORY_GET_LOG,				// 国家客户端 发送给国家社会服务器的请求史册数据消息
2374 	ENUM_MSG_COUNTRY_HISTORY_SEND_LOG,				// 社会服发送给客户端史册数据消息
2375 	ENUM_MSG_COUNTRY_HISTORY_GET_WARLOG,			// 客户端请求场景服跨服国战结果数据消息
2376 	ENUM_MSG_COUNTRY_HISTORY_SEND_WARLOG,			// 场景服发送给客户端跨服国战结果数据消息
2378 	// 7.	功勋系统 (CountryExploit)
2379 	ENUM_MSG_COUNTRY_EXPLOIT_BUILD_SERVER_PART,		// 国家场景服务器 发送给国家社会服务器的更新部件数据消息
2430 	ENUM_MSG_COUNTRY_CMD_RESULT,					// CMD操作结果
2431 	ENUM_MSG_COUNTRY_WORLDLIST_UPDATE,				// 游戏世界列表更新
2433 	// 跨服国战系统
2434 	ENUM_MSG_COUNTRY_WORLDWAR_UPDATE,				// 更新国战记录信息
2435 	ENUM_MSG_COUNTRY_WORLDWAR_REQUEST,				// 请求发国战记录信息
3591 	}
3592 };
3594 // 客户端请求场景服跨服国战结果数据消息
3595 #define MSG_COUNTRY_HISTORY_GET_WARLOG					ENUM_MSG_COUNTRY_HISTORY_GET_WARLOG
3597 struct SMsgCountryHistoryGetWarLog_CS	
3597 struct SMsgCountryHistoryGetWarLog_CS	
3598 {
3599 	DWORD dwID;							// 跨服国战日志信息ID
3600 	DWORD dwAddTime;					// 跨服国战日志写入时间
3601 	DWORD dwPlayerID;					// 查询的角色ID,用来返回找到角色并发给他
3603 	SMsgCountryHistoryGetWarLog_CS(void)
3606 	}
3607 };
3609 // 场景服发送给客户端跨服国战结果数据消息
3610 #define MSG_COUNTRY_HISTORY_SEND_WARLOG					ENUM_MSG_COUNTRY_HISTORY_SEND_WARLOG
3612 struct SMsgCountryHistorySetWarLog_SC

I:\work\source\天空之剑\[src.cool]天空之剑\sky\Code\Common\DCommonDef.h 5 KB H 文件 2013/5/22 21:08:20 2018/10/23 14:48:21 2018/10/23 14:48:21 1
135 	epscOnline,			//在游戏中
137 	epscWaitForLogin,	// 等待登录场景
139 	//跨服流程相关状态(到时候会根据具体实现来修改)
140 	epscWaitForSrcLeave,
141 	epscWaitForDestEnter,

I:\work\source\天空之剑\[src.cool]天空之剑\Code\Common\DCommonDef.h 5 KB H 文件 2013/5/22 15:43:50 2018/10/23 14:45:02 2018/10/23 14:45:02 1
135 	epscOnline,			//在游戏中
137 	epscWaitForLogin,	// 等待登录场景
139 	//跨服流程相关状态(到时候会根据具体实现来修改)
140 	epscWaitForSrcLeave,
141 	epscWaitForDestEnter,

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\DBudoDef.h 16 KB H 文件 2014/2/25 11:36:31 2018/10/23 19:49:26 2018/10/23 19:49:26 1
26 #pragma pack(1)
28 /******************************************************************/
29 /////////////跨服组队撮合系统的公共结构体定义 //////////////////////
30 /******************************************************************/
31 ///////////////////////////////////////////////////////////////////

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\DBudoDef.h 16 KB H 文件 2014/2/25 14:53:42 2018/10/23 19:32:39 2018/10/23 19:32:39 1
26 #pragma pack(1)
28 /******************************************************************/
29 /////////////跨服组队撮合系统的公共结构体定义 //////////////////////
30 /******************************************************************/
31 ///////////////////////////////////////////////////////////////////

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Tools\bdr\data\DbSvr_output\DBSvrProtocolImport.h 263 KB H 文件 2015/3/15 13:47:24 2018/10/23 20:09:21 2018/10/23 20:09:21 60
620 	DWORD dwStrikeBankMoney;   //银行保存徽章
621 	WORD nDayPlayCount;   //每天竞技比赛局数
622 	DWORD dwWarScore;   //跨服国战积分
623 	DWORD dwData1;   //备用,调试用
624 	WORD nGiftCount;   //国战获得礼包次数
2852 struct TWorldCountryWar
2853 {
2854 	unsigned __int64 ID;   //跨服国战信息ID，0为无效ID,数据库设为自增
2855 	DWORD dwPublicWorldID;   //所属公共区世界ID
2856 	DWORD dwStartTime;   //开始时间
2856 	DWORD dwStartTime;   //开始时间
2857 	DWORD dwEndTime;   //结束时间
2858 	DWORD dwType;   //跨服国战类型
2859 	DWORD dwAttackWorldID;   //进攻国家所在游戏世界ID
2860 	DWORD dwAttackCountryID;   //进攻国家ID
2924 struct TWorldCountryWarLog
2925 {
2926 	DWORD dwID;   //跨服国战日志信息ID
2927 	DWORD dwAddTime;   //跨服国战日志写入时间
2928 	DWORD dwPublicWorldID;   //所属公共区世界ID
2929 	DWORD dwStartTime;   //开始时间
2929 	DWORD dwStartTime;   //开始时间
2930 	DWORD dwPlayTime;   //战斗时长(秒)
2931 	DWORD dwType;   //跨服国战类型
2932 	DWORD dwAttackWorldID;   //进攻国家所在游戏世界ID
2933 	DWORD dwAttackCountryID;   //进攻国家ID
2956 struct TWorldCountryLink
2957 {
2958 	DWORD dwID;   //跨服国家边境连通信息ID，(游戏世界ID,国家ID,类型)组合编号
2959 	DWORD dwPublicWorldID;   //所属公共区世界ID
2959 	DWORD dwPublicWorldID;   //所属公共区世界ID
2960 	DWORD dwType;   //跨服国家边境类型
2961 	DWORD dwWorldID;   //国家所在游戏世界ID
2962 	DWORD dwCountryID;   //国家ID
3938   int unpack(ORM::COrmSerializer *pOrmSerializer);
3940 };
3941 // 跨服国家战列表操作
3942 struct TCountryWorldWarList_Set
3943 {
3951   int unpack(ORM::COrmSerializer *pOrmSerializer);
3953 };
3954 // 跨服国家战列表-请求
3955 struct TMSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ
3956 {
3955 struct TMSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ
3956 {
3957 	unsigned __int64 ID;   //跨服国战信息ID，0为忽略
3958 	DWORD dwPublicWorldID;   //所属公共区世界ID，0为忽略
3959 	DWORD dwDays;   //只读出最近多少天的记录，0为忽略
3966   int unpack(ORM::COrmSerializer *pOrmSerializer);
3968 };
3969 // 跨服国家战列表-应答
3970 struct TMSG_DBSVR_COUNTRY_WORLDWAR_GET_RSP
3971 {
3971 {
3972 	WORD Result;   //0成功，其他看错误码
3973 	unsigned __int64 ID;   //跨服国战信息ID，0为忽略
3974 	DWORD dwPublicWorldID;   //所属公共区世界ID，0为忽略
3975 	DWORD dwDays;   //只读出最近多少天的记录，0为忽略
3984   int unpack(ORM::COrmSerializer *pOrmSerializer);
3986 };
3987 // 跨服国家战添加-请求
3988 struct TMSG_DBSVR_COUNTRY_WORLDWAR_ADD_REQ
3989 {
3989 {
3990 	DWORD dwTmpID;   //临时id,直通
3991 	TWorldCountryWar stItem;   //跨服国战信息
3992   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
3993   int pack(ORM::COrmSerializer *pOrmSerializer);
3997   int unpack(ORM::COrmSerializer *pOrmSerializer);
3999 };
4000 // 跨服国家战添加-应答
4001 struct TMSG_DBSVR_COUNTRY_WORLDWAR_ADD_RSP
4002 {
4011   int unpack(ORM::COrmSerializer *pOrmSerializer);
4013 };
4014 // 跨服国家战更新-请求
4015 struct TMSG_DBSVR_COUNTRY_WORLDWAR_UPD_REQ
4016 {
4023   int unpack(ORM::COrmSerializer *pOrmSerializer);
4025 };
4026 // 跨服国家战更新结果
4027 struct TCountryWorldWarUpdateResult
4028 {
4027 struct TCountryWorldWarUpdateResult
4028 {
4029 	unsigned __int64 ID;   //跨服国战信息ID
4030 	WORD Result;   //0成功，其他看错误码
4031   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
4036   int unpack(ORM::COrmSerializer *pOrmSerializer);
4038 };
4039 // 跨服国家战更新-应答
4040 struct TMSG_DBSVR_COUNTRY_WORLDWAR_UPD_RSP
4041 {
4050   int unpack(ORM::COrmSerializer *pOrmSerializer);
4052 };
4053 // 跨服国家战记录-请求
4054 struct TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ
4055 {
4054 struct TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ
4055 {
4056 	DWORD dwID;   //跨服国战日志信息ID
4057 	DWORD dwAddTime;   //跨服国战日志写入时间
4058 	DWORD dwPlayerID;   //查询的角色ID,用来返回找到角色并发给他
4059   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
4064   int unpack(ORM::COrmSerializer *pOrmSerializer);
4066 };
4067 // 跨服国家战记录-应答
4068 struct TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_RSP
4069 {
4069 {
4070 	WORD Result;   //0成功，其他看错误码
4071 	DWORD dwID;   //跨服国战日志信息ID
4072 	DWORD dwAddTime;   //跨服国战日志写入时间
4073 	DWORD dwPlayerID;   //查询的角色ID,用来返回找到角色并发给他
4074 	int nItemCount;   //总数
4081   int unpack(ORM::COrmSerializer *pOrmSerializer);
4083 };
4084 // 跨服国家战记录添加-请求
4085 struct TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_REQ
4086 {
4093   int unpack(ORM::COrmSerializer *pOrmSerializer);
4095 };
4096 // 跨服国家战记录添加-应答
4097 struct TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_RSP
4098 {
4098 {
4099 	WORD Result;   //0成功，其他看错误码
4100 	DWORD dwID;   //跨服国战日志信息ID
4101 	DWORD dwAddTime;   //跨服国战日志写入时间
4102   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
4103   int pack(ORM::COrmSerializer *pOrmSerializer);
4107   int unpack(ORM::COrmSerializer *pOrmSerializer);
4109 };
4110 // 跨服国家战列表操作
4111 struct TCountryWorldLinkList_Set
4112 {
4124 struct TMSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ
4125 {
4126 	DWORD dwID;   //跨服国战日志信息ID
4127 	DWORD dwPublicWorldID;   //所属公共区世界ID
4128   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
4138 {
4139 	WORD Result;   //0成功，其他看错误码
4140 	DWORD dwID;   //跨服国战日志信息ID
4141 	DWORD dwPublicWorldID;   //所属公共区世界ID
4142 	int nTotalCount;   //总数
4149   int unpack(ORM::COrmSerializer *pOrmSerializer);
4151 };
4152 // 跨服国家战记录添加-请求
4153 struct TMSG_DBSVR_COUNTRY_WORLDLINK_ADD_REQ
4154 {
4161   int unpack(ORM::COrmSerializer *pOrmSerializer);
4163 };
4164 // 跨服国家战记录添加-应答
4165 struct TMSG_DBSVR_COUNTRY_WORLDLINK_ADD_RSP
4166 {
4166 {
4167 	WORD Result;   //0成功，其他看错误码
4168 	DWORD dwID;   //跨服国战日志信息ID
4169 	DWORD dwPublicWorldID;   //所属公共区世界ID
4170   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
5806 const int MSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_REQ = (160+3);   //163  国家落日战记录添加-请求
5807 const int MSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_RSP = (160+4);   //164  国家落日战记录添加-应答
5808 const int MSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ = (170+1);   //171  跨服国家战列表-请求
5809 const int MSG_DBSVR_COUNTRY_WORLDWAR_GET_RSP = (170+2);   //172  跨服国家战列表-应答
5810 const int MSG_DBSVR_COUNTRY_WORLDWAR_ADD_REQ = (170+3);   //173  跨服国家战添加-请求
5811 const int MSG_DBSVR_COUNTRY_WORLDWAR_ADD_RSP = (170+4);   //174  跨服国家战添加-应答
5812 const int MSG_DBSVR_COUNTRY_WORLDWAR_UPD_REQ = (170+5);   //175  跨服国家战更新-请求
5813 const int MSG_DBSVR_COUNTRY_WORLDWAR_UPD_RSP = (170+6);   //176  跨服国家战更新-应答
5814 const int MSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ = (180+1);   //181  跨服国家战记录-请求
5815 const int MSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_RSP = (180+2);   //182  跨服国家战记录-应答
5816 const int MSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_REQ = (180+3);   //183  跨服国家战记录添加-请求
5817 const int MSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_RSP = (180+4);   //184  跨服国家战记录添加-应答
5818 const int MSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ = (190+1);   //191  国家边境连通列表-请求
5819 const int MSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP = (190+2);   //192  国家边境连通列表-应答
5818 const int MSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ = (190+1);   //191  国家边境连通列表-请求
5819 const int MSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP = (190+2);   //192  国家边境连通列表-应答
5820 const int MSG_DBSVR_COUNTRY_WORLDLINK_ADD_REQ = (190+3);   //193  跨服国家战记录添加-请求
5821 const int MSG_DBSVR_COUNTRY_WORLDLINK_ADD_RSP = (190+4);   //194  跨服国家战记录添加-应答
5822 const int MSG_DBSVR_COUNTRY_PLAYER_GET_REQ = (200+1);   //201  国家玩家查询-请求
5823 const int MSG_DBSVR_COUNTRY_PLAYER_GET_RSP = (200+2);   //202  国家玩家查询-应答
5972         TMSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_REQ stTMSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_REQ;   // MSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_REQ   国家落日战记录添加-请求
5973         TMSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_RSP stTMSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_RSP;   // MSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_RSP   国家落日战记录添加-应答
5974         TMSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ stTMSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ;   // MSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ   跨服国家战列表-请求
5975         TMSG_DBSVR_COUNTRY_WORLDWAR_GET_RSP stTMSG_DBSVR_COUNTRY_WORLDWAR_GET_RSP;   // MSG_DBSVR_COUNTRY_WORLDWAR_GET_RSP   跨服国家战列表-应答
5976         TMSG_DBSVR_COUNTRY_WORLDWAR_ADD_REQ stTMSG_DBSVR_COUNTRY_WORLDWAR_ADD_REQ;   // MSG_DBSVR_COUNTRY_WORLDWAR_ADD_REQ   跨服国家战添加-请求
5977         TMSG_DBSVR_COUNTRY_WORLDWAR_ADD_RSP stTMSG_DBSVR_COUNTRY_WORLDWAR_ADD_RSP;   // MSG_DBSVR_COUNTRY_WORLDWAR_ADD_RSP   跨服国家战添加-应答
5978         TMSG_DBSVR_COUNTRY_WORLDWAR_UPD_REQ stTMSG_DBSVR_COUNTRY_WORLDWAR_UPD_REQ;   // MSG_DBSVR_COUNTRY_WORLDWAR_UPD_REQ   跨服国家战更新-请求
5979         TMSG_DBSVR_COUNTRY_WORLDWAR_UPD_RSP stTMSG_DBSVR_COUNTRY_WORLDWAR_UPD_RSP;   // MSG_DBSVR_COUNTRY_WORLDWAR_UPD_RSP   跨服国家战更新-应答
5980         TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ stTMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ;   // MSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ   跨服国家战记录-请求
5981         TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_RSP stTMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_RSP;   // MSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_RSP   跨服国家战记录-应答
5982         TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_REQ stTMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_REQ;   // MSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_REQ   跨服国家战记录添加-请求
5983         TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_RSP stTMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_RSP;   // MSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_RSP   跨服国家战记录添加-应答
5984         TMSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ stTMSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ;   // MSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ   国家边境连通列表-请求
5985         TMSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP stTMSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP;   // MSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP   国家边境连通列表-应答
5984         TMSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ stTMSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ;   // MSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ   国家边境连通列表-请求
5985         TMSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP stTMSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP;   // MSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP   国家边境连通列表-应答
5986         TMSG_DBSVR_COUNTRY_WORLDLINK_ADD_REQ stTMSG_DBSVR_COUNTRY_WORLDLINK_ADD_REQ;   // MSG_DBSVR_COUNTRY_WORLDLINK_ADD_REQ   跨服国家战记录添加-请求
5987         TMSG_DBSVR_COUNTRY_WORLDLINK_ADD_RSP stTMSG_DBSVR_COUNTRY_WORLDLINK_ADD_RSP;   // MSG_DBSVR_COUNTRY_WORLDLINK_ADD_RSP   跨服国家战记录添加-应答
5988         TMSG_DBSVR_COUNTRY_PLAYER_GET_REQ stTMSG_DBSVR_COUNTRY_PLAYER_GET_REQ;   // MSG_DBSVR_COUNTRY_PLAYER_GET_REQ   国家玩家查询-请求
5989         TMSG_DBSVR_COUNTRY_PLAYER_GET_RSP stTMSG_DBSVR_COUNTRY_PLAYER_GET_RSP;   // MSG_DBSVR_COUNTRY_PLAYER_GET_RSP   国家玩家查询-应答

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Common\dbsvr_pol\DBSvrProtocolImport.h 263 KB H 文件 2015/3/15 13:47:24 2018/10/23 20:03:46 2018/10/23 20:03:46 60
620 	DWORD dwStrikeBankMoney;   //银行保存徽章
621 	WORD nDayPlayCount;   //每天竞技比赛局数
622 	DWORD dwWarScore;   //跨服国战积分
623 	DWORD dwData1;   //备用,调试用
624 	WORD nGiftCount;   //国战获得礼包次数
2852 struct TWorldCountryWar
2853 {
2854 	unsigned __int64 ID;   //跨服国战信息ID，0为无效ID,数据库设为自增
2855 	DWORD dwPublicWorldID;   //所属公共区世界ID
2856 	DWORD dwStartTime;   //开始时间
2856 	DWORD dwStartTime;   //开始时间
2857 	DWORD dwEndTime;   //结束时间
2858 	DWORD dwType;   //跨服国战类型
2859 	DWORD dwAttackWorldID;   //进攻国家所在游戏世界ID
2860 	DWORD dwAttackCountryID;   //进攻国家ID
2924 struct TWorldCountryWarLog
2925 {
2926 	DWORD dwID;   //跨服国战日志信息ID
2927 	DWORD dwAddTime;   //跨服国战日志写入时间
2928 	DWORD dwPublicWorldID;   //所属公共区世界ID
2929 	DWORD dwStartTime;   //开始时间
2929 	DWORD dwStartTime;   //开始时间
2930 	DWORD dwPlayTime;   //战斗时长(秒)
2931 	DWORD dwType;   //跨服国战类型
2932 	DWORD dwAttackWorldID;   //进攻国家所在游戏世界ID
2933 	DWORD dwAttackCountryID;   //进攻国家ID
2956 struct TWorldCountryLink
2957 {
2958 	DWORD dwID;   //跨服国家边境连通信息ID，(游戏世界ID,国家ID,类型)组合编号
2959 	DWORD dwPublicWorldID;   //所属公共区世界ID
2959 	DWORD dwPublicWorldID;   //所属公共区世界ID
2960 	DWORD dwType;   //跨服国家边境类型
2961 	DWORD dwWorldID;   //国家所在游戏世界ID
2962 	DWORD dwCountryID;   //国家ID
3938   int unpack(ORM::COrmSerializer *pOrmSerializer);
3940 };
3941 // 跨服国家战列表操作
3942 struct TCountryWorldWarList_Set
3943 {
3951   int unpack(ORM::COrmSerializer *pOrmSerializer);
3953 };
3954 // 跨服国家战列表-请求
3955 struct TMSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ
3956 {
3955 struct TMSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ
3956 {
3957 	unsigned __int64 ID;   //跨服国战信息ID，0为忽略
3958 	DWORD dwPublicWorldID;   //所属公共区世界ID，0为忽略
3959 	DWORD dwDays;   //只读出最近多少天的记录，0为忽略
3966   int unpack(ORM::COrmSerializer *pOrmSerializer);
3968 };
3969 // 跨服国家战列表-应答
3970 struct TMSG_DBSVR_COUNTRY_WORLDWAR_GET_RSP
3971 {
3971 {
3972 	WORD Result;   //0成功，其他看错误码
3973 	unsigned __int64 ID;   //跨服国战信息ID，0为忽略
3974 	DWORD dwPublicWorldID;   //所属公共区世界ID，0为忽略
3975 	DWORD dwDays;   //只读出最近多少天的记录，0为忽略
3984   int unpack(ORM::COrmSerializer *pOrmSerializer);
3986 };
3987 // 跨服国家战添加-请求
3988 struct TMSG_DBSVR_COUNTRY_WORLDWAR_ADD_REQ
3989 {
3989 {
3990 	DWORD dwTmpID;   //临时id,直通
3991 	TWorldCountryWar stItem;   //跨服国战信息
3992   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
3993   int pack(ORM::COrmSerializer *pOrmSerializer);
3997   int unpack(ORM::COrmSerializer *pOrmSerializer);
3999 };
4000 // 跨服国家战添加-应答
4001 struct TMSG_DBSVR_COUNTRY_WORLDWAR_ADD_RSP
4002 {
4011   int unpack(ORM::COrmSerializer *pOrmSerializer);
4013 };
4014 // 跨服国家战更新-请求
4015 struct TMSG_DBSVR_COUNTRY_WORLDWAR_UPD_REQ
4016 {
4023   int unpack(ORM::COrmSerializer *pOrmSerializer);
4025 };
4026 // 跨服国家战更新结果
4027 struct TCountryWorldWarUpdateResult
4028 {
4027 struct TCountryWorldWarUpdateResult
4028 {
4029 	unsigned __int64 ID;   //跨服国战信息ID
4030 	WORD Result;   //0成功，其他看错误码
4031   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
4036   int unpack(ORM::COrmSerializer *pOrmSerializer);
4038 };
4039 // 跨服国家战更新-应答
4040 struct TMSG_DBSVR_COUNTRY_WORLDWAR_UPD_RSP
4041 {
4050   int unpack(ORM::COrmSerializer *pOrmSerializer);
4052 };
4053 // 跨服国家战记录-请求
4054 struct TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ
4055 {
4054 struct TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ
4055 {
4056 	DWORD dwID;   //跨服国战日志信息ID
4057 	DWORD dwAddTime;   //跨服国战日志写入时间
4058 	DWORD dwPlayerID;   //查询的角色ID,用来返回找到角色并发给他
4059   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
4064   int unpack(ORM::COrmSerializer *pOrmSerializer);
4066 };
4067 // 跨服国家战记录-应答
4068 struct TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_RSP
4069 {
4069 {
4070 	WORD Result;   //0成功，其他看错误码
4071 	DWORD dwID;   //跨服国战日志信息ID
4072 	DWORD dwAddTime;   //跨服国战日志写入时间
4073 	DWORD dwPlayerID;   //查询的角色ID,用来返回找到角色并发给他
4074 	int nItemCount;   //总数
4081   int unpack(ORM::COrmSerializer *pOrmSerializer);
4083 };
4084 // 跨服国家战记录添加-请求
4085 struct TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_REQ
4086 {
4093   int unpack(ORM::COrmSerializer *pOrmSerializer);
4095 };
4096 // 跨服国家战记录添加-应答
4097 struct TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_RSP
4098 {
4098 {
4099 	WORD Result;   //0成功，其他看错误码
4100 	DWORD dwID;   //跨服国战日志信息ID
4101 	DWORD dwAddTime;   //跨服国战日志写入时间
4102   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
4103   int pack(ORM::COrmSerializer *pOrmSerializer);
4107   int unpack(ORM::COrmSerializer *pOrmSerializer);
4109 };
4110 // 跨服国家战列表操作
4111 struct TCountryWorldLinkList_Set
4112 {
4124 struct TMSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ
4125 {
4126 	DWORD dwID;   //跨服国战日志信息ID
4127 	DWORD dwPublicWorldID;   //所属公共区世界ID
4128   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
4138 {
4139 	WORD Result;   //0成功，其他看错误码
4140 	DWORD dwID;   //跨服国战日志信息ID
4141 	DWORD dwPublicWorldID;   //所属公共区世界ID
4142 	int nTotalCount;   //总数
4149   int unpack(ORM::COrmSerializer *pOrmSerializer);
4151 };
4152 // 跨服国家战记录添加-请求
4153 struct TMSG_DBSVR_COUNTRY_WORLDLINK_ADD_REQ
4154 {
4161   int unpack(ORM::COrmSerializer *pOrmSerializer);
4163 };
4164 // 跨服国家战记录添加-应答
4165 struct TMSG_DBSVR_COUNTRY_WORLDLINK_ADD_RSP
4166 {
4166 {
4167 	WORD Result;   //0成功，其他看错误码
4168 	DWORD dwID;   //跨服国战日志信息ID
4169 	DWORD dwPublicWorldID;   //所属公共区世界ID
4170   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
5806 const int MSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_REQ = (160+3);   //163  国家落日战记录添加-请求
5807 const int MSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_RSP = (160+4);   //164  国家落日战记录添加-应答
5808 const int MSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ = (170+1);   //171  跨服国家战列表-请求
5809 const int MSG_DBSVR_COUNTRY_WORLDWAR_GET_RSP = (170+2);   //172  跨服国家战列表-应答
5810 const int MSG_DBSVR_COUNTRY_WORLDWAR_ADD_REQ = (170+3);   //173  跨服国家战添加-请求
5811 const int MSG_DBSVR_COUNTRY_WORLDWAR_ADD_RSP = (170+4);   //174  跨服国家战添加-应答
5812 const int MSG_DBSVR_COUNTRY_WORLDWAR_UPD_REQ = (170+5);   //175  跨服国家战更新-请求
5813 const int MSG_DBSVR_COUNTRY_WORLDWAR_UPD_RSP = (170+6);   //176  跨服国家战更新-应答
5814 const int MSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ = (180+1);   //181  跨服国家战记录-请求
5815 const int MSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_RSP = (180+2);   //182  跨服国家战记录-应答
5816 const int MSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_REQ = (180+3);   //183  跨服国家战记录添加-请求
5817 const int MSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_RSP = (180+4);   //184  跨服国家战记录添加-应答
5818 const int MSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ = (190+1);   //191  国家边境连通列表-请求
5819 const int MSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP = (190+2);   //192  国家边境连通列表-应答
5818 const int MSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ = (190+1);   //191  国家边境连通列表-请求
5819 const int MSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP = (190+2);   //192  国家边境连通列表-应答
5820 const int MSG_DBSVR_COUNTRY_WORLDLINK_ADD_REQ = (190+3);   //193  跨服国家战记录添加-请求
5821 const int MSG_DBSVR_COUNTRY_WORLDLINK_ADD_RSP = (190+4);   //194  跨服国家战记录添加-应答
5822 const int MSG_DBSVR_COUNTRY_PLAYER_GET_REQ = (200+1);   //201  国家玩家查询-请求
5823 const int MSG_DBSVR_COUNTRY_PLAYER_GET_RSP = (200+2);   //202  国家玩家查询-应答
5972         TMSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_REQ stTMSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_REQ;   // MSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_REQ   国家落日战记录添加-请求
5973         TMSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_RSP stTMSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_RSP;   // MSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_RSP   国家落日战记录添加-应答
5974         TMSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ stTMSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ;   // MSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ   跨服国家战列表-请求
5975         TMSG_DBSVR_COUNTRY_WORLDWAR_GET_RSP stTMSG_DBSVR_COUNTRY_WORLDWAR_GET_RSP;   // MSG_DBSVR_COUNTRY_WORLDWAR_GET_RSP   跨服国家战列表-应答
5976         TMSG_DBSVR_COUNTRY_WORLDWAR_ADD_REQ stTMSG_DBSVR_COUNTRY_WORLDWAR_ADD_REQ;   // MSG_DBSVR_COUNTRY_WORLDWAR_ADD_REQ   跨服国家战添加-请求
5977         TMSG_DBSVR_COUNTRY_WORLDWAR_ADD_RSP stTMSG_DBSVR_COUNTRY_WORLDWAR_ADD_RSP;   // MSG_DBSVR_COUNTRY_WORLDWAR_ADD_RSP   跨服国家战添加-应答
5978         TMSG_DBSVR_COUNTRY_WORLDWAR_UPD_REQ stTMSG_DBSVR_COUNTRY_WORLDWAR_UPD_REQ;   // MSG_DBSVR_COUNTRY_WORLDWAR_UPD_REQ   跨服国家战更新-请求
5979         TMSG_DBSVR_COUNTRY_WORLDWAR_UPD_RSP stTMSG_DBSVR_COUNTRY_WORLDWAR_UPD_RSP;   // MSG_DBSVR_COUNTRY_WORLDWAR_UPD_RSP   跨服国家战更新-应答
5980         TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ stTMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ;   // MSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ   跨服国家战记录-请求
5981         TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_RSP stTMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_RSP;   // MSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_RSP   跨服国家战记录-应答
5982         TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_REQ stTMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_REQ;   // MSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_REQ   跨服国家战记录添加-请求
5983         TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_RSP stTMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_RSP;   // MSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_RSP   跨服国家战记录添加-应答
5984         TMSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ stTMSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ;   // MSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ   国家边境连通列表-请求
5985         TMSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP stTMSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP;   // MSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP   国家边境连通列表-应答
5984         TMSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ stTMSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ;   // MSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ   国家边境连通列表-请求
5985         TMSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP stTMSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP;   // MSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP   国家边境连通列表-应答
5986         TMSG_DBSVR_COUNTRY_WORLDLINK_ADD_REQ stTMSG_DBSVR_COUNTRY_WORLDLINK_ADD_REQ;   // MSG_DBSVR_COUNTRY_WORLDLINK_ADD_REQ   跨服国家战记录添加-请求
5987         TMSG_DBSVR_COUNTRY_WORLDLINK_ADD_RSP stTMSG_DBSVR_COUNTRY_WORLDLINK_ADD_RSP;   // MSG_DBSVR_COUNTRY_WORLDLINK_ADD_RSP   跨服国家战记录添加-应答
5988         TMSG_DBSVR_COUNTRY_PLAYER_GET_REQ stTMSG_DBSVR_COUNTRY_PLAYER_GET_REQ;   // MSG_DBSVR_COUNTRY_PLAYER_GET_REQ   国家玩家查询-请求
5989         TMSG_DBSVR_COUNTRY_PLAYER_GET_RSP stTMSG_DBSVR_COUNTRY_PLAYER_GET_RSP;   // MSG_DBSVR_COUNTRY_PLAYER_GET_RSP   国家玩家查询-应答

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Tools\bdr\data\DbSvr_output\DBSvrProtocolImport.h 263 KB H 文件 2014/2/25 14:40:29 2018/10/23 19:47:02 2018/10/23 19:47:02 60
620 	DWORD dwStrikeBankMoney;   //银行保存徽章
621 	WORD nDayPlayCount;   //每天竞技比赛局数
622 	DWORD dwWarScore;   //跨服国战积分
623 	DWORD dwData1;   //备用,调试用
624 	WORD nGiftCount;   //国战获得礼包次数
2852 struct TWorldCountryWar
2853 {
2854 	unsigned __int64 ID;   //跨服国战信息ID，0为无效ID,数据库设为自增
2855 	DWORD dwPublicWorldID;   //所属公共区世界ID
2856 	DWORD dwStartTime;   //开始时间
2856 	DWORD dwStartTime;   //开始时间
2857 	DWORD dwEndTime;   //结束时间
2858 	DWORD dwType;   //跨服国战类型
2859 	DWORD dwAttackWorldID;   //进攻国家所在游戏世界ID
2860 	DWORD dwAttackCountryID;   //进攻国家ID
2924 struct TWorldCountryWarLog
2925 {
2926 	DWORD dwID;   //跨服国战日志信息ID
2927 	DWORD dwAddTime;   //跨服国战日志写入时间
2928 	DWORD dwPublicWorldID;   //所属公共区世界ID
2929 	DWORD dwStartTime;   //开始时间
2929 	DWORD dwStartTime;   //开始时间
2930 	DWORD dwPlayTime;   //战斗时长(秒)
2931 	DWORD dwType;   //跨服国战类型
2932 	DWORD dwAttackWorldID;   //进攻国家所在游戏世界ID
2933 	DWORD dwAttackCountryID;   //进攻国家ID
2956 struct TWorldCountryLink
2957 {
2958 	DWORD dwID;   //跨服国家边境连通信息ID，(游戏世界ID,国家ID,类型)组合编号
2959 	DWORD dwPublicWorldID;   //所属公共区世界ID
2959 	DWORD dwPublicWorldID;   //所属公共区世界ID
2960 	DWORD dwType;   //跨服国家边境类型
2961 	DWORD dwWorldID;   //国家所在游戏世界ID
2962 	DWORD dwCountryID;   //国家ID
3938   int unpack(ORM::COrmSerializer *pOrmSerializer);
3940 };
3941 // 跨服国家战列表操作
3942 struct TCountryWorldWarList_Set
3943 {
3951   int unpack(ORM::COrmSerializer *pOrmSerializer);
3953 };
3954 // 跨服国家战列表-请求
3955 struct TMSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ
3956 {
3955 struct TMSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ
3956 {
3957 	unsigned __int64 ID;   //跨服国战信息ID，0为忽略
3958 	DWORD dwPublicWorldID;   //所属公共区世界ID，0为忽略
3959 	DWORD dwDays;   //只读出最近多少天的记录，0为忽略
3966   int unpack(ORM::COrmSerializer *pOrmSerializer);
3968 };
3969 // 跨服国家战列表-应答
3970 struct TMSG_DBSVR_COUNTRY_WORLDWAR_GET_RSP
3971 {
3971 {
3972 	WORD Result;   //0成功，其他看错误码
3973 	unsigned __int64 ID;   //跨服国战信息ID，0为忽略
3974 	DWORD dwPublicWorldID;   //所属公共区世界ID，0为忽略
3975 	DWORD dwDays;   //只读出最近多少天的记录，0为忽略
3984   int unpack(ORM::COrmSerializer *pOrmSerializer);
3986 };
3987 // 跨服国家战添加-请求
3988 struct TMSG_DBSVR_COUNTRY_WORLDWAR_ADD_REQ
3989 {
3989 {
3990 	DWORD dwTmpID;   //临时id,直通
3991 	TWorldCountryWar stItem;   //跨服国战信息
3992   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
3993   int pack(ORM::COrmSerializer *pOrmSerializer);
3997   int unpack(ORM::COrmSerializer *pOrmSerializer);
3999 };
4000 // 跨服国家战添加-应答
4001 struct TMSG_DBSVR_COUNTRY_WORLDWAR_ADD_RSP
4002 {
4011   int unpack(ORM::COrmSerializer *pOrmSerializer);
4013 };
4014 // 跨服国家战更新-请求
4015 struct TMSG_DBSVR_COUNTRY_WORLDWAR_UPD_REQ
4016 {
4023   int unpack(ORM::COrmSerializer *pOrmSerializer);
4025 };
4026 // 跨服国家战更新结果
4027 struct TCountryWorldWarUpdateResult
4028 {
4027 struct TCountryWorldWarUpdateResult
4028 {
4029 	unsigned __int64 ID;   //跨服国战信息ID
4030 	WORD Result;   //0成功，其他看错误码
4031   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
4036   int unpack(ORM::COrmSerializer *pOrmSerializer);
4038 };
4039 // 跨服国家战更新-应答
4040 struct TMSG_DBSVR_COUNTRY_WORLDWAR_UPD_RSP
4041 {
4050   int unpack(ORM::COrmSerializer *pOrmSerializer);
4052 };
4053 // 跨服国家战记录-请求
4054 struct TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ
4055 {
4054 struct TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ
4055 {
4056 	DWORD dwID;   //跨服国战日志信息ID
4057 	DWORD dwAddTime;   //跨服国战日志写入时间
4058 	DWORD dwPlayerID;   //查询的角色ID,用来返回找到角色并发给他
4059   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
4064   int unpack(ORM::COrmSerializer *pOrmSerializer);
4066 };
4067 // 跨服国家战记录-应答
4068 struct TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_RSP
4069 {
4069 {
4070 	WORD Result;   //0成功，其他看错误码
4071 	DWORD dwID;   //跨服国战日志信息ID
4072 	DWORD dwAddTime;   //跨服国战日志写入时间
4073 	DWORD dwPlayerID;   //查询的角色ID,用来返回找到角色并发给他
4074 	int nItemCount;   //总数
4081   int unpack(ORM::COrmSerializer *pOrmSerializer);
4083 };
4084 // 跨服国家战记录添加-请求
4085 struct TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_REQ
4086 {
4093   int unpack(ORM::COrmSerializer *pOrmSerializer);
4095 };
4096 // 跨服国家战记录添加-应答
4097 struct TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_RSP
4098 {
4098 {
4099 	WORD Result;   //0成功，其他看错误码
4100 	DWORD dwID;   //跨服国战日志信息ID
4101 	DWORD dwAddTime;   //跨服国战日志写入时间
4102   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
4103   int pack(ORM::COrmSerializer *pOrmSerializer);
4107   int unpack(ORM::COrmSerializer *pOrmSerializer);
4109 };
4110 // 跨服国家战列表操作
4111 struct TCountryWorldLinkList_Set
4112 {
4124 struct TMSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ
4125 {
4126 	DWORD dwID;   //跨服国战日志信息ID
4127 	DWORD dwPublicWorldID;   //所属公共区世界ID
4128   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
4138 {
4139 	WORD Result;   //0成功，其他看错误码
4140 	DWORD dwID;   //跨服国战日志信息ID
4141 	DWORD dwPublicWorldID;   //所属公共区世界ID
4142 	int nTotalCount;   //总数
4149   int unpack(ORM::COrmSerializer *pOrmSerializer);
4151 };
4152 // 跨服国家战记录添加-请求
4153 struct TMSG_DBSVR_COUNTRY_WORLDLINK_ADD_REQ
4154 {
4161   int unpack(ORM::COrmSerializer *pOrmSerializer);
4163 };
4164 // 跨服国家战记录添加-应答
4165 struct TMSG_DBSVR_COUNTRY_WORLDLINK_ADD_RSP
4166 {
4166 {
4167 	WORD Result;   //0成功，其他看错误码
4168 	DWORD dwID;   //跨服国战日志信息ID
4169 	DWORD dwPublicWorldID;   //所属公共区世界ID
4170   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
5806 const int MSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_REQ = (160+3);   //163  国家落日战记录添加-请求
5807 const int MSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_RSP = (160+4);   //164  国家落日战记录添加-应答
5808 const int MSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ = (170+1);   //171  跨服国家战列表-请求
5809 const int MSG_DBSVR_COUNTRY_WORLDWAR_GET_RSP = (170+2);   //172  跨服国家战列表-应答
5810 const int MSG_DBSVR_COUNTRY_WORLDWAR_ADD_REQ = (170+3);   //173  跨服国家战添加-请求
5811 const int MSG_DBSVR_COUNTRY_WORLDWAR_ADD_RSP = (170+4);   //174  跨服国家战添加-应答
5812 const int MSG_DBSVR_COUNTRY_WORLDWAR_UPD_REQ = (170+5);   //175  跨服国家战更新-请求
5813 const int MSG_DBSVR_COUNTRY_WORLDWAR_UPD_RSP = (170+6);   //176  跨服国家战更新-应答
5814 const int MSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ = (180+1);   //181  跨服国家战记录-请求
5815 const int MSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_RSP = (180+2);   //182  跨服国家战记录-应答
5816 const int MSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_REQ = (180+3);   //183  跨服国家战记录添加-请求
5817 const int MSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_RSP = (180+4);   //184  跨服国家战记录添加-应答
5818 const int MSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ = (190+1);   //191  国家边境连通列表-请求
5819 const int MSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP = (190+2);   //192  国家边境连通列表-应答
5818 const int MSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ = (190+1);   //191  国家边境连通列表-请求
5819 const int MSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP = (190+2);   //192  国家边境连通列表-应答
5820 const int MSG_DBSVR_COUNTRY_WORLDLINK_ADD_REQ = (190+3);   //193  跨服国家战记录添加-请求
5821 const int MSG_DBSVR_COUNTRY_WORLDLINK_ADD_RSP = (190+4);   //194  跨服国家战记录添加-应答
5822 const int MSG_DBSVR_COUNTRY_PLAYER_GET_REQ = (200+1);   //201  国家玩家查询-请求
5823 const int MSG_DBSVR_COUNTRY_PLAYER_GET_RSP = (200+2);   //202  国家玩家查询-应答
5972         TMSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_REQ stTMSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_REQ;   // MSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_REQ   国家落日战记录添加-请求
5973         TMSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_RSP stTMSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_RSP;   // MSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_RSP   国家落日战记录添加-应答
5974         TMSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ stTMSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ;   // MSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ   跨服国家战列表-请求
5975         TMSG_DBSVR_COUNTRY_WORLDWAR_GET_RSP stTMSG_DBSVR_COUNTRY_WORLDWAR_GET_RSP;   // MSG_DBSVR_COUNTRY_WORLDWAR_GET_RSP   跨服国家战列表-应答
5976         TMSG_DBSVR_COUNTRY_WORLDWAR_ADD_REQ stTMSG_DBSVR_COUNTRY_WORLDWAR_ADD_REQ;   // MSG_DBSVR_COUNTRY_WORLDWAR_ADD_REQ   跨服国家战添加-请求
5977         TMSG_DBSVR_COUNTRY_WORLDWAR_ADD_RSP stTMSG_DBSVR_COUNTRY_WORLDWAR_ADD_RSP;   // MSG_DBSVR_COUNTRY_WORLDWAR_ADD_RSP   跨服国家战添加-应答
5978         TMSG_DBSVR_COUNTRY_WORLDWAR_UPD_REQ stTMSG_DBSVR_COUNTRY_WORLDWAR_UPD_REQ;   // MSG_DBSVR_COUNTRY_WORLDWAR_UPD_REQ   跨服国家战更新-请求
5979         TMSG_DBSVR_COUNTRY_WORLDWAR_UPD_RSP stTMSG_DBSVR_COUNTRY_WORLDWAR_UPD_RSP;   // MSG_DBSVR_COUNTRY_WORLDWAR_UPD_RSP   跨服国家战更新-应答
5980         TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ stTMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ;   // MSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ   跨服国家战记录-请求
5981         TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_RSP stTMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_RSP;   // MSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_RSP   跨服国家战记录-应答
5982         TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_REQ stTMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_REQ;   // MSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_REQ   跨服国家战记录添加-请求
5983         TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_RSP stTMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_RSP;   // MSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_RSP   跨服国家战记录添加-应答
5984         TMSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ stTMSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ;   // MSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ   国家边境连通列表-请求
5985         TMSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP stTMSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP;   // MSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP   国家边境连通列表-应答
5984         TMSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ stTMSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ;   // MSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ   国家边境连通列表-请求
5985         TMSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP stTMSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP;   // MSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP   国家边境连通列表-应答
5986         TMSG_DBSVR_COUNTRY_WORLDLINK_ADD_REQ stTMSG_DBSVR_COUNTRY_WORLDLINK_ADD_REQ;   // MSG_DBSVR_COUNTRY_WORLDLINK_ADD_REQ   跨服国家战记录添加-请求
5987         TMSG_DBSVR_COUNTRY_WORLDLINK_ADD_RSP stTMSG_DBSVR_COUNTRY_WORLDLINK_ADD_RSP;   // MSG_DBSVR_COUNTRY_WORLDLINK_ADD_RSP   跨服国家战记录添加-应答
5988         TMSG_DBSVR_COUNTRY_PLAYER_GET_REQ stTMSG_DBSVR_COUNTRY_PLAYER_GET_REQ;   // MSG_DBSVR_COUNTRY_PLAYER_GET_REQ   国家玩家查询-请求
5989         TMSG_DBSVR_COUNTRY_PLAYER_GET_RSP stTMSG_DBSVR_COUNTRY_PLAYER_GET_RSP;   // MSG_DBSVR_COUNTRY_PLAYER_GET_RSP   国家玩家查询-应答

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Common\dbsvr_pol\DBSvrProtocolImport.h 263 KB H 文件 2014/2/25 14:22:00 2018/10/23 19:42:27 2018/10/23 19:42:27 60
620 	DWORD dwStrikeBankMoney;   //银行保存徽章
621 	WORD nDayPlayCount;   //每天竞技比赛局数
622 	DWORD dwWarScore;   //跨服国战积分
623 	DWORD dwData1;   //备用,调试用
624 	WORD nGiftCount;   //国战获得礼包次数
2852 struct TWorldCountryWar
2853 {
2854 	unsigned __int64 ID;   //跨服国战信息ID，0为无效ID,数据库设为自增
2855 	DWORD dwPublicWorldID;   //所属公共区世界ID
2856 	DWORD dwStartTime;   //开始时间
2856 	DWORD dwStartTime;   //开始时间
2857 	DWORD dwEndTime;   //结束时间
2858 	DWORD dwType;   //跨服国战类型
2859 	DWORD dwAttackWorldID;   //进攻国家所在游戏世界ID
2860 	DWORD dwAttackCountryID;   //进攻国家ID
2924 struct TWorldCountryWarLog
2925 {
2926 	DWORD dwID;   //跨服国战日志信息ID
2927 	DWORD dwAddTime;   //跨服国战日志写入时间
2928 	DWORD dwPublicWorldID;   //所属公共区世界ID
2929 	DWORD dwStartTime;   //开始时间
2929 	DWORD dwStartTime;   //开始时间
2930 	DWORD dwPlayTime;   //战斗时长(秒)
2931 	DWORD dwType;   //跨服国战类型
2932 	DWORD dwAttackWorldID;   //进攻国家所在游戏世界ID
2933 	DWORD dwAttackCountryID;   //进攻国家ID
2956 struct TWorldCountryLink
2957 {
2958 	DWORD dwID;   //跨服国家边境连通信息ID，(游戏世界ID,国家ID,类型)组合编号
2959 	DWORD dwPublicWorldID;   //所属公共区世界ID
2959 	DWORD dwPublicWorldID;   //所属公共区世界ID
2960 	DWORD dwType;   //跨服国家边境类型
2961 	DWORD dwWorldID;   //国家所在游戏世界ID
2962 	DWORD dwCountryID;   //国家ID
3938   int unpack(ORM::COrmSerializer *pOrmSerializer);
3940 };
3941 // 跨服国家战列表操作
3942 struct TCountryWorldWarList_Set
3943 {
3951   int unpack(ORM::COrmSerializer *pOrmSerializer);
3953 };
3954 // 跨服国家战列表-请求
3955 struct TMSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ
3956 {
3955 struct TMSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ
3956 {
3957 	unsigned __int64 ID;   //跨服国战信息ID，0为忽略
3958 	DWORD dwPublicWorldID;   //所属公共区世界ID，0为忽略
3959 	DWORD dwDays;   //只读出最近多少天的记录，0为忽略
3966   int unpack(ORM::COrmSerializer *pOrmSerializer);
3968 };
3969 // 跨服国家战列表-应答
3970 struct TMSG_DBSVR_COUNTRY_WORLDWAR_GET_RSP
3971 {
3971 {
3972 	WORD Result;   //0成功，其他看错误码
3973 	unsigned __int64 ID;   //跨服国战信息ID，0为忽略
3974 	DWORD dwPublicWorldID;   //所属公共区世界ID，0为忽略
3975 	DWORD dwDays;   //只读出最近多少天的记录，0为忽略
3984   int unpack(ORM::COrmSerializer *pOrmSerializer);
3986 };
3987 // 跨服国家战添加-请求
3988 struct TMSG_DBSVR_COUNTRY_WORLDWAR_ADD_REQ
3989 {
3989 {
3990 	DWORD dwTmpID;   //临时id,直通
3991 	TWorldCountryWar stItem;   //跨服国战信息
3992   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
3993   int pack(ORM::COrmSerializer *pOrmSerializer);
3997   int unpack(ORM::COrmSerializer *pOrmSerializer);
3999 };
4000 // 跨服国家战添加-应答
4001 struct TMSG_DBSVR_COUNTRY_WORLDWAR_ADD_RSP
4002 {
4011   int unpack(ORM::COrmSerializer *pOrmSerializer);
4013 };
4014 // 跨服国家战更新-请求
4015 struct TMSG_DBSVR_COUNTRY_WORLDWAR_UPD_REQ
4016 {
4023   int unpack(ORM::COrmSerializer *pOrmSerializer);
4025 };
4026 // 跨服国家战更新结果
4027 struct TCountryWorldWarUpdateResult
4028 {
4027 struct TCountryWorldWarUpdateResult
4028 {
4029 	unsigned __int64 ID;   //跨服国战信息ID
4030 	WORD Result;   //0成功，其他看错误码
4031   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
4036   int unpack(ORM::COrmSerializer *pOrmSerializer);
4038 };
4039 // 跨服国家战更新-应答
4040 struct TMSG_DBSVR_COUNTRY_WORLDWAR_UPD_RSP
4041 {
4050   int unpack(ORM::COrmSerializer *pOrmSerializer);
4052 };
4053 // 跨服国家战记录-请求
4054 struct TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ
4055 {
4054 struct TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ
4055 {
4056 	DWORD dwID;   //跨服国战日志信息ID
4057 	DWORD dwAddTime;   //跨服国战日志写入时间
4058 	DWORD dwPlayerID;   //查询的角色ID,用来返回找到角色并发给他
4059   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
4064   int unpack(ORM::COrmSerializer *pOrmSerializer);
4066 };
4067 // 跨服国家战记录-应答
4068 struct TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_RSP
4069 {
4069 {
4070 	WORD Result;   //0成功，其他看错误码
4071 	DWORD dwID;   //跨服国战日志信息ID
4072 	DWORD dwAddTime;   //跨服国战日志写入时间
4073 	DWORD dwPlayerID;   //查询的角色ID,用来返回找到角色并发给他
4074 	int nItemCount;   //总数
4081   int unpack(ORM::COrmSerializer *pOrmSerializer);
4083 };
4084 // 跨服国家战记录添加-请求
4085 struct TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_REQ
4086 {
4093   int unpack(ORM::COrmSerializer *pOrmSerializer);
4095 };
4096 // 跨服国家战记录添加-应答
4097 struct TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_RSP
4098 {
4098 {
4099 	WORD Result;   //0成功，其他看错误码
4100 	DWORD dwID;   //跨服国战日志信息ID
4101 	DWORD dwAddTime;   //跨服国战日志写入时间
4102   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
4103   int pack(ORM::COrmSerializer *pOrmSerializer);
4107   int unpack(ORM::COrmSerializer *pOrmSerializer);
4109 };
4110 // 跨服国家战列表操作
4111 struct TCountryWorldLinkList_Set
4112 {
4124 struct TMSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ
4125 {
4126 	DWORD dwID;   //跨服国战日志信息ID
4127 	DWORD dwPublicWorldID;   //所属公共区世界ID
4128   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
4138 {
4139 	WORD Result;   //0成功，其他看错误码
4140 	DWORD dwID;   //跨服国战日志信息ID
4141 	DWORD dwPublicWorldID;   //所属公共区世界ID
4142 	int nTotalCount;   //总数
4149   int unpack(ORM::COrmSerializer *pOrmSerializer);
4151 };
4152 // 跨服国家战记录添加-请求
4153 struct TMSG_DBSVR_COUNTRY_WORLDLINK_ADD_REQ
4154 {
4161   int unpack(ORM::COrmSerializer *pOrmSerializer);
4163 };
4164 // 跨服国家战记录添加-应答
4165 struct TMSG_DBSVR_COUNTRY_WORLDLINK_ADD_RSP
4166 {
4166 {
4167 	WORD Result;   //0成功，其他看错误码
4168 	DWORD dwID;   //跨服国战日志信息ID
4169 	DWORD dwPublicWorldID;   //所属公共区世界ID
4170   int pack(char *pBuffer, int iBufferLen, int &uiDataLen);
5806 const int MSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_REQ = (160+3);   //163  国家落日战记录添加-请求
5807 const int MSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_RSP = (160+4);   //164  国家落日战记录添加-应答
5808 const int MSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ = (170+1);   //171  跨服国家战列表-请求
5809 const int MSG_DBSVR_COUNTRY_WORLDWAR_GET_RSP = (170+2);   //172  跨服国家战列表-应答
5810 const int MSG_DBSVR_COUNTRY_WORLDWAR_ADD_REQ = (170+3);   //173  跨服国家战添加-请求
5811 const int MSG_DBSVR_COUNTRY_WORLDWAR_ADD_RSP = (170+4);   //174  跨服国家战添加-应答
5812 const int MSG_DBSVR_COUNTRY_WORLDWAR_UPD_REQ = (170+5);   //175  跨服国家战更新-请求
5813 const int MSG_DBSVR_COUNTRY_WORLDWAR_UPD_RSP = (170+6);   //176  跨服国家战更新-应答
5814 const int MSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ = (180+1);   //181  跨服国家战记录-请求
5815 const int MSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_RSP = (180+2);   //182  跨服国家战记录-应答
5816 const int MSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_REQ = (180+3);   //183  跨服国家战记录添加-请求
5817 const int MSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_RSP = (180+4);   //184  跨服国家战记录添加-应答
5818 const int MSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ = (190+1);   //191  国家边境连通列表-请求
5819 const int MSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP = (190+2);   //192  国家边境连通列表-应答
5818 const int MSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ = (190+1);   //191  国家边境连通列表-请求
5819 const int MSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP = (190+2);   //192  国家边境连通列表-应答
5820 const int MSG_DBSVR_COUNTRY_WORLDLINK_ADD_REQ = (190+3);   //193  跨服国家战记录添加-请求
5821 const int MSG_DBSVR_COUNTRY_WORLDLINK_ADD_RSP = (190+4);   //194  跨服国家战记录添加-应答
5822 const int MSG_DBSVR_COUNTRY_PLAYER_GET_REQ = (200+1);   //201  国家玩家查询-请求
5823 const int MSG_DBSVR_COUNTRY_PLAYER_GET_RSP = (200+2);   //202  国家玩家查询-应答
5972         TMSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_REQ stTMSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_REQ;   // MSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_REQ   国家落日战记录添加-请求
5973         TMSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_RSP stTMSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_RSP;   // MSG_DBSVR_COUNTRY_SIEGEWAR_LOG_ADD_RSP   国家落日战记录添加-应答
5974         TMSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ stTMSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ;   // MSG_DBSVR_COUNTRY_WORLDWAR_GET_REQ   跨服国家战列表-请求
5975         TMSG_DBSVR_COUNTRY_WORLDWAR_GET_RSP stTMSG_DBSVR_COUNTRY_WORLDWAR_GET_RSP;   // MSG_DBSVR_COUNTRY_WORLDWAR_GET_RSP   跨服国家战列表-应答
5976         TMSG_DBSVR_COUNTRY_WORLDWAR_ADD_REQ stTMSG_DBSVR_COUNTRY_WORLDWAR_ADD_REQ;   // MSG_DBSVR_COUNTRY_WORLDWAR_ADD_REQ   跨服国家战添加-请求
5977         TMSG_DBSVR_COUNTRY_WORLDWAR_ADD_RSP stTMSG_DBSVR_COUNTRY_WORLDWAR_ADD_RSP;   // MSG_DBSVR_COUNTRY_WORLDWAR_ADD_RSP   跨服国家战添加-应答
5978         TMSG_DBSVR_COUNTRY_WORLDWAR_UPD_REQ stTMSG_DBSVR_COUNTRY_WORLDWAR_UPD_REQ;   // MSG_DBSVR_COUNTRY_WORLDWAR_UPD_REQ   跨服国家战更新-请求
5979         TMSG_DBSVR_COUNTRY_WORLDWAR_UPD_RSP stTMSG_DBSVR_COUNTRY_WORLDWAR_UPD_RSP;   // MSG_DBSVR_COUNTRY_WORLDWAR_UPD_RSP   跨服国家战更新-应答
5980         TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ stTMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ;   // MSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_REQ   跨服国家战记录-请求
5981         TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_RSP stTMSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_RSP;   // MSG_DBSVR_COUNTRY_WORLDWAR_LOG_GET_RSP   跨服国家战记录-应答
5982         TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_REQ stTMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_REQ;   // MSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_REQ   跨服国家战记录添加-请求
5983         TMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_RSP stTMSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_RSP;   // MSG_DBSVR_COUNTRY_WORLDWAR_LOG_ADD_RSP   跨服国家战记录添加-应答
5984         TMSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ stTMSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ;   // MSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ   国家边境连通列表-请求
5985         TMSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP stTMSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP;   // MSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP   国家边境连通列表-应答
5984         TMSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ stTMSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ;   // MSG_DBSVR_COUNTRY_WORLDLINK_GET_REQ   国家边境连通列表-请求
5985         TMSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP stTMSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP;   // MSG_DBSVR_COUNTRY_WORLDLINK_GET_RSP   国家边境连通列表-应答
5986         TMSG_DBSVR_COUNTRY_WORLDLINK_ADD_REQ stTMSG_DBSVR_COUNTRY_WORLDLINK_ADD_REQ;   // MSG_DBSVR_COUNTRY_WORLDLINK_ADD_REQ   跨服国家战记录添加-请求
5987         TMSG_DBSVR_COUNTRY_WORLDLINK_ADD_RSP stTMSG_DBSVR_COUNTRY_WORLDLINK_ADD_RSP;   // MSG_DBSVR_COUNTRY_WORLDLINK_ADD_RSP   跨服国家战记录添加-应答
5988         TMSG_DBSVR_COUNTRY_PLAYER_GET_REQ stTMSG_DBSVR_COUNTRY_PLAYER_GET_REQ;   // MSG_DBSVR_COUNTRY_PLAYER_GET_REQ   国家玩家查询-请求
5989         TMSG_DBSVR_COUNTRY_PLAYER_GET_RSP stTMSG_DBSVR_COUNTRY_PLAYER_GET_RSP;   // MSG_DBSVR_COUNTRY_PLAYER_GET_RSP   国家玩家查询-应答

I:\work\source\武侠世界2\wxsj2\trunk\Common\DB_Struct.h 41 KB H 文件 2010/7/26 13:54:01 2018/10/23 18:17:27 2018/10/23 18:17:27 1
577 };
578 typedef struct _SKILL_DB_LOAD _SKILL_LIST;
580 //召唤兽跨服专用，不要写数据库
581 struct _Monster_Pet_DB
582 {

I:\work\source\武侠世界2\[src.cool]武侠世界2\Common\DB_Struct.h 41 KB H 文件 2010/7/26 13:54:01 2018/10/23 15:47:27 2018/10/23 15:47:27 1
577 };
578 typedef struct _SKILL_DB_LOAD _SKILL_LIST;
580 //召唤兽跨服专用，不要写数据库
581 struct _Monster_Pet_DB
582 {

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\LuaServer\CountryWarTaskTrigger.h 2 KB H 文件 2014/2/25 0:09:06 2018/10/23 20:05:22 2018/10/23 20:05:22 1
16 #include <string>
18 /**
19 @name : 跨服国战任务
20 @brief: 
21 */

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\LuaServer\CountryWarTaskTrigger.h 2 KB H 文件 2014/2/25 14:25:43 2018/10/23 19:44:15 2018/10/23 19:44:15 1
16 #include <string>
18 /**
19 @name : 跨服国战任务
20 @brief: 
21 */

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\CountryWar.h 18 KB H 文件 2014/2/25 0:08:44 2018/10/23 20:06:22 2018/10/23 20:06:22 6
5 ** 日  期:	2011-3-25
6 ** 版  本:	1.0
7 ** 描  述:	跨服国战系统
8 ** 应  用:  管理场景服中的所有国战战场
10 **************************** 修改记录 ******************************
64 	CountryWarTime_BuildGuard,			// 自动生成守卫
65 	CountryWarTime_DidaExit,			// 退出战场的滴答
66 	CountryWarTime_LinkBroad,			// 跨服国战连接
67 	CountryWarTime_BossState,			// 天师出生状态
68 	CountryWarTime_NoticeJoin,			// 通知玩家加入
158 	/** 资源事件执行接口
159 	@param   WORD wEventID		:事件ID
160 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
161 	@param   WORD dwWarID		:相关战场ID
162 	@param   WORD dwResID		:相关战争资源配置ID
170 	/** 资源投票事件
171 	@param   WORD wEventID		:事件ID
172 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
173 	@param   WORD dwWarID		:相关战场ID
174 	@param   WORD dwResID		:相关战争资源配置ID
512 	// 发信息消息给场景服 0=所有阵营都发送； bSendFriend=true发送包括盟国
513 	bool SendDataToBridgeZone(DWORD dwCampID,DWORD dwMsgCode,DWORD dwUserData1=0,DWORD dwUserData2=0,DWORD dwUserData3=0,const char * pData=0,DWORD dwLen=0,bool bSendFriend=true);
515 	// 跨服发送消息
516 	void WorldBroadcastWarTips(DWORD nTipType, DWORD nChannelType, DWORD nInfoPos,const char * pAttackTips, const char * pDefendTips);
518 	// 更新国战场战斗结果信息到社会服
534 	void ReachScorePrize(IPerson *pPerson, DWORD dwTotalScore, bool bWin, int &nPrizeMustScore, int &nExp, int &nCredit);
536 public:
538 	DWORD m_dwTaskWorldWarID;							// 跨服国战信息ID，0为无效ID
539 	DWORD m_dwTaskPublicWorldID;						// 所属公共区世界ID
542 private:

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\MatchClient\CountryWar.h 5 KB H 文件 2014/2/25 8:34:41 2018/10/23 19:52:17 2018/10/23 19:52:17 6
131 	*/
132 	virtual bool RequestSetNotice(DWORD dwWarID,DWORD dwCampIndex,const char * szBuf);
134 	/** 取得跨服国战信息结果日志信息
135 	@return  跨服国战信息结果日志信息
136 	*/
137 	virtual SWorldCountryWarResultInfo*  GetWorldCountryWarResultInfo(void);
137 	virtual SWorldCountryWarResultInfo*  GetWorldCountryWarResultInfo(void);
138 	
139 	/** 取得跨服国战信息日志信息的排名节点信息
140 	@param  DWORD dwIndex : 序号
141 	@param   BYTE dwType: 对象类型	1表示玩家，2表示帮会
140 	@param  DWORD dwIndex : 序号
141 	@param   BYTE dwType: 对象类型	1表示玩家，2表示帮会
142 	@return  查询到的跨服国战信息日志信息排名节点信息
143 	*/
144 	virtual const SWorldCountryWarOrderNodeInfo*  GetWorldCountryWarLogOrderNodeInfo(DWORD dwIndex,BYTE dwType);
144 	virtual const SWorldCountryWarOrderNodeInfo*  GetWorldCountryWarLogOrderNodeInfo(DWORD dwIndex,BYTE dwType);
146 	/** 获取本帮帮会积分数据
147 	@param DWORD dwScoreID : 跨服国战积分类型ID EMWarScoreFlag  
148 	@return
149 	*/
175 	// 国战玩法状态状态变化时间
176 	DWORD						m_dwStateTime;
177 	// 跨服国战信息结果日志信息
178 	SWorldCountryWarResultInfo	m_warResultInfo;
179 	// 呆在复活点的时长

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\CountryWar.h 18 KB H 文件 2014/2/25 14:27:00 2018/10/23 19:45:09 2018/10/23 19:45:09 6
5 ** 日  期:	2011-3-25
6 ** 版  本:	1.0
7 ** 描  述:	跨服国战系统
8 ** 应  用:  管理场景服中的所有国战战场
10 **************************** 修改记录 ******************************
64 	CountryWarTime_BuildGuard,			// 自动生成守卫
65 	CountryWarTime_DidaExit,			// 退出战场的滴答
66 	CountryWarTime_LinkBroad,			// 跨服国战连接
67 	CountryWarTime_BossState,			// 天师出生状态
68 	CountryWarTime_NoticeJoin,			// 通知玩家加入
158 	/** 资源事件执行接口
159 	@param   WORD wEventID		:事件ID
160 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
161 	@param   WORD dwWarID		:相关战场ID
162 	@param   WORD dwResID		:相关战争资源配置ID
170 	/** 资源投票事件
171 	@param   WORD wEventID		:事件ID
172 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
173 	@param   WORD dwWarID		:相关战场ID
174 	@param   WORD dwResID		:相关战争资源配置ID
512 	// 发信息消息给场景服 0=所有阵营都发送； bSendFriend=true发送包括盟国
513 	bool SendDataToBridgeZone(DWORD dwCampID,DWORD dwMsgCode,DWORD dwUserData1=0,DWORD dwUserData2=0,DWORD dwUserData3=0,const char * pData=0,DWORD dwLen=0,bool bSendFriend=true);
515 	// 跨服发送消息
516 	void WorldBroadcastWarTips(DWORD nTipType, DWORD nChannelType, DWORD nInfoPos,const char * pAttackTips, const char * pDefendTips);
518 	// 更新国战场战斗结果信息到社会服
534 	void ReachScorePrize(IPerson *pPerson, DWORD dwTotalScore, bool bWin, int &nPrizeMustScore, int &nExp, int &nCredit);
536 public:
538 	DWORD m_dwTaskWorldWarID;							// 跨服国战信息ID，0为无效ID
539 	DWORD m_dwTaskPublicWorldID;						// 所属公共区世界ID
542 private:

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\MatchClient\CountryWar.h 5 KB H 文件 2014/2/25 13:44:48 2018/10/23 19:34:25 2018/10/23 19:34:25 6
131 	*/
132 	virtual bool RequestSetNotice(DWORD dwWarID,DWORD dwCampIndex,const char * szBuf);
134 	/** 取得跨服国战信息结果日志信息
135 	@return  跨服国战信息结果日志信息
136 	*/
137 	virtual SWorldCountryWarResultInfo*  GetWorldCountryWarResultInfo(void);
137 	virtual SWorldCountryWarResultInfo*  GetWorldCountryWarResultInfo(void);
138 	
139 	/** 取得跨服国战信息日志信息的排名节点信息
140 	@param  DWORD dwIndex : 序号
141 	@param   BYTE dwType: 对象类型	1表示玩家，2表示帮会
140 	@param  DWORD dwIndex : 序号
141 	@param   BYTE dwType: 对象类型	1表示玩家，2表示帮会
142 	@return  查询到的跨服国战信息日志信息排名节点信息
143 	*/
144 	virtual const SWorldCountryWarOrderNodeInfo*  GetWorldCountryWarLogOrderNodeInfo(DWORD dwIndex,BYTE dwType);
144 	virtual const SWorldCountryWarOrderNodeInfo*  GetWorldCountryWarLogOrderNodeInfo(DWORD dwIndex,BYTE dwType);
146 	/** 获取本帮帮会积分数据
147 	@param DWORD dwScoreID : 跨服国战积分类型ID EMWarScoreFlag  
148 	@return
149 	*/
175 	// 国战玩法状态状态变化时间
176 	DWORD						m_dwStateTime;
177 	// 跨服国战信息结果日志信息
178 	SWorldCountryWarResultInfo	m_warResultInfo;
179 	// 呆在复活点的时长

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\CountryService\CountryService.h 35 KB H 文件 2014/2/25 0:21:26 2018/10/23 20:08:52 2018/10/23 20:08:52 5
425 	*/
426 	virtual IMapRecover*  GetMapRecoverPart(void);
428 	/** 取地跨服国战系统接口
429 	@param   
430 	@return  
656 	*/
657 	virtual bool SetGameNoticeInfo(DWORD dwShowTimes,const char * szTitle,const char * szUrl=NULL);
659 	/** 本区是否能开跨服国战
660 	@return  成功否
661 	*/
733 	// 更新共享国家信息列表到客户端,dwClientID:发向的客户端ID,为0时广播到所有服务器,nUpdateType:更新类型 0.全部,1.新增,修改,dwUpdateWorldID:要更新信息的游戏世界ID
734 	void UpdateWorldCountryToClient(DWORD dwClientID,BYTE nUpdateType,DWORD dwWorldID,DWORD dwServerID,DWORD dwCountryID);
735 	// 跨服更新共享国家信息列表到
736 	void SendWorldCountryToBridgeServer(DWORD dwServerID,DWORD dwCountryID);
737 	// 构造函数
855 	// CMD操作结果
856 	void OnGetGMCmdResultData(ulong endpointId, ulong actionId, SGameMsgHead* head,void* data, size_t len);
857 	// 请求跨服国战信息消息
858 	void OnRequestWorldWarInfo(ulong endpointId, ulong actionId, SGameMsgHead* head,void* data, size_t len);
860 	//////////////////////////////////////////////////////////////////////////
1017 	// 地图光复系统数据对象
1018 	CMapRecover					m_MapRecoverInfo;
1020 	// 跨服国战系统对象
1021 	CWorldWar					m_WorldWar;
1023 	// 落日战系统对象

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\CountryService\CountryService.h 35 KB H 文件 2014/2/25 14:30:52 2018/10/23 19:46:33 2018/10/23 19:46:33 5
425 	*/
426 	virtual IMapRecover*  GetMapRecoverPart(void);
428 	/** 取地跨服国战系统接口
429 	@param   
430 	@return  
656 	*/
657 	virtual bool SetGameNoticeInfo(DWORD dwShowTimes,const char * szTitle,const char * szUrl=NULL);
659 	/** 本区是否能开跨服国战
660 	@return  成功否
661 	*/
733 	// 更新共享国家信息列表到客户端,dwClientID:发向的客户端ID,为0时广播到所有服务器,nUpdateType:更新类型 0.全部,1.新增,修改,dwUpdateWorldID:要更新信息的游戏世界ID
734 	void UpdateWorldCountryToClient(DWORD dwClientID,BYTE nUpdateType,DWORD dwWorldID,DWORD dwServerID,DWORD dwCountryID);
735 	// 跨服更新共享国家信息列表到
736 	void SendWorldCountryToBridgeServer(DWORD dwServerID,DWORD dwCountryID);
737 	// 构造函数
855 	// CMD操作结果
856 	void OnGetGMCmdResultData(ulong endpointId, ulong actionId, SGameMsgHead* head,void* data, size_t len);
857 	// 请求跨服国战信息消息
858 	void OnRequestWorldWarInfo(ulong endpointId, ulong actionId, SGameMsgHead* head,void* data, size_t len);
860 	//////////////////////////////////////////////////////////////////////////
1017 	// 地图光复系统数据对象
1018 	CMapRecover					m_MapRecoverInfo;
1020 	// 跨服国战系统对象
1021 	CWorldWar					m_WorldWar;
1023 	// 落日战系统对象

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\CountryServer\CountryServer.h 23 KB H 文件 2014/2/25 0:05:38 2018/10/23 20:04:03 2018/10/23 20:04:03 3
506 	*/
507 	virtual int GetCountributePeriod(void);
509 	/** 新增跨服国战日志
510 	@param   SWorldCountryWarLogInfo &addNode	: 日志信息
511 	@param   DWORD dwSaveToWorldID				: 要保存到的游戏区ID
682 	*/
683 	void OnCreatureStopHere(WORD wEventID, BYTE bSrcType, DWORD dwSrcID, LPCSTR pszContext, int nLen);
686 	/** 数据库请求返回回调方法 添加跨服国战结果信息
687 	@param   nCmdID ：命令ＩＤ
688 	@param   nDBRetCode：数据库请求返回值，参考上面定义
697 	*/	
698 	void OnDBReturn_AddWarLog(int nCmdID, int nDBRetCode, char * pszDBRetDesc, int nQueueIndex, char * pOutData, int nOutLen);
700 	/** 数据库请求返回回调方法 查询跨服国战结果信息
701 	@param   nCmdID ：命令ＩＤ
702 	@param   nDBRetCode：数据库请求返回值，参考上面定义

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\CountryServer\CountryServer.h 23 KB H 文件 2014/2/25 14:23:49 2018/10/23 19:43:17 2018/10/23 19:43:17 3
506 	*/
507 	virtual int GetCountributePeriod(void);
509 	/** 新增跨服国战日志
510 	@param   SWorldCountryWarLogInfo &addNode	: 日志信息
511 	@param   DWORD dwSaveToWorldID				: 要保存到的游戏区ID
682 	*/
683 	void OnCreatureStopHere(WORD wEventID, BYTE bSrcType, DWORD dwSrcID, LPCSTR pszContext, int nLen);
686 	/** 数据库请求返回回调方法 添加跨服国战结果信息
687 	@param   nCmdID ：命令ＩＤ
688 	@param   nDBRetCode：数据库请求返回值，参考上面定义
697 	*/	
698 	void OnDBReturn_AddWarLog(int nCmdID, int nDBRetCode, char * pszDBRetDesc, int nQueueIndex, char * pOutData, int nOutLen);
700 	/** 数据库请求返回回调方法 查询跨服国战结果信息
701 	@param   nCmdID ：命令ＩＤ
702 	@param   nDBRetCode：数据库请求返回值，参考上面定义

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\CountryClient\CountryClient.h 29 KB H 文件 2014/2/25 8:25:18 2018/10/23 19:51:04 2018/10/23 19:51:04 21
135 	// 共享国家信息排序结果列表
136 	typedef list<SClientBridgeCountrySortNode> TLIST_BridgeCountrySortResultList;
138 	// 跨服国战列表，以ID 为关键字
139 	typedef map<DWORD,SCountryWorldWarInfo> TMAP_CountryWorldWar;
139 	typedef map<DWORD,SCountryWorldWarInfo> TMAP_CountryWorldWar;
141 	// 跨服国家边境连通信息列表，以(游戏世界ID,国家ID,类型)组合编号 为关键字
142 	typedef map<DWORD,SCountryWorldLinkInfo> TMAP_CountryWorldLink;
144 public:
522 	*/
523 	virtual void PrintGameWorldListInfo();
525 	/** 取得跨服国战信息日志信息
526 	@param  
527 	@param   
526 	@param  
527 	@param   
528 	@return  查询到的跨服国战信息日志信息
529 	*/
530 	virtual const SWorldCountryWarLogInfo*  GetWorldCountryWarLogInfo(void);
529 	*/
530 	virtual const SWorldCountryWarLogInfo*  GetWorldCountryWarLogInfo(void);
532 	/** 取得跨服国战信息日志信息的排名节点信息
533 	@param  DWORD dwIndex : 序号
534 	@param   BYTE dwType: 对象类型	1表示玩家，2表示帮会
533 	@param  DWORD dwIndex : 序号
534 	@param   BYTE dwType: 对象类型	1表示玩家，2表示帮会
535 	@return  查询到的跨服国战信息日志信息排名节点信息
536 	*/
537 	virtual const SWorldCountryWarOrderNodeInfo*  GetWorldCountryWarLogOrderNodeInfo(DWORD dwIndex,BYTE dwType);
536 	*/
537 	virtual const SWorldCountryWarOrderNodeInfo*  GetWorldCountryWarLogOrderNodeInfo(DWORD dwIndex,BYTE dwType);
540 	/** 请求取得跨服国战信息日志信息
541 	@param  DWORD dwID 			: 跨服国战日志信息ID
542 	@param  DWORD dwAddTime 	: 跨服国战日志写入时间
543 	*/
544 	virtual void  RequestWorldCountryWarLog(DWORD dwID ,DWORD dwAddTime);
575 	*/
576 	virtual IBridgeCountry * GetBridgeCountry(DWORD dwWorldID,DWORD dwCountryID);
578 	/**  请求跨服国战信息
579 	@return  
580 	*/
600 	*/
601 	virtual const SCountryWorldWarInfo * WarGetListData(void);
603 	/** 取得指定国家的跨服国战信息
604 	DWORD dwWorldID			: 游戏世界ID
605 	DWORD dwCountryID		: 国家ID
619 	//   取得列表当前指向的数据
620 	virtual SCountryWorldLinkInfo * Link_GetListData(void);
622 	/** 取得跨服国家边境连通信息
623 	@return  SCountryWorldLinkInfo * 边境连通信息
624 	*/
624 	*/
625 	virtual	SCountryWorldLinkInfo *	GetCountryWorldLinkInfo(DWORD dwWorldID,DWORD dwCountryID,DWORD dwType);
627 	/** 取得跨服国家边境连通信息
628 	@return  SCountryWorldLinkInfo * 边境连通信息
629 	*/
630 	virtual	SCountryWorldLinkInfo *	GetCountryWorldLinkInfoByID(DWORD dwID);
631 	
632 	// 取得跨服国家边境连通编号以(游戏世界ID,国家ID,类型)组合编号 为关键字
633 	virtual DWORD GetCountryWorldLinkKey(DWORD dwWorldID,DWORD dwCountryID,DWORD dwType);
635 	/** 获取巨兽配置信息
731 	// 查询玩家信息数据结构
732 	SCountryPlayerInfo	m_FindPlayerInfo;
734 	// 跨服国战信息日志信息
735 	SWorldCountryWarLogInfo m_worldWarLogInfo;
735 	SWorldCountryWarLogInfo m_worldWarLogInfo;
737 	// 取得指定国家的跨服国战信息数据结构
738 	SClientWorldWarCountryGetInfo m_WorldWarGetInfo;
740 	// 是否已进入游戏
837 	*/
838 	void OnMsgGetPlayerInfo( ulong actionId, SGameMsgHead* head,void* data, size_t len);
840 	// 查询跨服国战结果信息
841 	void OnMsgGetWorldWarLogInfo( ulong actionId, SGameMsgHead* head,void* data, size_t len);
843 	/** 更新全局数据
866 	// 社会服发送给客户端 更新国战记录信息
867 	void OnMsgWorldWarInfoUpdate(ulong actionId, SGameMsgHead* head,void* data, size_t len);
869 	// 检查国家在跨服国战中的参战类型
870 	DWORD CheckCountryWorldWarType(DWORD dwWorldID,DWORD dwCountryID,SCountryWorldWarInfo &node);
872 	//属性
901 	// CMD输出字串
902 	char *						m_szCmdOutString;
904 	// 跨服国战对象列表
905 	TMAP_CountryWorldWar m_mapWorldWar;
906 	// 列表当前指针
908 	// 是否列表结尾了
909 	bool	m_bEndList1;
910 	// 最新跨服国战对象列表时间,用来请求数据,一样的时间就不发给客户端
911 	DWORD	m_dwLastWarInfoTime;
911 	DWORD	m_dwLastWarInfoTime;
913 	// 跨服国家边境连通信息列表，以(游戏世界ID,国家ID,类型)组合编号 为关键字
914 	TMAP_CountryWorldLink m_mapWorldLink;
915 	// 列表当前指针

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\CountryClient\CountryClient.h 27 KB H 文件 2014/2/25 13:42:00 2018/10/23 19:33:54 2018/10/23 19:33:54 21
135 	// 共享国家信息排序结果列表
136 	typedef list<SClientBridgeCountrySortNode> TLIST_BridgeCountrySortResultList;
138 	// 跨服国战列表，以ID 为关键字
139 	typedef map<DWORD,SCountryWorldWarInfo> TMAP_CountryWorldWar;
139 	typedef map<DWORD,SCountryWorldWarInfo> TMAP_CountryWorldWar;
141 	// 跨服国家边境连通信息列表，以(游戏世界ID,国家ID,类型)组合编号 为关键字
142 	typedef map<DWORD,SCountryWorldLinkInfo> TMAP_CountryWorldLink;
144 public:
522 	*/
523 	virtual void PrintGameWorldListInfo();
525 	/** 取得跨服国战信息日志信息
526 	@param  
527 	@param   
526 	@param  
527 	@param   
528 	@return  查询到的跨服国战信息日志信息
529 	*/
530 	virtual const SWorldCountryWarLogInfo*  GetWorldCountryWarLogInfo(void);
529 	*/
530 	virtual const SWorldCountryWarLogInfo*  GetWorldCountryWarLogInfo(void);
532 	/** 取得跨服国战信息日志信息的排名节点信息
533 	@param  DWORD dwIndex : 序号
534 	@param   BYTE dwType: 对象类型	1表示玩家，2表示帮会
533 	@param  DWORD dwIndex : 序号
534 	@param   BYTE dwType: 对象类型	1表示玩家，2表示帮会
535 	@return  查询到的跨服国战信息日志信息排名节点信息
536 	*/
537 	virtual const SWorldCountryWarOrderNodeInfo*  GetWorldCountryWarLogOrderNodeInfo(DWORD dwIndex,BYTE dwType);
536 	*/
537 	virtual const SWorldCountryWarOrderNodeInfo*  GetWorldCountryWarLogOrderNodeInfo(DWORD dwIndex,BYTE dwType);
540 	/** 请求取得跨服国战信息日志信息
541 	@param  DWORD dwID 			: 跨服国战日志信息ID
542 	@param  DWORD dwAddTime 	: 跨服国战日志写入时间
543 	*/
544 	virtual void  RequestWorldCountryWarLog(DWORD dwID ,DWORD dwAddTime);
575 	*/
576 	virtual IBridgeCountry * GetBridgeCountry(DWORD dwWorldID,DWORD dwCountryID);
578 	/**  请求跨服国战信息
579 	@return  
580 	*/
600 	*/
601 	virtual const SCountryWorldWarInfo * WarGetListData(void);
603 	/** 取得指定国家的跨服国战信息
604 	DWORD dwWorldID			: 游戏世界ID
605 	DWORD dwCountryID		: 国家ID
619 	//   取得列表当前指向的数据
620 	virtual SCountryWorldLinkInfo * Link_GetListData(void);
622 	/** 取得跨服国家边境连通信息
623 	@return  SCountryWorldLinkInfo * 边境连通信息
624 	*/
624 	*/
625 	virtual	SCountryWorldLinkInfo *	GetCountryWorldLinkInfo(DWORD dwWorldID,DWORD dwCountryID,DWORD dwType);
627 	/** 取得跨服国家边境连通信息
628 	@return  SCountryWorldLinkInfo * 边境连通信息
629 	*/
630 	virtual	SCountryWorldLinkInfo *	GetCountryWorldLinkInfoByID(DWORD dwID);
631 	
632 	// 取得跨服国家边境连通编号以(游戏世界ID,国家ID,类型)组合编号 为关键字
633 	virtual DWORD GetCountryWorldLinkKey(DWORD dwWorldID,DWORD dwCountryID,DWORD dwType);
635 	/** 获取巨兽配置信息
665 	// 查询玩家信息数据结构
666 	SCountryPlayerInfo	m_FindPlayerInfo;
668 	// 跨服国战信息日志信息
669 	SWorldCountryWarLogInfo m_worldWarLogInfo;
669 	SWorldCountryWarLogInfo m_worldWarLogInfo;
671 	// 取得指定国家的跨服国战信息数据结构
672 	SClientWorldWarCountryGetInfo m_WorldWarGetInfo;
674 	// 是否已进入游戏
771 	*/
772 	void OnMsgGetPlayerInfo( ulong actionId, SGameMsgHead* head,void* data, size_t len);
774 	// 查询跨服国战结果信息
775 	void OnMsgGetWorldWarLogInfo( ulong actionId, SGameMsgHead* head,void* data, size_t len);
777 	/** 更新全局数据
800 	// 社会服发送给客户端 更新国战记录信息
801 	void OnMsgWorldWarInfoUpdate(ulong actionId, SGameMsgHead* head,void* data, size_t len);
803 	// 检查国家在跨服国战中的参战类型
804 	DWORD CheckCountryWorldWarType(DWORD dwWorldID,DWORD dwCountryID,SCountryWorldWarInfo &node);
806 	//属性
835 	// CMD输出字串
836 	char *						m_szCmdOutString;
838 	// 跨服国战对象列表
839 	TMAP_CountryWorldWar m_mapWorldWar;
840 	// 列表当前指针
842 	// 是否列表结尾了
843 	bool	m_bEndList1;
844 	// 最新跨服国战对象列表时间,用来请求数据,一样的时间就不发给客户端
845 	DWORD	m_dwLastWarInfoTime;
845 	DWORD	m_dwLastWarInfoTime;
847 	// 跨服国家边境连通信息列表，以(游戏世界ID,国家ID,类型)组合编号 为关键字
848 	TMAP_CountryWorldLink m_mapWorldLink;
849 	// 列表当前指针

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\CountryBorderWar.h 12 KB H 文件 2014/2/25 0:08:42 2018/10/23 20:06:22 2018/10/23 20:06:22 16
5 ** 日  期:	2011-7-26
6 ** 版  本:	1.0
7 ** 描  述:	跨服边境战场系统
8 ** 应  用:  管理场景服中的所有跨服边境战场
10 **************************** 修改记录 ******************************
11 ** 修改人: 
20 #include "War.h"
22 struct IPerson;
25 // 跨服边境战场关闭标志
26 enum EMCountryBorderWarEndFlag
27 {
30 	CountryBorderWarEndFlag_Force,			// 强制关闭
31 };
35 // 跨服边境管理类
36 class CCountryBorderWar: public ICountryBorderWar, public CWar
37 {
51 	/** 资源事件执行接口
52 	@param   WORD wEventID		:事件ID
53 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
54 	@param   WORD dwWarID		:相关战场ID
55 	@param   WORD dwResID		:相关战争资源配置ID
63 	/** 资源投票事件
64 	@param   WORD wEventID		:事件ID
65 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
66 	@param   WORD dwWarID		:相关战场ID
67 	@param   WORD dwResID		:相关战争资源配置ID
165 	virtual void OnTimer(unsigned long dwTimerID);
167 	////ICountryBorderWar//////////////////////////////////////////////////////////////////////
169 	/** 跨服边境接收外部数据结构信息
170 	@return  SCountryBorderWarInfo *
171 	*/
247 	/** 获取指定方向复活点坐标
248 	@param   IPerson * pPerson	: 战争玩家
249 	@param   DWORD dwTransFlag	: 跨服边境战场传送标识 EMCountryBorderWarTransFlag
250 	@param   bool bNeedOffset	: 复活点需要偏移
251 	@return POINT 复活点坐标
300 	// 战前初始化
301 	void OnRunStepInit(void);
303 	// 准备跨服帮会BOSS战场
304 	void OnReadyWar();
306 	// 结束战场
348 	// BOSS被杀死
349 	void OnBossDead(DWORD dwBossResID,LONGLONG uidBoss,LONGLONG uidMurderer);
351 	// 发送跨服帮会BOSS战场创建信息到参战游戏区的所有场景服
352 	bool SendWarCreateEventToZone(void);
352 	bool SendWarCreateEventToZone(void);
354 	// 发送跨服帮会BOSS战场结束信息到参战游戏区的所有场景服
355 	bool SendWarEndEventToZone(void);
355 	bool SendWarEndEventToZone(void);
357 	// 发送跨服帮会BOSS战场关闭信息到参战游戏区的所有场景服
358 	bool SendWarCloseEventToZone(void);
360 	// 发信息消息给场景服 0=所有阵营都发送
366 private:
368 	map<LONGLONG, int>				m_KillCoolList;			// 上次得积分的时间（Key由A->B组成）
369 	SCountryBorderWarInfo			m_CoutryBorderWarInfo;	// 跨服边境战接收外部数据结构信息
370 	
370 	
371 	DWORD							m_dwWarRunStep;			// 跨服边境战场状态标识 EMCountryBorderWarRunStep
372 	DWORD							m_dwForceEndWar;		// 跨服边境战场关闭标志 EMCountryBorderWarEndFlag
373 	DWORD							m_dwCloseTime;			// 战场关闭时间
374 	DWORD							m_dwClearSkyTime;		// 天空清场时间
381 	map<int,DWORD>					m_mapRefreshMonster;	// BOSS刷新时间
383 	HRGN							m_hrgnPolygon;			// 区域对象
385 	// 战场进入状态时间  跨服帮会BOSS战场.EMCountryWarRunStep
386 	DWORD m_dwRunStepTime[BorderWarRunStep_MaxID];
387 	// 战场数据

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\MatchClient\CountryBorderWar.h 4 KB H 文件 2014/2/25 8:34:41 2018/10/23 19:52:17 2018/10/23 19:52:17 5
5 ** 日  期:	2011-7-26
6 ** 版  本:	1.0
7 ** 描  述:	跨服边境战场客户端系统
8 ** 应  用:  	
9 	
117 	virtual bool CanOutRelive(void);
119 	/////////////////////////////ICountryBorderWar/////////////////////////////////////////////
121 	/** 取得跨服边境战扩展数据
122 	@return
123 	*/
140 	virtual bool Reset(void);
142 private:
143 	// 跨服BOSS战基本信息扩展数据结构
144 	SCountryBorderWarBaseInfo	m_WarBaseInfo;
144 	SCountryBorderWarBaseInfo	m_WarBaseInfo;
146 	// 跨服边境战玩法状态 EMClanBossWarState
147 	DWORD						m_dwState;
147 	DWORD						m_dwState;
148 	// 跨服边境战玩法状态状态变化时间
149 	DWORD						m_dwStateTime;
150 };

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\CountryBorderWar.h 12 KB H 文件 2014/2/25 14:26:59 2018/10/23 19:45:09 2018/10/23 19:45:09 16
5 ** 日  期:	2011-7-26
6 ** 版  本:	1.0
7 ** 描  述:	跨服边境战场系统
8 ** 应  用:  管理场景服中的所有跨服边境战场
10 **************************** 修改记录 ******************************
11 ** 修改人: 
20 #include "War.h"
22 struct IPerson;
25 // 跨服边境战场关闭标志
26 enum EMCountryBorderWarEndFlag
27 {
30 	CountryBorderWarEndFlag_Force,			// 强制关闭
31 };
35 // 跨服边境管理类
36 class CCountryBorderWar: public ICountryBorderWar, public CWar
37 {
51 	/** 资源事件执行接口
52 	@param   WORD wEventID		:事件ID
53 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
54 	@param   WORD dwWarID		:相关战场ID
55 	@param   WORD dwResID		:相关战争资源配置ID
63 	/** 资源投票事件
64 	@param   WORD wEventID		:事件ID
65 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
66 	@param   WORD dwWarID		:相关战场ID
67 	@param   WORD dwResID		:相关战争资源配置ID
165 	virtual void OnTimer(unsigned long dwTimerID);
167 	////ICountryBorderWar//////////////////////////////////////////////////////////////////////
169 	/** 跨服边境接收外部数据结构信息
170 	@return  SCountryBorderWarInfo *
171 	*/
247 	/** 获取指定方向复活点坐标
248 	@param   IPerson * pPerson	: 战争玩家
249 	@param   DWORD dwTransFlag	: 跨服边境战场传送标识 EMCountryBorderWarTransFlag
250 	@param   bool bNeedOffset	: 复活点需要偏移
251 	@return POINT 复活点坐标
300 	// 战前初始化
301 	void OnRunStepInit(void);
303 	// 准备跨服帮会BOSS战场
304 	void OnReadyWar();
306 	// 结束战场
348 	// BOSS被杀死
349 	void OnBossDead(DWORD dwBossResID,LONGLONG uidBoss,LONGLONG uidMurderer);
351 	// 发送跨服帮会BOSS战场创建信息到参战游戏区的所有场景服
352 	bool SendWarCreateEventToZone(void);
352 	bool SendWarCreateEventToZone(void);
354 	// 发送跨服帮会BOSS战场结束信息到参战游戏区的所有场景服
355 	bool SendWarEndEventToZone(void);
355 	bool SendWarEndEventToZone(void);
357 	// 发送跨服帮会BOSS战场关闭信息到参战游戏区的所有场景服
358 	bool SendWarCloseEventToZone(void);
360 	// 发信息消息给场景服 0=所有阵营都发送
366 private:
368 	map<LONGLONG, int>				m_KillCoolList;			// 上次得积分的时间（Key由A->B组成）
369 	SCountryBorderWarInfo			m_CoutryBorderWarInfo;	// 跨服边境战接收外部数据结构信息
370 	
370 	
371 	DWORD							m_dwWarRunStep;			// 跨服边境战场状态标识 EMCountryBorderWarRunStep
372 	DWORD							m_dwForceEndWar;		// 跨服边境战场关闭标志 EMCountryBorderWarEndFlag
373 	DWORD							m_dwCloseTime;			// 战场关闭时间
374 	DWORD							m_dwClearSkyTime;		// 天空清场时间
381 	map<int,DWORD>					m_mapRefreshMonster;	// BOSS刷新时间
383 	HRGN							m_hrgnPolygon;			// 区域对象
385 	// 战场进入状态时间  跨服帮会BOSS战场.EMCountryWarRunStep
386 	DWORD m_dwRunStepTime[BorderWarRunStep_MaxID];
387 	// 战场数据

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\MatchClient\CountryBorderWar.h 4 KB H 文件 2014/2/25 13:44:48 2018/10/23 19:34:25 2018/10/23 19:34:25 5
5 ** 日  期:	2011-7-26
6 ** 版  本:	1.0
7 ** 描  述:	跨服边境战场客户端系统
8 ** 应  用:  	
9 	
117 	virtual bool CanOutRelive(void);
119 	/////////////////////////////ICountryBorderWar/////////////////////////////////////////////
121 	/** 取得跨服边境战扩展数据
122 	@return
123 	*/
140 	virtual bool Reset(void);
142 private:
143 	// 跨服BOSS战基本信息扩展数据结构
144 	SCountryBorderWarBaseInfo	m_WarBaseInfo;
144 	SCountryBorderWarBaseInfo	m_WarBaseInfo;
146 	// 跨服边境战玩法状态 EMClanBossWarState
147 	DWORD						m_dwState;
147 	DWORD						m_dwState;
148 	// 跨服边境战玩法状态状态变化时间
149 	DWORD						m_dwStateTime;
150 };

I:\work\source\天空之剑\[src.cool]天空之剑\sky\Code\SrcServer\Include\ConsortiaDef.h 13 KB H 文件 2013/5/24 13:09:00 2018/10/23 14:48:31 2018/10/23 14:48:31 4
70 	em_CSonMemGet,				// 中心服告诉我 要获取服务器列表
71 	em_CSBakCorpsinfo,			// 中心服下发佣兵团信息
73 	em_ConUpdate_ConMoney,		// 跨服修改金钱
74 	em_ConUpdate_ConLevel,		// 跨服修改等级
75 	em_ConUpdate_ConExp,		// 跨服修改经验
77 	em_Max	// 最大值
78 };
195 	}
196 };
198 // 跨服修改佣兵团数据结构体
199 struct SConServerUpdateMoney
200 {

I:\work\source\仙剑神曲\[src.cool]仙剑神曲\src\include\common\generated\CombatDataType.pb.h 12 KB H 文件 2012/4/22 2:05:30 2018/10/23 16:10:20 2018/10/23 16:10:20 4
255     CST_NONE = 4,                            ///<
256 };
258 /// 召唤兽跨服同步信息
259 struct GF_SVR_SYNC_DATA
260 {
272 GF_SVR_SYNC_DATA GF_SVR_SYNC_DATA_Build(UINT32 _nGfTpltId, INT32 _iGfCurHp, const BYTE& _gfCombatMode);
273 void GF_SVR_SYNC_DATA_Clear(GF_SVR_SYNC_DATA& theStruct);
275 /// 技能战斗跨服同步信息
276 struct COMBAT_SVR_SYNC_DATA
277 {
277 {
278     INT32 iCurHp;                            ///< 当前HP
279     UINT32 nTeamId;                          ///< 跨服务器时队伍ID
280     GF_SVR_SYNC_DATA gfSyncData;             ///< 召唤兽跨服同步信息
281     /// overload operator>>, read from stream 
282     friend FiMessage& operator>>(FiMessage& inputStream,  COMBAT_SVR_SYNC_DATA& v);

I:\work\source\将军令\将军令源码\将军令源码\LIUJIA\甲1资源\sources\MTServer\MTServer\cMailTradeServer.h 3 KB H 文件 2013/5/30 1:04:19 2018/10/19 14:16:13 2018/10/19 14:16:13 2
70 protected:
71 	cThread* m_pThread;
72 	iServerLink* m_pServerLink;  // 不跨服...
74 public:
75 	BOOL RunThread();
78 	static UINT WorldThread(LPVOID pParam);
79 	void RunOnce();
81 	void SetServerLink(iServerLink* pLink){m_pServerLink = pLink;} // 不跨服...
82 	///
83 	//stdext::hash_map<std::string,int> m_mapAccountLogin;

I:\work\source\将军令\[src.cool]将军令全套源码\MTServer\MTServer\cMailTradeServer.h 3 KB H 文件 2013/5/30 1:04:20 2018/10/19 14:12:40 2018/10/19 14:12:40 2
70 protected:
71 	cThread* m_pThread;
72 	iServerLink* m_pServerLink;  // 不跨服...
74 public:
75 	BOOL RunThread();
78 	static UINT WorldThread(LPVOID pParam);
79 	void RunOnce();
81 	void SetServerLink(iServerLink* pLink){m_pServerLink = pLink;} // 不跨服...
82 	///
83 	//stdext::hash_map<std::string,int> m_mapAccountLogin;

I:\work\source\蜀山神话\[src.cool]蜀山神话\include\common\protocol\ClusterGameMessage.h 4 KB H 文件 2012/4/21 1:09:00 2018/10/23 13:22:10 2018/10/23 13:22:10 1
36 	UINT32				m_maxHp;					///< 当前最大HP
37 	UINT32				m_curHp;					///< 当前HP
38 	UINT32				m_teamId;					///< 跨服务器时队伍ID
39     BYTE	            m_state_cnt;				///< 所中的技能总数
41     UINT32              m_lastexittime;             ///< 离开时间

I:\work\source\仙剑神曲\[src.cool]仙剑神曲\src\tools\common\onwind_protoc\test\cpp\ClusterGameMessage.h 3 KB H 文件 2012/4/22 2:05:20 2018/10/23 16:12:23 2018/10/23 16:12:23 1
36 	UINT32				m_maxHp;					///< 当前最大HP
37 	UINT32				m_curHp;					///< 当前HP
38 	UINT32				m_teamId;					///< 跨服务器时队伍ID
39     BYTE	            m_state_cnt;				///< 所中的技能总数
40     SPELL_STATE_SVR*    m_state_array;	            ///< 技能状态数组

I:\work\source\仙剑神曲\[src.cool]仙剑神曲\src\include\common\protocol\ClusterGameMessage.h 2 KB H 文件 2012/4/22 2:05:26 2018/10/23 16:10:27 2018/10/23 16:10:27 1
30     UINT32              m_nCharOid;					///< 角色ID
31     UINT32              m_nDestMap;					///< 目标地图
32     COMBAT_SVR_SYNC_DATA m_combatSyncData;          ///< 技能战斗跨服同步信息
33     BYTE	            m_buffCnt;					///< 所中的BUFF总数
34     BUFF_ENTRY_SERVER*  m_buff_array;	            ///< BUFF数组

I:\work\source\神仙传\[src.cool]神仙传\GAME\Project1\ZoneClientEditor\Source\Gameplay\ClientGameplayState.h 15 KB H 文件 2010/3/22 9:23:16 2018/10/23 13:31:17 2018/10/23 13:31:17 2
117 	bool                        m_bNavigation;                          //是否寻径中
118 	U32							mFindPathID;							//寻径ID
119 	std::vector<U32>			mStrideServerPath;						//跨服寻径ID
120 	bool						mbStrideServer;							//跨服寻径标志
121 	VocalStatus*                pVocalStatus;                           //吟唱状态
122 	bool						m_isInCopymap;							//是否在副本中

I:\work\source\远征\[src.cool]远征\Xgame2001_source\Common\ClanDef.h 21 KB H 文件 2014/2/25 11:36:24 2018/10/23 19:49:25 2018/10/23 19:49:25 1
348 	int   nLogoutTime;							// 玩家最后下线时间
349 	BYTE  nCastleDuty;							// 领地官职类型 0表示没官职
350 	bool  bIsPublicOnline;						// 玩家是否跨服在线
351 	WORD  wMapId;								// 玩家所在的地图ID, 0表示没有地图，填 --
352 	// 字节数 54

I:\work\source\远征\[src.cool]远征\Xgame2001_build\Common\ClanDef.h 21 KB H 文件 2014/2/25 14:53:35 2018/10/23 19:32:38 2018/10/23 19:32:38 1
348 	int   nLogoutTime;							// 玩家最后下线时间
349 	BYTE  nCastleDuty;							// 领地官职类型 0表示没官职
350 	bool  bIsPublicOnline;						// 玩家是否跨服在线
351 	WORD  wMapId;								// 玩家所在的地图ID, 0表示没有地图，填 --
352 	// 字节数 54

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\ClanBossWar.h 9 KB H 文件 2014/2/25 0:08:41 2018/10/23 20:06:22 2018/10/23 20:06:22 19
5 ** 日  期:	2011-7-26
6 ** 版  本:	1.0
7 ** 描  述:	跨服帮会BOSS战场系统
8 ** 应  用:  管理场景服中的所有跨服帮会BOSS战场战场
10 **************************** 修改记录 ******************************
11 ** 修改人: 
20 #include "War.h"
22 struct IPerson;
25 // 跨服帮会BOSS战场关闭标志
26 enum EMClanBossWarEndFlag
27 {
30 	ClanBossWarEndFlag_Force,			// 强制关闭
31 };
33 // 跨服BOSS战排序数据
34 struct SClanBossWarSortNode
35 {
57 	};
58 };
59 // 跨服BOSS战积分排序数据列表
60 typedef list<SClanBossWarSortNode> TLIST_ClanBossWarScoreSortList;
60 typedef list<SClanBossWarSortNode> TLIST_ClanBossWarScoreSortList;
64 // 跨服帮会BOSS战场管理类
65 class CClanBossWar: public IClanBossWar, public CWar
66 {
80 	/** 资源事件执行接口
81 	@param   WORD wEventID		:事件ID
82 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
83 	@param   WORD dwWarID		:相关战场ID
84 	@param   WORD dwResID		:相关战争资源配置ID
92 	/** 资源投票事件
93 	@param   WORD wEventID		:事件ID
94 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
95 	@param   WORD dwWarID		:相关战场ID
96 	@param   WORD dwResID		:相关战争资源配置ID
179 	virtual bool CanOutRelive(IPerson *pPerson);
181 	////IBossWar//////////////////////////////////////////////////////////////////////
183 	/** 跨服BOSS战接收外部数据结构信息
184 	@return  SWorldBossWarInfo *
185 	*/
233 	// 战前初始化
234 	void OnRunStepInit(void);
236 	// 准备跨服帮会BOSS战场
237 	void OnReadyWar();
239 	// 结束战场
281 	// BOSS被杀死
282 	void OnBossDead(DWORD dwBossResID,LONGLONG uidBoss,LONGLONG uidMurderer);
284 	// 发送跨服帮会BOSS战场创建信息到参战游戏区的所有场景服
285 	bool SendWarCreateEventToZone(void);
285 	bool SendWarCreateEventToZone(void);
287 	// 发送跨服帮会BOSS战场结束信息到参战游戏区的所有场景服
288 	bool SendWarEndEventToZone(void);
288 	bool SendWarEndEventToZone(void);
290 	// 发送跨服帮会BOSS战场关闭信息到参战游戏区的所有场景服
291 	bool SendWarCloseEventToZone(void);
293 	// 发信息消息给场景服 0=所有阵营都发送
295 	
296 public:
298 	DWORD m_dwTaskWorldWarID;								// 跨服跨服帮会BOSS战场信息ID，0为无效ID
299 	DWORD m_dwTaskPublicWorldID;							// 所属公共区世界ID
301 private:
302 	list<DWORD>						m_noticeUserList;		// 批次通知的玩家间隔档
303 	map<LONGLONG, int>				m_KillCoolList;			// 上次得积分的时间（Key由A->B组成）
304 	SWorldBossWarClanNodeInfo		m_WorldBossWarInfo;		// 跨服BOSS战接收外部数据结构信息
305 	
305 	
306 	DWORD							m_dwWarRunStep;			// 跨服帮会BOSS战场状态标识 EMClanBossWarRunStep
307 	DWORD							m_dwForceEndWar;		// 跨服帮会BOSS战场关闭标志 EMCountryWarEndFlag
308 	DWORD							m_dwCloseTime;			// 战场关闭时间
308 	DWORD							m_dwCloseTime;			// 战场关闭时间
310 	// 战场进入状态时间  跨服帮会BOSS战场.EMCountryWarRunStep
311 	DWORD m_dwRunStepTime[ClanBossWarRunStep_MaxID];
312 	// 战场数据

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcClient\Client\MatchClient\ClanBossWar.h 5 KB H 文件 2014/2/25 8:34:40 2018/10/23 19:52:17 2018/10/23 19:52:17 10
5 ** 日  期:	2011-7-26
6 ** 版  本:	1.0
7 ** 描  述:	跨服帮会BOSS战场客户端系统
8 ** 应  用:  	
9 	
117 	virtual bool CanOutRelive(void);
119 	/////////////////////////////IClanBossWar/////////////////////////////////////////////
121 	/** 取得跨服帮会BOSS战扩展数据
122 	@return
123 	*/
123 	*/
124 	virtual const SWorldClanBossWarBaseInfo* GetWarBaseExtInfo(void);
126 	/** 取得跨服帮会BOSS战本帮帮会详细数据,dwCampID为0则找自己帮会信息
127 	@return
128 	*/
128 	*/
129 	virtual const SWorldBossWarClanBaseNode * GetClanNode(DWORD dwCampID);
131 	/** 取得跨服帮会BOSS战帮会详细数据
132 	@param DWORD dwClanID : 帮会ID
133 	@return
134 	*/
135 	virtual const SWorldBossWarClanBaseNode * GetClanNodeByID(DWORD dwClanID);
137 	/** 取得跨服帮会BOSS战结果日志信息
138 	@return
139 	*/
139 	*/
140 	virtual SWorldClanBossWarResultInfo*  GetWorldWarResultInfo(void);
142 	/** 取得跨服帮会BOSS战日志信息的排名节点信息
143 	@param  DWORD dwIndex	: 序号
144 	@param  BYTE dwType		: 对象类型	1表示玩家，2表示帮会
143 	@param  DWORD dwIndex	: 序号
144 	@param  BYTE dwType		: 对象类型	1表示玩家，2表示帮会
145 	@return 查询到的跨服帮会BOSS战日志信息排名节点信息
146 	*/
147 	virtual const SWorldClanBossWarOrderNodeInfo*  GetWorldWarLogOrderNodeInfo(DWORD dwIndex,BYTE dwType);
172 	virtual bool Reset(void);
174 private:
175 	// 跨服BOSS战基本信息扩展数据结构
176 	SWorldClanBossWarBaseInfo	m_WarBaseInfo;
178 	// 结果数据
178 	// 结果数据
179 	SWorldClanBossWarResultInfo	m_WarResultInfo;
180 	// 跨服帮会BOSS战玩法状态 EMClanBossWarState
181 	DWORD						m_dwState;
181 	DWORD						m_dwState;
182 	// 跨服帮会BOSS战玩法状态状态变化时间
183 	DWORD						m_dwStateTime;
184 	// 呆在复活点的时长

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\ClanBossWar.h 9 KB H 文件 2014/2/25 14:26:58 2018/10/23 19:45:09 2018/10/23 19:45:09 19
5 ** 日  期:	2011-7-26
6 ** 版  本:	1.0
7 ** 描  述:	跨服帮会BOSS战场系统
8 ** 应  用:  管理场景服中的所有跨服帮会BOSS战场战场
10 **************************** 修改记录 ******************************
11 ** 修改人: 
20 #include "War.h"
22 struct IPerson;
25 // 跨服帮会BOSS战场关闭标志
26 enum EMClanBossWarEndFlag
27 {
30 	ClanBossWarEndFlag_Force,			// 强制关闭
31 };
33 // 跨服BOSS战排序数据
34 struct SClanBossWarSortNode
35 {
57 	};
58 };
59 // 跨服BOSS战积分排序数据列表
60 typedef list<SClanBossWarSortNode> TLIST_ClanBossWarScoreSortList;
60 typedef list<SClanBossWarSortNode> TLIST_ClanBossWarScoreSortList;
64 // 跨服帮会BOSS战场管理类
65 class CClanBossWar: public IClanBossWar, public CWar
66 {
80 	/** 资源事件执行接口
81 	@param   WORD wEventID		:事件ID
82 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
83 	@param   WORD dwWarID		:相关战场ID
84 	@param   WORD dwResID		:相关战争资源配置ID
92 	/** 资源投票事件
93 	@param   WORD wEventID		:事件ID
94 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
95 	@param   WORD dwWarID		:相关战场ID
96 	@param   WORD dwResID		:相关战争资源配置ID
179 	virtual bool CanOutRelive(IPerson *pPerson);
181 	////IBossWar//////////////////////////////////////////////////////////////////////
183 	/** 跨服BOSS战接收外部数据结构信息
184 	@return  SWorldBossWarInfo *
185 	*/
233 	// 战前初始化
234 	void OnRunStepInit(void);
236 	// 准备跨服帮会BOSS战场
237 	void OnReadyWar();
239 	// 结束战场
281 	// BOSS被杀死
282 	void OnBossDead(DWORD dwBossResID,LONGLONG uidBoss,LONGLONG uidMurderer);
284 	// 发送跨服帮会BOSS战场创建信息到参战游戏区的所有场景服
285 	bool SendWarCreateEventToZone(void);
285 	bool SendWarCreateEventToZone(void);
287 	// 发送跨服帮会BOSS战场结束信息到参战游戏区的所有场景服
288 	bool SendWarEndEventToZone(void);
288 	bool SendWarEndEventToZone(void);
290 	// 发送跨服帮会BOSS战场关闭信息到参战游戏区的所有场景服
291 	bool SendWarCloseEventToZone(void);
293 	// 发信息消息给场景服 0=所有阵营都发送
295 	
296 public:
298 	DWORD m_dwTaskWorldWarID;								// 跨服跨服帮会BOSS战场信息ID，0为无效ID
299 	DWORD m_dwTaskPublicWorldID;							// 所属公共区世界ID
301 private:
302 	list<DWORD>						m_noticeUserList;		// 批次通知的玩家间隔档
303 	map<LONGLONG, int>				m_KillCoolList;			// 上次得积分的时间（Key由A->B组成）
304 	SWorldBossWarClanNodeInfo		m_WorldBossWarInfo;		// 跨服BOSS战接收外部数据结构信息
305 	
305 	
306 	DWORD							m_dwWarRunStep;			// 跨服帮会BOSS战场状态标识 EMClanBossWarRunStep
307 	DWORD							m_dwForceEndWar;		// 跨服帮会BOSS战场关闭标志 EMCountryWarEndFlag
308 	DWORD							m_dwCloseTime;			// 战场关闭时间
308 	DWORD							m_dwCloseTime;			// 战场关闭时间
310 	// 战场进入状态时间  跨服帮会BOSS战场.EMCountryWarRunStep
311 	DWORD m_dwRunStepTime[ClanBossWarRunStep_MaxID];
312 	// 战场数据

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcClient\Client\MatchClient\ClanBossWar.h 5 KB H 文件 2014/2/25 13:44:48 2018/10/23 19:34:25 2018/10/23 19:34:25 10
5 ** 日  期:	2011-7-26
6 ** 版  本:	1.0
7 ** 描  述:	跨服帮会BOSS战场客户端系统
8 ** 应  用:  	
9 	
117 	virtual bool CanOutRelive(void);
119 	/////////////////////////////IClanBossWar/////////////////////////////////////////////
121 	/** 取得跨服帮会BOSS战扩展数据
122 	@return
123 	*/
123 	*/
124 	virtual const SWorldClanBossWarBaseInfo* GetWarBaseExtInfo(void);
126 	/** 取得跨服帮会BOSS战本帮帮会详细数据,dwCampID为0则找自己帮会信息
127 	@return
128 	*/
128 	*/
129 	virtual const SWorldBossWarClanBaseNode * GetClanNode(DWORD dwCampID);
131 	/** 取得跨服帮会BOSS战帮会详细数据
132 	@param DWORD dwClanID : 帮会ID
133 	@return
134 	*/
135 	virtual const SWorldBossWarClanBaseNode * GetClanNodeByID(DWORD dwClanID);
137 	/** 取得跨服帮会BOSS战结果日志信息
138 	@return
139 	*/
139 	*/
140 	virtual SWorldClanBossWarResultInfo*  GetWorldWarResultInfo(void);
142 	/** 取得跨服帮会BOSS战日志信息的排名节点信息
143 	@param  DWORD dwIndex	: 序号
144 	@param  BYTE dwType		: 对象类型	1表示玩家，2表示帮会
143 	@param  DWORD dwIndex	: 序号
144 	@param  BYTE dwType		: 对象类型	1表示玩家，2表示帮会
145 	@return 查询到的跨服帮会BOSS战日志信息排名节点信息
146 	*/
147 	virtual const SWorldClanBossWarOrderNodeInfo*  GetWorldWarLogOrderNodeInfo(DWORD dwIndex,BYTE dwType);
172 	virtual bool Reset(void);
174 private:
175 	// 跨服BOSS战基本信息扩展数据结构
176 	SWorldClanBossWarBaseInfo	m_WarBaseInfo;
178 	// 结果数据
178 	// 结果数据
179 	SWorldClanBossWarResultInfo	m_WarResultInfo;
180 	// 跨服帮会BOSS战玩法状态 EMClanBossWarState
181 	DWORD						m_dwState;
181 	DWORD						m_dwState;
182 	// 跨服帮会BOSS战玩法状态状态变化时间
183 	DWORD						m_dwStateTime;
184 	// 呆在复活点的时长

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\ChatService\ChatService.h 11 KB H 文件 2014/2/25 0:20:57 2018/10/23 20:08:50 2018/10/23 20:08:50 1
98 	virtual void sendSystemTips(TipsType type, dbid target, InfoPos pos, const char* text);
99 	virtual void broadcastSystemTipsById(TipsType type, ulong id, ChatChannelType channel, InfoPos pos, const char* text) ;
101 	////// 跨服发聊天消息接口 接口和原来一样，只多了一个游戏世界ID参数 ////////////////////////////////////////////////////////////////////
102 	virtual void worldBroadcastSystemTips(DWORD dwWorldID,TipsType type ,dbid sender, ChatChannelType channel, InfoPos pos, const char* text);
103 	virtual void worldBroadcastSystemTipsById(DWORD dwWorldID,TipsType type, ulong id, ChatChannelType channel, InfoPos pos, const char* text);

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\ChatService\ChatService.h 11 KB H 文件 2014/2/25 14:30:35 2018/10/23 19:46:31 2018/10/23 19:46:31 1
98 	virtual void sendSystemTips(TipsType type, dbid target, InfoPos pos, const char* text);
99 	virtual void broadcastSystemTipsById(TipsType type, ulong id, ChatChannelType channel, InfoPos pos, const char* text) ;
101 	////// 跨服发聊天消息接口 接口和原来一样，只多了一个游戏世界ID参数 ////////////////////////////////////////////////////////////////////
102 	virtual void worldBroadcastSystemTips(DWORD dwWorldID,TipsType type ,dbid sender, ChatChannelType channel, InfoPos pos, const char* text);
103 	virtual void worldBroadcastSystemTipsById(DWORD dwWorldID,TipsType type, ulong id, ChatChannelType channel, InfoPos pos, const char* text);

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\ChatServer\ChatServer.h 6 KB H 文件 2014/2/25 0:05:21 2018/10/23 20:04:00 2018/10/23 20:04:00 1
67 	virtual void broadcastSystemTipsById(TipsType type, ulong id, ChatChannelType channel, InfoPos pos, const char* text) ;
68 	virtual void sendSystemTips(TipsType type, dbid target, InfoPos pos, const char* text);
69 	////// 跨服发聊天消息接口 接口和原来一样，只多了一个游戏世界ID参数 ////////////////////////////////////////////////////////////////////
70 	virtual void worldBroadcastSystemTips(DWORD dwWorldID,TipsType type, dbid sender, ChatChannelType channel, InfoPos pos, const char* text);
71 	virtual void worldBroadcastSystemTipsById(DWORD dwWorldID,TipsType type, ulong id, ChatChannelType channel, InfoPos pos, const char* text);

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\ChatServer\ChatServer.h 6 KB H 文件 2014/2/25 14:23:34 2018/10/23 19:43:11 2018/10/23 19:43:11 1
67 	virtual void broadcastSystemTipsById(TipsType type, ulong id, ChatChannelType channel, InfoPos pos, const char* text) ;
68 	virtual void sendSystemTips(TipsType type, dbid target, InfoPos pos, const char* text);
69 	////// 跨服发聊天消息接口 接口和原来一样，只多了一个游戏世界ID参数 ////////////////////////////////////////////////////////////////////
70 	virtual void worldBroadcastSystemTips(DWORD dwWorldID,TipsType type, dbid sender, ChatChannelType channel, InfoPos pos, const char* text);
71 	virtual void worldBroadcastSystemTipsById(DWORD dwWorldID,TipsType type, ulong id, ChatChannelType channel, InfoPos pos, const char* text);

I:\work\source\神仙传\[src.cool]神仙传\GAME\Project1\SERVERS\Common\ChatBase.h 3 KB H 文件 2011/4/12 15:19:03 2018/10/23 13:31:10 2018/10/23 13:31:10 1
24 	CHAT_MSG_TYPE_SYSTEM,		// 系统
25 	CHAT_MSG_TYPE_WORLDPLUS,	// 跑马
26 	CHAT_MSG_TYPE_WORLD,		// 跨服
27 	CHAT_MSG_TYPE_LINE,			// 全服
28 	//----------------------------------------

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\CGameMatchAPI.h 50 KB H 文件 2014/2/25 0:08:40 2018/10/23 20:06:22 2018/10/23 20:06:22 13
5 ** 日  期:	2010-7-13
6 ** 版  本:	1.0
7 ** 描  述:	跨服组队撮合系统API接口
8 ** 应  用:  	
10 **************************** 修改记录 ******************************
20 class CGameMatchAPI : public IGameMatchAPI
21 {
25 	/**  取得跨服组队撮合系统服务器
26 	@param   
26 	@param   
27 	@return  跨服组队撮合系统服务器
28 	*/
29 	virtual IMatchServer * GetMatchServer(void);
255 	virtual bool WarChangeActorTank(DWORD dwActorID, DWORD dwTankID);
257 	///////////// 跨区战场API /////////////////////////////////////////////////////////////
259 	/** 用现场创建跨服国战
260 	@param  DWORD dwWarTypeID		: 战场场类型 EMWarItemType
261 	@param  const char * szCampNames: 阵营名称列表，分号分割阵营名
429 	*/
430 	virtual const char * GetWarStringProp(DWORD dwZoneID, DWORD dwPropID);
432 	/** 跨服领地BOSS战接收外部数据结构信息
433 	@param	 DWORD dwActorID	:玩家序列号
434 	@param	 DWORD dwWarID		:战场ID
436 	*/
437 	virtual SWorldBossWarClanNodeInfo * GetCastleBossWarExtData(DWORD dwActorID,DWORD dwWarID);
439 	/** 跨服领地BOSS战接收外部数据结构信息
440 	@param	 DWORD dwActorID	:玩家序列号
441 	@param	 DWORD dwWarID		:战场ID
446 	*/
447 	virtual bool SetCastleBossWarExtData(DWORD dwActorID,DWORD dwWarID, DWORD dwCivilGrade, DWORD dwBossID, char * szClanIDs);
449 	/** 跨服领地BOSS战接收外部数据结构中指定帮会信息
450 	@param	 DWORD dwActorID	:玩家序列号
451 	@param	 DWORD dwWarID		:战场ID
460 	*/
461 	virtual DWORD GetWarGameUpLevelLimit(DWORD dwZoneID);
463 	/** 取得跨服边境战场对象
464 	@param	 DWORD dwZoneID		:场景ID
465 	@return  SCountryWarInfo *
466 	*/
467 	virtual ICountryBorderWar * GetCountryBorderWar(DWORD dwZoneID);
469 	/** 跨服边境战场内传送玩家
470 	@param	 DWORD dwActorID	:玩家序列号
471 	@param	 DWORD dwTransFlag	:传送标识 EMCountryBorderWarTransFlag
473 	*/
474 	virtual bool CountryBorderWarTransActor(DWORD dwActorID,DWORD dwTransFlag);
476 	/** 跨服边境战场内传送玩家是否能传送到天上战场
477 	@param	 DWORD dwActorID	:玩家序列号
478 	@return  bool
479 	*/
480 	virtual bool CountryBorderWarActorCanTransSky(DWORD dwActorID);
482 	/** 跨服边境战场击杀BOSS时AI触发事件后处理
483 	@param	DWORD dwActorID		: 玩家序列号
484 	@param	bool bSendResult	: 是否要发送结果信息到社会服,false=不发送
486 	*/
487 	virtual bool DoCountryBorderWarKillBossEvent(DWORD dwActorID, bool bSendResult);
489 	/** 检测跨服边境战场是否开启任务
490 	@param	DWORD dwActorID		: 玩家序列号
491 	@return  bool
492 	*/
493 	virtual bool CheckCountryBorderWarOpenTask(DWORD dwActorID);
495 	/** 检测跨服边境战场阵营数量
496 	@param	DWORD dwActorID		: 玩家序列号
497 	@return  DWORD

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\CGameMatchAPI.h 50 KB H 文件 2014/2/25 14:26:58 2018/10/23 19:45:08 2018/10/23 19:45:08 13
5 ** 日  期:	2010-7-13
6 ** 版  本:	1.0
7 ** 描  述:	跨服组队撮合系统API接口
8 ** 应  用:  	
10 **************************** 修改记录 ******************************
20 class CGameMatchAPI : public IGameMatchAPI
21 {
25 	/**  取得跨服组队撮合系统服务器
26 	@param   
26 	@param   
27 	@return  跨服组队撮合系统服务器
28 	*/
29 	virtual IMatchServer * GetMatchServer(void);
255 	virtual bool WarChangeActorTank(DWORD dwActorID, DWORD dwTankID);
257 	///////////// 跨区战场API /////////////////////////////////////////////////////////////
259 	/** 用现场创建跨服国战
260 	@param  DWORD dwWarTypeID		: 战场场类型 EMWarItemType
261 	@param  const char * szCampNames: 阵营名称列表，分号分割阵营名
429 	*/
430 	virtual const char * GetWarStringProp(DWORD dwZoneID, DWORD dwPropID);
432 	/** 跨服领地BOSS战接收外部数据结构信息
433 	@param	 DWORD dwActorID	:玩家序列号
434 	@param	 DWORD dwWarID		:战场ID
436 	*/
437 	virtual SWorldBossWarClanNodeInfo * GetCastleBossWarExtData(DWORD dwActorID,DWORD dwWarID);
439 	/** 跨服领地BOSS战接收外部数据结构信息
440 	@param	 DWORD dwActorID	:玩家序列号
441 	@param	 DWORD dwWarID		:战场ID
446 	*/
447 	virtual bool SetCastleBossWarExtData(DWORD dwActorID,DWORD dwWarID, DWORD dwCivilGrade, DWORD dwBossID, char * szClanIDs);
449 	/** 跨服领地BOSS战接收外部数据结构中指定帮会信息
450 	@param	 DWORD dwActorID	:玩家序列号
451 	@param	 DWORD dwWarID		:战场ID
460 	*/
461 	virtual DWORD GetWarGameUpLevelLimit(DWORD dwZoneID);
463 	/** 取得跨服边境战场对象
464 	@param	 DWORD dwZoneID		:场景ID
465 	@return  SCountryWarInfo *
466 	*/
467 	virtual ICountryBorderWar * GetCountryBorderWar(DWORD dwZoneID);
469 	/** 跨服边境战场内传送玩家
470 	@param	 DWORD dwActorID	:玩家序列号
471 	@param	 DWORD dwTransFlag	:传送标识 EMCountryBorderWarTransFlag
473 	*/
474 	virtual bool CountryBorderWarTransActor(DWORD dwActorID,DWORD dwTransFlag);
476 	/** 跨服边境战场内传送玩家是否能传送到天上战场
477 	@param	 DWORD dwActorID	:玩家序列号
478 	@return  bool
479 	*/
480 	virtual bool CountryBorderWarActorCanTransSky(DWORD dwActorID);
482 	/** 跨服边境战场击杀BOSS时AI触发事件后处理
483 	@param	DWORD dwActorID		: 玩家序列号
484 	@param	bool bSendResult	: 是否要发送结果信息到社会服,false=不发送
486 	*/
487 	virtual bool DoCountryBorderWarKillBossEvent(DWORD dwActorID, bool bSendResult);
489 	/** 检测跨服边境战场是否开启任务
490 	@param	DWORD dwActorID		: 玩家序列号
491 	@return  bool
492 	*/
493 	virtual bool CheckCountryBorderWarOpenTask(DWORD dwActorID);
495 	/** 检测跨服边境战场阵营数量
496 	@param	DWORD dwActorID		: 玩家序列号
497 	@return  DWORD

I:\work\source\最游记\Server\Common\CenterGameMessage.h 44 KB H 文件 2012/3/3 11:01:58 2012/3/3 11:01:58 2012/3/3 11:01:58 1
58     S2S_NOTIYANTIADDICTIONTIMEINFO,         // 通知游戏服务器反沉迷的阶段时间
60     GS2GS_BANSPEAK,                         // 禁言
61     GS2GS_CALLPALYER,                       // 跨服拉人
62     CS2GS_CREATETEAM,                       // 创建队伍
64     GS2CS_DRAWFROMPLATFORM_QUERY,         // 领取东西请求

I:\work\source\最游记\client\Common\CenterGameMessage.h 43 KB H 文件 2012/3/26 11:21:04 2012/5/10 19:15:15 2012/5/10 19:15:15 1
58     S2S_NOTIYANTIADDICTIONTIMEINFO,         // 通知游戏服务器反沉迷的阶段时间
60     GS2GS_BANSPEAK,                         // 禁言
61     GS2GS_CALLPALYER,                       // 跨服拉人
62     CS2GS_CREATETEAM,                       // 创建队伍
64     GS2CS_DRAWFROMPLATFORM_QUERY,         // 领取东西请求

I:\work\source\最游记\[src.cool]最游记\Server\Server\Common\CenterGameMessage.h 54 KB H 文件 2013/8/11 23:08:26 2018/10/23 19:45:19 2018/10/23 19:45:19 1
60     S2S_NOTIYANTIADDICTIONTIMEINFO,         // 通知游戏服务器反沉迷的阶段时间
62     GS2GS_BANSPEAK,                         // 禁言
63     GS2GS_CALLPALYER,                       // 跨服拉人
64     CS2GS_CREATETEAM,                       // 创建队伍
66     GS2CS_DRAWFROMPLATFORM_QUERY,         // 领取东西请求

I:\work\source\最游记\[src.cool]最游记\Client\Client\Common\CenterGameMessage.h 54 KB H 文件 2013/6/28 14:14:14 2018/10/23 19:36:03 2018/10/23 19:36:03 1
58     S2S_NOTIYANTIADDICTIONTIMEINFO,         // 通知游戏服务器反沉迷的阶段时间
60     GS2GS_BANSPEAK,                         // 禁言
61     GS2GS_CALLPALYER,                       // 跨服拉人
62     CS2GS_CREATETEAM,                       // 创建队伍
64     GS2CS_DRAWFROMPLATFORM_QUERY,         // 领取东西请求

I:\work\source\征三国\征三国\Common\CenterGameMessage.h 52 KB H 文件 2014/6/12 19:29:46 2018/10/23 19:34:45 2018/10/23 19:34:45 1
61     S2S_NOTIYANTIADDICTIONTIMEINFO,         // 通知游戏服务器反沉迷的阶段时间
63     GS2GS_BANSPEAK,                         // 禁言
64     GS2GS_CALLPALYER,                       // 跨服拉人
65     CS2GS_CREATETEAM,                       // 创建队伍
67     GS2CS_DRAWFROMPLATFORM_QUERY,         // 领取东西请求

I:\work\source\罗德岛战记\[src.cool]罗德岛战记\Game\Src\CnsRunner\CCnsConnectionMgr.h 12 KB H 文件 2014/2/26 19:09:34 2018/10/22 15:51:04 2018/10/22 15:51:04 1
244 	TMapNp m_mapNp;
245 	//----------------------------------------------------
247 	//跨服时忽略的消息连接
248 	typedef PPE::set<uint32>::type SETIGNORESENDMSG;
249 	SETIGNORESENDMSG m_setIgnoreGas;

I:\work\source\仙剑神曲\[src.cool]仙剑神曲\src\server\gamesvr\buff\BuffManager.h 3 KB H 文件 2012/4/22 2:05:32 2018/10/23 16:10:53 2018/10/23 16:10:53 1
47     /// 强制停止双倍时间计时
48     void  ForceStopDoubleExpTiming(GamePlayer* pPlayer);
50     /// 角色登录或跨服跳地图
51     void OnPlayerLogin(GamePlayer* pPlayer, bool bLogin);
53 private:

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\SceneServer\MatchServer\Budo.h 14 KB H 文件 2014/2/25 0:08:35 2018/10/23 20:06:21 2018/10/23 20:06:21 2
86 	/** 资源事件执行接口
87 	@param   WORD wEventID		:事件ID
88 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
89 	@param   WORD dwWarID		:相关战场ID
90 	@param   WORD dwResID		:相关战争资源配置ID
98 	/** 资源投票事件
99 	@param   WORD wEventID		:事件ID
100 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
101 	@param   WORD dwWarID		:相关战场ID
102 	@param   WORD dwResID		:相关战争资源配置ID

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\SceneServer\MatchServer\Budo.h 14 KB H 文件 2014/2/25 14:26:55 2018/10/23 19:45:08 2018/10/23 19:45:08 2
86 	/** 资源事件执行接口
87 	@param   WORD wEventID		:事件ID
88 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
89 	@param   WORD dwWarID		:相关战场ID
90 	@param   WORD dwResID		:相关战争资源配置ID
98 	/** 资源投票事件
99 	@param   WORD wEventID		:事件ID
100 	@param   WORD dwPVPClassType:跨服PVP类型 EMPVPClassType
101 	@param   WORD dwWarID		:相关战场ID
102 	@param   WORD dwResID		:相关战争资源配置ID

I:\work\source\最游记\[src.cool]最游记\Server\Server\Server\Common\BattlePlayerHandle.h 1 KB H 文件 2013/6/28 14:00:06 2018/10/23 19:49:36 2018/10/23 19:49:36 1
1 /*/////////////////////////////////////////////////////////////////////////////////////////////
2 //                          玩家和跨服战场的消息
3 /////////////////////////////////////////////////////////////////////////////////////////////*/
6 protected:

I:\work\source\远征\[src.cool]远征\Xgame2001_source\SrcServer\Social\CountryService\BasePart.h 25 KB H 文件 2014/2/25 0:21:19 2018/10/23 20:08:52 2018/10/23 20:08:52 1
354 	*/
355 	virtual BYTE GetLastWinInfo(int nCounts=32);
357 	/** 刷新跨服共享国家信息
358 	@param 
359 	*/

I:\work\source\远征\[src.cool]远征\Xgame2001_build\SrcServer\Social\CountryService\BasePart.h 25 KB H 文件 2014/2/25 14:30:49 2018/10/23 19:46:33 2018/10/23 19:46:33 1
354 	*/
355 	virtual BYTE GetLastWinInfo(int nCounts=32);
357 	/** 刷新跨服共享国家信息
358 	@param 
359 	*/

I:\work\source\龙腾世界\[src.cool]龙腾世界\Code\Code\GraphNetServer\ApexProxyEx.h 3 KB H 文件 2006/4/25 12:35:12 2018/10/22 15:45:40 2018/10/22 15:45:40 1
45 // 在这里会向客户端发消息让客户端启动反外挂
46 // 同时向反外挂服务器法消息说明客户端已经登陆.
47 // bIsFormOtherServer 是不是跨服务器切场景。
48 BOOL NoticeApexProxy_UserLogin_Ex( DWORD dwGlobleID, DWORD dwUserID, DWORD dwNetID, LPCWSTR pwcsName, BOOL bIsFormOtherServer );
50 //

